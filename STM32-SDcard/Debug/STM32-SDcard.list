
STM32-SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e11c  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d3  0800e36c  0800e36c  0001e36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e740  0800e740  0001e740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e748  0800e748  0001e748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e74c  0800e74c  0001e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800e750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000860  20000074  0800e7c4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008d4  0800e7c4  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e0ff  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003ba4  00000000  00000000  0003e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c0  00000000  00000000  00041d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000123f  00000000  00000000  00043550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d2b4  00000000  00000000  0004478f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001cd57  00000000  00000000  00081a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017debf  00000000  00000000  0009e79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006ac0  00000000  00000000  0021c65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0022311c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000074 	.word	0x20000074
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e354 	.word	0x0800e354

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000078 	.word	0x20000078
 800028c:	0800e354 	.word	0x0800e354

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d146      	bne.n	800036e <__udivmoddi4+0x9e>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d95e      	bls.n	80003a4 <__udivmoddi4+0xd4>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	409c      	lsls	r4, r3
 80002f8:	fa20 f202 	lsr.w	r2, r0, r2
 80002fc:	4317      	orrs	r7, r2
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	0c22      	lsrs	r2, r4, #16
 8000308:	fbb7 f1fe 	udiv	r1, r7, lr
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	fb01 f005 	mul.w	r0, r1, r5
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x5e>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 8134 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	b2a4      	uxth	r4, r4
 8000332:	fbb2 f0fe 	udiv	r0, r2, lr
 8000336:	fb0e 2210 	mls	r2, lr, r0, r2
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	42a5      	cmp	r5, r4
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x88>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x86>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f200 8119 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 8000356:	4610      	mov	r0, r2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0x9a>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xb4>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80fc 	beq.w	8000570 <__udivmoddi4+0x2a0>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14c      	bne.n	8000426 <__udivmoddi4+0x156>
 800038c:	42ab      	cmp	r3, r5
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2a6>
 8000392:	4282      	cmp	r2, r0
 8000394:	f240 80ef 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000398:	4608      	mov	r0, r1
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e5      	beq.n	800036a <__udivmoddi4+0x9a>
 800039e:	e9c6 4700 	strd	r4, r7, [r6]
 80003a2:	e7e2      	b.n	800036a <__udivmoddi4+0x9a>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xd8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f382 	clz	r3, r2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	f040 809f 	bne.w	80004f0 <__udivmoddi4+0x220>
 80003b2:	1a8a      	subs	r2, r1, r2
 80003b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b8:	fa1f f78c 	uxth.w	r7, ip
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb2 f5fe 	udiv	r5, r2, lr
 80003c2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c6:	0c22      	lsrs	r2, r4, #16
 80003c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003cc:	fb07 f005 	mul.w	r0, r7, r5
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d90f      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003d4:	eb1c 0202 	adds.w	r2, ip, r2
 80003d8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003dc:	bf2c      	ite	cs
 80003de:	f04f 0901 	movcs.w	r9, #1
 80003e2:	f04f 0900 	movcc.w	r9, #0
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d903      	bls.n	80003f2 <__udivmoddi4+0x122>
 80003ea:	f1b9 0f00 	cmp.w	r9, #0
 80003ee:	f000 80ce 	beq.w	800058e <__udivmoddi4+0x2be>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8000400:	fb00 f707 	mul.w	r7, r0, r7
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	42a7      	cmp	r7, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	42a7      	cmp	r7, r4
 8000418:	f200 80b3 	bhi.w	8000582 <__udivmoddi4+0x2b2>
 800041c:	4610      	mov	r0, r2
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000424:	e79c      	b.n	8000360 <__udivmoddi4+0x90>
 8000426:	f1c1 0420 	rsb	r4, r1, #32
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000430:	fa22 f704 	lsr.w	r7, r2, r4
 8000434:	40e5      	lsrs	r5, r4
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f304 	lsr.w	r3, r0, r4
 800043e:	4088      	lsls	r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fbb5 fef8 	udiv	lr, r5, r8
 8000454:	fb08 551e 	mls	r5, r8, lr, r5
 8000458:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045c:	fb0e f90c 	mul.w	r9, lr, ip
 8000460:	45a9      	cmp	r9, r5
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1b2>
 8000464:	197d      	adds	r5, r7, r5
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a9      	cmp	r9, r5
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 808d 	beq.w	800059a <__udivmoddi4+0x2ca>
 8000480:	46d6      	mov	lr, sl
 8000482:	eba5 0509 	sub.w	r5, r5, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb5 f3f8 	udiv	r3, r5, r8
 800048e:	fb08 5513 	mls	r5, r8, r3, r5
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800049a:	45ac      	cmp	ip, r5
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1dc>
 800049e:	197d      	adds	r5, r7, r5
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1da>
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d87e      	bhi.n	80005a8 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004b0:	eba5 050c 	sub.w	r5, r5, ip
 80004b4:	fba3 9802 	umull	r9, r8, r3, r2
 80004b8:	4545      	cmp	r5, r8
 80004ba:	46ce      	mov	lr, r9
 80004bc:	46c4      	mov	ip, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1f6>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x200>
 80004c2:	4548      	cmp	r0, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x200>
 80004c6:	3b01      	subs	r3, #1
 80004c8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004cc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d06f      	beq.n	80005b4 <__udivmoddi4+0x2e4>
 80004d4:	ebb0 020e 	subs.w	r2, r0, lr
 80004d8:	eb65 050c 	sbc.w	r5, r5, ip
 80004dc:	40ca      	lsrs	r2, r1
 80004de:	fa05 f404 	lsl.w	r4, r5, r4
 80004e2:	40cd      	lsrs	r5, r1
 80004e4:	4618      	mov	r0, r3
 80004e6:	4314      	orrs	r4, r2
 80004e8:	2100      	movs	r1, #0
 80004ea:	e9c6 4500 	strd	r4, r5, [r6]
 80004ee:	e73c      	b.n	800036a <__udivmoddi4+0x9a>
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	f1c3 0220 	rsb	r2, r3, #32
 80004f8:	4099      	lsls	r1, r3
 80004fa:	409c      	lsls	r4, r3
 80004fc:	40d5      	lsrs	r5, r2
 80004fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000502:	fa20 f202 	lsr.w	r2, r0, r2
 8000506:	fa1f f78c 	uxth.w	r7, ip
 800050a:	fbb5 f0fe 	udiv	r0, r5, lr
 800050e:	430a      	orrs	r2, r1
 8000510:	fb0e 5510 	mls	r5, lr, r0, r5
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f507 	mul.w	r5, r0, r7
 800051e:	428d      	cmp	r5, r1
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x270>
 8000522:	eb1c 0101 	adds.w	r1, ip, r1
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	bf2c      	ite	cs
 800052c:	f04f 0901 	movcs.w	r9, #1
 8000530:	f04f 0900 	movcc.w	r9, #0
 8000534:	428d      	cmp	r5, r1
 8000536:	d902      	bls.n	800053e <__udivmoddi4+0x26e>
 8000538:	f1b9 0f00 	cmp.w	r9, #0
 800053c:	d031      	beq.n	80005a2 <__udivmoddi4+0x2d2>
 800053e:	4640      	mov	r0, r8
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5fe 	udiv	r5, r1, lr
 8000548:	fb0e 1115 	mls	r1, lr, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f107 	mul.w	r1, r5, r7
 8000554:	4291      	cmp	r1, r2
 8000556:	d907      	bls.n	8000568 <__udivmoddi4+0x298>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x296>
 8000562:	4291      	cmp	r1, r2
 8000564:	d823      	bhi.n	80005ae <__udivmoddi4+0x2de>
 8000566:	4645      	mov	r5, r8
 8000568:	1a52      	subs	r2, r2, r1
 800056a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056e:	e726      	b.n	80003be <__udivmoddi4+0xee>
 8000570:	4631      	mov	r1, r6
 8000572:	4630      	mov	r0, r6
 8000574:	e6f9      	b.n	800036a <__udivmoddi4+0x9a>
 8000576:	1a84      	subs	r4, r0, r2
 8000578:	eb65 0203 	sbc.w	r2, r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	4617      	mov	r7, r2
 8000580:	e70b      	b.n	800039a <__udivmoddi4+0xca>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14e>
 8000588:	4464      	add	r4, ip
 800058a:	3802      	subs	r0, #2
 800058c:	e6e4      	b.n	8000358 <__udivmoddi4+0x88>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	3902      	subs	r1, #2
 8000596:	4462      	add	r2, ip
 8000598:	e6c9      	b.n	800032e <__udivmoddi4+0x5e>
 800059a:	f1ae 0e02 	sub.w	lr, lr, #2
 800059e:	443d      	add	r5, r7
 80005a0:	e76f      	b.n	8000482 <__udivmoddi4+0x1b2>
 80005a2:	3802      	subs	r0, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	e7cb      	b.n	8000540 <__udivmoddi4+0x270>
 80005a8:	3b02      	subs	r3, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e77e      	b.n	80004ac <__udivmoddi4+0x1dc>
 80005ae:	3d02      	subs	r5, #2
 80005b0:	4462      	add	r2, ip
 80005b2:	e7d9      	b.n	8000568 <__udivmoddi4+0x298>
 80005b4:	4618      	mov	r0, r3
 80005b6:	4631      	mov	r1, r6
 80005b8:	e6d7      	b.n	800036a <__udivmoddi4+0x9a>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <disk_status+0x30>)
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	4905      	ldr	r1, [pc, #20]	; (80005f0 <disk_status+0x30>)
 80005da:	440a      	add	r2, r1
 80005dc:	7a12      	ldrb	r2, [r2, #8]
 80005de:	4610      	mov	r0, r2
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000b8 	.word	0x200000b8

080005f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <disk_initialize+0x48>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d111      	bne.n	8000630 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <disk_initialize+0x48>)
 8000610:	2101      	movs	r1, #1
 8000612:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <disk_initialize+0x48>)
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <disk_initialize+0x48>)
 8000624:	440a      	add	r2, r1
 8000626:	7a12      	ldrb	r2, [r2, #8]
 8000628:	4610      	mov	r0, r2
 800062a:	4798      	blx	r3
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000b8 	.word	0x200000b8

08000640 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <disk_read+0x3c>)
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	689c      	ldr	r4, [r3, #8]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <disk_read+0x3c>)
 8000660:	4413      	add	r3, r2
 8000662:	7a18      	ldrb	r0, [r3, #8]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	47a0      	blx	r4
 800066c:	4603      	mov	r3, r0
 800066e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000670:	7dfb      	ldrb	r3, [r7, #23]
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	200000b8 	.word	0x200000b8

08000680 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <disk_write+0x3c>)
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	68dc      	ldr	r4, [r3, #12]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <disk_write+0x3c>)
 80006a0:	4413      	add	r3, r2
 80006a2:	7a18      	ldrb	r0, [r3, #8]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	47a0      	blx	r4
 80006ac:	4603      	mov	r3, r0
 80006ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	460b      	mov	r3, r1
 80006ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <disk_ioctl+0x38>)
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <disk_ioctl+0x38>)
 80006e0:	440a      	add	r2, r1
 80006e2:	7a10      	ldrb	r0, [r2, #8]
 80006e4:	79b9      	ldrb	r1, [r7, #6]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	4798      	blx	r3
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000b8 	.word	0x200000b8

080006fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000700:	4904      	ldr	r1, [pc, #16]	; (8000714 <MX_FATFS_Init+0x18>)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_FATFS_Init+0x1c>)
 8000704:	f002 fe28 	bl	8003358 <FATFS_LinkDriver>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <MX_FATFS_Init+0x20>)
 800070e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000094 	.word	0x20000094
 8000718:	20000004 	.word	0x20000004
 800071c:	20000090 	.word	0x20000090

08000720 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000724:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8000744:	e007      	b.n	8000756 <mem_cpy+0x26>
		*d++ = *s++;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	1c53      	adds	r3, r2, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1c59      	adds	r1, r3, #1
 8000750:	6179      	str	r1, [r7, #20]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f2      	bne.n	8000746 <mem_cpy+0x16>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800076e:	b480      	push	{r7}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800077e:	e005      	b.n	800078c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	617a      	str	r2, [r7, #20]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f4      	bne.n	8000780 <mem_set+0x12>
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80007bc:	bf00      	nop
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00d      	beq.n	80007e4 <mem_cmp+0x40>
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	61fa      	str	r2, [r7, #28]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	61ba      	str	r2, [r7, #24]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	1acb      	subs	r3, r1, r3
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0ec      	beq.n	80007be <mem_cmp+0x1a>
	return r;
 80007e4:	697b      	ldr	r3, [r7, #20]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80007fc:	e002      	b.n	8000804 <chk_chr+0x12>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <chk_chr+0x26>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4293      	cmp	r3, r2
 8000816:	d1f2      	bne.n	80007fe <chk_chr+0xc>
	return *str;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e038      	b.n	80008ae <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800083c:	4930      	ldr	r1, [pc, #192]	; (8000900 <chk_lock+0xd8>)
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d029      	beq.n	80008a4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000850:	492b      	ldr	r1, [pc, #172]	; (8000900 <chk_lock+0xd8>)
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000866:	429a      	cmp	r2, r3
 8000868:	d11e      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800086a:	4925      	ldr	r1, [pc, #148]	; (8000900 <chk_lock+0xd8>)
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3304      	adds	r3, #4
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000882:	429a      	cmp	r2, r3
 8000884:	d110      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8000886:	491e      	ldr	r1, [pc, #120]	; (8000900 <chk_lock+0xd8>)
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	440b      	add	r3, r1
 8000894:	3308      	adds	r3, #8
 8000896:	881a      	ldrh	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800089e:	429a      	cmp	r2, r3
 80008a0:	d102      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80008a2:	e007      	b.n	80008b4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d9c3      	bls.n	800083c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d109      	bne.n	80008ce <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <chk_lock+0x9e>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d101      	bne.n	80008ca <chk_lock+0xa2>
 80008c6:	2300      	movs	r3, #0
 80008c8:	e013      	b.n	80008f2 <chk_lock+0xca>
 80008ca:	2312      	movs	r3, #18
 80008cc:	e011      	b.n	80008f2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <chk_lock+0xc4>
 80008d4:	490a      	ldr	r1, [pc, #40]	; (8000900 <chk_lock+0xd8>)
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	330a      	adds	r3, #10
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ea:	d101      	bne.n	80008f0 <chk_lock+0xc8>
 80008ec:	2310      	movs	r3, #16
 80008ee:	e000      	b.n	80008f2 <chk_lock+0xca>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200000a0 	.word	0x200000a0

08000904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	e002      	b.n	8000916 <enq_lock+0x12>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d809      	bhi.n	8000930 <enq_lock+0x2c>
 800091c:	490a      	ldr	r1, [pc, #40]	; (8000948 <enq_lock+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ef      	bne.n	8000910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200000a0 	.word	0x200000a0

0800094c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e02b      	b.n	80009b4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800095c:	4956      	ldr	r1, [pc, #344]	; (8000ab8 <inc_lock+0x16c>)
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4613      	mov	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000972:	429a      	cmp	r2, r3
 8000974:	d11b      	bne.n	80009ae <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8000976:	4950      	ldr	r1, [pc, #320]	; (8000ab8 <inc_lock+0x16c>)
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	3304      	adds	r3, #4
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800098e:	429a      	cmp	r2, r3
 8000990:	d10d      	bne.n	80009ae <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8000992:	4949      	ldr	r1, [pc, #292]	; (8000ab8 <inc_lock+0x16c>)
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3308      	adds	r3, #8
 80009a2:	881a      	ldrh	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d006      	beq.n	80009bc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d9d0      	bls.n	800095c <inc_lock+0x10>
 80009ba:	e000      	b.n	80009be <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80009bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d145      	bne.n	8000a50 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e002      	b.n	80009d0 <inc_lock+0x84>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3301      	adds	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d809      	bhi.n	80009ea <inc_lock+0x9e>
 80009d6:	4938      	ldr	r1, [pc, #224]	; (8000ab8 <inc_lock+0x16c>)
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1ef      	bne.n	80009ca <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d101      	bne.n	80009f4 <inc_lock+0xa8>
 80009f0:	2300      	movs	r3, #0
 80009f2:	e05a      	b.n	8000aaa <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <inc_lock+0x16c>)
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4403      	add	r3, r0
 8000a08:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <inc_lock+0x16c>)
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4403      	add	r3, r0
 8000a1e:	3304      	adds	r3, #4
 8000a20:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8000a28:	4923      	ldr	r1, [pc, #140]	; (8000ab8 <inc_lock+0x16c>)
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3308      	adds	r3, #8
 8000a38:	4602      	mov	r2, r0
 8000a3a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8000a3c:	491e      	ldr	r1, [pc, #120]	; (8000ab8 <inc_lock+0x16c>)
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	330a      	adds	r3, #10
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00c      	beq.n	8000a70 <inc_lock+0x124>
 8000a56:	4918      	ldr	r1, [pc, #96]	; (8000ab8 <inc_lock+0x16c>)
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	330a      	adds	r3, #10
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <inc_lock+0x124>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e01c      	b.n	8000aaa <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <inc_lock+0x142>
 8000a76:	4910      	ldr	r1, [pc, #64]	; (8000ab8 <inc_lock+0x16c>)
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	330a      	adds	r3, #10
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	e001      	b.n	8000a92 <inc_lock+0x146>
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <inc_lock+0x16c>)
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4403      	add	r3, r0
 8000aa0:	330a      	adds	r3, #10
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000a0 	.word	0x200000a0

08000abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d82e      	bhi.n	8000b2e <dec_lock+0x72>
		n = Files[i].ctr;
 8000ad0:	491b      	ldr	r1, [pc, #108]	; (8000b40 <dec_lock+0x84>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	330a      	adds	r3, #10
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aea:	d101      	bne.n	8000af0 <dec_lock+0x34>
 8000aec:	2300      	movs	r3, #0
 8000aee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <dec_lock+0x40>
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8000afc:	4910      	ldr	r1, [pc, #64]	; (8000b40 <dec_lock+0x84>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	330a      	adds	r3, #10
 8000b0c:	89fa      	ldrh	r2, [r7, #14]
 8000b0e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <dec_lock+0x6c>
 8000b16:	490a      	ldr	r1, [pc, #40]	; (8000b40 <dec_lock+0x84>)
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	737b      	strb	r3, [r7, #13]
 8000b2c:	e001      	b.n	8000b32 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8000b2e:	2302      	movs	r3, #2
 8000b30:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e016      	b.n	8000b80 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8000b52:	4910      	ldr	r1, [pc, #64]	; (8000b94 <clear_lock+0x50>)
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d108      	bne.n	8000b7a <clear_lock+0x36>
 8000b68:	490a      	ldr	r1, [pc, #40]	; (8000b94 <clear_lock+0x50>)
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d9e5      	bls.n	8000b52 <clear_lock+0xe>
	}
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200000a0 	.word	0x200000a0

08000b98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d038      	beq.n	8000c20 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000bb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	f7ff fd5d 	bl	8000680 <disk_write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e026      	b.n	8000c20 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d218      	bcs.n	8000c20 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	e010      	b.n	8000c1a <sync_window+0x82>
					wsect += fs->fsize;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f7ff fd36 	bl	8000680 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d8eb      	bhi.n	8000bf8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d01b      	beq.n	8000c7c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffa7 	bl	8000b98 <sync_window>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d113      	bne.n	8000c7c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	f7ff fcee 	bl	8000640 <disk_read>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff82 	bl	8000b98 <sync_window>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 809b 	bne.w	8000dd6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	f040 8088 	bne.w	8000dbc <sync_fs+0x136>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 8082 	bne.w	8000dbc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd54 	bl	800076e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2255      	movs	r2, #85	; 0x55
 8000cca:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	22aa      	movs	r2, #170	; 0xaa
 8000cd2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2252      	movs	r2, #82	; 0x52
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2252      	movs	r2, #82	; 0x52
 8000ce0:	705a      	strb	r2, [r3, #1]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2261      	movs	r2, #97	; 0x61
 8000ce6:	709a      	strb	r2, [r3, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2241      	movs	r2, #65	; 0x41
 8000cec:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2272      	movs	r2, #114	; 0x72
 8000cf2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2272      	movs	r2, #114	; 0x72
 8000cfa:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2241      	movs	r2, #65	; 0x41
 8000d02:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2261      	movs	r2, #97	; 0x61
 8000d0a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d46:	0e1b      	lsrs	r3, r3, #24
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d88:	0e1b      	lsrs	r3, r3, #24
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8000dae:	2301      	movs	r3, #1
 8000db0:	f7ff fc66 	bl	8000680 <disk_write>
			fs->fsi_flag = 0;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc7a 	bl	80006c0 <disk_ioctl>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3b02      	subs	r3, #2
 8000dee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000df6:	3b02      	subs	r3, #2
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d301      	bcc.n	8000e02 <clust2sect+0x22>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e00a      	b.n	8000e18 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000e08:	461a      	mov	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	fb03 f202 	mul.w	r2, r3, r2
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000e16:	4413      	add	r3, r2
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d905      	bls.n	8000e40 <get_fat+0x1c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d302      	bcc.n	8000e46 <get_fat+0x22>
		val = 1;	/* Internal error */
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e0a3      	b.n	8000f8e <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d068      	beq.n	8000f28 <get_fat+0x104>
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	f300 808f 	bgt.w	8000f7a <get_fat+0x156>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d002      	beq.n	8000e66 <get_fat+0x42>
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d040      	beq.n	8000ee6 <get_fat+0xc2>
 8000e64:	e089      	b.n	8000f7a <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	0a5b      	lsrs	r3, r3, #9
 8000e7e:	4413      	add	r3, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fed1 	bl	8000c2a <move_window>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d178      	bne.n	8000f80 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff febc 	bl	8000c2a <move_window>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d165      	bne.n	8000f84 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <get_fat+0xb8>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	e002      	b.n	8000ee2 <get_fat+0xbe>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee2:	617b      	str	r3, [r7, #20]
			break;
 8000ee4:	e053      	b.n	8000f8e <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fe98 	bl	8000c2a <move_window>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d143      	bne.n	8000f88 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	617b      	str	r3, [r7, #20]
			break;
 8000f26:	e032      	b.n	8000f8e <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	09db      	lsrs	r3, r3, #7
 8000f32:	4413      	add	r3, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe77 	bl	8000c2a <move_window>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d124      	bne.n	8000f8c <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	3303      	adds	r3, #3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	061a      	lsls	r2, r3, #24
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	041b      	lsls	r3, r3, #16
 8000f60:	4313      	orrs	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	3201      	adds	r2, #1
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	0212      	lsls	r2, r2, #8
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f76:	617b      	str	r3, [r7, #20]
			break;
 8000f78:	e009      	b.n	8000f8e <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e006      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000f8c:	bf00      	nop
		}
	}

	return val;
 8000f8e:	697b      	ldr	r3, [r7, #20]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d905      	bls.n	8000fb6 <put_fat+0x1e>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d302      	bcc.n	8000fbc <put_fat+0x24>
		res = FR_INT_ERR;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	e0f6      	b.n	80011aa <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	f000 809e 	beq.w	8001104 <put_fat+0x16c>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	f300 80e4 	bgt.w	8001196 <put_fat+0x1fe>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <put_fat+0x40>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d06f      	beq.n	80010b6 <put_fat+0x11e>
 8000fd6:	e0de      	b.n	8001196 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	0a5b      	lsrs	r3, r3, #9
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe18 	bl	8000c2a <move_window>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 80cb 	bne.w	800119c <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	617a      	str	r2, [r7, #20]
 800100c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00d      	beq.n	800103c <put_fat+0xa4>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	b25a      	sxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	e001      	b.n	8001040 <put_fat+0xa8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	0a5b      	lsrs	r3, r3, #9
 8001056:	4413      	add	r3, r2
 8001058:	4619      	mov	r1, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fde5 	bl	8000c2a <move_window>
 8001060:	4603      	mov	r3, r0
 8001062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001064:	7ffb      	ldrb	r3, [r7, #31]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 809a 	bne.w	80011a0 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <put_fat+0xf2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	b2db      	uxtb	r3, r3
 8001088:	e00e      	b.n	80010a8 <put_fat+0x110>
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f023 030f 	bic.w	r3, r3, #15
 8001094:	b25a      	sxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80010b4:	e079      	b.n	80011aa <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	4413      	add	r3, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fdb0 	bl	8000c2a <move_window>
 80010ca:	4603      	mov	r3, r0
 80010cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d167      	bne.n	80011a4 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8001102:	e052      	b.n	80011aa <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	09db      	lsrs	r3, r3, #7
 800110e:	4413      	add	r3, r2
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff fd89 	bl	8000c2a <move_window>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d142      	bne.n	80011a8 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	3303      	adds	r3, #3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	061a      	lsls	r2, r3, #24
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	3302      	adds	r3, #2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	4313      	orrs	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	3201      	adds	r2, #1
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	0212      	lsls	r2, r2, #8
 800114a:	4313      	orrs	r3, r2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	4313      	orrs	r3, r2
 8001152:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b29b      	uxth	r3, r3
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29a      	uxth	r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	3301      	adds	r3, #1
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0c1a      	lsrs	r2, r3, #16
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3302      	adds	r3, #2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	0e1a      	lsrs	r2, r3, #24
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	3303      	adds	r3, #3
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8001194:	e009      	b.n	80011aa <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8001196:	2302      	movs	r3, #2
 8001198:	77fb      	strb	r3, [r7, #31]
 800119a:	e006      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 800119c:	bf00      	nop
 800119e:	e004      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a0:	bf00      	nop
 80011a2:	e002      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a8:	bf00      	nop
		}
	}

	return res;
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d905      	bls.n	80011d0 <remove_chain+0x1c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d302      	bcc.n	80011d6 <remove_chain+0x22>
		res = FR_INT_ERR;
 80011d0:	2302      	movs	r3, #2
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e043      	b.n	800125e <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80011da:	e036      	b.n	800124a <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe20 	bl	8000e24 <get_fat>
 80011e4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d035      	beq.n	8001258 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <remove_chain+0x44>
 80011f2:	2302      	movs	r3, #2
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e032      	b.n	800125e <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011fe:	d102      	bne.n	8001206 <remove_chain+0x52>
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e02b      	b.n	800125e <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001206:	2200      	movs	r2, #0
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fec4 	bl	8000f98 <put_fat>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d120      	bne.n	800125c <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d00f      	beq.n	8001246 <remove_chain+0x92>
				fs->free_clust++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3c2      	bcc.n	80011dc <remove_chain+0x28>
 8001256:	e002      	b.n	800125e <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8001258:	bf00      	nop
 800125a:	e000      	b.n	800125e <remove_chain+0xaa>
			if (res != FR_OK) break;
 800125c:	bf00      	nop
		}
	}

	return res;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10f      	bne.n	8001298 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800127e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <create_chain+0x2a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	429a      	cmp	r2, r3
 8001290:	d31c      	bcc.n	80012cc <create_chain+0x64>
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e019      	b.n	80012cc <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fdc2 	bl	8000e24 <get_fat>
 80012a0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d801      	bhi.n	80012ac <create_chain+0x44>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e076      	b.n	800139a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b2:	d101      	bne.n	80012b8 <create_chain+0x50>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	e070      	b.n	800139a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d201      	bcs.n	80012c8 <create_chain+0x60>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	e068      	b.n	800139a <create_chain+0x132>
		scl = clst;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d307      	bcc.n	80012f2 <create_chain+0x8a>
			ncl = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d901      	bls.n	80012f2 <create_chain+0x8a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e053      	b.n	800139a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80012f2:	6979      	ldr	r1, [r7, #20]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fd95 	bl	8000e24 <get_fat>
 80012fa:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001308:	d002      	beq.n	8001310 <create_chain+0xa8>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <create_chain+0xac>
			return cs;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	e042      	b.n	800139a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1d9      	bne.n	80012d0 <create_chain+0x68>
 800131c:	2300      	movs	r3, #0
 800131e:	e03c      	b.n	800139a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8001320:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8001322:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001326:	6979      	ldr	r1, [r7, #20]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe35 	bl	8000f98 <put_fat>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <create_chain+0xe4>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe28 	bl	8000f98 <put_fat>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d11a      	bne.n	8001388 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001364:	d018      	beq.n	8001398 <create_chain+0x130>
			fs->free_clust--;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001386:	e007      	b.n	8001398 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <create_chain+0x12c>
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001392:	e000      	b.n	8001396 <create_chain+0x12e>
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80013b2:	3304      	adds	r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	0a5b      	lsrs	r3, r3, #9
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80013c0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80013c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1d1a      	adds	r2, r3, #4
 80013ce:	613a      	str	r2, [r7, #16]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <clmt_clust+0x3c>
 80013da:	2300      	movs	r3, #0
 80013dc:	e010      	b.n	8001400 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d307      	bcc.n	80013f6 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	3304      	adds	r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013f4:	e7e9      	b.n	80013ca <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80013f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4413      	add	r3, r2
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001426:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d007      	beq.n	800143e <dir_sdi+0x32>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001434:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	429a      	cmp	r2, r3
 800143c:	d301      	bcc.n	8001442 <dir_sdi+0x36>
		return FR_INT_ERR;
 800143e:	2302      	movs	r3, #2
 8001440:	e074      	b.n	800152c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <dir_sdi+0x56>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800144e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001452:	2b03      	cmp	r3, #3
 8001454:	d105      	bne.n	8001462 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800145c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001460:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800146e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001472:	461a      	mov	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4293      	cmp	r3, r2
 8001478:	d301      	bcc.n	800147e <dir_sdi+0x72>
			return FR_INT_ERR;
 800147a:	2302      	movs	r3, #2
 800147c:	e056      	b.n	800152c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001484:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e032      	b.n	80014f2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001492:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800149a:	e01e      	b.n	80014da <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fcbd 	bl	8000e24 <get_fat>
 80014aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b2:	d101      	bne.n	80014b8 <dir_sdi+0xac>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e039      	b.n	800152c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d907      	bls.n	80014ce <dir_sdi+0xc2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d301      	bcc.n	80014d2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80014ce:	2302      	movs	r3, #2
 80014d0:	e02c      	b.n	800152c <dir_sdi+0x120>
			idx -= ic;
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d2dc      	bcs.n	800149c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc78 	bl	8000de0 <clust2sect>
 80014f0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <dir_sdi+0xf8>
 8001500:	2302      	movs	r3, #2
 8001502:	e013      	b.n	800152c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	091a      	lsrs	r2, r3, #4
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	441a      	add	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	441a      	add	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <dir_next+0x26>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <dir_next+0x2a>
		return FR_NO_FILE;
 800155a:	2304      	movs	r3, #4
 800155c:	e0dd      	b.n	800171a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 80c6 	bne.w	80016f6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001588:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4293      	cmp	r3, r2
 8001592:	f0c0 80b0 	bcc.w	80016f6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8001596:	2304      	movs	r3, #4
 8001598:	e0bf      	b.n	800171a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80015a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80015a8:	3a01      	subs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80a2 	bne.w	80016f6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fc2f 	bl	8000e24 <get_fat>
 80015c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d801      	bhi.n	80015d2 <dir_next+0x9e>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e0a3      	b.n	800171a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d8:	d101      	bne.n	80015de <dir_next+0xaa>
 80015da:	2301      	movs	r3, #1
 80015dc:	e09d      	b.n	800171a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d374      	bcc.n	80016d8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <dir_next+0xc4>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e090      	b.n	800171a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f7ff fe2e 	bl	8001268 <create_chain>
 800160c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <dir_next+0xe4>
 8001614:	2307      	movs	r3, #7
 8001616:	e080      	b.n	800171a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <dir_next+0xee>
 800161e:	2302      	movs	r3, #2
 8001620:	e07b      	b.n	800171a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001628:	d101      	bne.n	800162e <dir_next+0xfa>
 800162a:	2301      	movs	r3, #1
 800162c:	e075      	b.n	800171a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff faaf 	bl	8000b98 <sync_window>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <dir_next+0x110>
 8001640:	2301      	movs	r3, #1
 8001642:	e06a      	b.n	800171a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f88c 	bl	800076e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	4610      	mov	r0, r2
 8001666:	f7ff fbbb 	bl	8000de0 <clust2sect>
 800166a:	4603      	mov	r3, r0
 800166c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e01b      	b.n	80016ae <dir_next+0x17a>
						dp->fs->wflag = 1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fa85 	bl	8000b98 <sync_window>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <dir_next+0x164>
 8001694:	2301      	movs	r3, #1
 8001696:	e040      	b.n	800171a <dir_next+0x1e6>
						dp->fs->winsect++;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800169e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80016a2:	3201      	adds	r2, #1
 80016a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	3301      	adds	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80016b8:	461a      	mov	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d3da      	bcc.n	8001676 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	1a8a      	subs	r2, r1, r2
 80016d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016e6:	6979      	ldr	r1, [r7, #20]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb79 	bl	8000de0 <clust2sect>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	441a      	add	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800172c:	2100      	movs	r1, #0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe6c 	bl	800140c <dir_sdi>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d131      	bne.n	80017a2 <dir_alloc+0x80>
		n = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f7ff fa6a 	bl	8000c2a <move_window>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11f      	bne.n	80017a0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2be5      	cmp	r3, #229	; 0xe5
 800176a:	d005      	beq.n	8001778 <dir_alloc+0x56>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3301      	adds	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d102      	bne.n	800178c <dir_alloc+0x6a>
 8001786:	e00c      	b.n	80017a2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fed0 	bl	8001534 <dir_next>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0d1      	beq.n	8001742 <dir_alloc+0x20>
 800179e:	e000      	b.n	80017a2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80017a0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d101      	bne.n	80017ac <dir_alloc+0x8a>
 80017a8:	2307      	movs	r3, #7
 80017aa:	73fb      	strb	r3, [r7, #15]
	return res;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	331b      	adds	r3, #27
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	331a      	adds	r3, #26
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d10f      	bne.n	8001804 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3315      	adds	r3, #21
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3314      	adds	r3, #20
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

	return cl;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	331a      	adds	r3, #26
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	331b      	adds	r3, #27
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	0c1a      	lsrs	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3314      	adds	r3, #20
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	b29b      	uxth	r3, r3
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3315      	adds	r3, #21
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fdce 	bl	800140c <dir_sdi>
 8001870:	4603      	mov	r3, r0
 8001872:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <dir_find+0x1e>
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	e03b      	b.n	80018f6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7ff f9cc 	bl	8000c2a <move_window>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d128      	bne.n	80018ee <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018a2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <dir_find+0x56>
 80018b0:	2304      	movs	r3, #4
 80018b2:	75fb      	strb	r3, [r7, #23]
 80018b4:	e01e      	b.n	80018f4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	330b      	adds	r3, #11
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <dir_find+0x7a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80018ca:	220b      	movs	r2, #11
 80018cc:	4619      	mov	r1, r3
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f7fe ff68 	bl	80007a4 <mem_cmp>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80018da:	2100      	movs	r1, #0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fe29 	bl	8001534 <dir_next>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0c8      	beq.n	800187e <dir_find+0x1e>
 80018ec:	e002      	b.n	80018f4 <dir_find+0x94>
		if (res != FR_OK) break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <dir_find+0x94>
			break;
 80018f2:	bf00      	nop

	return res;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001906:	2101      	movs	r1, #1
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff0a 	bl	8001722 <dir_alloc>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d126      	bne.n	8001966 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f7ff f97f 	bl	8000c2a <move_window>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d117      	bne.n	8001966 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800193c:	2220      	movs	r2, #32
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe ff14 	bl	800076e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001952:	220b      	movs	r2, #11
 8001954:	4619      	mov	r1, r3
 8001956:	f7fe feeb 	bl	8000730 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e002      	b.n	8001988 <create_name+0x18>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b2f      	cmp	r3, #47	; 0x2f
 800198e:	d0f8      	beq.n	8001982 <create_name+0x12>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b5c      	cmp	r3, #92	; 0x5c
 8001996:	d0f4      	beq.n	8001982 <create_name+0x12>
	sfn = dp->fn;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800199e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80019a0:	220b      	movs	r2, #11
 80019a2:	2120      	movs	r1, #32
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7fe fee2 	bl	800076e <mem_set>
	si = i = b = 0; ni = 8;
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	2308      	movs	r3, #8
 80019b8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	617a      	str	r2, [r7, #20]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d953      	bls.n	8001a76 <create_name+0x106>
 80019ce:	7fbb      	ldrb	r3, [r7, #30]
 80019d0:	2b2f      	cmp	r3, #47	; 0x2f
 80019d2:	d050      	beq.n	8001a76 <create_name+0x106>
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	2b5c      	cmp	r3, #92	; 0x5c
 80019d8:	d04d      	beq.n	8001a76 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80019da:	7fbb      	ldrb	r3, [r7, #30]
 80019dc:	2b2e      	cmp	r3, #46	; 0x2e
 80019de:	d003      	beq.n	80019e8 <create_name+0x78>
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d30f      	bcc.n	8001a08 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d102      	bne.n	80019f4 <create_name+0x84>
 80019ee:	7fbb      	ldrb	r3, [r7, #30]
 80019f0:	2b2e      	cmp	r3, #46	; 0x2e
 80019f2:	d001      	beq.n	80019f8 <create_name+0x88>
 80019f4:	2306      	movs	r3, #6
 80019f6:	e073      	b.n	8001ae0 <create_name+0x170>
			i = 8; ni = 11;
 80019f8:	2308      	movs	r3, #8
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	230b      	movs	r3, #11
 80019fe:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	77fb      	strb	r3, [r7, #31]
 8001a06:	e035      	b.n	8001a74 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001a08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da08      	bge.n	8001a22 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	f043 0303 	orr.w	r3, r3, #3
 8001a16:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001a18:	7fbb      	ldrb	r3, [r7, #30]
 8001a1a:	3b80      	subs	r3, #128	; 0x80
 8001a1c:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <create_name+0x178>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001a22:	7fbb      	ldrb	r3, [r7, #30]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <create_name+0x17c>)
 8001a28:	f7fe fee3 	bl	80007f2 <chk_chr>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <create_name+0xc6>
				return FR_INVALID_NAME;
 8001a32:	2306      	movs	r3, #6
 8001a34:	e054      	b.n	8001ae0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001a36:	7fbb      	ldrb	r3, [r7, #30]
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d907      	bls.n	8001a4c <create_name+0xdc>
 8001a3c:	7fbb      	ldrb	r3, [r7, #30]
 8001a3e:	2b5a      	cmp	r3, #90	; 0x5a
 8001a40:	d804      	bhi.n	8001a4c <create_name+0xdc>
				b |= 2;
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	e00c      	b.n	8001a66 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8001a4c:	7fbb      	ldrb	r3, [r7, #30]
 8001a4e:	2b60      	cmp	r3, #96	; 0x60
 8001a50:	d909      	bls.n	8001a66 <create_name+0xf6>
 8001a52:	7fbb      	ldrb	r3, [r7, #30]
 8001a54:	2b7a      	cmp	r3, #122	; 0x7a
 8001a56:	d806      	bhi.n	8001a66 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	77fb      	strb	r3, [r7, #31]
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	3b20      	subs	r3, #32
 8001a64:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	613a      	str	r2, [r7, #16]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	4413      	add	r3, r2
 8001a70:	7fba      	ldrb	r2, [r7, #30]
 8001a72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001a74:	e7a1      	b.n	80019ba <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001a80:	7fbb      	ldrb	r3, [r7, #30]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d801      	bhi.n	8001a8a <create_name+0x11a>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e000      	b.n	8001a8c <create_name+0x11c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <create_name+0x128>
 8001a94:	2306      	movs	r3, #6
 8001a96:	e023      	b.n	8001ae0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2be5      	cmp	r3, #229	; 0xe5
 8001a9e:	d102      	bne.n	8001aa6 <create_name+0x136>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d102      	bne.n	8001ab2 <create_name+0x142>
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d103      	bne.n	8001ac4 <create_name+0x154>
 8001abc:	7fbb      	ldrb	r3, [r7, #30]
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d103      	bne.n	8001ad6 <create_name+0x166>
 8001ace:	7fbb      	ldrb	r3, [r7, #30]
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	330b      	adds	r3, #11
 8001ada:	7fba      	ldrb	r2, [r7, #30]
 8001adc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001ade:	2300      	movs	r3, #0
#endif
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800e58c 	.word	0x0800e58c
 8001aec:	0800e36c 	.word	0x0800e36c

08001af0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b2f      	cmp	r3, #47	; 0x2f
 8001b00:	d003      	beq.n	8001b0a <follow_path+0x1a>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b5c      	cmp	r3, #92	; 0x5c
 8001b08:	d102      	bne.n	8001b10 <follow_path+0x20>
		path++;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	d80a      	bhi.n	8001b36 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fc72 	bl	800140c <dir_sdi>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b34:	e045      	b.n	8001bc2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff18 	bl	8001970 <create_name>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d136      	bne.n	8001bb8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe88 	bl	8001860 <dir_find>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001b5a:	7adb      	ldrb	r3, [r3, #11]
 8001b5c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d128      	bne.n	8001bbc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d123      	bne.n	8001bbc <follow_path+0xcc>
 8001b74:	2305      	movs	r3, #5
 8001b76:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8001b78:	e020      	b.n	8001bbc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11d      	bne.n	8001bc0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b8a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	330b      	adds	r3, #11
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e010      	b.n	8001bc2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe04 	bl	80017b6 <ld_clust>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001bb6:	e7be      	b.n	8001b36 <follow_path+0x46>
			if (res != FR_OK) break;
 8001bb8:	bf00      	nop
 8001bba:	e002      	b.n	8001bc2 <follow_path+0xd2>
				break;
 8001bbc:	bf00      	nop
 8001bbe:	e000      	b.n	8001bc2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001bc0:	bf00      	nop
		}
	}

	return res;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d031      	beq.n	8001c46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e002      	b.n	8001bf0 <get_ldnumber+0x24>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d903      	bls.n	8001c00 <get_ldnumber+0x34>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b3a      	cmp	r3, #58	; 0x3a
 8001bfe:	d1f4      	bne.n	8001bea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b3a      	cmp	r3, #58	; 0x3a
 8001c06:	d11c      	bne.n	8001c42 <get_ldnumber+0x76>
			tp = *path;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b30      	subs	r3, #48	; 0x30
 8001c18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d80e      	bhi.n	8001c3e <get_ldnumber+0x72>
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d10a      	bne.n	8001c3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <get_ldnumber+0x72>
					vol = (int)i;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	e002      	b.n	8001c48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8001c46:	693b      	ldr	r3, [r7, #16]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe ffd9 	bl	8000c2a <move_window>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <check_fs+0x2e>
		return 3;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04a      	b.n	8001d18 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001c88:	3301      	adds	r3, #1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <check_fs+0xcc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d001      	beq.n	8001ca6 <check_fs+0x52>
		return 2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e038      	b.n	8001d18 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3336      	adds	r3, #54	; 0x36
 8001caa:	3303      	adds	r3, #3
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	061a      	lsls	r2, r3, #24
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3336      	adds	r3, #54	; 0x36
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	3236      	adds	r2, #54	; 0x36
 8001cc0:	3201      	adds	r2, #1
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	0212      	lsls	r2, r2, #8
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <check_fs+0xd0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <check_fs+0x8a>
		return 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e01c      	b.n	8001d18 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3352      	adds	r3, #82	; 0x52
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	061a      	lsls	r2, r3, #24
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3352      	adds	r3, #82	; 0x52
 8001cec:	3302      	adds	r3, #2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	3252      	adds	r2, #82	; 0x52
 8001cf8:	3201      	adds	r2, #1
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	0212      	lsls	r2, r2, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d0c:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <check_fs+0xd0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <check_fs+0xc2>
		return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <check_fs+0xc4>

	return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	ffffaa55 	.word	0xffffaa55
 8001d24:	00544146 	.word	0x00544146

08001d28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f7ff ff45 	bl	8001bcc <get_ldnumber>
 8001d42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8001d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da01      	bge.n	8001d4e <find_volume+0x26>
 8001d4a:	230b      	movs	r3, #11
 8001d4c:	e2ac      	b.n	80022a8 <find_volume+0x580>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001d4e:	4a9e      	ldr	r2, [pc, #632]	; (8001fc8 <find_volume+0x2a0>)
 8001d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <find_volume+0x3a>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	e2a2      	b.n	80022a8 <find_volume+0x580>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d66:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01e      	beq.n	8001db0 <find_volume+0x88>
		myprintf("disk status started");/* If the volume has been mounted */
 8001d72:	4896      	ldr	r0, [pc, #600]	; (8001fcc <find_volume+0x2a4>)
 8001d74:	f001 fb38 	bl	80033e8 <myprintf>
		stat = disk_status(fs->drv);
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fc1e 	bl	80005c0 <disk_status>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001d8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <find_volume+0x84>
 8001d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8001da8:	230a      	movs	r3, #10
 8001daa:	e27d      	b.n	80022a8 <find_volume+0x580>
			return FR_OK;				/* The file system object is valid */
 8001dac:	2300      	movs	r3, #0
 8001dae:	e27b      	b.n	80022a8 <find_volume+0x580>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8001db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fc13 	bl	80005f4 <disk_initialize>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)
 8001dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <find_volume+0xbc>
//		myprintf("checking init");/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001de0:	2303      	movs	r3, #3
 8001de2:	e261      	b.n	80022a8 <find_volume+0x580>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <find_volume+0xd2>
 8001dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <find_volume+0xd2>
		return FR_WRITE_PROTECTED;
 8001df6:	230a      	movs	r3, #10
 8001df8:	e256      	b.n	80022a8 <find_volume+0x580>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8001dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e02:	f7ff ff27 	bl	8001c54 <check_fs>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8001e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d153      	bne.n	8001ebc <find_volume+0x194>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001e14:	2300      	movs	r3, #0
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
 8001e18:	e028      	b.n	8001e6c <find_volume+0x144>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8001e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001e24:	4413      	add	r3, r2
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <find_volume+0x130>
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	330b      	adds	r3, #11
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	330a      	adds	r3, #10
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	4313      	orrs	r3, r2
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	3209      	adds	r2, #9
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	3208      	adds	r2, #8
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	e000      	b.n	8001e5a <find_volume+0x132>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3358      	adds	r3, #88	; 0x58
 8001e60:	443b      	add	r3, r7
 8001e62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e68:	3301      	adds	r3, #1
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d9d3      	bls.n	8001e1a <find_volume+0xf2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8001e72:	2300      	movs	r3, #0
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <find_volume+0x15a>
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8001e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	3358      	adds	r3, #88	; 0x58
 8001e88:	443b      	add	r3, r7
 8001e8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8001e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <find_volume+0x17a>
 8001e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e9a:	f7ff fedb 	bl	8001c54 <check_fs>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	e000      	b.n	8001ea4 <find_volume+0x17c>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8001ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <find_volume+0x194>
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d9e2      	bls.n	8001e82 <find_volume+0x15a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d101      	bne.n	8001ec8 <find_volume+0x1a0>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e1ef      	b.n	80022a8 <find_volume+0x580>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8001ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <find_volume+0x1ac>
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	e1e9      	b.n	80022a8 <find_volume+0x580>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed6:	7b1b      	ldrb	r3, [r3, #12]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	7adb      	ldrb	r3, [r3, #11]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d001      	beq.n	8001ef0 <find_volume+0x1c8>
		return FR_NO_FILESYSTEM;
 8001eec:	230d      	movs	r3, #13
 8001eee:	e1db      	b.n	80022a8 <find_volume+0x580>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	7ddb      	ldrb	r3, [r3, #23]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	7d9b      	ldrb	r3, [r3, #22]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d112      	bne.n	8001f32 <find_volume+0x20a>
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f12:	061a      	lsls	r2, r3, #24
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f20:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001f24:	0212      	lsls	r2, r2, #8
 8001f26:	4313      	orrs	r3, r2
 8001f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	7c1a      	ldrb	r2, [r3, #16]
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <find_volume+0x234>
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d001      	beq.n	8001f5c <find_volume+0x234>
		return FR_NO_FILESYSTEM;
 8001f58:	230d      	movs	r3, #13
 8001f5a:	e1a5      	b.n	80022a8 <find_volume+0x580>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f62:	461a      	mov	r2, r3
 8001f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8001f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6e:	7b5a      	ldrb	r2, [r3, #13]
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <find_volume+0x26e>
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f86:	461a      	mov	r2, r3
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <find_volume+0x272>
		return FR_NO_FILESYSTEM;
 8001f96:	230d      	movs	r3, #13
 8001f98:	e186      	b.n	80022a8 <find_volume+0x580>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	7c9b      	ldrb	r3, [r3, #18]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa4:	7c5b      	ldrb	r3, [r3, #17]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb0:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <find_volume+0x2a8>
		return FR_NO_FILESYSTEM;
 8001fc4:	230d      	movs	r3, #13
 8001fc6:	e16f      	b.n	80022a8 <find_volume+0x580>
 8001fc8:	20000098 	.word	0x20000098
 8001fcc:	0800e37c 	.word	0x0800e37c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	7cdb      	ldrb	r3, [r3, #19]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d112      	bne.n	8002012 <find_volume+0x2ea>
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ff2:	061a      	lsls	r2, r3, #24
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002000:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002004:	0212      	lsls	r2, r2, #8
 8002006:	4313      	orrs	r3, r2
 8002008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800200a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800200e:	4313      	orrs	r3, r2
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	7bdb      	ldrb	r3, [r3, #15]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21a      	sxth	r2, r3
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	7b9b      	ldrb	r3, [r3, #14]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <find_volume+0x308>
 800202c:	230d      	movs	r3, #13
 800202e:	e13b      	b.n	80022a8 <find_volume+0x580>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	4413      	add	r3, r2
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800203c:	0912      	lsrs	r2, r2, #4
 800203e:	b292      	uxth	r2, r2
 8002040:	4413      	add	r3, r2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	429a      	cmp	r2, r3
 800204a:	d201      	bcs.n	8002050 <find_volume+0x328>
 800204c:	230d      	movs	r3, #13
 800204e:	e12b      	b.n	80022a8 <find_volume+0x580>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002058:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800205c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <find_volume+0x344>
 8002068:	230d      	movs	r3, #13
 800206a:	e11d      	b.n	80022a8 <find_volume+0x580>
	fmt = FS_FAT12;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002078:	4293      	cmp	r3, r2
 800207a:	d902      	bls.n	8002082 <find_volume+0x35a>
 800207c:	2302      	movs	r3, #2
 800207e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002088:	4293      	cmp	r3, r2
 800208a:	d902      	bls.n	8002092 <find_volume+0x36a>
 800208c:	2303      	movs	r3, #3
 800208e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80020a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a8:	441a      	add	r2, r3
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80020b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	441a      	add	r2, r3
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80020bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d121      	bne.n	8002108 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <find_volume+0x3aa>
 80020ce:	230d      	movs	r3, #13
 80020d0:	e0ea      	b.n	80022a8 <find_volume+0x580>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80020d8:	061a      	lsls	r2, r3, #24
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	4313      	orrs	r3, r2
 80020ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80020f4:	431a      	orrs	r2, r3
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
 8002106:	e025      	b.n	8002154 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <find_volume+0x3ee>
 8002112:	230d      	movs	r3, #13
 8002114:	e0c8      	b.n	80022a8 <find_volume+0x580>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800211c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211e:	441a      	add	r2, r3
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800212a:	2b02      	cmp	r3, #2
 800212c:	d104      	bne.n	8002138 <find_volume+0x410>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	e00c      	b.n	8002152 <find_volume+0x42a>
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	085a      	lsrs	r2, r3, #1
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002160:	0a5b      	lsrs	r3, r3, #9
 8002162:	429a      	cmp	r2, r3
 8002164:	d201      	bcs.n	800216a <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8002166:	230d      	movs	r3, #13
 8002168:	e09e      	b.n	80022a8 <find_volume+0x580>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002170:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800218c:	2b03      	cmp	r3, #3
 800218e:	d177      	bne.n	8002280 <find_volume+0x558>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d16a      	bne.n	8002280 <find_volume+0x558>
		&& move_window(fs, bsect + 1) == FR_OK)
 80021aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ac:	3301      	adds	r3, #1
 80021ae:	4619      	mov	r1, r3
 80021b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021b2:	f7fe fd3a 	bl	8000c2a <move_window>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d161      	bne.n	8002280 <find_volume+0x558>
	{
		fs->fsi_flag = 0;
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <find_volume+0x588>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d14f      	bne.n	8002280 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	061a      	lsls	r2, r3, #24
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	789b      	ldrb	r3, [r3, #2]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	4313      	orrs	r3, r2
 80021ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f0:	7852      	ldrb	r2, [r2, #1]
 80021f2:	0212      	lsls	r2, r2, #8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <find_volume+0x58c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d13e      	bne.n	8002280 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8002208:	061a      	lsls	r2, r3, #24
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	4313      	orrs	r3, r2
 8002214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002216:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002220:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8002224:	4313      	orrs	r3, r2
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <find_volume+0x590>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d129      	bne.n	8002280 <find_volume+0x558>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8002232:	061a      	lsls	r2, r3, #24
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	4313      	orrs	r3, r2
 800223e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002240:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8002244:	0212      	lsls	r2, r2, #8
 8002246:	4313      	orrs	r3, r2
 8002248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800224e:	431a      	orrs	r2, r3
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800225c:	061a      	lsls	r2, r3, #24
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	4313      	orrs	r3, r2
 8002268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800226a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800226e:	0212      	lsls	r2, r2, #8
 8002270:	4313      	orrs	r3, r2
 8002272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002274:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8002278:	431a      	orrs	r2, r3
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <find_volume+0x594>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <find_volume+0x594>)
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <find_volume+0x594>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80022a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022a2:	f7fe fc4f 	bl	8000b44 <clear_lock>
#endif

	return FR_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3758      	adds	r7, #88	; 0x58
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	ffffaa55 	.word	0xffffaa55
 80022b4:	41615252 	.word	0x41615252
 80022b8:	61417272 	.word	0x61417272
 80022bc:	2000009c 	.word	0x2000009c

080022c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d022      	beq.n	8002318 <validate+0x58>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <validate+0x58>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <validate+0x58>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d10c      	bne.n	8002318 <validate+0x58>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002304:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f959 	bl	80005c0 <disk_status>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8002318:	2309      	movs	r3, #9
 800231a:	e000      	b.n	800231e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc44 	bl	8001bcc <get_ldnumber>
 8002344:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da01      	bge.n	8002350 <f_mount+0x28>
 800234c:	230b      	movs	r3, #11
 800234e:	e031      	b.n	80023b4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <f_mount+0x94>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	61bb      	str	r3, [r7, #24]
	myprintf("inside cfs (%i)", cfs);
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <f_mount+0x98>)
 800235e:	f001 f843 	bl	80033e8 <myprintf>
	if (cfs) {
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <f_mount+0x4e>

#if _FS_LOCK
		clear_lock(cfs);
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f7fe fbeb 	bl	8000b44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <f_mount+0x94>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <f_mount+0x72>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <f_mount+0x76>
 800239a:	2300      	movs	r3, #0
 800239c:	e00a      	b.n	80023b4 <f_mount+0x8c>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2200      	movs	r2, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fcbd 	bl	8001d28 <find_volume>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000098 	.word	0x20000098
 80023c0:	0800e390 	.word	0x0800e390

080023c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023d0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023da:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80023de:	6019      	str	r1, [r3, #0]
 80023e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023e4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80023e8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80023ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023ee:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <f_open+0x38>
 80023f8:	2309      	movs	r3, #9
 80023fa:	e257      	b.n	80028ac <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 80023fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002400:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800240c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002410:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002414:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002418:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8002424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002428:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	f107 0108 	add.w	r1, r7, #8
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fc71 	bl	8001d28 <find_volume>
 8002446:	4603      	mov	r3, r0
 8002448:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800244c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 8229 	bne.w	80028a8 <f_open+0x4e4>
		INIT_BUF(dj);
 8002456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800245a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800245e:	f107 0214 	add.w	r2, r7, #20
 8002462:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8002466:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800246a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f107 0320 	add.w	r3, r7, #32
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb3a 	bl	8001af0 <follow_path>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8002482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002486:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800248a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800248e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002492:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800249a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <f_open+0xe6>
				res = FR_INVALID_NAME;
 80024a2:	2306      	movs	r3, #6
 80024a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80024a8:	e015      	b.n	80024d6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80024aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80024ae:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f9ac 	bl	8000828 <chk_lock>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80024d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80024da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f003 031c 	and.w	r3, r3, #28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80e6 	beq.w	80026b6 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80024ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d027      	beq.n	8002542 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80024f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d10e      	bne.n	8002518 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80024fa:	f7fe fa03 	bl	8000904 <enq_lock>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <f_open+0x14e>
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f9f8 	bl	80018fe <dir_register>
 800250e:	4603      	mov	r3, r0
 8002510:	e000      	b.n	8002514 <f_open+0x150>
 8002512:	2312      	movs	r3, #18
 8002514:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800251c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002520:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002524:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8002530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002534:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800253c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002540:	e017      	b.n	8002572 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002542:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002546:	330b      	adds	r3, #11
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f003 0311 	and.w	r3, r3, #17
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <f_open+0x196>
					res = FR_DENIED;
 8002552:	2307      	movs	r3, #7
 8002554:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002558:	e00b      	b.n	8002572 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800255a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800255e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <f_open+0x1ae>
						res = FR_EXIST;
 800256c:	2308      	movs	r3, #8
 800256e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002572:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80c1 	bne.w	80026fe <f_open+0x33a>
 800257c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002580:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b7 	beq.w	80026fe <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8002590:	f7fe f8c6 	bl	8000720 <get_fattime>
 8002594:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8002598:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800259c:	330e      	adds	r3, #14
 800259e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025b4:	330f      	adds	r3, #15
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025be:	0c1a      	lsrs	r2, r3, #16
 80025c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025c4:	3310      	adds	r3, #16
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025ce:	0e1a      	lsrs	r2, r3, #24
 80025d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025d4:	3311      	adds	r3, #17
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80025da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025de:	330b      	adds	r3, #11
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80025e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025e8:	331c      	adds	r3, #28
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025f2:	331d      	adds	r3, #29
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025fc:	331e      	adds	r3, #30
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002606:	331f      	adds	r3, #31
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800260c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002610:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002618:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f8ca 	bl	80017b6 <ld_clust>
 8002622:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8002626:	2100      	movs	r1, #0
 8002628:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800262c:	f7ff f8f1 	bl	8001812 <st_clust>
				dj.fs->wflag = 1;
 8002630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002634:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8002642:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002646:	2b00      	cmp	r3, #0
 8002648:	d059      	beq.n	80026fe <f_open+0x33a>
					dw = dj.fs->winsect;
 800264a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800264e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002652:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002656:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800265a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800265e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002662:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800266a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fda0 	bl	80011b4 <remove_chain>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800267a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d13d      	bne.n	80026fe <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8002682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002686:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800268a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8002692:	3a01      	subs	r2, #1
 8002694:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8002698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800269c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80026a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fabe 	bl	8000c2a <move_window>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80026b4:	e023      	b.n	80026fe <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80026b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11f      	bne.n	80026fe <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80026be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80026c2:	330b      	adds	r3, #11
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <f_open+0x312>
					res = FR_NO_FILE;
 80026ce:	2304      	movs	r3, #4
 80026d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80026d4:	e013      	b.n	80026fe <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80026d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80026da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <f_open+0x33a>
 80026e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80026ec:	330b      	adds	r3, #11
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <f_open+0x33a>
						res = FR_DENIED;
 80026f8:	2307      	movs	r3, #7
 80026fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80026fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002702:	2b00      	cmp	r3, #0
 8002704:	d153      	bne.n	80027ae <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800270a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8002718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800271c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002720:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002724:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8002730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002734:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002738:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800273c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002744:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800274e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002752:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800275c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002764:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe f8e3 	bl	800094c <inc_lock>
 8002786:	4602      	mov	r2, r0
 8002788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800278c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8002796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800279a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <f_open+0x3ea>
 80027a8:	2302      	movs	r3, #2
 80027aa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80027ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d178      	bne.n	80028a8 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80027b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80027c4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80027ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80027de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80027e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ea:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe ffe1 	bl	80017b6 <ld_clust>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8002804:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002808:	331f      	adds	r3, #31
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061a      	lsls	r2, r3, #24
 800280e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002812:	331e      	adds	r3, #30
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800281e:	321d      	adds	r2, #29
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800282a:	321c      	adds	r2, #28
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002834:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800283e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002842:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800284e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002852:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800285e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002862:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800286e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002872:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002876:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800287a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800287e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8002888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800288c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002896:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800289a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800289e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80028a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08c      	sub	sp, #48	; 0x30
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fcf6 	bl	80022c0 <validate>
 80028d4:	4603      	mov	r3, r0
 80028d6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <f_read+0x2c>
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	e150      	b.n	8002b84 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80028f2:	e147      	b.n	8002b84 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8002902:	2307      	movs	r3, #7
 8002904:	e13e      	b.n	8002b84 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	429a      	cmp	r2, r3
 800291c:	f240 812d 	bls.w	8002b7a <f_read+0x2c4>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8002924:	e129      	b.n	8002b7a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80f2 	bne.w	8002b1a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800293c:	0a5b      	lsrs	r3, r3, #9
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002946:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800294a:	3b01      	subs	r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4013      	ands	r3, r2
 8002950:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d139      	bne.n	80029cc <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296a:	e018      	b.n	800299e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800297c:	4619      	mov	r1, r3
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fe fd0f 	bl	80013a2 <clmt_clust>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002986:	e00a      	b.n	800299e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7fe fa44 	bl	8000e24 <get_fat>
 800299c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d805      	bhi.n	80029b0 <f_read+0xfa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0e9      	b.n	8002b84 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b6:	d105      	bne.n	80029c4 <f_read+0x10e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0df      	b.n	8002b84 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fe fa00 	bl	8000de0 <clust2sect>
 80029e0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <f_read+0x13e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0c7      	b.n	8002b84 <f_read+0x2ce>
			sect += csect;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d046      	beq.n	8002a96 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8002a08:	7dfa      	ldrb	r2, [r7, #23]
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	4413      	add	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002a14:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d908      	bls.n	8002a2e <f_read+0x178>
					cc = fp->fs->csize - csect;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002a26:	461a      	mov	r2, r3
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a34:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	f7fd fdff 	bl	8000640 <disk_read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002a50:	2301      	movs	r3, #1
 8002a52:	e097      	b.n	8002b84 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <f_read+0x1d8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90d      	bls.n	8002a8e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4413      	add	r3, r2
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fe51 	bl	8000730 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	025b      	lsls	r3, r3, #9
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8002a94:	e05b      	b.n	8002b4e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d037      	beq.n	8002b12 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01d      	beq.n	8002aec <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f7fd fddc 	bl	8000680 <disk_write>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e054      	b.n	8002b84 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002af2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	2301      	movs	r3, #1
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	f7fd fda0 	bl	8000640 <disk_read>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e038      	b.n	8002b84 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8002b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <f_read+0x280>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b46:	4619      	mov	r1, r3
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f7fd fdf1 	bl	8000730 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	441a      	add	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f aed2 	bne.w	8002926 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fb8b 	bl	80022c0 <validate>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <f_write+0x2c>
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	e192      	b.n	8002ede <f_write+0x352>
	if (fp->err)							/* Check error */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002bc8:	e189      	b.n	8002ede <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8002bd8:	2307      	movs	r3, #7
 8002bda:	e180      	b.n	8002ede <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f080 8158 	bcs.w	8002ea2 <f_write+0x316>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8002bf6:	e154      	b.n	8002ea2 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8114 	bne.w	8002e30 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c18:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8002c24:	7dbb      	ldrb	r3, [r7, #22]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d151      	bne.n	8002cce <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d121      	bne.n	8002c86 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fb0c 	bl	8001268 <create_chain>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24
 8002c52:	e018      	b.n	8002c86 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe fb9b 	bl	80013a2 <clmt_clust>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24
 8002c6e:	e00a      	b.n	8002c86 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7fe faf2 	bl	8001268 <create_chain>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 810f 	beq.w	8002eac <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <f_write+0x114>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e11e      	b.n	8002ede <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca6:	d105      	bne.n	8002cb4 <f_write+0x128>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e114      	b.n	8002ede <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <f_write+0x142>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f7fd fcc6 	bl	8000680 <disk_write>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0eb      	b.n	8002ede <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7fe f85a 	bl	8000de0 <clust2sect>
 8002d2c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <f_write+0x1b4>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0ce      	b.n	8002ede <f_write+0x352>
			sect += csect;
 8002d40:	7dbb      	ldrb	r3, [r7, #22]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0a5b      	lsrs	r3, r3, #9
 8002d4c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d048      	beq.n	8002de6 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8002d54:	7dba      	ldrb	r2, [r7, #22]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002d60:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d908      	bls.n	8002d7a <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d6e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002d72:	461a      	mov	r2, r3
 8002d74:	7dbb      	ldrb	r3, [r7, #22]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d80:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	69b9      	ldr	r1, [r7, #24]
 8002d8a:	f7fd fc79 	bl	8000680 <disk_write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e09e      	b.n	8002ede <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d916      	bls.n	8002dde <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd fcb2 	bl	8000730 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	623b      	str	r3, [r7, #32]
				continue;
 8002de4:	e047      	b.n	8002e76 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d01a      	beq.n	8002e28 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d212      	bcs.n	8002e28 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e08:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	2301      	movs	r3, #1
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	f7fd fc15 	bl	8000640 <disk_read>
 8002e16:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002e24:	2301      	movs	r3, #1
 8002e26:	e05a      	b.n	8002ede <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e3e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d901      	bls.n	8002e4c <f_write+0x2c0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc66 	bl	8000730 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	441a      	add	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	441a      	add	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f aea7 	bne.w	8002bf8 <f_write+0x6c>
 8002eaa:	e000      	b.n	8002eae <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002eac:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d905      	bls.n	8002eca <f_write+0x33e>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002ed0:	f043 0320 	orr.w	r3, r3, #32
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff f9e6 	bl	80022c0 <validate>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80a8 	bne.w	8003050 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a0 	beq.w	8003050 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d019      	beq.n	8002f52 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002f30:	2301      	movs	r3, #1
 8002f32:	f7fd fba5 	bl	8000680 <disk_write>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e088      	b.n	8003052 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f7fd fe62 	bl	8000c2a <move_window>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d16f      	bne.n	8003050 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002f76:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	330b      	adds	r3, #11
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	330b      	adds	r3, #11
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	331c      	adds	r3, #28
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	331d      	adds	r3, #29
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fb2:	0c1a      	lsrs	r2, r3, #16
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	331e      	adds	r3, #30
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fc2:	0e1a      	lsrs	r2, r3, #24
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	331f      	adds	r3, #31
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6938      	ldr	r0, [r7, #16]
 8002fd6:	f7fe fc1c 	bl	8001812 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8002fda:	f7fd fba1 	bl	8000720 <get_fattime>
 8002fde:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3316      	adds	r3, #22
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3317      	adds	r3, #23
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0c1a      	lsrs	r2, r3, #16
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3318      	adds	r3, #24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0e1a      	lsrs	r2, r3, #24
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3319      	adds	r3, #25
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3312      	adds	r3, #18
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3313      	adds	r3, #19
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003028:	f023 0320 	bic.w	r3, r3, #32
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fe1d 	bl	8000c86 <sync_fs>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8003050:	7dfb      	ldrb	r3, [r7, #23]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff3f 	bl	8002ee6 <f_sync>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff f924 	bl	80022c0 <validate>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fd17 	bl	8000abc <dec_lock>
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b08e      	sub	sp, #56	; 0x38
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	2200      	movs	r2, #0
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe32 	bl	8001d28 <find_volume>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80030d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 80af 	bne.w	8003238 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80030e6:	3b02      	subs	r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d805      	bhi.n	80030f8 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e09f      	b.n	8003238 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80030fe:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8003104:	7efb      	ldrb	r3, [r7, #27]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d125      	bne.n	8003156 <f_getfree+0xac>
				clst = 2;
 800310a:	2302      	movs	r3, #2
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800310e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003110:	69f8      	ldr	r0, [r7, #28]
 8003112:	f7fd fe87 	bl	8000e24 <get_fat>
 8003116:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311e:	d103      	bne.n	8003128 <f_getfree+0x7e>
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003126:	e077      	b.n	8003218 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d103      	bne.n	8003136 <f_getfree+0x8c>
 800312e:	2302      	movs	r3, #2
 8003130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003134:	e070      	b.n	8003218 <f_getfree+0x16e>
					if (stat == 0) n++;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <f_getfree+0x98>
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	3301      	adds	r3, #1
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	3301      	adds	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d3dc      	bcc.n	800310e <f_getfree+0x64>
 8003154:	e060      	b.n	8003218 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d112      	bne.n	800319a <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	62ba      	str	r2, [r7, #40]	; 0x28
 800317a:	4619      	mov	r1, r3
 800317c:	69f8      	ldr	r0, [r7, #28]
 800317e:	f7fd fd54 	bl	8000c2a <move_window>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8003188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800318c:	2b00      	cmp	r3, #0
 800318e:	d142      	bne.n	8003216 <f_getfree+0x16c>
						p = fs->win.d8;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800319a:	7efb      	ldrb	r3, [r7, #27]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d115      	bne.n	80031cc <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	3301      	adds	r3, #1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <f_getfree+0x114>
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	3301      	adds	r3, #1
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	3302      	adds	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3b02      	subs	r3, #2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e01d      	b.n	8003208 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	3303      	adds	r3, #3
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	061a      	lsls	r2, r3, #24
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	4313      	orrs	r3, r2
 80031de:	6a3a      	ldr	r2, [r7, #32]
 80031e0:	3201      	adds	r2, #1
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	0212      	lsls	r2, r2, #8
 80031e6:	4313      	orrs	r3, r2
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <f_getfree+0x152>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	3301      	adds	r3, #1
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	3304      	adds	r3, #4
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3b04      	subs	r3, #4
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	3b01      	subs	r3, #1
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ac      	bne.n	800316e <f_getfree+0xc4>
 8003214:	e000      	b.n	8003218 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8003216:	bf00      	nop
			}
			fs->free_clust = n;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8003238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800323c:	4618      	mov	r0, r3
 800323e:	3738      	adds	r7, #56	; 0x38
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8003258:	e01b      	b.n	8003292 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	f107 0114 	add.w	r1, r7, #20
 8003262:	2201      	movs	r2, #1
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fb26 	bl	80028b6 <f_read>
		if (rc != 1) break;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d116      	bne.n	800329e <f_gets+0x5a>
		c = s[0];
 8003270:	7d3b      	ldrb	r3, [r7, #20]
 8003272:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b0d      	cmp	r3, #13
 8003278:	d100      	bne.n	800327c <f_gets+0x38>
 800327a:	e00a      	b.n	8003292 <f_gets+0x4e>
		*p++ = c;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	61ba      	str	r2, [r7, #24]
 8003282:	7dfa      	ldrb	r2, [r7, #23]
 8003284:	701a      	strb	r2, [r3, #0]
		n++;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b0a      	cmp	r3, #10
 8003290:	d007      	beq.n	80032a2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3b01      	subs	r3, #1
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	dbde      	blt.n	800325a <f_gets+0x16>
 800329c:	e002      	b.n	80032a4 <f_gets+0x60>
		if (rc != 1) break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80032a2:	bf00      	nop
	}
	*p = 0;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <f_gets+0x70>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	e000      	b.n	80032b6 <f_gets+0x72>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032d8:	7a5b      	ldrb	r3, [r3, #9]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d831      	bhi.n	8003344 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032e2:	7a5b      	ldrb	r3, [r3, #9]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032f0:	7a5b      	ldrb	r3, [r3, #9]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003300:	7a5b      	ldrb	r3, [r3, #9]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003308:	4413      	add	r3, r2
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003310:	7a5b      	ldrb	r3, [r3, #9]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	b2d1      	uxtb	r1, r2
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 800331a:	7251      	strb	r1, [r2, #9]
 800331c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800331e:	7dbb      	ldrb	r3, [r7, #22]
 8003320:	3330      	adds	r3, #48	; 0x30
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3301      	adds	r3, #1
 800332c:	223a      	movs	r2, #58	; 0x3a
 800332e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3302      	adds	r3, #2
 8003334:	222f      	movs	r2, #47	; 0x2f
 8003336:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	3303      	adds	r3, #3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200000b8 	.word	0x200000b8

08003358 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffaa 	bl	80032c0 <FATFS_LinkDriverEx>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003382:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003386:	4909      	ldr	r1, [pc, #36]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003392:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	46020c00 	.word	0x46020c00

080033b0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033be:	4909      	ldr	r1, [pc, #36]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	46020c00 	.word	0x46020c00

080033e8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...){
 80033e8:	b40f      	push	{r0, r1, r2, r3}
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033fe:	480b      	ldr	r0, [pc, #44]	; (800342c <myprintf+0x44>)
 8003400:	f00a fb06 	bl	800da10 <vsniprintf>
	va_end(args);

	int len= strlen(buffer);
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <myprintf+0x44>)
 8003406:	f7fc ff43 	bl	8000290 <strlen>
 800340a:	4603      	mov	r3, r0
 800340c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b29a      	uxth	r2, r3
 8003412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003416:	4905      	ldr	r1, [pc, #20]	; (800342c <myprintf+0x44>)
 8003418:	4805      	ldr	r0, [pc, #20]	; (8003430 <myprintf+0x48>)
 800341a:	f009 f98f 	bl	800c73c <HAL_UART_Transmit>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003428:	b004      	add	sp, #16
 800342a:	4770      	bx	lr
 800342c:	20000678 	.word	0x20000678
 8003430:	200001e0 	.word	0x200001e0

08003434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800343c:	f001 fc10 	bl	8004c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003440:	f000 f958 	bl	80036f4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8003444:	f000 f9b7 	bl	80037b6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003448:	f000 fb66 	bl	8003b18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800344c:	f000 f9c2 	bl	80037d4 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8003450:	f000 fa30 	bl	80038b4 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8003454:	f000 fab6 	bl	80039c4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003458:	f000 faea 	bl	8003a30 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 800345c:	f000 fb34 	bl	8003ac8 <MX_USB_OTG_HS_HCD_Init>
  MX_MEMORYMAP_Init();
 8003460:	f000 fa3b 	bl	80038da <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 8003464:	f000 fa40 	bl	80038e8 <MX_SPI1_Init>
//  MX_FileX_Init();
  /* USER CODE BEGIN 2 */
  MX_FATFS_Init();
 8003468:	f7fd f948 	bl	80006fc <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo ~\r \n\r\n");
 800346c:	488d      	ldr	r0, [pc, #564]	; (80036a4 <main+0x270>)
 800346e:	f7ff ffbb 	bl	80033e8 <myprintf>
  HAL_Delay(1000);
 8003472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003476:	f001 fc77 	bl	8004d68 <HAL_Delay>

  FATFS FatFs;
  FIL fil;
  FRESULT fres;

  fres= f_mount(&FatFs, "", 1);
 800347a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800347e:	2201      	movs	r2, #1
 8003480:	4989      	ldr	r1, [pc, #548]	; (80036a8 <main+0x274>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe ff50 	bl	8002328 <f_mount>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  if(fres!= FR_OK)
 800348e:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <main+0x70>
  {
	  myprintf("f_mount error (%i) \r\n", fres);
 8003496:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800349a:	4619      	mov	r1, r3
 800349c:	4883      	ldr	r0, [pc, #524]	; (80036ac <main+0x278>)
 800349e:	f7ff ffa3 	bl	80033e8 <myprintf>
	  while(1);
 80034a2:	e7fe      	b.n	80034a2 <main+0x6e>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres= f_getfree("", &free_clusters, &getFreeFs);
 80034a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	4619      	mov	r1, r3
 80034ae:	487e      	ldr	r0, [pc, #504]	; (80036a8 <main+0x274>)
 80034b0:	f7ff fdfb 	bl	80030aa <f_getfree>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  if(fres != FR_OK){
 80034ba:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <main+0x9c>
	  myprintf("f_getfree error (%i)\r\n",fres);
 80034c2:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80034c6:	4619      	mov	r1, r3
 80034c8:	4879      	ldr	r0, [pc, #484]	; (80036b0 <main+0x27c>)
 80034ca:	f7ff ff8d 	bl	80033e8 <myprintf>
	  while(1);
 80034ce:	e7fe      	b.n	80034ce <main+0x9a>
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80034d0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80034d4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034de:	3b02      	subs	r3, #2
 80034e0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80034e4:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
  free_sectors = free_clusters * getFreeFs->csize;
 80034f6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80034fa:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003504:	461a      	mov	r2, r3
 8003506:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800350a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8003518:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800351c:	0859      	lsrs	r1, r3, #1
 800351e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	461a      	mov	r2, r3
 8003526:	4863      	ldr	r0, [pc, #396]	; (80036b4 <main+0x280>)
 8003528:	f7ff ff5e 	bl	80033e8 <myprintf>

  fres = f_open(&fil, "/write.txt", FA_READ);
 800352c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003530:	2201      	movs	r2, #1
 8003532:	4961      	ldr	r1, [pc, #388]	; (80036b8 <main+0x284>)
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe ff45 	bl	80023c4 <f_open>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    if (fres != FR_OK) {
 8003540:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <main+0x11c>
  	myprintf("f_open error (%i)\r\n");
 8003548:	485c      	ldr	r0, [pc, #368]	; (80036bc <main+0x288>)
 800354a:	f7ff ff4d 	bl	80033e8 <myprintf>
  	while(1);
 800354e:	e7fe      	b.n	800354e <main+0x11a>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8003550:	485b      	ldr	r0, [pc, #364]	; (80036c0 <main+0x28c>)
 8003552:	f7ff ff49 	bl	80033e8 <myprintf>
    BYTE readBuf[30];

    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8003556:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	211e      	movs	r1, #30
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe6f 	bl	8003244 <f_gets>
 8003566:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498
      if(rres != 0) {
 800356a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <main+0x14c>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4619      	mov	r1, r3
 8003578:	4852      	ldr	r0, [pc, #328]	; (80036c4 <main+0x290>)
 800357a:	f7ff ff35 	bl	80033e8 <myprintf>
 800357e:	e005      	b.n	800358c <main+0x158>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 8003580:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8003584:	4619      	mov	r1, r3
 8003586:	4850      	ldr	r0, [pc, #320]	; (80036c8 <main+0x294>)
 8003588:	f7ff ff2e 	bl	80033e8 <myprintf>
      }
      f_close(&fil);
 800358c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fd62 	bl	800305a <f_close>

	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359a:	221a      	movs	r2, #26
 800359c:	494b      	ldr	r1, [pc, #300]	; (80036cc <main+0x298>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe ff10 	bl	80023c4 <f_open>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	if(fres == FR_OK) {
 80035aa:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <main+0x186>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 80035b2:	4847      	ldr	r0, [pc, #284]	; (80036d0 <main+0x29c>)
 80035b4:	f7ff ff18 	bl	80033e8 <myprintf>
 80035b8:	e005      	b.n	80035c6 <main+0x192>
	} else {
	myprintf("f_open error (%i)\r\n", fres);
 80035ba:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80035be:	4619      	mov	r1, r3
 80035c0:	483e      	ldr	r0, [pc, #248]	; (80036bc <main+0x288>)
 80035c2:	f7ff ff11 	bl	80033e8 <myprintf>
	}
	strncpy((char*)readBuf, "a new file is made!", 19);
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	4a42      	ldr	r2, [pc, #264]	; (80036d4 <main+0x2a0>)
 80035cc:	461c      	mov	r4, r3
 80035ce:	4615      	mov	r5, r2
 80035d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	8022      	strh	r2, [r4, #0]
 80035da:	3402      	adds	r4, #2
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	7023      	strb	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	f107 0108 	add.w	r1, r7, #8
 80035e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80035ea:	2213      	movs	r2, #19
 80035ec:	f7ff face 	bl	8002b8c <f_write>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
	  if(fres == FR_OK) {
 80035f6:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <main+0x1de>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80035fe:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8003602:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	4833      	ldr	r0, [pc, #204]	; (80036d8 <main+0x2a4>)
 800360c:	f7ff feec 	bl	80033e8 <myprintf>
 8003610:	e002      	b.n	8003618 <main+0x1e4>
	  } else {
		myprintf("f_write error (%i)\r\n");
 8003612:	4832      	ldr	r0, [pc, #200]	; (80036dc <main+0x2a8>)
 8003614:	f7ff fee8 	bl	80033e8 <myprintf>
	  }

	  f_close(&fil);
 8003618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fd1c 	bl	800305a <f_close>

	  f_mount(NULL, "", 0);
 8003622:	2200      	movs	r2, #0
 8003624:	4920      	ldr	r1, [pc, #128]	; (80036a8 <main+0x274>)
 8003626:	2000      	movs	r0, #0
 8003628:	f7fe fe7e 	bl	8002328 <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800362c:	2201      	movs	r2, #1
 800362e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003632:	482b      	ldr	r0, [pc, #172]	; (80036e0 <main+0x2ac>)
 8003634:	f003 fdb0 	bl	8007198 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8003638:	482a      	ldr	r0, [pc, #168]	; (80036e4 <main+0x2b0>)
 800363a:	f002 f9fb 	bl	8005a34 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800363e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003642:	4828      	ldr	r0, [pc, #160]	; (80036e4 <main+0x2b0>)
 8003644:	f002 fad4 	bl	8005bf0 <HAL_ADC_PollForConversion>
	  raw= HAL_ADC_GetValue(&hadc1);
 8003648:	4826      	ldr	r0, [pc, #152]	; (80036e4 <main+0x2b0>)
 800364a:	f002 fc23 	bl	8005e94 <HAL_ADC_GetValue>
 800364e:	4603      	mov	r3, r0
 8003650:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003654:	2200      	movs	r2, #0
 8003656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800365a:	4821      	ldr	r0, [pc, #132]	; (80036e0 <main+0x2ac>)
 800365c:	f003 fd9c 	bl	8007198 <HAL_GPIO_WritePin>
	  sprintf(msg, "%hu\r\n", raw);
 8003660:	f8b7 2496 	ldrh.w	r2, [r7, #1174]	; 0x496
 8003664:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <main+0x2b4>)
 800366a:	4618      	mov	r0, r3
 800366c:	f00a f984 	bl	800d978 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003670:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc fe0b 	bl	8000290 <strlen>
 800367a:	4603      	mov	r3, r0
 800367c:	b29a      	uxth	r2, r3
 800367e:	f207 418c 	addw	r1, r7, #1164	; 0x48c
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	4819      	ldr	r0, [pc, #100]	; (80036ec <main+0x2b8>)
 8003688:	f009 f858 	bl	800c73c <HAL_UART_Transmit>
	  HAL_Delay(1);
 800368c:	2001      	movs	r0, #1
 800368e:	f001 fb6b 	bl	8004d68 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	4816      	ldr	r0, [pc, #88]	; (80036f0 <main+0x2bc>)
 8003696:	f003 fd97 	bl	80071c8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800369a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369e:	f001 fb63 	bl	8004d68 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80036a2:	e7c3      	b.n	800362c <main+0x1f8>
 80036a4:	0800e3d4 	.word	0x0800e3d4
 80036a8:	0800e3ec 	.word	0x0800e3ec
 80036ac:	0800e3f0 	.word	0x0800e3f0
 80036b0:	0800e408 	.word	0x0800e408
 80036b4:	0800e420 	.word	0x0800e420
 80036b8:	0800e468 	.word	0x0800e468
 80036bc:	0800e474 	.word	0x0800e474
 80036c0:	0800e488 	.word	0x0800e488
 80036c4:	0800e4b8 	.word	0x0800e4b8
 80036c8:	0800e4e4 	.word	0x0800e4e4
 80036cc:	0800e4f8 	.word	0x0800e4f8
 80036d0:	0800e504 	.word	0x0800e504
 80036d4:	0800e534 	.word	0x0800e534
 80036d8:	0800e548 	.word	0x0800e548
 80036dc:	0800e56c 	.word	0x0800e56c
 80036e0:	42020000 	.word	0x42020000
 80036e4:	200000c4 	.word	0x200000c4
 80036e8:	0800e584 	.word	0x0800e584
 80036ec:	200001e0 	.word	0x200001e0
 80036f0:	42020400 	.word	0x42020400

080036f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b09e      	sub	sp, #120	; 0x78
 80036f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fa:	f107 0318 	add.w	r3, r7, #24
 80036fe:	2260      	movs	r2, #96	; 0x60
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f00a f992 	bl	800da2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003708:	463b      	mov	r3, r7
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	611a      	str	r2, [r3, #16]
 8003716:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8003718:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800371c:	f003 fdf4 	bl	8007308 <HAL_PWREx_ControlVoltageScaling>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003726:	f000 fad5 	bl	8003cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800372a:	2312      	movs	r3, #18
 800372c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003734:	2310      	movs	r3, #16
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003738:	2301      	movs	r3, #1
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800373c:	2310      	movs	r3, #16
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003744:	2302      	movs	r3, #2
 8003746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003748:	2301      	movs	r3, #1
 800374a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800374c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003750:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003752:	2303      	movs	r3, #3
 8003754:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003756:	2308      	movs	r3, #8
 8003758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800375a:	2308      	movs	r3, #8
 800375c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800375e:	2302      	movs	r3, #2
 8003760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003762:	2302      	movs	r3, #2
 8003764:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8003766:	230c      	movs	r3, #12
 8003768:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800376e:	f107 0318 	add.w	r3, r7, #24
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fef2 	bl	800755c <HAL_RCC_OscConfig>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800377e:	f000 faa9 	bl	8003cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003782:	231f      	movs	r3, #31
 8003784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800379a:	463b      	mov	r3, r7
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 fdb8 	bl	8008314 <HAL_RCC_ClockConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80037aa:	f000 fa93 	bl	8003cd4 <Error_Handler>
  }
}
 80037ae:	bf00      	nop
 80037b0:	3778      	adds	r7, #120	; 0x78
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80037ba:	f003 fe91 	bl	80074e0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80037be:	2002      	movs	r0, #2
 80037c0:	f003 fe2e 	bl	8007420 <HAL_PWREx_ConfigSupply>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SystemPower_Config+0x18>
  {
    Error_Handler();
 80037ca:	f000 fa83 	bl	8003cd4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037da:	463b      	mov	r3, r7
 80037dc:	2220      	movs	r2, #32
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f00a f923 	bl	800da2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <MX_ADC1_Init+0xd4>)
 80037e8:	4a30      	ldr	r2, [pc, #192]	; (80038ac <MX_ADC1_Init+0xd8>)
 80037ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037ec:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <MX_ADC1_Init+0xd4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <MX_ADC1_Init+0xd4>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <MX_ADC1_Init+0xd4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800380a:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <MX_ADC1_Init+0xd4>)
 800380c:	2204      	movs	r2, #4
 800380e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003812:	2200      	movs	r2, #0
 8003814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003820:	2201      	movs	r2, #1
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003826:	2200      	movs	r2, #0
 8003828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <MX_ADC1_Init+0xd4>)
 800382e:	2200      	movs	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <MX_ADC1_Init+0xd4>)
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003842:	2200      	movs	r2, #0
 8003844:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <MX_ADC1_Init+0xd4>)
 800384e:	2200      	movs	r2, #0
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003854:	2200      	movs	r2, #0
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <MX_ADC1_Init+0xd4>)
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003860:	4811      	ldr	r0, [pc, #68]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003862:	f001 fdff 	bl	8005464 <HAL_ADC_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800386c:	f000 fa32 	bl	8003cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <MX_ADC1_Init+0xdc>)
 8003872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003874:	2306      	movs	r3, #6
 8003876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800387c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003880:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003882:	2304      	movs	r3, #4
 8003884:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800388a:	463b      	mov	r3, r7
 800388c:	4619      	mov	r1, r3
 800388e:	4806      	ldr	r0, [pc, #24]	; (80038a8 <MX_ADC1_Init+0xd4>)
 8003890:	f002 fb0e 	bl	8005eb0 <HAL_ADC_ConfigChannel>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800389a:	f000 fa1b 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200000c4 	.word	0x200000c4
 80038ac:	42028000 	.word	0x42028000
 80038b0:	0c000008 	.word	0x0c000008

080038b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80038b8:	2000      	movs	r0, #0
 80038ba:	f003 fcf5 	bl	80072a8 <HAL_ICACHE_ConfigAssociativityMode>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80038c4:	f000 fa06 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80038c8:	f003 fd0e 	bl	80072e8 <HAL_ICACHE_Enable>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80038d2:	f000 f9ff 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}

080038da <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <MX_SPI1_Init+0xd4>)
 80038fa:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <MX_SPI1_Init+0xd8>)
 80038fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038fe:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <MX_SPI1_Init+0xd4>)
 800390e:	2207      	movs	r2, #7
 8003910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003914:	2200      	movs	r2, #0
 8003916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <MX_SPI1_Init+0xd4>)
 800391a:	2200      	movs	r2, #0
 800391c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003920:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003928:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800392c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003934:	4b21      	ldr	r3, [pc, #132]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <MX_SPI1_Init+0xd4>)
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003940:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003942:	2207      	movs	r2, #7
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003948:	2200      	movs	r2, #0
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <MX_SPI1_Init+0xd4>)
 800394e:	2200      	movs	r2, #0
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003954:	2200      	movs	r2, #0
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <MX_SPI1_Init+0xd4>)
 800395a:	2200      	movs	r2, #0
 800395c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003960:	2200      	movs	r2, #0
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003966:	2200      	movs	r2, #0
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_SPI1_Init+0xd4>)
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003972:	2200      	movs	r2, #0
 8003974:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003978:	2200      	movs	r2, #0
 800397a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_SPI1_Init+0xd4>)
 800397e:	2200      	movs	r2, #0
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003982:	480e      	ldr	r0, [pc, #56]	; (80039bc <MX_SPI1_Init+0xd4>)
 8003984:	f007 ffee 	bl	800b964 <HAL_SPI_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800398e:	f000 f9a1 	bl	8003cd4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003996:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4805      	ldr	r0, [pc, #20]	; (80039bc <MX_SPI1_Init+0xd4>)
 80039a6:	f008 fe38 	bl	800c61a <HAL_SPIEx_SetConfigAutonomousMode>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80039b0:	f000 f990 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000150 	.word	0x20000150
 80039c0:	40013000 	.word	0x40013000

080039c4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	463b      	mov	r3, r7
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
 80039d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80039da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80039de:	f7ff fce7 	bl	80033b0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7ff fcc8 	bl	8003378 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7ff fcc5 	bl	8003378 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80039f4:	2303      	movs	r3, #3
 80039f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fc:	463b      	mov	r3, r7
 80039fe:	4619      	mov	r1, r3
 8003a00:	4809      	ldr	r0, [pc, #36]	; (8003a28 <MX_UCPD1_Init+0x64>)
 8003a02:	f009 fd3e 	bl	800d482 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	463b      	mov	r3, r7
 8003a16:	4619      	mov	r1, r3
 8003a18:	4804      	ldr	r0, [pc, #16]	; (8003a2c <MX_UCPD1_Init+0x68>)
 8003a1a:	f009 fd32 	bl	800d482 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	42020400 	.word	0x42020400
 8003a2c:	42020000 	.word	0x42020000

08003a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a36:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <MX_USART1_UART_Init+0x94>)
 8003a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a6c:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a78:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a7a:	f008 fe0f 	bl	800c69c <HAL_UART_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a84:	f000 f926 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a88:	2100      	movs	r1, #0
 8003a8a:	480d      	ldr	r0, [pc, #52]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a8c:	f009 fae4 	bl	800d058 <HAL_UARTEx_SetTxFifoThreshold>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a96:	f000 f91d 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4808      	ldr	r0, [pc, #32]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003a9e:	f009 fb19 	bl	800d0d4 <HAL_UARTEx_SetRxFifoThreshold>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003aa8:	f000 f914 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <MX_USART1_UART_Init+0x90>)
 8003aae:	f009 fa9a 	bl	800cfe6 <HAL_UARTEx_DisableFifoMode>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ab8:	f000 f90c 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200001e0 	.word	0x200001e0
 8003ac4:	40013800 	.word	0x40013800

08003ac8 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003ace:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8003ad0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8003afc:	4804      	ldr	r0, [pc, #16]	; (8003b10 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003afe:	f003 fb7d 	bl	80071fc <HAL_HCD_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8003b08:	f000 f8e4 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000274 	.word	0x20000274
 8003b14:	42040000 	.word	0x42040000

08003b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	4a61      	ldr	r2, [pc, #388]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4c:	4b5b      	ldr	r3, [pc, #364]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b52:	4a5a      	ldr	r2, [pc, #360]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b5c:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b7a:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b88:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8e:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba6:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	4a43      	ldr	r2, [pc, #268]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003bae:	f043 0308 	orr.w	r3, r3, #8
 8003bb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <MX_GPIO_Init+0x1a4>)
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003be2:	2201      	movs	r2, #1
 8003be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003be8:	4835      	ldr	r0, [pc, #212]	; (8003cc0 <MX_GPIO_Init+0x1a8>)
 8003bea:	f003 fad5 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4834      	ldr	r0, [pc, #208]	; (8003cc4 <MX_GPIO_Init+0x1ac>)
 8003bf4:	f003 fad0 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	4832      	ldr	r0, [pc, #200]	; (8003cc8 <MX_GPIO_Init+0x1b0>)
 8003bfe:	f003 facb 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003c02:	2200      	movs	r2, #0
 8003c04:	21a0      	movs	r1, #160	; 0xa0
 8003c06:	4831      	ldr	r0, [pc, #196]	; (8003ccc <MX_GPIO_Init+0x1b4>)
 8003c08:	f003 fac6 	bl	8007198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c12:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <MX_GPIO_Init+0x1b8>)
 8003c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4829      	ldr	r0, [pc, #164]	; (8003cc8 <MX_GPIO_Init+0x1b0>)
 8003c22:	f003 f8e1 	bl	8006de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003c34:	f107 031c 	add.w	r3, r7, #28
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4824      	ldr	r0, [pc, #144]	; (8003ccc <MX_GPIO_Init+0x1b4>)
 8003c3c:	f003 f8d4 	bl	8006de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	4619      	mov	r1, r3
 8003c58:	4819      	ldr	r0, [pc, #100]	; (8003cc0 <MX_GPIO_Init+0x1a8>)
 8003c5a:	f003 f8c5 	bl	8006de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c62:	2301      	movs	r3, #1
 8003c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003c6e:	f107 031c 	add.w	r3, r7, #28
 8003c72:	4619      	mov	r1, r3
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <MX_GPIO_Init+0x1ac>)
 8003c76:	f003 f8b7 	bl	8006de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c86:	2300      	movs	r3, #0
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <MX_GPIO_Init+0x1b0>)
 8003c92:	f003 f8a9 	bl	8006de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8003c96:	23a0      	movs	r3, #160	; 0xa0
 8003c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	4807      	ldr	r0, [pc, #28]	; (8003ccc <MX_GPIO_Init+0x1b4>)
 8003cae:	f003 f89b 	bl	8006de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cb2:	bf00      	nop
 8003cb4:	3730      	adds	r7, #48	; 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	46020c00 	.word	0x46020c00
 8003cc0:	42020c00 	.word	0x42020c00
 8003cc4:	42021800 	.word	0x42021800
 8003cc8:	42020800 	.word	0x42020800
 8003ccc:	42020400 	.word	0x42020400
 8003cd0:	10110000 	.word	0x10110000

08003cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd8:	b672      	cpsid	i
}
 8003cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <Error_Handler+0x8>
	...

08003ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_MspInit+0x30>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_MspInit+0x30>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_MspInit+0x30>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8003d04:	f003 fbfc 	bl	8007500 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	46020c00 	.word	0x46020c00

08003d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b0c0      	sub	sp, #256	; 0x100
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	22d8      	movs	r2, #216	; 0xd8
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f009 fe79 	bl	800da2c <memset>
  if(hadc->Instance==ADC1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <HAL_ADC_MspInit+0xbc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d140      	bne.n	8003dc6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003d44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8003d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fea9 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8003d68:	f7ff ffb4 	bl	8003cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_ADC_MspInit+0xc0>)
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003da8:	2304      	movs	r3, #4
 8003daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003dba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <HAL_ADC_MspInit+0xc4>)
 8003dc2:	f003 f811 	bl	8006de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003dc6:	bf00      	nop
 8003dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	42028000 	.word	0x42028000
 8003dd4:	46020c00 	.word	0x46020c00
 8003dd8:	42020800 	.word	0x42020800

08003ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0c0      	sub	sp, #256	; 0x100
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003df4:	f107 0310 	add.w	r3, r7, #16
 8003df8:	22d8      	movs	r2, #216	; 0xd8
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f009 fe15 	bl	800da2c <memset>
  if(hspi->Instance==SPI1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <HAL_SPI_MspInit+0xc8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d146      	bne.n	8003e9a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003e0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003e18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fe45 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003e30:	f7ff ff50 	bl	8003cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e40:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_SPI_MspInit+0xcc>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e70:	23e0      	movs	r3, #224	; 0xe0
 8003e72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e88:	2305      	movs	r3, #5
 8003e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e92:	4619      	mov	r1, r3
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <HAL_SPI_MspInit+0xd0>)
 8003e96:	f002 ffa7 	bl	8006de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e9a:	bf00      	nop
 8003e9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40013000 	.word	0x40013000
 8003ea8:	46020c00 	.word	0x46020c00
 8003eac:	42020000 	.word	0x42020000

08003eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b0c0      	sub	sp, #256	; 0x100
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec8:	f107 0310 	add.w	r3, r7, #16
 8003ecc:	22d8      	movs	r2, #216	; 0xd8
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f009 fdab 	bl	800da2c <memset>
  if(huart->Instance==USART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_UART_MspInit+0xc8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d145      	bne.n	8003f6c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ee0:	f04f 0201 	mov.w	r2, #1
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003eec:	2300      	movs	r3, #0
 8003eee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ef0:	f107 0310 	add.w	r3, r7, #16
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 fddd 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003f00:	f7ff fee8 	bl	8003cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_UART_MspInit+0xcc>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8003f40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f5a:	2307      	movs	r3, #7
 8003f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003f64:	4619      	mov	r1, r3
 8003f66:	4806      	ldr	r0, [pc, #24]	; (8003f80 <HAL_UART_MspInit+0xd0>)
 8003f68:	f002 ff3e 	bl	8006de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f6c:	bf00      	nop
 8003f6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	46020c00 	.word	0x46020c00
 8003f80:	42020000 	.word	0x42020000

08003f84 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b0bc      	sub	sp, #240	; 0xf0
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f8c:	f107 0318 	add.w	r3, r7, #24
 8003f90:	22d8      	movs	r2, #216	; 0xd8
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f009 fd49 	bl	800da2c <memset>
  if(hhcd->Instance==USB_OTG_HS)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_HCD_MspInit+0xe8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d15e      	bne.n	8004062 <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0308 	mov.w	r3, #8
 8003fac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8003fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb8:	f107 0318 	add.w	r3, r7, #24
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fd79 	bl	8008ab4 <HAL_RCCEx_PeriphCLKConfig>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 8003fc8:	f7ff fe84 	bl	8003cd4 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8003fcc:	200c      	movs	r0, #12
 8003fce:	f000 ff03 	bl	8004dd8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8003fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8003ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b18      	ldr	r3, [pc, #96]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11b      	bne.n	8004054 <HAL_HCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_HCD_MspInit+0xec>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_HCD_MspInit+0xec>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800403a:	f003 fa41 	bl	80074c0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800403e:	f003 fa6f 	bl	8007520 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_HCD_MspInit+0xec>)
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <HAL_HCD_MspInit+0xec>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004052:	e003      	b.n	800405c <HAL_HCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8004054:	f003 fa34 	bl	80074c0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8004058:	f003 fa62 	bl	8007520 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800405c:	2001      	movs	r0, #1
 800405e:	f000 fea7 	bl	8004db0 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8004062:	bf00      	nop
 8004064:	37f0      	adds	r7, #240	; 0xf0
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	42040000 	.word	0x42040000
 8004070:	46020c00 	.word	0x46020c00

08004074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004078:	e7fe      	b.n	8004078 <NMI_Handler+0x4>

0800407a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800407e:	e7fe      	b.n	800407e <HardFault_Handler+0x4>

08004080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <MemManage_Handler+0x4>

08004086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <BusFault_Handler+0x4>

0800408c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <UsageFault_Handler+0x4>

08004092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c0:	f000 fe32 	bl	8004d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d0:	4a14      	ldr	r2, [pc, #80]	; (8004124 <_sbrk+0x5c>)
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <_sbrk+0x60>)
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <_sbrk+0x64>)
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <_sbrk+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <_sbrk+0x64>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d207      	bcs.n	8004108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040f8:	f009 fca0 	bl	800da3c <__errno>
 80040fc:	4603      	mov	r3, r0
 80040fe:	220c      	movs	r2, #12
 8004100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004106:	e009      	b.n	800411c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <_sbrk+0x64>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <_sbrk+0x64>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	4a05      	ldr	r2, [pc, #20]	; (800412c <_sbrk+0x64>)
 8004118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20270000 	.word	0x20270000
 8004128:	00000400 	.word	0x00000400
 800412c:	20000778 	.word	0x20000778
 8004130:	200008d8 	.word	0x200008d8

08004134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <SystemInit+0x68>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <SystemInit+0x68>)
 8004140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <SystemInit+0x6c>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <SystemInit+0x6c>)
 8004150:	2200      	movs	r2, #0
 8004152:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <SystemInit+0x6c>)
 8004156:	2200      	movs	r2, #0
 8004158:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <SystemInit+0x6c>)
 800415c:	2200      	movs	r2, #0
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <SystemInit+0x6c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <SystemInit+0x6c>)
 8004166:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800416a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800416e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <SystemInit+0x6c>)
 8004172:	2200      	movs	r2, #0
 8004174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <SystemInit+0x6c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <SystemInit+0x6c>)
 800417c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004180:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <SystemInit+0x6c>)
 8004184:	2200      	movs	r2, #0
 8004186:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <SystemInit+0x68>)
 800418a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418e:	609a      	str	r2, [r3, #8]
  #endif
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00
 80041a0:	46020c00 	.word	0x46020c00

080041a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f9d7 	bl	8004564 <USER_SPI_initialize>
 80041b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fab5 	bl	800473c <USER_SPI_status>
 80041d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 80041ec:	7bf8      	ldrb	r0, [r7, #15]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	f000 fab8 	bl	8004768 <USER_SPI_read>
 80041f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004212:	7bf8      	ldrb	r0, [r7, #15]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	f000 fb0b 	bl	8004834 <USER_SPI_write>
 800421e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	603a      	str	r2, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
 8004234:	460b      	mov	r3, r1
 8004236:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004238:	79b9      	ldrb	r1, [r7, #6]
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fb74 	bl	800492c <USER_SPI_ioctl>
 8004244:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004258:	f000 fd7a 	bl	8004d50 <HAL_GetTick>
 800425c:	4603      	mov	r3, r0
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <SPI_Timer_On+0x20>)
 8004260:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <SPI_Timer_On+0x24>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000780 	.word	0x20000780
 8004274:	20000784 	.word	0x20000784

08004278 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800427c:	f000 fd68 	bl	8004d50 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <SPI_Timer_Status+0x24>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SPI_Timer_Status+0x28>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	bf34      	ite	cc
 8004290:	2301      	movcc	r3, #1
 8004292:	2300      	movcs	r3, #0
 8004294:	b2db      	uxtb	r3, r3
}
 8004296:	4618      	mov	r0, r3
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000780 	.word	0x20000780
 80042a0:	20000784 	.word	0x20000784

080042a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80042ae:	f107 020f 	add.w	r2, r7, #15
 80042b2:	1df9      	adds	r1, r7, #7
 80042b4:	2332      	movs	r3, #50	; 0x32
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2301      	movs	r3, #1
 80042ba:	4804      	ldr	r0, [pc, #16]	; (80042cc <xchg_spi+0x28>)
 80042bc:	f007 fe86 	bl	800bfcc <HAL_SPI_TransmitReceive>
    return rxDat;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000150 	.word	0x20000150

080042d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e00a      	b.n	80042f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	18d4      	adds	r4, r2, r3
 80042e6:	20ff      	movs	r0, #255	; 0xff
 80042e8:	f7ff ffdc 	bl	80042a4 <xchg_spi>
 80042ec:	4603      	mov	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d3f0      	bcc.n	80042e0 <rcvr_spi_multi+0x10>
	}
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}

08004308 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b29a      	uxth	r2, r3
 8004316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <xmit_spi_multi+0x24>)
 800431e:	f007 fc37 	bl	800bb90 <HAL_SPI_Transmit>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000150 	.word	0x20000150

08004330 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004338:	f000 fd0a 	bl	8004d50 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004342:	20ff      	movs	r0, #255	; 0xff
 8004344:	f7ff ffae 	bl	80042a4 <xchg_spi>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2bff      	cmp	r3, #255	; 0xff
 8004350:	d007      	beq.n	8004362 <wait_ready+0x32>
 8004352:	f000 fcfd 	bl	8004d50 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d8ef      	bhi.n	8004342 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2bff      	cmp	r3, #255	; 0xff
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800437c:	2201      	movs	r2, #1
 800437e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004382:	4804      	ldr	r0, [pc, #16]	; (8004394 <despiselect+0x1c>)
 8004384:	f002 ff08 	bl	8007198 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004388:	20ff      	movs	r0, #255	; 0xff
 800438a:	f7ff ff8b 	bl	80042a4 <xchg_spi>

}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	42020c00 	.word	0x42020c00

08004398 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043a2:	480a      	ldr	r0, [pc, #40]	; (80043cc <spiselect+0x34>)
 80043a4:	f002 fef8 	bl	8007198 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80043a8:	20ff      	movs	r0, #255	; 0xff
 80043aa:	f7ff ff7b 	bl	80042a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80043ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043b2:	f7ff ffbd 	bl	8004330 <wait_ready>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <spiselect+0x28>
 80043bc:	2301      	movs	r3, #1
 80043be:	e002      	b.n	80043c6 <spiselect+0x2e>

	despiselect();
 80043c0:	f7ff ffda 	bl	8004378 <despiselect>
	return 0;	/* Timeout */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	42020c00 	.word	0x42020c00

080043d0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80043da:	20c8      	movs	r0, #200	; 0xc8
 80043dc:	f7ff ff38 	bl	8004250 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80043e0:	20ff      	movs	r0, #255	; 0xff
 80043e2:	f7ff ff5f 	bl	80042a4 <xchg_spi>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2bff      	cmp	r3, #255	; 0xff
 80043ee:	d104      	bne.n	80043fa <rcvr_datablock+0x2a>
 80043f0:	f7ff ff42 	bl	8004278 <SPI_Timer_Status>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2bfe      	cmp	r3, #254	; 0xfe
 80043fe:	d001      	beq.n	8004404 <rcvr_datablock+0x34>
 8004400:	2300      	movs	r3, #0
 8004402:	e00a      	b.n	800441a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ff62 	bl	80042d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800440c:	20ff      	movs	r0, #255	; 0xff
 800440e:	f7ff ff49 	bl	80042a4 <xchg_spi>
 8004412:	20ff      	movs	r0, #255	; 0xff
 8004414:	f7ff ff46 	bl	80042a4 <xchg_spi>

	return 1;						/* Function succeeded */
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800442e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004432:	f7ff ff7d 	bl	8004330 <wait_ready>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <xmit_datablock+0x1e>
 800443c:	2300      	movs	r3, #0
 800443e:	e01e      	b.n	800447e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff2e 	bl	80042a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2bfd      	cmp	r3, #253	; 0xfd
 800444c:	d016      	beq.n	800447c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800444e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ff58 	bl	8004308 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004458:	20ff      	movs	r0, #255	; 0xff
 800445a:	f7ff ff23 	bl	80042a4 <xchg_spi>
 800445e:	20ff      	movs	r0, #255	; 0xff
 8004460:	f7ff ff20 	bl	80042a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004464:	20ff      	movs	r0, #255	; 0xff
 8004466:	f7ff ff1d 	bl	80042a4 <xchg_spi>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2b05      	cmp	r3, #5
 8004476:	d001      	beq.n	800447c <xmit_datablock+0x5a>
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <xmit_datablock+0x5c>
	}
	return 1;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	6039      	str	r1, [r7, #0]
 8004490:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0e      	bge.n	80044b8 <send_cmd+0x32>
		cmd &= 0x7F;
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80044a2:	2100      	movs	r1, #0
 80044a4:	2037      	movs	r0, #55	; 0x37
 80044a6:	f7ff ffee 	bl	8004486 <send_cmd>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d901      	bls.n	80044b8 <send_cmd+0x32>
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	e051      	b.n	800455c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d008      	beq.n	80044d0 <send_cmd+0x4a>
		despiselect();
 80044be:	f7ff ff5b 	bl	8004378 <despiselect>
		if (!spiselect()) return 0xFF;
 80044c2:	f7ff ff69 	bl	8004398 <spiselect>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <send_cmd+0x4a>
 80044cc:	23ff      	movs	r3, #255	; 0xff
 80044ce:	e045      	b.n	800455c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fee3 	bl	80042a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fedd 	bl	80042a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fed7 	bl	80042a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fed1 	bl	80042a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fecc 	bl	80042a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <send_cmd+0x94>
 8004516:	2395      	movs	r3, #149	; 0x95
 8004518:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d101      	bne.n	8004524 <send_cmd+0x9e>
 8004520:	2387      	movs	r3, #135	; 0x87
 8004522:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff febc 	bl	80042a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d102      	bne.n	8004538 <send_cmd+0xb2>
 8004532:	20ff      	movs	r0, #255	; 0xff
 8004534:	f7ff feb6 	bl	80042a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004538:	230a      	movs	r3, #10
 800453a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800453c:	20ff      	movs	r0, #255	; 0xff
 800453e:	f7ff feb1 	bl	80042a4 <xchg_spi>
 8004542:	4603      	mov	r3, r0
 8004544:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800454a:	2b00      	cmp	r3, #0
 800454c:	da05      	bge.n	800455a <send_cmd+0xd4>
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3b01      	subs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <send_cmd+0xb6>

	return res;							/* Return received response */
 800455a:	7bbb      	ldrb	r3, [r7, #14]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <USER_SPI_initialize+0x14>
 8004574:	2301      	movs	r3, #1
 8004576:	e0d6      	b.n	8004726 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004578:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <USER_SPI_initialize+0x1cc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <USER_SPI_initialize+0x2a>
 8004586:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <USER_SPI_initialize+0x1cc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e0cb      	b.n	8004726 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800458e:	4b69      	ldr	r3, [pc, #420]	; (8004734 <USER_SPI_initialize+0x1d0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004598:	4b66      	ldr	r3, [pc, #408]	; (8004734 <USER_SPI_initialize+0x1d0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80045a0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80045a2:	230a      	movs	r3, #10
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e005      	b.n	80045b4 <USER_SPI_initialize+0x50>
 80045a8:	20ff      	movs	r0, #255	; 0xff
 80045aa:	f7ff fe7b 	bl	80042a4 <xchg_spi>
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f6      	bne.n	80045a8 <USER_SPI_initialize+0x44>

	ty = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80045be:	2100      	movs	r1, #0
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7ff ff60 	bl	8004486 <send_cmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f040 808b 	bne.w	80046e4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80045ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045d2:	f7ff fe3d 	bl	8004250 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80045d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045da:	2008      	movs	r0, #8
 80045dc:	f7ff ff53 	bl	8004486 <send_cmd>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d151      	bne.n	800468a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	e00d      	b.n	8004608 <USER_SPI_initialize+0xa4>
 80045ec:	7bfc      	ldrb	r4, [r7, #15]
 80045ee:	20ff      	movs	r0, #255	; 0xff
 80045f0:	f7ff fe58 	bl	80042a4 <xchg_spi>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	f104 0310 	add.w	r3, r4, #16
 80045fc:	443b      	add	r3, r7
 80045fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	3301      	adds	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d9ee      	bls.n	80045ec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800460e:	7abb      	ldrb	r3, [r7, #10]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d167      	bne.n	80046e4 <USER_SPI_initialize+0x180>
 8004614:	7afb      	ldrb	r3, [r7, #11]
 8004616:	2baa      	cmp	r3, #170	; 0xaa
 8004618:	d164      	bne.n	80046e4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800461a:	bf00      	nop
 800461c:	f7ff fe2c 	bl	8004278 <SPI_Timer_Status>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <USER_SPI_initialize+0xd2>
 8004626:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800462a:	20a9      	movs	r0, #169	; 0xa9
 800462c:	f7ff ff2b 	bl	8004486 <send_cmd>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f2      	bne.n	800461c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004636:	f7ff fe1f 	bl	8004278 <SPI_Timer_Status>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d051      	beq.n	80046e4 <USER_SPI_initialize+0x180>
 8004640:	2100      	movs	r1, #0
 8004642:	203a      	movs	r0, #58	; 0x3a
 8004644:	f7ff ff1f 	bl	8004486 <send_cmd>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14a      	bne.n	80046e4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e00d      	b.n	8004670 <USER_SPI_initialize+0x10c>
 8004654:	7bfc      	ldrb	r4, [r7, #15]
 8004656:	20ff      	movs	r0, #255	; 0xff
 8004658:	f7ff fe24 	bl	80042a4 <xchg_spi>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	f104 0310 	add.w	r3, r4, #16
 8004664:	443b      	add	r3, r7
 8004666:	f803 2c08 	strb.w	r2, [r3, #-8]
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3301      	adds	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d9ee      	bls.n	8004654 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004676:	7a3b      	ldrb	r3, [r7, #8]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <USER_SPI_initialize+0x120>
 8004680:	230c      	movs	r3, #12
 8004682:	e000      	b.n	8004686 <USER_SPI_initialize+0x122>
 8004684:	2304      	movs	r3, #4
 8004686:	737b      	strb	r3, [r7, #13]
 8004688:	e02c      	b.n	80046e4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800468a:	2100      	movs	r1, #0
 800468c:	20a9      	movs	r0, #169	; 0xa9
 800468e:	f7ff fefa 	bl	8004486 <send_cmd>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d804      	bhi.n	80046a2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004698:	2302      	movs	r3, #2
 800469a:	737b      	strb	r3, [r7, #13]
 800469c:	23a9      	movs	r3, #169	; 0xa9
 800469e:	73bb      	strb	r3, [r7, #14]
 80046a0:	e003      	b.n	80046aa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80046a2:	2301      	movs	r3, #1
 80046a4:	737b      	strb	r3, [r7, #13]
 80046a6:	2301      	movs	r3, #1
 80046a8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80046aa:	bf00      	nop
 80046ac:	f7ff fde4 	bl	8004278 <SPI_Timer_Status>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <USER_SPI_initialize+0x162>
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fee3 	bl	8004486 <send_cmd>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f2      	bne.n	80046ac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80046c6:	f7ff fdd7 	bl	8004278 <SPI_Timer_Status>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <USER_SPI_initialize+0x17c>
 80046d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046d4:	2010      	movs	r0, #16
 80046d6:	f7ff fed6 	bl	8004486 <send_cmd>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <USER_SPI_initialize+0x180>
				ty = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <USER_SPI_initialize+0x1d4>)
 80046e6:	7b7b      	ldrb	r3, [r7, #13]
 80046e8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80046ea:	f7ff fe45 	bl	8004378 <despiselect>

	if (ty) {			/* OK */
 80046ee:	7b7b      	ldrb	r3, [r7, #13]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d012      	beq.n	800471a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <USER_SPI_initialize+0x1d0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <USER_SPI_initialize+0x1d0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004706:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <USER_SPI_initialize+0x1cc>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	b2da      	uxtb	r2, r3
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <USER_SPI_initialize+0x1cc>)
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e002      	b.n	8004720 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <USER_SPI_initialize+0x1cc>)
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <USER_SPI_initialize+0x1cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}
 800472e:	bf00      	nop
 8004730:	20000018 	.word	0x20000018
 8004734:	20000150 	.word	0x20000150
 8004738:	2000077c 	.word	0x2000077c

0800473c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <USER_SPI_status+0x14>
 800474c:	2301      	movs	r3, #1
 800474e:	e002      	b.n	8004756 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <USER_SPI_status+0x28>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000018 	.word	0x20000018

08004768 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <USER_SPI_read+0x1c>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <USER_SPI_read+0x20>
 8004784:	2304      	movs	r3, #4
 8004786:	e04d      	b.n	8004824 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <USER_SPI_read+0xc4>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <USER_SPI_read+0x32>
 8004796:	2303      	movs	r3, #3
 8004798:	e044      	b.n	8004824 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800479a:	4b25      	ldr	r3, [pc, #148]	; (8004830 <USER_SPI_read+0xc8>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <USER_SPI_read+0x44>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d111      	bne.n	80047d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	2011      	movs	r0, #17
 80047b6:	f7ff fe66 	bl	8004486 <send_cmd>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d129      	bne.n	8004814 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80047c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047c4:	68b8      	ldr	r0, [r7, #8]
 80047c6:	f7ff fe03 	bl	80043d0 <rcvr_datablock>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d021      	beq.n	8004814 <USER_SPI_read+0xac>
			count = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	e01e      	b.n	8004814 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	2012      	movs	r0, #18
 80047da:	f7ff fe54 	bl	8004486 <send_cmd>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d117      	bne.n	8004814 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80047e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f7ff fdf1 	bl	80043d0 <rcvr_datablock>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <USER_SPI_read+0xa2>
				buff += 512;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ed      	bne.n	80047e4 <USER_SPI_read+0x7c>
 8004808:	e000      	b.n	800480c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800480a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800480c:	2100      	movs	r1, #0
 800480e:	200c      	movs	r0, #12
 8004810:	f7ff fe39 	bl	8004486 <send_cmd>
		}
	}
	despiselect();
 8004814:	f7ff fdb0 	bl	8004378 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000018 	.word	0x20000018
 8004830:	2000077c 	.word	0x2000077c

08004834 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <USER_SPI_write+0x1c>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <USER_SPI_write+0x20>
 8004850:	2304      	movs	r3, #4
 8004852:	e063      	b.n	800491c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004854:	4b33      	ldr	r3, [pc, #204]	; (8004924 <USER_SPI_write+0xf0>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <USER_SPI_write+0x32>
 8004862:	2303      	movs	r3, #3
 8004864:	e05a      	b.n	800491c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <USER_SPI_write+0xf0>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <USER_SPI_write+0x44>
 8004874:	2302      	movs	r3, #2
 8004876:	e051      	b.n	800491c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <USER_SPI_write+0xf4>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <USER_SPI_write+0x56>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d110      	bne.n	80048b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	2018      	movs	r0, #24
 8004894:	f7ff fdf7 	bl	8004486 <send_cmd>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d136      	bne.n	800490c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800489e:	21fe      	movs	r1, #254	; 0xfe
 80048a0:	68b8      	ldr	r0, [r7, #8]
 80048a2:	f7ff fdbe 	bl	8004422 <xmit_datablock>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02f      	beq.n	800490c <USER_SPI_write+0xd8>
			count = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	e02c      	b.n	800490c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <USER_SPI_write+0xf4>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <USER_SPI_write+0x92>
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	2097      	movs	r0, #151	; 0x97
 80048c2:	f7ff fde0 	bl	8004486 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	2019      	movs	r0, #25
 80048ca:	f7ff fddc 	bl	8004486 <send_cmd>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11b      	bne.n	800490c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80048d4:	21fc      	movs	r1, #252	; 0xfc
 80048d6:	68b8      	ldr	r0, [r7, #8]
 80048d8:	f7ff fda3 	bl	8004422 <xmit_datablock>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <USER_SPI_write+0xc4>
				buff += 512;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80048e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ee      	bne.n	80048d4 <USER_SPI_write+0xa0>
 80048f6:	e000      	b.n	80048fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80048f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80048fa:	21fd      	movs	r1, #253	; 0xfd
 80048fc:	2000      	movs	r0, #0
 80048fe:	f7ff fd90 	bl	8004422 <xmit_datablock>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <USER_SPI_write+0xd8>
 8004908:	2301      	movs	r3, #1
 800490a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800490c:	f7ff fd34 	bl	8004378 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000018 	.word	0x20000018
 8004928:	2000077c 	.word	0x2000077c

0800492c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	603a      	str	r2, [r7, #0]
 8004936:	71fb      	strb	r3, [r7, #7]
 8004938:	460b      	mov	r3, r1
 800493a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <USER_SPI_ioctl+0x1a>
 8004942:	2304      	movs	r3, #4
 8004944:	e15a      	b.n	8004bfc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004946:	4baf      	ldr	r3, [pc, #700]	; (8004c04 <USER_SPI_ioctl+0x2d8>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USER_SPI_ioctl+0x2c>
 8004954:	2303      	movs	r3, #3
 8004956:	e151      	b.n	8004bfc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800495e:	79bb      	ldrb	r3, [r7, #6]
 8004960:	2b04      	cmp	r3, #4
 8004962:	f200 8136 	bhi.w	8004bd2 <USER_SPI_ioctl+0x2a6>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <USER_SPI_ioctl+0x40>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004981 	.word	0x08004981
 8004970:	08004995 	.word	0x08004995
 8004974:	08004bd3 	.word	0x08004bd3
 8004978:	08004a41 	.word	0x08004a41
 800497c:	08004b37 	.word	0x08004b37
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004980:	f7ff fd0a 	bl	8004398 <spiselect>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8127 	beq.w	8004bda <USER_SPI_ioctl+0x2ae>
 800498c:	2300      	movs	r3, #0
 800498e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004992:	e122      	b.n	8004bda <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004994:	2100      	movs	r1, #0
 8004996:	2009      	movs	r0, #9
 8004998:	f7ff fd75 	bl	8004486 <send_cmd>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 811d 	bne.w	8004bde <USER_SPI_ioctl+0x2b2>
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	2110      	movs	r1, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fd10 	bl	80043d0 <rcvr_datablock>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8113 	beq.w	8004bde <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80049b8:	7b3b      	ldrb	r3, [r7, #12]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d111      	bne.n	80049e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80049c2:	7d7b      	ldrb	r3, [r7, #21]
 80049c4:	461a      	mov	r2, r3
 80049c6:	7d3b      	ldrb	r3, [r7, #20]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	4413      	add	r3, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80049d6:	4413      	add	r3, r2
 80049d8:	3301      	adds	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	029a      	lsls	r2, r3, #10
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e028      	b.n	8004a38 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049e6:	7c7b      	ldrb	r3, [r7, #17]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	09db      	lsrs	r3, r3, #7
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	7d7b      	ldrb	r3, [r7, #21]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3302      	adds	r3, #2
 8004a0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004a0e:	7d3b      	ldrb	r3, [r7, #20]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	7cbb      	ldrb	r3, [r7, #18]
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a24:	4413      	add	r3, r2
 8004a26:	3301      	adds	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a2e:	3b09      	subs	r3, #9
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	409a      	lsls	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004a3e:	e0ce      	b.n	8004bde <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004a40:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <USER_SPI_ioctl+0x2dc>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	208d      	movs	r0, #141	; 0x8d
 8004a50:	f7ff fd19 	bl	8004486 <send_cmd>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f040 80c3 	bne.w	8004be2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004a5c:	20ff      	movs	r0, #255	; 0xff
 8004a5e:	f7ff fc21 	bl	80042a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004a62:	f107 030c 	add.w	r3, r7, #12
 8004a66:	2110      	movs	r1, #16
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fcb1 	bl	80043d0 <rcvr_datablock>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80b6 	beq.w	8004be2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004a76:	2330      	movs	r3, #48	; 0x30
 8004a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a7c:	e007      	b.n	8004a8e <USER_SPI_ioctl+0x162>
 8004a7e:	20ff      	movs	r0, #255	; 0xff
 8004a80:	f7ff fc10 	bl	80042a4 <xchg_spi>
 8004a84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f3      	bne.n	8004a7e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004a96:	7dbb      	ldrb	r3, [r7, #22]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	fa03 f202 	lsl.w	r2, r3, r2
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004aae:	e098      	b.n	8004be2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	2009      	movs	r0, #9
 8004ab4:	f7ff fce7 	bl	8004486 <send_cmd>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 8091 	bne.w	8004be2 <USER_SPI_ioctl+0x2b6>
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	2110      	movs	r1, #16
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fc82 	bl	80043d0 <rcvr_datablock>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8087 	beq.w	8004be2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <USER_SPI_ioctl+0x2dc>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004ae0:	7dbb      	ldrb	r3, [r7, #22]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004ae8:	7dfa      	ldrb	r2, [r7, #23]
 8004aea:	09d2      	lsrs	r2, r2, #7
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	4413      	add	r3, r2
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	7e7b      	ldrb	r3, [r7, #25]
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e013      	b.n	8004b2e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004b06:	7dbb      	ldrb	r3, [r7, #22]
 8004b08:	109b      	asrs	r3, r3, #2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	3301      	adds	r3, #1
 8004b12:	7dfa      	ldrb	r2, [r7, #23]
 8004b14:	00d2      	lsls	r2, r2, #3
 8004b16:	f002 0218 	and.w	r2, r2, #24
 8004b1a:	7df9      	ldrb	r1, [r7, #23]
 8004b1c:	0949      	lsrs	r1, r1, #5
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	440a      	add	r2, r1
 8004b22:	3201      	adds	r2, #1
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004b34:	e055      	b.n	8004be2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <USER_SPI_ioctl+0x2dc>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 0306 	and.w	r3, r3, #6
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d051      	beq.n	8004be6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b42:	f107 020c 	add.w	r2, r7, #12
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	210b      	movs	r1, #11
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff feee 	bl	800492c <USER_SPI_ioctl>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d149      	bne.n	8004bea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b56:	7b3b      	ldrb	r3, [r7, #12]
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <USER_SPI_ioctl+0x23e>
 8004b60:	7dbb      	ldrb	r3, [r7, #22]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d041      	beq.n	8004bee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <USER_SPI_ioctl+0x2dc>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	025b      	lsls	r3, r3, #9
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	025b      	lsls	r3, r3, #9
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b94:	2020      	movs	r0, #32
 8004b96:	f7ff fc76 	bl	8004486 <send_cmd>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d128      	bne.n	8004bf2 <USER_SPI_ioctl+0x2c6>
 8004ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba2:	2021      	movs	r0, #33	; 0x21
 8004ba4:	f7ff fc6f 	bl	8004486 <send_cmd>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d121      	bne.n	8004bf2 <USER_SPI_ioctl+0x2c6>
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2026      	movs	r0, #38	; 0x26
 8004bb2:	f7ff fc68 	bl	8004486 <send_cmd>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11a      	bne.n	8004bf2 <USER_SPI_ioctl+0x2c6>
 8004bbc:	f247 5030 	movw	r0, #30000	; 0x7530
 8004bc0:	f7ff fbb6 	bl	8004330 <wait_ready>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d013      	beq.n	8004bf2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004bd0:	e00f      	b.n	8004bf2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004bd8:	e00c      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		break;
 8004bda:	bf00      	nop
 8004bdc:	e00a      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		break;
 8004bde:	bf00      	nop
 8004be0:	e008      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		break;
 8004be2:	bf00      	nop
 8004be4:	e006      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004be6:	bf00      	nop
 8004be8:	e004      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <USER_SPI_ioctl+0x2c8>
		break;
 8004bf2:	bf00      	nop
	}

	despiselect();
 8004bf4:	f7ff fbc0 	bl	8004378 <despiselect>

	return res;
 8004bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3730      	adds	r7, #48	; 0x30
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000018 	.word	0x20000018
 8004c08:	2000077c 	.word	0x2000077c

08004c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c44 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c10:	f7ff fa90 	bl	8004134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c16:	e003      	b.n	8004c20 <LoopCopyDataInit>

08004c18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c1e:	3104      	adds	r1, #4

08004c20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c20:	480a      	ldr	r0, [pc, #40]	; (8004c4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004c24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004c26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c28:	d3f6      	bcc.n	8004c18 <CopyDataInit>
	ldr	r2, =_sbss
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c2c:	e002      	b.n	8004c34 <LoopFillZerobss>

08004c2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004c30:	f842 3b04 	str.w	r3, [r2], #4

08004c34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <LoopForever+0x16>)
	cmp	r2, r3
 8004c36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004c38:	d3f9      	bcc.n	8004c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c3a:	f008 ff05 	bl	800da48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c3e:	f7fe fbf9 	bl	8003434 <main>

08004c42 <LoopForever>:

LoopForever:
    b LoopForever
 8004c42:	e7fe      	b.n	8004c42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004c44:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8004c48:	0800e750 	.word	0x0800e750
	ldr	r0, =_sdata
 8004c4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c50:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004c54:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004c58:	200008d4 	.word	0x200008d4

08004c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c5c:	e7fe      	b.n	8004c5c <ADC1_2_IRQHandler>
	...

08004c60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_Init+0x4c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a10      	ldr	r2, [pc, #64]	; (8004cac <HAL_Init+0x4c>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c70:	2003      	movs	r0, #3
 8004c72:	f002 f887 	bl	8006d84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c76:	f003 fd3f 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_Init+0x50>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <HAL_Init+0x54>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_Init+0x58>)
 8004c8e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c90:	200f      	movs	r0, #15
 8004c92:	f000 f813 	bl	8004cbc <HAL_InitTick>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e002      	b.n	8004ca6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca0:	f7ff f81e 	bl	8003ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40022000 	.word	0x40022000
 8004cb0:	46020c00 	.word	0x46020c00
 8004cb4:	0800e60c 	.word	0x0800e60c
 8004cb8:	20000000 	.word	0x20000000

08004cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_InitTick+0x60>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e021      	b.n	8004d14 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_InitTick+0x64>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_InitTick+0x60>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f002 f871 	bl	8006dce <HAL_SYSTICK_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00e      	b.n	8004d14 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d80a      	bhi.n	8004d12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d04:	f002 f849 	bl	8006d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d08:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <HAL_InitTick+0x68>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000020 	.word	0x20000020
 8004d20:	20000000 	.word	0x20000000
 8004d24:	2000001c 	.word	0x2000001c

08004d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_IncTick+0x20>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_IncTick+0x24>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_IncTick+0x24>)
 8004d3a:	6013      	str	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000020 	.word	0x20000020
 8004d4c:	20000788 	.word	0x20000788

08004d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return uwTick;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_GetTick+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000788 	.word	0x20000788

08004d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7ff ffee 	bl	8004d50 <HAL_GetTick>
 8004d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d80:	d005      	beq.n	8004d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_Delay+0x44>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d8e:	bf00      	nop
 8004d90:	f7ff ffde 	bl	8004d50 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d8f7      	bhi.n	8004d90 <HAL_Delay+0x28>
  {
  }
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000020 	.word	0x20000020

08004db0 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbc:	f023 0201 	bic.w	r2, r3, #1
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	46000400 	.word	0x46000400

08004dd8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 8004de8:	4904      	ldr	r1, [pc, #16]	; (8004dfc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	46000400 	.word	0x46000400

08004e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <LL_ADC_SetResolution+0x3c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d104      	bne.n	8004e88 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f023 020c 	bic.w	r2, r3, #12
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	46021000 	.word	0x46021000

08004ea8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3360      	adds	r3, #96	; 0x60
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3360      	adds	r3, #96	; 0x60
 8004ef8:	461a      	mov	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3360      	adds	r3, #96	; 0x60
 8004f26:	461a      	mov	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	601a      	str	r2, [r3, #0]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3360      	adds	r3, #96	; 0x60
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3360      	adds	r3, #96	; 0x60
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	d002      	beq.n	8004fea <LL_ADC_SetGainCompensation+0x32>
 8004fe4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fe8:	e000      	b.n	8004fec <LL_ADC_SetGainCompensation+0x34>
 8004fea:	2200      	movs	r2, #0
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2107      	movs	r1, #7
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	401a      	ands	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	431a      	orrs	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005064:	b480      	push	{r7}
 8005066:	b089      	sub	sp, #36	; 0x24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d020      	beq.n	80050ba <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3330      	adds	r3, #48	; 0x30
 800507c:	461a      	mov	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	4413      	add	r3, r2
 800508a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	211f      	movs	r1, #31
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	401a      	ands	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0e9b      	lsrs	r3, r3, #26
 80050a4:	f003 011f 	and.w	r1, r3, #31
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	431a      	orrs	r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80050b8:	e02b      	b.n	8005112 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	210f      	movs	r1, #15
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	401a      	ands	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	0e9b      	lsrs	r3, r3, #26
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	e010      	b.n	8005104 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	613b      	str	r3, [r7, #16]
  return result;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80050f8:	2320      	movs	r3, #32
 80050fa:	e003      	b.n	8005104 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	b2db      	uxtb	r3, r3
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	f001 011f 	and.w	r1, r1, #31
 800510a:	408b      	lsls	r3, r1
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005112:	bf00      	nop
 8005114:	3724      	adds	r7, #36	; 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	46021000 	.word	0x46021000

08005124 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d107      	bne.n	8005148 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	0e9b      	lsrs	r3, r3, #26
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2201      	movs	r2, #1
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	e015      	b.n	8005174 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	60fb      	str	r3, [r7, #12]
  return result;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800515e:	2320      	movs	r3, #32
 8005160:	e003      	b.n	800516a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fab3 f383 	clz	r3, r3
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2201      	movs	r2, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	0e9b      	lsrs	r3, r3, #26
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80051bc:	b480      	push	{r7}
 80051be:	b08b      	sub	sp, #44	; 0x2c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d042      	beq.n	8005256 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <LL_ADC_SetChannelSamplingTime+0x28>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0e9b      	lsrs	r3, r3, #26
 80051de:	f003 021f 	and.w	r2, r3, #31
 80051e2:	e011      	b.n	8005208 <LL_ADC_SetChannelSamplingTime+0x4c>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	617b      	str	r3, [r7, #20]
  return result;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80051fa:	2320      	movs	r3, #32
 80051fc:	e003      	b.n	8005206 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	fab3 f383 	clz	r3, r3
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	0e5b      	lsrs	r3, r3, #25
 800520c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005210:	460b      	mov	r3, r1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	4613      	mov	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4413      	add	r3, r2
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3314      	adds	r3, #20
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	0e5b      	lsrs	r3, r3, #25
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2107      	movs	r1, #7
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	401a      	ands	r2, r3
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	431a      	orrs	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8005254:	e00e      	b.n	8005274 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	43db      	mvns	r3, r3
 8005260:	401a      	ands	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	0219      	lsls	r1, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	400b      	ands	r3, r1
 800526a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800526e:	431a      	orrs	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	615a      	str	r2, [r3, #20]
}
 8005274:	bf00      	nop
 8005276:	372c      	adds	r7, #44	; 0x2c
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	46021000 	.word	0x46021000

08005284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0318 	and.w	r3, r3, #24
 80052a6:	4908      	ldr	r1, [pc, #32]	; (80052c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052a8:	40d9      	lsrs	r1, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	400b      	ands	r3, r1
 80052ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	000fffff 	.word	0x000fffff

080052cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 031f 	and.w	r3, r3, #31
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6093      	str	r3, [r2, #8]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533c:	d101      	bne.n	8005342 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005364:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538c:	d101      	bne.n	8005392 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053b4:	f043 0201 	orr.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <LL_ADC_IsEnabled+0x18>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <LL_ADC_IsEnabled+0x1a>
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d101      	bne.n	800542e <LL_ADC_REG_IsConversionOngoing+0x18>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d101      	bne.n	8005454 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b08b      	sub	sp, #44	; 0x2c
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8005472:	2300      	movs	r3, #0
 8005474:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e2ce      	b.n	8005a22 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a95      	ldr	r2, [pc, #596]	; (80056e8 <HAL_ADC_Init+0x284>)
 8005492:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe fc39 	bl	8003d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ff37 	bl	8005328 <LL_ADC_IsDeepPowerDownEnabled>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff1d 	bl	8005304 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff52 	bl	8005378 <LL_ADC_IsInternalRegulatorEnabled>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d115      	bne.n	8005506 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ff36 	bl	8005350 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e4:	4b81      	ldr	r3, [pc, #516]	; (80056ec <HAL_ADC_Init+0x288>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <HAL_ADC_Init+0x28c>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80054f8:	e002      	b.n	8005500 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f9      	bne.n	80054fa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ff34 	bl	8005378 <LL_ADC_IsInternalRegulatorEnabled>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff6c 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 800553e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f040 825f 	bne.w	8005a0c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 825b 	bne.w	8005a0c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff2c 	bl	80053c8 <LL_ADC_IsEnabled>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d14f      	bne.n	8005616 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5b      	ldr	r2, [pc, #364]	; (80056e8 <HAL_ADC_Init+0x284>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d037      	beq.n	80055f0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5b      	ldr	r2, [pc, #364]	; (80056f4 <HAL_ADC_Init+0x290>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_ADC_Init+0x130>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a5a      	ldr	r2, [pc, #360]	; (80056f8 <HAL_ADC_Init+0x294>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10e      	bne.n	80055b2 <HAL_ADC_Init+0x14e>
 8005594:	4857      	ldr	r0, [pc, #348]	; (80056f4 <HAL_ADC_Init+0x290>)
 8005596:	f7ff ff17 	bl	80053c8 <LL_ADC_IsEnabled>
 800559a:	4604      	mov	r4, r0
 800559c:	4856      	ldr	r0, [pc, #344]	; (80056f8 <HAL_ADC_Init+0x294>)
 800559e:	f7ff ff13 	bl	80053c8 <LL_ADC_IsEnabled>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4323      	orrs	r3, r4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e008      	b.n	80055c4 <HAL_ADC_Init+0x160>
 80055b2:	484d      	ldr	r0, [pc, #308]	; (80056e8 <HAL_ADC_Init+0x284>)
 80055b4:	f7ff ff08 	bl	80053c8 <LL_ADC_IsEnabled>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d026      	beq.n	8005616 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a49      	ldr	r2, [pc, #292]	; (80056f4 <HAL_ADC_Init+0x290>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_ADC_Init+0x178>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a48      	ldr	r2, [pc, #288]	; (80056f8 <HAL_ADC_Init+0x294>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_Init+0x17c>
 80055dc:	4a47      	ldr	r2, [pc, #284]	; (80056fc <HAL_ADC_Init+0x298>)
 80055de:	e000      	b.n	80055e2 <HAL_ADC_Init+0x17e>
 80055e0:	4a47      	ldr	r2, [pc, #284]	; (8005700 <HAL_ADC_Init+0x29c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7ff fc09 	bl	8004e00 <LL_ADC_SetCommonClock>
 80055ee:	e012      	b.n	8005616 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff fc34 	bl	8004e68 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8005600:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <HAL_ADC_Init+0x29c>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005610:	493b      	ldr	r1, [pc, #236]	; (8005700 <HAL_ADC_Init+0x29c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a33      	ldr	r2, [pc, #204]	; (80056e8 <HAL_ADC_Init+0x284>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d010      	beq.n	8005642 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005626:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800562c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8005632:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800563a:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800563c:	4313      	orrs	r3, r2
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	e035      	b.n	80056ae <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	7f1b      	ldrb	r3, [r3, #28]
 8005646:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800564e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005650:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005656:	2a00      	cmp	r2, #0
 8005658:	d002      	beq.n	8005660 <HAL_ADC_Init+0x1fc>
 800565a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800565e:	e000      	b.n	8005662 <HAL_ADC_Init+0x1fe>
 8005660:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005662:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005668:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da04      	bge.n	800567c <HAL_ADC_Init+0x218>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800567a:	e001      	b.n	8005680 <HAL_ADC_Init+0x21c>
 800567c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8005680:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	491b      	ldr	r1, [pc, #108]	; (80056f4 <HAL_ADC_Init+0x290>)
 8005688:	428b      	cmp	r3, r1
 800568a:	d004      	beq.n	8005696 <HAL_ADC_Init+0x232>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4919      	ldr	r1, [pc, #100]	; (80056f8 <HAL_ADC_Init+0x294>)
 8005692:	428b      	cmp	r3, r1
 8005694:	d103      	bne.n	800569e <HAL_ADC_Init+0x23a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800569c:	e003      	b.n	80056a6 <HAL_ADC_Init+0x242>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80056a6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d131      	bne.n	800571c <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_ADC_Init+0x284>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	3b01      	subs	r3, #1
 80056c8:	045b      	lsls	r3, r3, #17
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	e024      	b.n	800571c <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d113      	bne.n	8005704 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	e01a      	b.n	800571c <HAL_ADC_Init+0x2b8>
 80056e6:	bf00      	nop
 80056e8:	46021000 	.word	0x46021000
 80056ec:	20000000 	.word	0x20000000
 80056f0:	053e2d63 	.word	0x053e2d63
 80056f4:	42028000 	.word	0x42028000
 80056f8:	42028100 	.word	0x42028100
 80056fc:	42028300 	.word	0x42028300
 8005700:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_ADC_Init+0x494>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	4313      	orrs	r3, r2
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	4313      	orrs	r3, r2
 8005740:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	4b6c      	ldr	r3, [pc, #432]	; (80058fc <HAL_ADC_Init+0x498>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	6a39      	ldr	r1, [r7, #32]
 8005752:	430b      	orrs	r3, r1
 8005754:	60d3      	str	r3, [r2, #12]
 8005756:	e031      	b.n	80057bc <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	4313      	orrs	r3, r2
 800576e:	6a3a      	ldr	r2, [r7, #32]
 8005770:	4313      	orrs	r3, r2
 8005772:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	4b61      	ldr	r3, [pc, #388]	; (8005900 <HAL_ADC_Init+0x49c>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6a39      	ldr	r1, [r7, #32]
 8005784:	430b      	orrs	r3, r1
 8005786:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a4d      	ldr	r2, [pc, #308]	; (80058f8 <HAL_ADC_Init+0x494>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f000 80a4 	beq.w	8005910 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fe22 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 80057d2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fe2f 	bl	800543c <LL_ADC_INJ_IsConversionOngoing>
 80057de:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d166      	bne.n	80058b4 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d163      	bne.n	80058b4 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7f1b      	ldrb	r3, [r3, #28]
 80057f0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4943      	ldr	r1, [pc, #268]	; (8005904 <HAL_ADC_Init+0x4a0>)
 80057f8:	428b      	cmp	r3, r1
 80057fa:	d004      	beq.n	8005806 <HAL_ADC_Init+0x3a2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4941      	ldr	r1, [pc, #260]	; (8005908 <HAL_ADC_Init+0x4a4>)
 8005802:	428b      	cmp	r3, r1
 8005804:	d102      	bne.n	800580c <HAL_ADC_Init+0x3a8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	e002      	b.n	8005812 <HAL_ADC_Init+0x3ae>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005812:	4313      	orrs	r3, r2
 8005814:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	6a39      	ldr	r1, [r7, #32]
 800582a:	430b      	orrs	r3, r1
 800582c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f7ff fbb9 	bl	8004fb8 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800584c:	2b01      	cmp	r3, #1
 800584e:	d11e      	bne.n	800588e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_ADC_Init+0x4a8>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005864:	0411      	lsls	r1, r2, #16
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005876:	4311      	orrs	r1, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800587c:	0892      	lsrs	r2, r2, #2
 800587e:	430a      	orrs	r2, r1
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	e007      	b.n	800589e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10c      	bne.n	80058d6 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f023 010f 	bic.w	r1, r3, #15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
 80058d4:	e007      	b.n	80058e6 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 020f 	bic.w	r2, r2, #15
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80058f6:	e092      	b.n	8005a1e <HAL_ADC_Init+0x5ba>
 80058f8:	46021000 	.word	0x46021000
 80058fc:	fff0c013 	.word	0xfff0c013
 8005900:	ffde800d 	.word	0xffde800d
 8005904:	42028000 	.word	0x42028000
 8005908:	42028100 	.word	0x42028100
 800590c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005916:	2b01      	cmp	r3, #1
 8005918:	d111      	bne.n	800593e <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005922:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8005928:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800592e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	4313      	orrs	r3, r2
 8005934:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_ADC_Init+0x5c8>)
 8005946:	4013      	ands	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	69f9      	ldr	r1, [r7, #28]
 800594e:	430b      	orrs	r3, r1
 8005950:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	461a      	mov	r2, r3
 800595c:	2100      	movs	r1, #0
 800595e:	f7ff fb4e 	bl	8004ffe <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596a:	461a      	mov	r2, r3
 800596c:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8005970:	f7ff fb45 	bl	8004ffe <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d108      	bne.n	800598e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f062 020f 	orn	r2, r2, #15
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
 800598c:	e018      	b.n	80059c0 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005996:	d113      	bne.n	80059c0 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	3b01      	subs	r3, #1
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	f003 031c 	and.w	r3, r3, #28
 80059aa:	f06f 020f 	mvn.w	r2, #15
 80059ae:	fa02 f103 	lsl.w	r1, r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_ADC_Init+0x5cc>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d10b      	bne.n	80059e8 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80059e6:	e01a      	b.n	8005a1e <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ec:	f023 0312 	bic.w	r3, r3, #18
 80059f0:	f043 0210 	orr.w	r2, r3, #16
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fc:	f043 0201 	orr.w	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005a0a:	e008      	b.n	8005a1e <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a10:	f043 0210 	orr.w	r2, r3, #16
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8005a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	372c      	adds	r7, #44	; 0x2c
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	f7fffc02 	.word	0xf7fffc02
 8005a30:	833ffff3 	.word	0x833ffff3

08005a34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef       *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a66      	ldr	r2, [pc, #408]	; (8005bdc <HAL_ADC_Start+0x1a8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_ADC_Start+0x1c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a65      	ldr	r2, [pc, #404]	; (8005be0 <HAL_ADC_Start+0x1ac>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_ADC_Start+0x20>
 8005a50:	4b64      	ldr	r3, [pc, #400]	; (8005be4 <HAL_ADC_Start+0x1b0>)
 8005a52:	e000      	b.n	8005a56 <HAL_ADC_Start+0x22>
 8005a54:	4b64      	ldr	r3, [pc, #400]	; (8005be8 <HAL_ADC_Start+0x1b4>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fc38 	bl	80052cc <LL_ADC_GetMultimode>
 8005a5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fcd7 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80af 	bne.w	8005bce <HAL_ADC_Start+0x19a>
  {
    __HAL_LOCK(hadc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_ADC_Start+0x4a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0aa      	b.n	8005bd4 <HAL_ADC_Start+0x1a0>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 f830 	bl	8006aec <ADC_Enable>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8096 	bne.w	8005bc4 <HAL_ADC_Start+0x190>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a4e      	ldr	r2, [pc, #312]	; (8005bec <HAL_ADC_Start+0x1b8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_ADC_Start+0xd2>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - by default if ADC is Master or Independent or if multimode feature is not available
          - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a49      	ldr	r2, [pc, #292]	; (8005be0 <HAL_ADC_Start+0x1ac>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d002      	beq.n	8005ac6 <HAL_ADC_Start+0x92>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	e000      	b.n	8005ac8 <HAL_ADC_Start+0x94>
 8005ac6:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <HAL_ADC_Start+0x1a8>)
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d002      	beq.n	8005ad6 <HAL_ADC_Start+0xa2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <HAL_ADC_Start+0xae>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ada:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aee:	d106      	bne.n	8005afe <HAL_ADC_Start+0xca>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af4:	f023 0206 	bic.w	r2, r3, #6
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	67da      	str	r2, [r3, #124]	; 0x7c
 8005afc:	e006      	b.n	8005b0c <HAL_ADC_Start+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	67da      	str	r2, [r3, #124]	; 0x7c
 8005b04:	e002      	b.n	8005b0c <HAL_ADC_Start+0xd8>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	221c      	movs	r2, #28
 8005b12:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a32      	ldr	r2, [pc, #200]	; (8005bec <HAL_ADC_Start+0x1b8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d048      	beq.n	8005bb8 <HAL_ADC_Start+0x184>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <HAL_ADC_Start+0x1ac>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d002      	beq.n	8005b36 <HAL_ADC_Start+0x102>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	e000      	b.n	8005b38 <HAL_ADC_Start+0x104>
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_ADC_Start+0x1a8>)
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d008      	beq.n	8005b52 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b05      	cmp	r3, #5
 8005b4a:	d002      	beq.n	8005b52 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d114      	bne.n	8005b7c <HAL_ADC_Start+0x148>
           )
        {
          /* Multimode feature is not available or ADC Instance is Independent or Master,
             or is not Slave ADC with dual regular conversions enabled.
             Then, set HAL_ADC_STATE_INJ_BUSY bit and reset HAL_ADC_STATE_INJ_EOC bit if JAUTO is set. */
          if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_ADC_Start+0x13c>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	679a      	str	r2, [r3, #120]	; 0x78
          }

          /* Start ADC group regular conversion */
          LL_ADC_REG_StartConversion(hadc->Instance);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fc3a 	bl	80053ee <LL_ADC_REG_StartConversion>
 8005b7a:	e01d      	b.n	8005bb8 <HAL_ADC_Start+0x184>
        }
        else
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	679a      	str	r2, [r3, #120]	; 0x78
          /* if Master ADC JAUTO bit is set, update Slave State in setting
             HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <HAL_ADC_Start+0x1ac>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d002      	beq.n	8005b98 <HAL_ADC_Start+0x164>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	e000      	b.n	8005b9a <HAL_ADC_Start+0x166>
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <HAL_ADC_Start+0x1a8>)
 8005b9a:	60fb      	str	r3, [r7, #12]
          if (READ_BIT(tmp_adc_master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_ADC_Start+0x184>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fc16 	bl	80053ee <LL_ADC_REG_StartConversion>
 8005bc2:	e006      	b.n	8005bd2 <HAL_ADC_Start+0x19e>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8005bcc:	e001      	b.n	8005bd2 <HAL_ADC_Start+0x19e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	42028000 	.word	0x42028000
 8005be0:	42028100 	.word	0x42028100
 8005be4:	42028300 	.word	0x42028300
 8005be8:	46021300 	.word	0x46021300
 8005bec:	46021000 	.word	0x46021000

08005bf0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a82      	ldr	r2, [pc, #520]	; (8005e08 <HAL_ADC_PollForConversion+0x218>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_ADC_PollForConversion+0x1e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a80      	ldr	r2, [pc, #512]	; (8005e0c <HAL_ADC_PollForConversion+0x21c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <HAL_ADC_PollForConversion+0x22>
 8005c0e:	4b80      	ldr	r3, [pc, #512]	; (8005e10 <HAL_ADC_PollForConversion+0x220>)
 8005c10:	e000      	b.n	8005c14 <HAL_ADC_PollForConversion+0x24>
 8005c12:	4b80      	ldr	r3, [pc, #512]	; (8005e14 <HAL_ADC_PollForConversion+0x224>)
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fb59 	bl	80052cc <LL_ADC_GetMultimode>
 8005c1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d102      	bne.n	8005c2a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005c24:	2308      	movs	r3, #8
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e04e      	b.n	8005cc8 <HAL_ADC_PollForConversion+0xd8>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a7a      	ldr	r2, [pc, #488]	; (8005e18 <HAL_ADC_PollForConversion+0x228>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d038      	beq.n	8005ca6 <HAL_ADC_PollForConversion+0xb6>
    {
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d002      	beq.n	8005c46 <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b09      	cmp	r3, #9
 8005c44:	d111      	bne.n	8005c6a <HAL_ADC_PollForConversion+0x7a>
         )
      {
        /* Check ADC DMA mode */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_ADC_PollForConversion+0x74>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e112      	b.n	8005e8a <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8005c64:	2304      	movs	r3, #4
 8005c66:	61fb      	str	r3, [r7, #28]
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8005c68:	e02e      	b.n	8005cc8 <HAL_ADC_PollForConversion+0xd8>
        }
      }
      else
      {
        /* Check ADC DMA mode in multimode */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a66      	ldr	r2, [pc, #408]	; (8005e08 <HAL_ADC_PollForConversion+0x218>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_ADC_PollForConversion+0x8e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a64      	ldr	r2, [pc, #400]	; (8005e0c <HAL_ADC_PollForConversion+0x21c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_ADC_PollForConversion+0x92>
 8005c7e:	4b64      	ldr	r3, [pc, #400]	; (8005e10 <HAL_ADC_PollForConversion+0x220>)
 8005c80:	e000      	b.n	8005c84 <HAL_ADC_PollForConversion+0x94>
 8005c82:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <HAL_ADC_PollForConversion+0x224>)
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fb2f 	bl	80052e8 <LL_ADC_GetMultiDMATransfer>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <HAL_ADC_PollForConversion+0xb0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0f4      	b.n	8005e8a <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	e010      	b.n	8005cc8 <HAL_ADC_PollForConversion+0xd8>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <HAL_ADC_PollForConversion+0xd4>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0e2      	b.n	8005e8a <HAL_ADC_PollForConversion+0x29a>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005cc8:	f7ff f842 	bl	8004d50 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005cce:	e021      	b.n	8005d14 <HAL_ADC_PollForConversion+0x124>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd6:	d01d      	beq.n	8005d14 <HAL_ADC_PollForConversion+0x124>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005cd8:	f7ff f83a 	bl	8004d50 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <HAL_ADC_PollForConversion+0xfe>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d112      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x124>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x124>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d00:	f043 0204 	orr.w	r2, r3, #4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e0ba      	b.n	8005e8a <HAL_ADC_PollForConversion+0x29a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0d6      	beq.n	8005cd0 <HAL_ADC_PollForConversion+0xe0>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff f982 	bl	800503c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80a4 	beq.w	8005e88 <HAL_ADC_PollForConversion+0x298>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f040 809e 	bne.w	8005e88 <HAL_ADC_PollForConversion+0x298>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a31      	ldr	r2, [pc, #196]	; (8005e18 <HAL_ADC_PollForConversion+0x228>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d062      	beq.n	8005e1c <HAL_ADC_PollForConversion+0x22c>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d111      	bne.n	8005d88 <HAL_ADC_PollForConversion+0x198>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <HAL_ADC_PollForConversion+0x198>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Get relevant register CFGR in ADC instance of ADC master or slave        */
      /* in function of multimode state (for devices with multimode               */
      /* available).                                                              */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_ADC_PollForConversion+0x21c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d002      	beq.n	8005d98 <HAL_ADC_PollForConversion+0x1a8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	e000      	b.n	8005d9a <HAL_ADC_PollForConversion+0x1aa>
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_ADC_PollForConversion+0x218>)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d008      	beq.n	8005db4 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d002      	beq.n	8005db4 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	d104      	bne.n	8005dbe <HAL_ADC_PollForConversion+0x1ce>
         )
      {
        /* Retrieve handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e011      	b.n	8005de2 <HAL_ADC_PollForConversion+0x1f2>
      }
      else
      {
        /* Retrieve Master ADC CFGR register */
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <HAL_ADC_PollForConversion+0x218>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_ADC_PollForConversion+0x1e2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <HAL_ADC_PollForConversion+0x228>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d102      	bne.n	8005dd8 <HAL_ADC_PollForConversion+0x1e8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	e000      	b.n	8005dda <HAL_ADC_PollForConversion+0x1ea>
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_ADC_PollForConversion+0x218>)
 8005dda:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d104      	bne.n	8005df2 <HAL_ADC_PollForConversion+0x202>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2208      	movs	r2, #8
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e04a      	b.n	8005e88 <HAL_ADC_PollForConversion+0x298>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d145      	bne.n	8005e88 <HAL_ADC_PollForConversion+0x298>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	220c      	movs	r2, #12
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e040      	b.n	8005e88 <HAL_ADC_PollForConversion+0x298>
 8005e06:	bf00      	nop
 8005e08:	42028000 	.word	0x42028000
 8005e0c:	42028100 	.word	0x42028100
 8005e10:	42028300 	.word	0x42028300
 8005e14:	46021300 	.word	0x46021300
 8005e18:	46021000 	.word	0x46021000
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d126      	bne.n	8005e78 <HAL_ADC_PollForConversion+0x288>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff faf1 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d112      	bne.n	8005e60 <HAL_ADC_PollForConversion+0x270>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 020c 	bic.w	r2, r2, #12
 8005e48:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	679a      	str	r2, [r3, #120]	; 0x78
 8005e5e:	e00b      	b.n	8005e78 <HAL_ADC_PollForConversion+0x288>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e70:	f043 0201 	orr.w	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7f1b      	ldrb	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <HAL_ADC_PollForConversion+0x298>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	220c      	movs	r2, #12
 8005e86:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop

08005e94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005eb0:	b590      	push	{r4, r7, lr}
 8005eb2:	b0b7      	sub	sp, #220	; 0xdc
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4aa8      	ldr	r2, [pc, #672]	; (800616c <HAL_ADC_ConfigChannel+0x2bc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d103      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x36>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	f000 bdfe 	b.w	8006ae2 <HAL_ADC_ConfigChannel+0xc32>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fa8f 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 85c1 	bne.w	8006a82 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a99      	ldr	r2, [pc, #612]	; (800616c <HAL_ADC_ConfigChannel+0x2bc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f000 8409 	beq.w	800671e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <HAL_ADC_ConfigChannel+0x7a>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	0e9b      	lsrs	r3, r3, #26
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	e01d      	b.n	8005f66 <HAL_ADC_ConfigChannel+0xb6>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f36:	fa93 f3a3 	rbit	r3, r3
 8005f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8005f4e:	2320      	movs	r3, #32
 8005f50:	e004      	b.n	8005f5c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8005f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2201      	movs	r2, #1
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	69d1      	ldr	r1, [r2, #28]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	430b      	orrs	r3, r1
 8005f72:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f7ff f86f 	bl	8005064 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fa43 	bl	8005416 <LL_ADC_REG_IsConversionOngoing>
 8005f90:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fa4f 	bl	800543c <LL_ADC_INJ_IsConversionOngoing>
 8005f9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 81df 	bne.w	800636a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 81da 	bne.w	800636a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f7ff f8fa 	bl	80051bc <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d046      	beq.n	8006078 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6919      	ldr	r1, [r3, #16]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ffa:	f7fe ff55 	bl	8004ea8 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6919      	ldr	r1, [r3, #16]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fe ff83 	bl	8004f16 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	7e9b      	ldrb	r3, [r3, #26]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d11e      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <HAL_ADC_ConfigChannel+0x17e>
 8006028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800602c:	e000      	b.n	8006030 <HAL_ADC_ConfigChannel+0x180>
 800602e:	2300      	movs	r3, #0
 8006030:	461a      	mov	r2, r3
 8006032:	f7fe ffa6 	bl	8004f82 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006042:	2b01      	cmp	r3, #1
 8006044:	d102      	bne.n	800604c <HAL_ADC_ConfigChannel+0x19c>
 8006046:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800604a:	e000      	b.n	800604e <HAL_ADC_ConfigChannel+0x19e>
 800604c:	2300      	movs	r3, #0
 800604e:	461a      	mov	r2, r3
 8006050:	f7fe ff7c 	bl	8004f4c <LL_ADC_SetOffsetSignedSaturation>
 8006054:	e189      	b.n	800636a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2200      	movs	r2, #0
 8006060:	4619      	mov	r1, r3
 8006062:	f7fe ff8e 	bl	8004f82 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2200      	movs	r2, #0
 8006070:	4619      	mov	r1, r3
 8006072:	f7fe ff6b 	bl	8004f4c <LL_ADC_SetOffsetSignedSaturation>
 8006076:	e178      	b.n	800636a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe ff33 	bl	8004eea <LL_ADC_GetOffsetChannel>
 8006084:	4603      	mov	r3, r0
 8006086:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x1f4>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe ff28 	bl	8004eea <LL_ADC_GetOffsetChannel>
 800609a:	4603      	mov	r3, r0
 800609c:	0e9b      	lsrs	r3, r3, #26
 800609e:	f003 021f 	and.w	r2, r3, #31
 80060a2:	e01e      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x232>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe ff1d 	bl	8004eea <LL_ADC_GetOffsetChannel>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ba:	fa93 f3a3 	rbit	r3, r3
 80060be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80060c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80060ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80060d2:	2320      	movs	r3, #32
 80060d4:	e004      	b.n	80060e0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80060d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060da:	fab3 f383 	clz	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x24a>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	0e9b      	lsrs	r3, r3, #26
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	e018      	b.n	800612c <HAL_ADC_ConfigChannel+0x27c>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006106:	fa93 f3a3 	rbit	r3, r3
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800610e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800611e:	2320      	movs	r3, #32
 8006120:	e004      	b.n	800612c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8006122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006126:	fab3 f383 	clz	r3, r3
 800612a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	2100      	movs	r1, #0
 800613c:	f7fe feb4 	bl	8004ea8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fecf 	bl	8004eea <LL_ADC_GetOffsetChannel>
 800614c:	4603      	mov	r3, r0
 800614e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x2c0>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2101      	movs	r1, #1
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fec4 	bl	8004eea <LL_ADC_GetOffsetChannel>
 8006162:	4603      	mov	r3, r0
 8006164:	0e9b      	lsrs	r3, r3, #26
 8006166:	f003 021f 	and.w	r2, r3, #31
 800616a:	e020      	b.n	80061ae <HAL_ADC_ConfigChannel+0x2fe>
 800616c:	46021000 	.word	0x46021000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe feb7 	bl	8004eea <LL_ADC_GetOffsetChannel>
 800617c:	4603      	mov	r3, r0
 800617e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800618e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006192:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006196:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800619e:	2320      	movs	r3, #32
 80061a0:	e004      	b.n	80061ac <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80061a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a6:	fab3 f383 	clz	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x316>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	0e9b      	lsrs	r3, r3, #26
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	e018      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x348>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d2:	fa93 f3a3 	rbit	r3, r3
 80061d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80061da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80061e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80061ea:	2320      	movs	r3, #32
 80061ec:	e004      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80061ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061f2:	fab3 f383 	clz	r3, r3
 80061f6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d107      	bne.n	800620c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	2101      	movs	r1, #1
 8006208:	f7fe fe4e 	bl	8004ea8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2102      	movs	r1, #2
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe fe69 	bl	8004eea <LL_ADC_GetOffsetChannel>
 8006218:	4603      	mov	r3, r0
 800621a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x388>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fe5e 	bl	8004eea <LL_ADC_GetOffsetChannel>
 800622e:	4603      	mov	r3, r0
 8006230:	0e9b      	lsrs	r3, r3, #26
 8006232:	f003 021f 	and.w	r2, r3, #31
 8006236:	e01a      	b.n	800626e <HAL_ADC_ConfigChannel+0x3be>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fe53 	bl	8004eea <LL_ADC_GetOffsetChannel>
 8006244:	4603      	mov	r3, r0
 8006246:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800625e:	2320      	movs	r3, #32
 8006260:	e004      	b.n	800626c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8006262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006266:	fab3 f383 	clz	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x3d6>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	0e9b      	lsrs	r3, r3, #26
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	e011      	b.n	80062aa <HAL_ADC_ConfigChannel+0x3fa>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800628e:	fa93 f3a3 	rbit	r3, r3
 8006292:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800629e:	2320      	movs	r3, #32
 80062a0:	e003      	b.n	80062aa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80062a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a4:	fab3 f383 	clz	r3, r3
 80062a8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d107      	bne.n	80062be <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	2300      	movs	r3, #0
 80062b8:	2102      	movs	r1, #2
 80062ba:	f7fe fdf5 	bl	8004ea8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2103      	movs	r1, #3
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe fe10 	bl	8004eea <LL_ADC_GetOffsetChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x43a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2103      	movs	r1, #3
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fe05 	bl	8004eea <LL_ADC_GetOffsetChannel>
 80062e0:	4603      	mov	r3, r0
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	f003 021f 	and.w	r2, r3, #31
 80062e8:	e017      	b.n	800631a <HAL_ADC_ConfigChannel+0x46a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2103      	movs	r1, #3
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fdfa 	bl	8004eea <LL_ADC_GetOffsetChannel>
 80062f6:	4603      	mov	r3, r0
 80062f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fc:	fa93 f3a3 	rbit	r3, r3
 8006300:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006304:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800630c:	2320      	movs	r3, #32
 800630e:	e003      	b.n	8006318 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8006310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006312:	fab3 f383 	clz	r3, r3
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x482>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	0e9b      	lsrs	r3, r3, #26
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	e011      	b.n	8006356 <HAL_ADC_ConfigChannel+0x4a6>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006342:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800634a:	2320      	movs	r3, #32
 800634c:	e003      	b.n	8006356 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800634e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006356:	429a      	cmp	r2, r3
 8006358:	d107      	bne.n	800636a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	2103      	movs	r1, #3
 8006366:	f7fe fd9f 	bl	8004ea8 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f82a 	bl	80053c8 <LL_ADC_IsEnabled>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 83ad 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	f7fe ff7b 	bl	8005284 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006396:	f040 80d6 	bne.w	8006546 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <HAL_ADC_ConfigChannel+0x50e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	0e9b      	lsrs	r3, r3, #26
 80063ac:	3301      	adds	r3, #1
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2b09      	cmp	r3, #9
 80063b4:	bf94      	ite	ls
 80063b6:	2301      	movls	r3, #1
 80063b8:	2300      	movhi	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	e019      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x542>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c6:	fa93 f3a3 	rbit	r3, r3
 80063ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80063cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80063d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80063d6:	2320      	movs	r3, #32
 80063d8:	e003      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2b09      	cmp	r3, #9
 80063ea:	bf94      	ite	ls
 80063ec:	2301      	movls	r3, #1
 80063ee:	2300      	movhi	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d04d      	beq.n	8006492 <HAL_ADC_ConfigChannel+0x5e2>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x562>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	0e9b      	lsrs	r3, r3, #26
 8006408:	3301      	adds	r3, #1
 800640a:	069b      	lsls	r3, r3, #26
 800640c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006410:	e015      	b.n	800643e <HAL_ADC_ConfigChannel+0x58e>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800642a:	2320      	movs	r3, #32
 800642c:	e003      	b.n	8006436 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006430:	fab3 f383 	clz	r3, r3
 8006434:	b2db      	uxtb	r3, r3
 8006436:	3301      	adds	r3, #1
 8006438:	069b      	lsls	r3, r3, #26
 800643a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <HAL_ADC_ConfigChannel+0x5ae>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	0e9b      	lsrs	r3, r3, #26
 8006450:	3301      	adds	r3, #1
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2101      	movs	r1, #1
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	e017      	b.n	800648e <HAL_ADC_ConfigChannel+0x5de>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8006476:	2320      	movs	r3, #32
 8006478:	e003      	b.n	8006482 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	fab3 f383 	clz	r3, r3
 8006480:	b2db      	uxtb	r3, r3
 8006482:	3301      	adds	r3, #1
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	e04e      	b.n	8006530 <HAL_ADC_ConfigChannel+0x680>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x5fe>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	0e9b      	lsrs	r3, r3, #26
 80064a4:	3301      	adds	r3, #1
 80064a6:	069b      	lsls	r3, r3, #26
 80064a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ac:	e015      	b.n	80064da <HAL_ADC_ConfigChannel+0x62a>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	fa93 f3a3 	rbit	r3, r3
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80064c6:	2320      	movs	r3, #32
 80064c8:	e003      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	fab3 f383 	clz	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	3301      	adds	r3, #1
 80064d4:	069b      	lsls	r3, r3, #26
 80064d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_ADC_ConfigChannel+0x64a>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	0e9b      	lsrs	r3, r3, #26
 80064ec:	3301      	adds	r3, #1
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	2101      	movs	r1, #1
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	e017      	b.n	800652a <HAL_ADC_ConfigChannel+0x67a>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	fa93 f3a3 	rbit	r3, r3
 8006506:	61bb      	str	r3, [r7, #24]
  return result;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8006512:	2320      	movs	r3, #32
 8006514:	e003      	b.n	800651e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	fab3 f383 	clz	r3, r3
 800651c:	b2db      	uxtb	r3, r3
 800651e:	3301      	adds	r3, #1
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2101      	movs	r1, #1
 8006526:	fa01 f303 	lsl.w	r3, r1, r3
 800652a:	4313      	orrs	r3, r2
 800652c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006542:	f7fe fe3b 	bl	80051bc <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f280 82c3 	bge.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a92      	ldr	r2, [pc, #584]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_ADC_ConfigChannel+0x6b4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a91      	ldr	r2, [pc, #580]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x6b8>
 8006564:	4b90      	ldr	r3, [pc, #576]	; (80067a8 <HAL_ADC_ConfigChannel+0x8f8>)
 8006566:	e000      	b.n	800656a <HAL_ADC_ConfigChannel+0x6ba>
 8006568:	4b90      	ldr	r3, [pc, #576]	; (80067ac <HAL_ADC_ConfigChannel+0x8fc>)
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fc6e 	bl	8004e4c <LL_ADC_GetCommonPathInternalCh>
 8006570:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a89      	ldr	r2, [pc, #548]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <HAL_ADC_ConfigChannel+0x6d8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a88      	ldr	r2, [pc, #544]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10e      	bne.n	80065a6 <HAL_ADC_ConfigChannel+0x6f6>
 8006588:	4885      	ldr	r0, [pc, #532]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 800658a:	f7fe ff1d 	bl	80053c8 <LL_ADC_IsEnabled>
 800658e:	4604      	mov	r4, r0
 8006590:	4884      	ldr	r0, [pc, #528]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006592:	f7fe ff19 	bl	80053c8 <LL_ADC_IsEnabled>
 8006596:	4603      	mov	r3, r0
 8006598:	4323      	orrs	r3, r4
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	e008      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x708>
 80065a6:	4882      	ldr	r0, [pc, #520]	; (80067b0 <HAL_ADC_ConfigChannel+0x900>)
 80065a8:	f7fe ff0e 	bl	80053c8 <LL_ADC_IsEnabled>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80a6 	beq.w	800670a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a7c      	ldr	r2, [pc, #496]	; (80067b4 <HAL_ADC_ConfigChannel+0x904>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d13c      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d136      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00a      	beq.n	80065f4 <HAL_ADC_ConfigChannel+0x744>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d005      	beq.n	80065f4 <HAL_ADC_ConfigChannel+0x744>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <HAL_ADC_ConfigChannel+0x900>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	f040 826e 	bne.w	8006ad0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a69      	ldr	r2, [pc, #420]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_ADC_ConfigChannel+0x758>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a68      	ldr	r2, [pc, #416]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d101      	bne.n	800660c <HAL_ADC_ConfigChannel+0x75c>
 8006608:	4a67      	ldr	r2, [pc, #412]	; (80067a8 <HAL_ADC_ConfigChannel+0x8f8>)
 800660a:	e000      	b.n	800660e <HAL_ADC_ConfigChannel+0x75e>
 800660c:	4a67      	ldr	r2, [pc, #412]	; (80067ac <HAL_ADC_ConfigChannel+0x8fc>)
 800660e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe fc04 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800661e:	4b66      	ldr	r3, [pc, #408]	; (80067b8 <HAL_ADC_ConfigChannel+0x908>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	099b      	lsrs	r3, r3, #6
 8006624:	4a65      	ldr	r2, [pc, #404]	; (80067bc <HAL_ADC_ConfigChannel+0x90c>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	3301      	adds	r3, #1
 800662e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8006630:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8006632:	e002      	b.n	800663a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3b01      	subs	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f9      	bne.n	8006634 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006640:	e246      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5e      	ldr	r2, [pc, #376]	; (80067c0 <HAL_ADC_ConfigChannel+0x910>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d12b      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800664c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006654:	2b00      	cmp	r3, #0
 8006656:	d125      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a50      	ldr	r2, [pc, #320]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00a      	beq.n	8006678 <HAL_ADC_ConfigChannel+0x7c8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a4f      	ldr	r2, [pc, #316]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d005      	beq.n	8006678 <HAL_ADC_ConfigChannel+0x7c8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a4f      	ldr	r2, [pc, #316]	; (80067b0 <HAL_ADC_ConfigChannel+0x900>)
 8006672:	4293      	cmp	r3, r2
 8006674:	f040 822e 	bne.w	8006ad4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a48      	ldr	r2, [pc, #288]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_ADC_ConfigChannel+0x7dc>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a47      	ldr	r2, [pc, #284]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x7e0>
 800668c:	4a46      	ldr	r2, [pc, #280]	; (80067a8 <HAL_ADC_ConfigChannel+0x8f8>)
 800668e:	e000      	b.n	8006692 <HAL_ADC_ConfigChannel+0x7e2>
 8006690:	4a46      	ldr	r2, [pc, #280]	; (80067ac <HAL_ADC_ConfigChannel+0x8fc>)
 8006692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fe fbc2 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a2:	e217      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a46      	ldr	r2, [pc, #280]	; (80067c4 <HAL_ADC_ConfigChannel+0x914>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f040 8213 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 820c 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a37      	ldr	r2, [pc, #220]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00a      	beq.n	80066de <HAL_ADC_ConfigChannel+0x82e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d005      	beq.n	80066de <HAL_ADC_ConfigChannel+0x82e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a36      	ldr	r2, [pc, #216]	; (80067b0 <HAL_ADC_ConfigChannel+0x900>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	f040 81fc 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <HAL_ADC_ConfigChannel+0x8f0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_ADC_ConfigChannel+0x842>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <HAL_ADC_ConfigChannel+0x8f4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_ADC_ConfigChannel+0x846>
 80066f2:	4a2d      	ldr	r2, [pc, #180]	; (80067a8 <HAL_ADC_ConfigChannel+0x8f8>)
 80066f4:	e000      	b.n	80066f8 <HAL_ADC_ConfigChannel+0x848>
 80066f6:	4a2d      	ldr	r2, [pc, #180]	; (80067ac <HAL_ADC_ConfigChannel+0x8fc>)
 80066f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f7fe fb8f 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 8006708:	e1e5      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800671c:	e1db      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	f000 811b 	beq.w	8006966 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d004      	beq.n	8006744 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800673e:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <HAL_ADC_ConfigChannel+0x918>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d107      	bne.n	8006754 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fce9 	bl	8005124 <LL_ADC_REG_SetSequencerChAdd>
 8006752:	e059      	b.n	8006808 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	210f      	movs	r1, #15
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	43db      	mvns	r3, r3
 800676a:	401a      	ands	r2, r3
 800676c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x8d4>
 8006778:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800677c:	0e9b      	lsrs	r3, r3, #26
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	e027      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x924>
 8006784:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006788:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	fa93 f3a3 	rbit	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
  return result;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d117      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800679c:	2320      	movs	r3, #32
 800679e:	e019      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x924>
 80067a0:	42028000 	.word	0x42028000
 80067a4:	42028100 	.word	0x42028100
 80067a8:	42028300 	.word	0x42028300
 80067ac:	46021300 	.word	0x46021300
 80067b0:	46021000 	.word	0x46021000
 80067b4:	ce080000 	.word	0xce080000
 80067b8:	20000000 	.word	0x20000000
 80067bc:	053e2d63 	.word	0x053e2d63
 80067c0:	ca040000 	.word	0xca040000
 80067c4:	80000001 	.word	0x80000001
 80067c8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	fab3 f383 	clz	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6849      	ldr	r1, [r1, #4]
 80067d8:	f001 011f 	and.w	r1, r1, #31
 80067dc:	408b      	lsls	r3, r1
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d808      	bhi.n	8006808 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006802:	4619      	mov	r1, r3
 8006804:	f7fe fc2e 	bl	8005064 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006816:	f7fe fcd1 	bl	80051bc <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f280 8159 	bge.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a9b      	ldr	r2, [pc, #620]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_ADC_ConfigChannel+0x988>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a9a      	ldr	r2, [pc, #616]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d101      	bne.n	800683c <HAL_ADC_ConfigChannel+0x98c>
 8006838:	4b99      	ldr	r3, [pc, #612]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 800683a:	e000      	b.n	800683e <HAL_ADC_ConfigChannel+0x98e>
 800683c:	4b99      	ldr	r3, [pc, #612]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fb04 	bl	8004e4c <LL_ADC_GetCommonPathInternalCh>
 8006844:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a96      	ldr	r2, [pc, #600]	; (8006aa8 <HAL_ADC_ConfigChannel+0xbf8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d12b      	bne.n	80068aa <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d125      	bne.n	80068aa <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a8d      	ldr	r2, [pc, #564]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_ADC_ConfigChannel+0x9c2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a8b      	ldr	r2, [pc, #556]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_ADC_ConfigChannel+0x9c6>
 8006872:	4a8b      	ldr	r2, [pc, #556]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 8006874:	e000      	b.n	8006878 <HAL_ADC_ConfigChannel+0x9c8>
 8006876:	4a8b      	ldr	r2, [pc, #556]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 8006878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800687c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7fe facf 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006888:	4b88      	ldr	r3, [pc, #544]	; (8006aac <HAL_ADC_ConfigChannel+0xbfc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	4a88      	ldr	r2, [pc, #544]	; (8006ab0 <HAL_ADC_ConfigChannel+0xc00>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800689a:	e002      	b.n	80068a2 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f9      	bne.n	800689c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80068a8:	e045      	b.n	8006936 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a81      	ldr	r2, [pc, #516]	; (8006ab4 <HAL_ADC_ConfigChannel+0xc04>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d11b      	bne.n	80068ec <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d115      	bne.n	80068ec <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <HAL_ADC_ConfigChannel+0xa24>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d101      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0xa28>
 80068d4:	4a72      	ldr	r2, [pc, #456]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 80068d6:	e000      	b.n	80068da <HAL_ADC_ConfigChannel+0xa2a>
 80068d8:	4a72      	ldr	r2, [pc, #456]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 80068da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7fe fa9e 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 80068ea:	e024      	b.n	8006936 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a71      	ldr	r2, [pc, #452]	; (8006ab8 <HAL_ADC_ConfigChannel+0xc08>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d11f      	bne.n	8006936 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d115      	bne.n	800692e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a64      	ldr	r2, [pc, #400]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_ADC_ConfigChannel+0xa66>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a62      	ldr	r2, [pc, #392]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d101      	bne.n	800691a <HAL_ADC_ConfigChannel+0xa6a>
 8006916:	4a62      	ldr	r2, [pc, #392]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 8006918:	e000      	b.n	800691c <HAL_ADC_ConfigChannel+0xa6c>
 800691a:	4a62      	ldr	r2, [pc, #392]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 800691c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f7fe fa7d 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 800692c:	e003      	b.n	8006936 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a62      	ldr	r2, [pc, #392]	; (8006abc <HAL_ADC_ConfigChannel+0xc0c>)
 8006934:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a61      	ldr	r2, [pc, #388]	; (8006ac0 <HAL_ADC_ConfigChannel+0xc10>)
 800693c:	4293      	cmp	r3, r2
 800693e:	f040 80ca 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 80c3 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006964:	e0b7      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696e:	d004      	beq.n	800697a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006974:	4a53      	ldr	r2, [pc, #332]	; (8006ac4 <HAL_ADC_ConfigChannel+0xc14>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d106      	bne.n	8006988 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fc01 	bl	800518a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f280 80a2 	bge.w	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a40      	ldr	r2, [pc, #256]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_ADC_ConfigChannel+0xaf6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3e      	ldr	r2, [pc, #248]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <HAL_ADC_ConfigChannel+0xafa>
 80069a6:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 80069a8:	e000      	b.n	80069ac <HAL_ADC_ConfigChannel+0xafc>
 80069aa:	4b3e      	ldr	r3, [pc, #248]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fa4d 	bl	8004e4c <LL_ADC_GetCommonPathInternalCh>
 80069b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a43      	ldr	r2, [pc, #268]	; (8006ac8 <HAL_ADC_ConfigChannel+0xc18>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d115      	bne.n	80069ec <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_ADC_ConfigChannel+0xb24>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a33      	ldr	r2, [pc, #204]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0xb28>
 80069d4:	4a32      	ldr	r2, [pc, #200]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 80069d6:	e000      	b.n	80069da <HAL_ADC_ConfigChannel+0xb2a>
 80069d8:	4a32      	ldr	r2, [pc, #200]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 80069da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fe fa1e 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 80069ea:	e034      	b.n	8006a56 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a36      	ldr	r2, [pc, #216]	; (8006acc <HAL_ADC_ConfigChannel+0xc1c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d115      	bne.n	8006a22 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a27      	ldr	r2, [pc, #156]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_ADC_ConfigChannel+0xb5a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a25      	ldr	r2, [pc, #148]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0xb5e>
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 8006a0c:	e000      	b.n	8006a10 <HAL_ADC_ConfigChannel+0xb60>
 8006a0e:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 8006a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7fe fa03 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
 8006a20:	e019      	b.n	8006a56 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a24      	ldr	r2, [pc, #144]	; (8006ab8 <HAL_ADC_ConfigChannel+0xc08>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d114      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <HAL_ADC_ConfigChannel+0xbe8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_ADC_ConfigChannel+0xb90>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <HAL_ADC_ConfigChannel+0xbec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d101      	bne.n	8006a44 <HAL_ADC_ConfigChannel+0xb94>
 8006a40:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <HAL_ADC_ConfigChannel+0xbf0>)
 8006a42:	e000      	b.n	8006a46 <HAL_ADC_ConfigChannel+0xb96>
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_ADC_ConfigChannel+0xbf4>)
 8006a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a4a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fe f9e8 	bl	8004e26 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a19      	ldr	r2, [pc, #100]	; (8006ac0 <HAL_ADC_ConfigChannel+0xc10>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d13a      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d134      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0201 	orr.w	r2, r2, #1
 8006a7c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006a80:	e029      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006a94:	e01f      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
 8006a96:	bf00      	nop
 8006a98:	42028000 	.word	0x42028000
 8006a9c:	42028100 	.word	0x42028100
 8006aa0:	42028300 	.word	0x42028300
 8006aa4:	46021300 	.word	0x46021300
 8006aa8:	b6002000 	.word	0xb6002000
 8006aac:	20000000 	.word	0x20000000
 8006ab0:	053e2d63 	.word	0x053e2d63
 8006ab4:	ba004000 	.word	0xba004000
 8006ab8:	80000001 	.word	0x80000001
 8006abc:	b2001000 	.word	0xb2001000
 8006ac0:	d7200000 	.word	0xd7200000
 8006ac4:	80000010 	.word	0x80000010
 8006ac8:	ce080000 	.word	0xce080000
 8006acc:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ad4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8006ade:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	37dc      	adds	r7, #220	; 0xdc
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd90      	pop	{r4, r7, pc}
 8006aea:	bf00      	nop

08006aec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fc65 	bl	80053c8 <LL_ADC_IsEnabled>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d17b      	bne.n	8006bfc <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	4b3f      	ldr	r3, [pc, #252]	; (8006c08 <ADC_Enable+0x11c>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b16:	f043 0210 	orr.w	r2, r3, #16
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b22:	f043 0201 	orr.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e067      	b.n	8006bfe <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fc30 	bl	80053a0 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <ADC_Enable+0x66>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <ADC_Enable+0x120>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d054      	beq.n	8006bfc <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006b52:	f7fe f8fd 	bl	8004d50 <HAL_GetTick>
 8006b56:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a2c      	ldr	r2, [pc, #176]	; (8006c10 <ADC_Enable+0x124>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <ADC_Enable+0x80>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2b      	ldr	r2, [pc, #172]	; (8006c14 <ADC_Enable+0x128>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d101      	bne.n	8006b70 <ADC_Enable+0x84>
 8006b6c:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <ADC_Enable+0x12c>)
 8006b6e:	e000      	b.n	8006b72 <ADC_Enable+0x86>
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <ADC_Enable+0x130>)
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fbaa 	bl	80052cc <LL_ADC_GetMultimode>
 8006b78:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <ADC_Enable+0x128>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d002      	beq.n	8006b8a <ADC_Enable+0x9e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	e000      	b.n	8006b8c <ADC_Enable+0xa0>
 8006b8a:	4b21      	ldr	r3, [pc, #132]	; (8006c10 <ADC_Enable+0x124>)
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d02c      	beq.n	8006bee <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d130      	bne.n	8006bfc <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b9a:	e028      	b.n	8006bee <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe fc11 	bl	80053c8 <LL_ADC_IsEnabled>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fbf5 	bl	80053a0 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006bb6:	f7fe f8cb 	bl	8004d50 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d914      	bls.n	8006bee <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d00d      	beq.n	8006bee <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd6:	f043 0210 	orr.w	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be2:	f043 0201 	orr.w	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e007      	b.n	8006bfe <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d1cf      	bne.n	8006b9c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	8000003f 	.word	0x8000003f
 8006c0c:	46021000 	.word	0x46021000
 8006c10:	42028000 	.word	0x42028000
 8006c14:	42028100 	.word	0x42028100
 8006c18:	42028300 	.word	0x42028300
 8006c1c:	46021300 	.word	0x46021300

08006c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <__NVIC_SetPriorityGrouping+0x44>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c52:	4a04      	ldr	r2, [pc, #16]	; (8006c64 <__NVIC_SetPriorityGrouping+0x44>)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	60d3      	str	r3, [r2, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000ed00 	.word	0xe000ed00

08006c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <__NVIC_GetPriorityGrouping+0x18>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	f003 0307 	and.w	r3, r3, #7
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	e000ed00 	.word	0xe000ed00

08006c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	6039      	str	r1, [r7, #0]
 8006c8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db0a      	blt.n	8006cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	490c      	ldr	r1, [pc, #48]	; (8006cd0 <__NVIC_SetPriority+0x4c>)
 8006c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ca2:	0112      	lsls	r2, r2, #4
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cac:	e00a      	b.n	8006cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	4908      	ldr	r1, [pc, #32]	; (8006cd4 <__NVIC_SetPriority+0x50>)
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	0112      	lsls	r2, r2, #4
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	761a      	strb	r2, [r3, #24]
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	e000e100 	.word	0xe000e100
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b089      	sub	sp, #36	; 0x24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f1c3 0307 	rsb	r3, r3, #7
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	bf28      	it	cs
 8006cf6:	2304      	movcs	r3, #4
 8006cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d902      	bls.n	8006d08 <NVIC_EncodePriority+0x30>
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	3b03      	subs	r3, #3
 8006d06:	e000      	b.n	8006d0a <NVIC_EncodePriority+0x32>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	43da      	mvns	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2a:	43d9      	mvns	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d30:	4313      	orrs	r3, r2
         );
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3724      	adds	r7, #36	; 0x24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
	...

08006d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d50:	d301      	bcc.n	8006d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d52:	2301      	movs	r3, #1
 8006d54:	e00f      	b.n	8006d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <SysTick_Config+0x40>)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d5e:	210f      	movs	r1, #15
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d64:	f7ff ff8e 	bl	8006c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <SysTick_Config+0x40>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <SysTick_Config+0x40>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010

08006d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ff47 	bl	8006c20 <__NVIC_SetPriorityGrouping>
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	4603      	mov	r3, r0
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006da8:	f7ff ff5e 	bl	8006c68 <__NVIC_GetPriorityGrouping>
 8006dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f7ff ff90 	bl	8006cd8 <NVIC_EncodePriority>
 8006db8:	4602      	mov	r2, r0
 8006dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff5f 	bl	8006c84 <__NVIC_SetPriority>
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ffb2 	bl	8006d40 <SysTick_Config>
 8006ddc:	4603      	mov	r3, r0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006dfa:	e1ba      	b.n	8007172 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	2101      	movs	r1, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 81aa 	beq.w	800716c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a55      	ldr	r2, [pc, #340]	; (8006f70 <HAL_GPIO_Init+0x188>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d15d      	bne.n	8006edc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8006e26:	2201      	movs	r2, #1
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	4013      	ands	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f003 0201 	and.w	r2, r3, #1
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006e50:	4a48      	ldr	r2, [pc, #288]	; (8006f74 <HAL_GPIO_Init+0x18c>)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e58:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006e5a:	4a46      	ldr	r2, [pc, #280]	; (8006f74 <HAL_GPIO_Init+0x18c>)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	08da      	lsrs	r2, r3, #3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3208      	adds	r2, #8
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	220f      	movs	r2, #15
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	4013      	ands	r3, r2
 8006e88:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	220b      	movs	r2, #11
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	08da      	lsrs	r2, r3, #3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3208      	adds	r2, #8
 8006ea6:	69f9      	ldr	r1, [r7, #28]
 8006ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	2202      	movs	r2, #2
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e067      	b.n	8006fac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d003      	beq.n	8006eec <HAL_GPIO_Init+0x104>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b12      	cmp	r3, #18
 8006eea:	d145      	bne.n	8006f78 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	08da      	lsrs	r2, r3, #3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3208      	adds	r2, #8
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	220f      	movs	r2, #15
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	08da      	lsrs	r2, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3208      	adds	r2, #8
 8006f32:	69f9      	ldr	r1, [r7, #28]
 8006f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	2203      	movs	r2, #3
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0203 	and.w	r2, r3, #3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e01e      	b.n	8006fac <HAL_GPIO_Init+0x1c4>
 8006f6e:	bf00      	nop
 8006f70:	46020000 	.word	0x46020000
 8006f74:	0800e664 	.word	0x0800e664
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	2203      	movs	r2, #3
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 0203 	and.w	r2, r3, #3
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00b      	beq.n	8006fcc <HAL_GPIO_Init+0x1e4>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d007      	beq.n	8006fcc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fc0:	2b11      	cmp	r3, #17
 8006fc2:	d003      	beq.n	8006fcc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b12      	cmp	r3, #18
 8006fca:	d130      	bne.n	800702e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007002:	2201      	movs	r2, #1
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43db      	mvns	r3, r3
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	4013      	ands	r3, r2
 8007010:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	f003 0201 	and.w	r2, r3, #1
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	4313      	orrs	r3, r2
 8007026:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d017      	beq.n	8007066 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	2203      	movs	r2, #3
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	43db      	mvns	r3, r3
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	4013      	ands	r3, r2
 800704c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	4313      	orrs	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d07c      	beq.n	800716c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007072:	4a47      	ldr	r2, [pc, #284]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	089b      	lsrs	r3, r3, #2
 8007078:	3318      	adds	r3, #24
 800707a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	220f      	movs	r2, #15
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	43db      	mvns	r3, r3
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	4013      	ands	r3, r2
 8007094:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0a9a      	lsrs	r2, r3, #10
 800709a:	4b3e      	ldr	r3, [pc, #248]	; (8007194 <HAL_GPIO_Init+0x3ac>)
 800709c:	4013      	ands	r3, r2
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	f002 0203 	and.w	r2, r2, #3
 80070a4:	00d2      	lsls	r2, r2, #3
 80070a6:	4093      	lsls	r3, r2
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80070ae:	4938      	ldr	r1, [pc, #224]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	089b      	lsrs	r3, r3, #2
 80070b4:	3318      	adds	r3, #24
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80070bc:	4b34      	ldr	r3, [pc, #208]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80070e0:	4a2b      	ldr	r2, [pc, #172]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80070e6:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800710a:	4a21      	ldr	r2, [pc, #132]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007110:	4b1f      	ldr	r3, [pc, #124]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 8007112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007116:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	43db      	mvns	r3, r3
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	4013      	ands	r3, r2
 8007120:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007136:	4a16      	ldr	r2, [pc, #88]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800713e:	4b14      	ldr	r3, [pc, #80]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 8007140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007144:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	43db      	mvns	r3, r3
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	4013      	ands	r3, r2
 800714e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <HAL_GPIO_Init+0x3a8>)
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3301      	adds	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	f47f ae3d 	bne.w	8006dfc <HAL_GPIO_Init+0x14>
  }
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	3724      	adds	r7, #36	; 0x24
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	46022000 	.word	0x46022000
 8007194:	002f7f7f 	.word	0x002f7f7f

08007198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
 80071a4:	4613      	mov	r3, r2
 80071a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071a8:	787b      	ldrb	r3, [r7, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071ae:	887a      	ldrh	r2, [r7, #2]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80071b4:	e002      	b.n	80071bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071da:	887a      	ldrh	r2, [r7, #2]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4013      	ands	r3, r2
 80071e0:	041a      	lsls	r2, r3, #16
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	43d9      	mvns	r1, r3
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	400b      	ands	r3, r1
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	619a      	str	r2, [r3, #24]
}
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fe:	b08d      	sub	sp, #52	; 0x34
 8007200:	af0a      	add	r7, sp, #40	; 0x28
 8007202:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e048      	b.n	80072a0 <HAL_HCD_Init+0xa4>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fc feae 	bl	8003f84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2203      	movs	r2, #3
 800722c:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
  {
    hhcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f006 f9d0 	bl	800d5da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	687e      	ldr	r6, [r7, #4]
 8007242:	466d      	mov	r5, sp
 8007244:	f106 0410 	add.w	r4, r6, #16
 8007248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800724a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800724c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800724e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007254:	e885 0003 	stmia.w	r5, {r0, r1}
 8007258:	1d33      	adds	r3, r6, #4
 800725a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f006 f98e 	bl	800d57e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2101      	movs	r1, #1
 8007268:	4618      	mov	r0, r3
 800726a:	f006 f9c7 	bl	800d5fc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	687e      	ldr	r6, [r7, #4]
 8007276:	466d      	mov	r5, sp
 8007278:	f106 0410 	add.w	r4, r6, #16
 800727c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800727e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007284:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007288:	e885 0003 	stmia.w	r5, {r0, r1}
 800728c:	1d33      	adds	r3, r6, #4
 800728e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	f006 faa5 	bl	800d7e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072a8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e007      	b.n	80072d6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f023 0204 	bic.w	r2, r3, #4
 80072ce:	4905      	ldr	r1, [pc, #20]	; (80072e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40030400 	.word	0x40030400

080072e8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_ICACHE_Enable+0x1c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a04      	ldr	r2, [pc, #16]	; (8007304 <HAL_ICACHE_Enable+0x1c>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40030400 	.word	0x40030400

08007308 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007310:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007318:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	d10b      	bne.n	800733a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007328:	d905      	bls.n	8007336 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800732a:	4b33      	ldr	r3, [pc, #204]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4a32      	ldr	r2, [pc, #200]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007334:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e057      	b.n	80073ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d90a      	bls.n	8007358 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007342:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4313      	orrs	r3, r2
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007354:	60d3      	str	r3, [r2, #12]
 8007356:	e007      	b.n	8007368 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007358:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007360:	4925      	ldr	r1, [pc, #148]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4313      	orrs	r3, r2
 8007366:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007368:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a24      	ldr	r2, [pc, #144]	; (8007400 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	099b      	lsrs	r3, r3, #6
 8007374:	2232      	movs	r2, #50	; 0x32
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	4a21      	ldr	r2, [pc, #132]	; (8007400 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	099b      	lsrs	r3, r3, #6
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007386:	e002      	b.n	800738e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b01      	subs	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <HAL_PWREx_ControlVoltageScaling+0x98>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f3      	bne.n	8007388 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01b      	beq.n	80073de <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80073a6:	4b15      	ldr	r3, [pc, #84]	; (80073fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a15      	ldr	r2, [pc, #84]	; (8007400 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073ac:	fba2 2303 	umull	r2, r3, r2, r3
 80073b0:	099b      	lsrs	r3, r3, #6
 80073b2:	2232      	movs	r2, #50	; 0x32
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
 80073b8:	4a11      	ldr	r2, [pc, #68]	; (8007400 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	099b      	lsrs	r3, r3, #6
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80073c4:	e002      	b.n	80073cc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <HAL_PWREx_ControlVoltageScaling+0xd6>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f3      	bne.n	80073c6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e000      	b.n	80073ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	46020800 	.word	0x46020800
 80073fc:	20000000 	.word	0x20000000
 8007400:	10624dd3 	.word	0x10624dd3

08007404 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <HAL_PWREx_GetVoltageRange+0x18>)
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	46020800 	.word	0x46020800

08007420 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <HAL_PWREx_ConfigSupply+0x94>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <HAL_PWREx_ConfigSupply+0x98>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	099b      	lsrs	r3, r3, #6
 8007434:	2232      	movs	r2, #50	; 0x32
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <HAL_PWREx_ConfigSupply+0x98>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	099b      	lsrs	r3, r3, #6
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d113      	bne.n	8007474 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4a1a      	ldr	r2, [pc, #104]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007452:	f023 0302 	bic.w	r3, r3, #2
 8007456:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007458:	e002      	b.n	8007460 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b01      	subs	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007460:	4b16      	ldr	r3, [pc, #88]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b02      	cmp	r3, #2
 800746a:	d116      	bne.n	800749a <HAL_PWREx_ConfigSupply+0x7a>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f3      	bne.n	800745a <HAL_PWREx_ConfigSupply+0x3a>
 8007472:	e012      	b.n	800749a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007474:	4b11      	ldr	r3, [pc, #68]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a10      	ldr	r2, [pc, #64]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 800747a:	f043 0302 	orr.w	r3, r3, #2
 800747e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007480:	e002      	b.n	8007488 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b01      	subs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <HAL_PWREx_ConfigSupply+0x9c>)
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <HAL_PWREx_ConfigSupply+0x7a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f3      	bne.n	8007482 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e000      	b.n	80074a6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000000 	.word	0x20000000
 80074b8:	10624dd3 	.word	0x10624dd3
 80074bc:	46020800 	.word	0x46020800

080074c0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4a04      	ldr	r2, [pc, #16]	; (80074dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80074ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ce:	6113      	str	r3, [r2, #16]
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	46020800 	.word	0x46020800

080074e0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	4a04      	ldr	r2, [pc, #16]	; (80074fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80074ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ee:	6113      	str	r3, [r2, #16]
}
 80074f0:	bf00      	nop
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	46020800 	.word	0x46020800

08007500 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <HAL_PWREx_EnableVddA+0x1c>)
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	4a04      	ldr	r2, [pc, #16]	; (800751c <HAL_PWREx_EnableVddA+0x1c>)
 800750a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800750e:	6113      	str	r3, [r2, #16]
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	46020800 	.word	0x46020800

08007520 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8007526:	f7ff ff6d 	bl	8007404 <HAL_PWREx_GetVoltageRange>
 800752a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007532:	d003      	beq.n	800753c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800753a:	d107      	bne.n	800754c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4a05      	ldr	r2, [pc, #20]	; (8007558 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8007542:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8007546:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	46020800 	.word	0x46020800

0800755c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007564:	2300      	movs	r3, #0
 8007566:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f000 bec8 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007576:	4b99      	ldr	r3, [pc, #612]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007580:	4b96      	ldr	r3, [pc, #600]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 816c 	beq.w	8007870 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_RCC_OscConfig+0x52>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2b0c      	cmp	r3, #12
 80075a2:	f040 80de 	bne.w	8007762 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	f040 80da 	bne.w	8007762 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f000 bea5 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c0:	4b86      	ldr	r3, [pc, #536]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_RCC_OscConfig+0x7a>
 80075cc:	4b83      	ldr	r3, [pc, #524]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075d4:	e005      	b.n	80075e2 <HAL_RCC_OscConfig+0x86>
 80075d6:	4b81      	ldr	r3, [pc, #516]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80075d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075dc:	041b      	lsls	r3, r3, #16
 80075de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d255      	bcs.n	8007692 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 f9d9 	bl	80089a8 <RCC_SetFlashLatencyFromMSIRange>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f000 be82 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007602:	4b76      	ldr	r3, [pc, #472]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	4a75      	ldr	r2, [pc, #468]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	4b73      	ldr	r3, [pc, #460]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	4970      	ldr	r1, [pc, #448]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800761c:	4313      	orrs	r3, r2
 800761e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007628:	d309      	bcc.n	800763e <HAL_RCC_OscConfig+0xe2>
 800762a:	4b6c      	ldr	r3, [pc, #432]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f023 021f 	bic.w	r2, r3, #31
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	4969      	ldr	r1, [pc, #420]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007638:	4313      	orrs	r3, r2
 800763a:	60cb      	str	r3, [r1, #12]
 800763c:	e07e      	b.n	800773c <HAL_RCC_OscConfig+0x1e0>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	da0a      	bge.n	800765c <HAL_RCC_OscConfig+0x100>
 8007646:	4b65      	ldr	r3, [pc, #404]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	015b      	lsls	r3, r3, #5
 8007654:	4961      	ldr	r1, [pc, #388]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007656:	4313      	orrs	r3, r2
 8007658:	60cb      	str	r3, [r1, #12]
 800765a:	e06f      	b.n	800773c <HAL_RCC_OscConfig+0x1e0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007664:	d30a      	bcc.n	800767c <HAL_RCC_OscConfig+0x120>
 8007666:	4b5d      	ldr	r3, [pc, #372]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	029b      	lsls	r3, r3, #10
 8007674:	4959      	ldr	r1, [pc, #356]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007676:	4313      	orrs	r3, r2
 8007678:	60cb      	str	r3, [r1, #12]
 800767a:	e05f      	b.n	800773c <HAL_RCC_OscConfig+0x1e0>
 800767c:	4b57      	ldr	r3, [pc, #348]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	03db      	lsls	r3, r3, #15
 800768a:	4954      	ldr	r1, [pc, #336]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800768c:	4313      	orrs	r3, r2
 800768e:	60cb      	str	r3, [r1, #12]
 8007690:	e054      	b.n	800773c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007692:	4b52      	ldr	r3, [pc, #328]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	4a51      	ldr	r2, [pc, #324]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800769c:	6093      	str	r3, [r2, #8]
 800769e:	4b4f      	ldr	r3, [pc, #316]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	494c      	ldr	r1, [pc, #304]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80076b8:	d309      	bcc.n	80076ce <HAL_RCC_OscConfig+0x172>
 80076ba:	4b48      	ldr	r3, [pc, #288]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f023 021f 	bic.w	r2, r3, #31
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	4945      	ldr	r1, [pc, #276]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60cb      	str	r3, [r1, #12]
 80076cc:	e028      	b.n	8007720 <HAL_RCC_OscConfig+0x1c4>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da0a      	bge.n	80076ec <HAL_RCC_OscConfig+0x190>
 80076d6:	4b41      	ldr	r3, [pc, #260]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	015b      	lsls	r3, r3, #5
 80076e4:	493d      	ldr	r1, [pc, #244]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60cb      	str	r3, [r1, #12]
 80076ea:	e019      	b.n	8007720 <HAL_RCC_OscConfig+0x1c4>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f4:	d30a      	bcc.n	800770c <HAL_RCC_OscConfig+0x1b0>
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	029b      	lsls	r3, r3, #10
 8007704:	4935      	ldr	r1, [pc, #212]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007706:	4313      	orrs	r3, r2
 8007708:	60cb      	str	r3, [r1, #12]
 800770a:	e009      	b.n	8007720 <HAL_RCC_OscConfig+0x1c4>
 800770c:	4b33      	ldr	r3, [pc, #204]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	03db      	lsls	r3, r3, #15
 800771a:	4930      	ldr	r1, [pc, #192]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800771c:	4313      	orrs	r3, r2
 800771e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	4618      	mov	r0, r3
 800772c:	f001 f93c 	bl	80089a8 <RCC_SetFlashLatencyFromMSIRange>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f000 bde5 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800773c:	f001 f8de 	bl	80088fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007740:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <HAL_RCC_OscConfig+0x284>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd fab9 	bl	8004cbc <HAL_InitTick>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 808a 	beq.w	800786e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800775a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800775e:	f000 bdd2 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d066      	beq.n	8007838 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800776a:	4b1c      	ldr	r3, [pc, #112]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007776:	f7fd faeb 	bl	8004d50 <HAL_GetTick>
 800777a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800777c:	e009      	b.n	8007792 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800777e:	f7fd fae7 	bl	8004d50 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d902      	bls.n	8007792 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	f000 bdba 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007792:	4b12      	ldr	r3, [pc, #72]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ef      	beq.n	800777e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4a0e      	ldr	r2, [pc, #56]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077a8:	6093      	str	r3, [r2, #8]
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	4909      	ldr	r1, [pc, #36]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80077c4:	d30e      	bcc.n	80077e4 <HAL_RCC_OscConfig+0x288>
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f023 021f 	bic.w	r2, r3, #31
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	4902      	ldr	r1, [pc, #8]	; (80077dc <HAL_RCC_OscConfig+0x280>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60cb      	str	r3, [r1, #12]
 80077d8:	e04a      	b.n	8007870 <HAL_RCC_OscConfig+0x314>
 80077da:	bf00      	nop
 80077dc:	46020c00 	.word	0x46020c00
 80077e0:	2000001c 	.word	0x2000001c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da0a      	bge.n	8007802 <HAL_RCC_OscConfig+0x2a6>
 80077ec:	4b98      	ldr	r3, [pc, #608]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	015b      	lsls	r3, r3, #5
 80077fa:	4995      	ldr	r1, [pc, #596]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60cb      	str	r3, [r1, #12]
 8007800:	e036      	b.n	8007870 <HAL_RCC_OscConfig+0x314>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780a:	d30a      	bcc.n	8007822 <HAL_RCC_OscConfig+0x2c6>
 800780c:	4b90      	ldr	r3, [pc, #576]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	498d      	ldr	r1, [pc, #564]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800781c:	4313      	orrs	r3, r2
 800781e:	60cb      	str	r3, [r1, #12]
 8007820:	e026      	b.n	8007870 <HAL_RCC_OscConfig+0x314>
 8007822:	4b8b      	ldr	r3, [pc, #556]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	03db      	lsls	r3, r3, #15
 8007830:	4987      	ldr	r1, [pc, #540]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007832:	4313      	orrs	r3, r2
 8007834:	60cb      	str	r3, [r1, #12]
 8007836:	e01b      	b.n	8007870 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007838:	4b85      	ldr	r3, [pc, #532]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a84      	ldr	r2, [pc, #528]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007844:	f7fd fa84 	bl	8004d50 <HAL_GetTick>
 8007848:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800784a:	e009      	b.n	8007860 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800784c:	f7fd fa80 	bl	8004d50 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d902      	bls.n	8007860 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	f000 bd53 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007860:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1ef      	bne.n	800784c <HAL_RCC_OscConfig+0x2f0>
 800786c:	e000      	b.n	8007870 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800786e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 808b 	beq.w	8007994 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2b08      	cmp	r3, #8
 8007882:	d005      	beq.n	8007890 <HAL_RCC_OscConfig+0x334>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d109      	bne.n	800789e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b03      	cmp	r3, #3
 800788e:	d106      	bne.n	800789e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d17d      	bne.n	8007994 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f000 bd34 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x35a>
 80078a8:	4b69      	ldr	r3, [pc, #420]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a68      	ldr	r2, [pc, #416]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e041      	b.n	800793a <HAL_RCC_OscConfig+0x3de>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078be:	d112      	bne.n	80078e6 <HAL_RCC_OscConfig+0x38a>
 80078c0:	4b63      	ldr	r3, [pc, #396]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a62      	ldr	r2, [pc, #392]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b60      	ldr	r3, [pc, #384]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5f      	ldr	r2, [pc, #380]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4b5d      	ldr	r3, [pc, #372]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a5c      	ldr	r2, [pc, #368]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e029      	b.n	800793a <HAL_RCC_OscConfig+0x3de>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80078ee:	d112      	bne.n	8007916 <HAL_RCC_OscConfig+0x3ba>
 80078f0:	4b57      	ldr	r3, [pc, #348]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a56      	ldr	r2, [pc, #344]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b54      	ldr	r3, [pc, #336]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a53      	ldr	r2, [pc, #332]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	4b51      	ldr	r3, [pc, #324]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a50      	ldr	r2, [pc, #320]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800790e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e011      	b.n	800793a <HAL_RCC_OscConfig+0x3de>
 8007916:	4b4e      	ldr	r3, [pc, #312]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a4d      	ldr	r2, [pc, #308]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800791c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a4a      	ldr	r2, [pc, #296]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4b48      	ldr	r3, [pc, #288]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a47      	ldr	r2, [pc, #284]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007934:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007938:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d014      	beq.n	800796c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007942:	f7fd fa05 	bl	8004d50 <HAL_GetTick>
 8007946:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007948:	e009      	b.n	800795e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800794a:	f7fd fa01 	bl	8004d50 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b64      	cmp	r3, #100	; 0x64
 8007956:	d902      	bls.n	800795e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	f000 bcd4 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800795e:	4b3c      	ldr	r3, [pc, #240]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0ef      	beq.n	800794a <HAL_RCC_OscConfig+0x3ee>
 800796a:	e013      	b.n	8007994 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800796c:	f7fd f9f0 	bl	8004d50 <HAL_GetTick>
 8007970:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007972:	e009      	b.n	8007988 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007974:	f7fd f9ec 	bl	8004d50 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b64      	cmp	r3, #100	; 0x64
 8007980:	d902      	bls.n	8007988 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	f000 bcbf 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007988:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1ef      	bne.n	8007974 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d05f      	beq.n	8007a60 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d005      	beq.n	80079b2 <HAL_RCC_OscConfig+0x456>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d114      	bne.n	80079d6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d111      	bne.n	80079d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f000 bca3 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80079c0:	4b23      	ldr	r3, [pc, #140]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	041b      	lsls	r3, r3, #16
 80079ce:	4920      	ldr	r1, [pc, #128]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079d4:	e044      	b.n	8007a60 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d024      	beq.n	8007a28 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80079de:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 80079e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079ea:	f7fd f9b1 	bl	8004d50 <HAL_GetTick>
 80079ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079f0:	e009      	b.n	8007a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f2:	f7fd f9ad 	bl	8004d50 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d902      	bls.n	8007a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	f000 bc80 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a06:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ef      	beq.n	80079f2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007a12:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	490b      	ldr	r1, [pc, #44]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	610b      	str	r3, [r1, #16]
 8007a26:	e01b      	b.n	8007a60 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007a28:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a08      	ldr	r2, [pc, #32]	; (8007a50 <HAL_RCC_OscConfig+0x4f4>)
 8007a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a34:	f7fd f98c 	bl	8004d50 <HAL_GetTick>
 8007a38:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a3c:	f7fd f988 	bl	8004d50 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d904      	bls.n	8007a54 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	f000 bc5b 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
 8007a50:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a54:	4baf      	ldr	r3, [pc, #700]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1ed      	bne.n	8007a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80c8 	beq.w	8007bfe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a74:	4ba7      	ldr	r3, [pc, #668]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d111      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a82:	4ba4      	ldr	r3, [pc, #656]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a88:	4aa2      	ldr	r2, [pc, #648]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007a8a:	f043 0304 	orr.w	r3, r3, #4
 8007a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007a92:	4ba0      	ldr	r3, [pc, #640]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007aa6:	4b9c      	ldr	r3, [pc, #624]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d119      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ab2:	4b99      	ldr	r3, [pc, #612]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	4a98      	ldr	r2, [pc, #608]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007abe:	f7fd f947 	bl	8004d50 <HAL_GetTick>
 8007ac2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ac4:	e009      	b.n	8007ada <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac6:	f7fd f943 	bl	8004d50 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d902      	bls.n	8007ada <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	f000 bc16 	b.w	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ada:	4b8f      	ldr	r3, [pc, #572]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0ef      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d05f      	beq.n	8007bae <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007aee:	4b89      	ldr	r3, [pc, #548]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007af4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d037      	beq.n	8007b74 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d006      	beq.n	8007b1c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e3f4      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d01b      	beq.n	8007b5e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007b26:	4b7b      	ldr	r3, [pc, #492]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b2c:	4a79      	ldr	r2, [pc, #484]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b2e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007b32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007b36:	f7fd f90b 	bl	8004d50 <HAL_GetTick>
 8007b3a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b3e:	f7fd f907 	bl	8004d50 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e3da      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b50:	4b70      	ldr	r3, [pc, #448]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1ef      	bne.n	8007b3e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007b5e:	4b6d      	ldr	r3, [pc, #436]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	4969      	ldr	r1, [pc, #420]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007b74:	4b67      	ldr	r3, [pc, #412]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b7a:	4a66      	ldr	r2, [pc, #408]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007b84:	f7fd f8e4 	bl	8004d50 <HAL_GetTick>
 8007b88:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b8c:	f7fd f8e0 	bl	8004d50 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e3b3      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007b9e:	4b5d      	ldr	r3, [pc, #372]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ef      	beq.n	8007b8c <HAL_RCC_OscConfig+0x630>
 8007bac:	e01b      	b.n	8007be6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007bae:	4b59      	ldr	r3, [pc, #356]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bb4:	4a57      	ldr	r2, [pc, #348]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007bb6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007bba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007bbe:	f7fd f8c7 	bl	8004d50 <HAL_GetTick>
 8007bc2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc6:	f7fd f8c3 	bl	8004d50 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b05      	cmp	r3, #5
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e396      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bd8:	4b4e      	ldr	r3, [pc, #312]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1ef      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007be6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bee:	4b49      	ldr	r3, [pc, #292]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf4:	4a47      	ldr	r2, [pc, #284]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007bf6:	f023 0304 	bic.w	r3, r3, #4
 8007bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 8111 	beq.w	8007e2e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c12:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d111      	bne.n	8007c44 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c20:	4b3c      	ldr	r3, [pc, #240]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c26:	4a3b      	ldr	r2, [pc, #236]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007c30:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c44:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d118      	bne.n	8007c82 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c50:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	4a30      	ldr	r2, [pc, #192]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c5c:	f7fd f878 	bl	8004d50 <HAL_GetTick>
 8007c60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c64:	f7fd f874 	bl	8004d50 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e347      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c76:	4b28      	ldr	r3, [pc, #160]	; (8007d18 <HAL_RCC_OscConfig+0x7bc>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01f      	beq.n	8007cce <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d010      	beq.n	8007cbc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c9a:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007ca2:	f043 0304 	orr.w	r3, r3, #4
 8007ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007caa:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cb0:	4a18      	ldr	r2, [pc, #96]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cba:	e018      	b.n	8007cee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cbc:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cc2:	4a14      	ldr	r2, [pc, #80]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007ccc:	e00f      	b.n	8007cee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cd4:	4a0f      	ldr	r2, [pc, #60]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cde:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce4:	4a0b      	ldr	r2, [pc, #44]	; (8007d14 <HAL_RCC_OscConfig+0x7b8>)
 8007ce6:	f023 0304 	bic.w	r3, r3, #4
 8007cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d057      	beq.n	8007da6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007cf6:	f7fd f82b 	bl	8004d50 <HAL_GetTick>
 8007cfa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cfc:	e00e      	b.n	8007d1c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfe:	f7fd f827 	bl	8004d50 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d905      	bls.n	8007d1c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e2f8      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
 8007d14:	46020c00 	.word	0x46020c00
 8007d18:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d1c:	4b9c      	ldr	r3, [pc, #624]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0e9      	beq.n	8007cfe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01b      	beq.n	8007d6e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d36:	4b96      	ldr	r3, [pc, #600]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d3c:	4a94      	ldr	r2, [pc, #592]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d46:	e00a      	b.n	8007d5e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d48:	f7fd f802 	bl	8004d50 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e2d3      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d5e:	4b8c      	ldr	r3, [pc, #560]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0ed      	beq.n	8007d48 <HAL_RCC_OscConfig+0x7ec>
 8007d6c:	e053      	b.n	8007e16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d6e:	4b88      	ldr	r3, [pc, #544]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d74:	4a86      	ldr	r2, [pc, #536]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d80:	f7fc ffe6 	bl	8004d50 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e2b7      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d96:	4b7e      	ldr	r3, [pc, #504]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1ed      	bne.n	8007d80 <HAL_RCC_OscConfig+0x824>
 8007da4:	e037      	b.n	8007e16 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007da6:	f7fc ffd3 	bl	8004d50 <HAL_GetTick>
 8007daa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dac:	e00a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fc ffcf 	bl	8004d50 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e2a0      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dc4:	4b72      	ldr	r3, [pc, #456]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1ed      	bne.n	8007dae <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01a      	beq.n	8007e16 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007de0:	4b6b      	ldr	r3, [pc, #428]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007de6:	4a6a      	ldr	r2, [pc, #424]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007df0:	e00a      	b.n	8007e08 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df2:	f7fc ffad 	bl	8004d50 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d901      	bls.n	8007e08 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e27e      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e08:	4b61      	ldr	r3, [pc, #388]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1ed      	bne.n	8007df2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d107      	bne.n	8007e2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e1e:	4b5c      	ldr	r3, [pc, #368]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e24:	4a5a      	ldr	r2, [pc, #360]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e26:	f023 0304 	bic.w	r3, r3, #4
 8007e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d036      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d019      	beq.n	8007e76 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007e42:	4b53      	ldr	r3, [pc, #332]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a52      	ldr	r2, [pc, #328]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e4c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e4e:	f7fc ff7f 	bl	8004d50 <HAL_GetTick>
 8007e52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e56:	f7fc ff7b 	bl	8004d50 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e24e      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e68:	4b49      	ldr	r3, [pc, #292]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0f0      	beq.n	8007e56 <HAL_RCC_OscConfig+0x8fa>
 8007e74:	e018      	b.n	8007ea8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007e76:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a45      	ldr	r2, [pc, #276]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e80:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e82:	f7fc ff65 	bl	8004d50 <HAL_GetTick>
 8007e86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e8a:	f7fc ff61 	bl	8004d50 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e234      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007e9c:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d036      	beq.n	8007f22 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d019      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007ebc:	4b34      	ldr	r3, [pc, #208]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a33      	ldr	r2, [pc, #204]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ec6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ec8:	f7fc ff42 	bl	8004d50 <HAL_GetTick>
 8007ecc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007ed0:	f7fc ff3e 	bl	8004d50 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e211      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ee2:	4b2b      	ldr	r3, [pc, #172]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x974>
 8007eee:	e018      	b.n	8007f22 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a26      	ldr	r2, [pc, #152]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007efc:	f7fc ff28 	bl	8004d50 <HAL_GetTick>
 8007f00:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007f04:	f7fc ff24 	bl	8004d50 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e1f7      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d07f      	beq.n	800802e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d062      	beq.n	8007ffc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f40:	6093      	str	r3, [r2, #8]
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	4910      	ldr	r1, [pc, #64]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007f5c:	d309      	bcc.n	8007f72 <HAL_RCC_OscConfig+0xa16>
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f023 021f 	bic.w	r2, r3, #31
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	4909      	ldr	r1, [pc, #36]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60cb      	str	r3, [r1, #12]
 8007f70:	e02a      	b.n	8007fc8 <HAL_RCC_OscConfig+0xa6c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da0c      	bge.n	8007f94 <HAL_RCC_OscConfig+0xa38>
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	015b      	lsls	r3, r3, #5
 8007f88:	4901      	ldr	r1, [pc, #4]	; (8007f90 <HAL_RCC_OscConfig+0xa34>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60cb      	str	r3, [r1, #12]
 8007f8e:	e01b      	b.n	8007fc8 <HAL_RCC_OscConfig+0xa6c>
 8007f90:	46020c00 	.word	0x46020c00
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9c:	d30a      	bcc.n	8007fb4 <HAL_RCC_OscConfig+0xa58>
 8007f9e:	4ba1      	ldr	r3, [pc, #644]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	029b      	lsls	r3, r3, #10
 8007fac:	499d      	ldr	r1, [pc, #628]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60cb      	str	r3, [r1, #12]
 8007fb2:	e009      	b.n	8007fc8 <HAL_RCC_OscConfig+0xa6c>
 8007fb4:	4b9b      	ldr	r3, [pc, #620]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	03db      	lsls	r3, r3, #15
 8007fc2:	4998      	ldr	r1, [pc, #608]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007fc8:	4b96      	ldr	r3, [pc, #600]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a95      	ldr	r2, [pc, #596]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007fce:	f043 0310 	orr.w	r3, r3, #16
 8007fd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007fd4:	f7fc febc 	bl	8004d50 <HAL_GetTick>
 8007fd8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007fdc:	f7fc feb8 	bl	8004d50 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e18b      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007fee:	4b8d      	ldr	r3, [pc, #564]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <HAL_RCC_OscConfig+0xa80>
 8007ffa:	e018      	b.n	800802e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007ffc:	4b89      	ldr	r3, [pc, #548]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a88      	ldr	r2, [pc, #544]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008002:	f023 0310 	bic.w	r3, r3, #16
 8008006:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008008:	f7fc fea2 	bl	8004d50 <HAL_GetTick>
 800800c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008010:	f7fc fe9e 	bl	8004d50 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e171      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008022:	4b80      	ldr	r3, [pc, #512]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f0      	bne.n	8008010 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8166 	beq.w	8008304 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800803e:	4b79      	ldr	r3, [pc, #484]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b0c      	cmp	r3, #12
 8008048:	f000 80f2 	beq.w	8008230 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	2b02      	cmp	r3, #2
 8008052:	f040 80c5 	bne.w	80081e0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008056:	4b73      	ldr	r3, [pc, #460]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a72      	ldr	r2, [pc, #456]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800805c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008060:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008062:	f7fc fe75 	bl	8004d50 <HAL_GetTick>
 8008066:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806a:	f7fc fe71 	bl	8004d50 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e144      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800807c:	4b69      	ldr	r3, [pc, #420]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1f0      	bne.n	800806a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008088:	4b66      	ldr	r3, [pc, #408]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800808a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d111      	bne.n	80080ba <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008096:	4b63      	ldr	r3, [pc, #396]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800809c:	4a61      	ldr	r2, [pc, #388]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800809e:	f043 0304 	orr.w	r3, r3, #4
 80080a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80080a6:	4b5f      	ldr	r3, [pc, #380]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80080a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80080ba:	4b5b      	ldr	r3, [pc, #364]	; (8008228 <HAL_RCC_OscConfig+0xccc>)
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080c6:	d102      	bne.n	80080ce <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80080ce:	4b56      	ldr	r3, [pc, #344]	; (8008228 <HAL_RCC_OscConfig+0xccc>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	4a55      	ldr	r2, [pc, #340]	; (8008228 <HAL_RCC_OscConfig+0xccc>)
 80080d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080d8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80080da:	4b52      	ldr	r3, [pc, #328]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80080ee:	3a01      	subs	r2, #1
 80080f0:	0212      	lsls	r2, r2, #8
 80080f2:	4311      	orrs	r1, r2
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80080f8:	430a      	orrs	r2, r1
 80080fa:	494a      	ldr	r1, [pc, #296]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	628b      	str	r3, [r1, #40]	; 0x28
 8008100:	4b48      	ldr	r3, [pc, #288]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	4b49      	ldr	r3, [pc, #292]	; (800822c <HAL_RCC_OscConfig+0xcd0>)
 8008106:	4013      	ands	r3, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800810c:	3a01      	subs	r2, #1
 800810e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008116:	3a01      	subs	r2, #1
 8008118:	0252      	lsls	r2, r2, #9
 800811a:	b292      	uxth	r2, r2
 800811c:	4311      	orrs	r1, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008122:	3a01      	subs	r2, #1
 8008124:	0412      	lsls	r2, r2, #16
 8008126:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800812a:	4311      	orrs	r1, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008130:	3a01      	subs	r2, #1
 8008132:	0612      	lsls	r2, r2, #24
 8008134:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008138:	430a      	orrs	r2, r1
 800813a:	493a      	ldr	r1, [pc, #232]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800813c:	4313      	orrs	r3, r2
 800813e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008140:	4b38      	ldr	r3, [pc, #224]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	4a37      	ldr	r2, [pc, #220]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008150:	4a34      	ldr	r2, [pc, #208]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008156:	4b33      	ldr	r3, [pc, #204]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	4a32      	ldr	r2, [pc, #200]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 800815c:	f043 0310 	orr.w	r3, r3, #16
 8008160:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008162:	4b30      	ldr	r3, [pc, #192]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	f023 020c 	bic.w	r2, r3, #12
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	492d      	ldr	r1, [pc, #180]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008170:	4313      	orrs	r3, r2
 8008172:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008178:	2b01      	cmp	r3, #1
 800817a:	d105      	bne.n	8008188 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800817c:	4b2a      	ldr	r3, [pc, #168]	; (8008228 <HAL_RCC_OscConfig+0xccc>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4a29      	ldr	r2, [pc, #164]	; (8008228 <HAL_RCC_OscConfig+0xccc>)
 8008182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008186:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008188:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800818c:	2b01      	cmp	r3, #1
 800818e:	d107      	bne.n	80081a0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008190:	4b24      	ldr	r3, [pc, #144]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008196:	4a23      	ldr	r2, [pc, #140]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081a0:	4b20      	ldr	r3, [pc, #128]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081aa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80081ac:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081b8:	f7fc fdca 	bl	8004d50 <HAL_GetTick>
 80081bc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c0:	f7fc fdc6 	bl	8004d50 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e099      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081d2:	4b14      	ldr	r3, [pc, #80]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0xc64>
 80081de:	e091      	b.n	8008304 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80081e0:	4b10      	ldr	r3, [pc, #64]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 80081e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081ec:	f7fc fdb0 	bl	8004d50 <HAL_GetTick>
 80081f0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f4:	f7fc fdac 	bl	8004d50 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e07f      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008206:	4b07      	ldr	r3, [pc, #28]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f0      	bne.n	80081f4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008212:	4b04      	ldr	r3, [pc, #16]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	4a03      	ldr	r2, [pc, #12]	; (8008224 <HAL_RCC_OscConfig+0xcc8>)
 8008218:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800821c:	f023 0303 	bic.w	r3, r3, #3
 8008220:	6293      	str	r3, [r2, #40]	; 0x28
 8008222:	e06f      	b.n	8008304 <HAL_RCC_OscConfig+0xda8>
 8008224:	46020c00 	.word	0x46020c00
 8008228:	46020800 	.word	0x46020800
 800822c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008230:	4b37      	ldr	r3, [pc, #220]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008236:	4b36      	ldr	r3, [pc, #216]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	2b01      	cmp	r3, #1
 8008242:	d039      	beq.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f003 0203 	and.w	r2, r3, #3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800824e:	429a      	cmp	r2, r3
 8008250:	d132      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	0a1b      	lsrs	r3, r3, #8
 8008256:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008260:	429a      	cmp	r2, r3
 8008262:	d129      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800826e:	429a      	cmp	r2, r3
 8008270:	d122      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800827e:	429a      	cmp	r2, r3
 8008280:	d11a      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	0a5b      	lsrs	r3, r3, #9
 8008286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008290:	429a      	cmp	r2, r3
 8008292:	d111      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d108      	bne.n	80082b8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	0e1b      	lsrs	r3, r3, #24
 80082aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d001      	beq.n	80082bc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e024      	b.n	8008306 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082bc:	4b14      	ldr	r3, [pc, #80]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d01a      	beq.n	8008304 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	4a0f      	ldr	r2, [pc, #60]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082d4:	f023 0310 	bic.w	r3, r3, #16
 80082d8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082da:	f7fc fd39 	bl	8004d50 <HAL_GetTick>
 80082de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80082e0:	bf00      	nop
 80082e2:	f7fc fd35 	bl	8004d50 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d0f9      	beq.n	80082e2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f2:	4a07      	ldr	r2, [pc, #28]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	4a04      	ldr	r2, [pc, #16]	; (8008310 <HAL_RCC_OscConfig+0xdb4>)
 80082fe:	f043 0310 	orr.w	r3, r3, #16
 8008302:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3738      	adds	r7, #56	; 0x38
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	46020c00 	.word	0x46020c00

08008314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e1d9      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008328:	4b9b      	ldr	r3, [pc, #620]	; (8008598 <HAL_RCC_ClockConfig+0x284>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d910      	bls.n	8008358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008336:	4b98      	ldr	r3, [pc, #608]	; (8008598 <HAL_RCC_ClockConfig+0x284>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f023 020f 	bic.w	r2, r3, #15
 800833e:	4996      	ldr	r1, [pc, #600]	; (8008598 <HAL_RCC_ClockConfig+0x284>)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	4313      	orrs	r3, r2
 8008344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008346:	4b94      	ldr	r3, [pc, #592]	; (8008598 <HAL_RCC_ClockConfig+0x284>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d001      	beq.n	8008358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e1c1      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	d010      	beq.n	8008386 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	4b8c      	ldr	r3, [pc, #560]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008370:	429a      	cmp	r2, r3
 8008372:	d908      	bls.n	8008386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008374:	4b89      	ldr	r3, [pc, #548]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	4986      	ldr	r1, [pc, #536]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008382:	4313      	orrs	r3, r2
 8008384:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d012      	beq.n	80083b8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	4b81      	ldr	r3, [pc, #516]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	091b      	lsrs	r3, r3, #4
 800839c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d909      	bls.n	80083b8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80083a4:	4b7d      	ldr	r3, [pc, #500]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	497a      	ldr	r1, [pc, #488]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	4b74      	ldr	r3, [pc, #464]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d908      	bls.n	80083e6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80083d4:	4b71      	ldr	r3, [pc, #452]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	496e      	ldr	r1, [pc, #440]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	4b69      	ldr	r3, [pc, #420]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	429a      	cmp	r2, r3
 8008400:	d908      	bls.n	8008414 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008402:	4b66      	ldr	r3, [pc, #408]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f023 020f 	bic.w	r2, r3, #15
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	4963      	ldr	r1, [pc, #396]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008410:	4313      	orrs	r3, r2
 8008412:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80d2 	beq.w	80085c6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d143      	bne.n	80084b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800842e:	4b5b      	ldr	r3, [pc, #364]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d110      	bne.n	800845e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800843c:	4b57      	ldr	r3, [pc, #348]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800843e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008442:	4a56      	ldr	r2, [pc, #344]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008444:	f043 0304 	orr.w	r3, r3, #4
 8008448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800844c:	4b53      	ldr	r3, [pc, #332]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800844e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	60bb      	str	r3, [r7, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800845a:	2301      	movs	r3, #1
 800845c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800845e:	f7fc fc77 	bl	8004d50 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008464:	4b4e      	ldr	r3, [pc, #312]	; (80085a0 <HAL_RCC_ClockConfig+0x28c>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00f      	beq.n	8008490 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008470:	e008      	b.n	8008484 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008472:	f7fc fc6d 	bl	8004d50 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e12b      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008484:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <HAL_RCC_ClockConfig+0x28c>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0f0      	beq.n	8008472 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d107      	bne.n	80084a6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008496:	4b41      	ldr	r3, [pc, #260]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800849c:	4a3f      	ldr	r2, [pc, #252]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800849e:	f023 0304 	bic.w	r3, r3, #4
 80084a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80084a6:	4b3d      	ldr	r3, [pc, #244]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d121      	bne.n	80084f6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e112      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d107      	bne.n	80084ce <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084be:	4b37      	ldr	r3, [pc, #220]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d115      	bne.n	80084f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e106      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d107      	bne.n	80084e6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80084d6:	4b31      	ldr	r3, [pc, #196]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e0fa      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084e6:	4b2d      	ldr	r3, [pc, #180]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e0f2      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80084f6:	4b29      	ldr	r3, [pc, #164]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f023 0203 	bic.w	r2, r3, #3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4926      	ldr	r1, [pc, #152]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008504:	4313      	orrs	r3, r2
 8008506:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008508:	f7fc fc22 	bl	8004d50 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d112      	bne.n	800853c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008516:	e00a      	b.n	800852e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008518:	f7fc fc1a 	bl	8004d50 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	f241 3288 	movw	r2, #5000	; 0x1388
 8008526:	4293      	cmp	r3, r2
 8008528:	d901      	bls.n	800852e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0d6      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800852e:	4b1b      	ldr	r3, [pc, #108]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f003 030c 	and.w	r3, r3, #12
 8008536:	2b0c      	cmp	r3, #12
 8008538:	d1ee      	bne.n	8008518 <HAL_RCC_ClockConfig+0x204>
 800853a:	e044      	b.n	80085c6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d112      	bne.n	800856a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008544:	e00a      	b.n	800855c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008546:	f7fc fc03 	bl	8004d50 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	4293      	cmp	r3, r2
 8008556:	d901      	bls.n	800855c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e0bf      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800855c:	4b0f      	ldr	r3, [pc, #60]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f003 030c 	and.w	r3, r3, #12
 8008564:	2b08      	cmp	r3, #8
 8008566:	d1ee      	bne.n	8008546 <HAL_RCC_ClockConfig+0x232>
 8008568:	e02d      	b.n	80085c6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d123      	bne.n	80085ba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008572:	e00a      	b.n	800858a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008574:	f7fc fbec 	bl	8004d50 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e0a8      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <HAL_RCC_ClockConfig+0x288>)
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 030c 	and.w	r3, r3, #12
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1ee      	bne.n	8008574 <HAL_RCC_ClockConfig+0x260>
 8008596:	e016      	b.n	80085c6 <HAL_RCC_ClockConfig+0x2b2>
 8008598:	40022000 	.word	0x40022000
 800859c:	46020c00 	.word	0x46020c00
 80085a0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a4:	f7fc fbd4 	bl	8004d50 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e090      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80085ba:	4b4a      	ldr	r3, [pc, #296]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f003 030c 	and.w	r3, r3, #12
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d1ee      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	4b43      	ldr	r3, [pc, #268]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	429a      	cmp	r2, r3
 80085e0:	d208      	bcs.n	80085f4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80085e2:	4b40      	ldr	r3, [pc, #256]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f023 020f 	bic.w	r2, r3, #15
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	493d      	ldr	r1, [pc, #244]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085f4:	4b3c      	ldr	r3, [pc, #240]	; (80086e8 <HAL_RCC_ClockConfig+0x3d4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d210      	bcs.n	8008624 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008602:	4b39      	ldr	r3, [pc, #228]	; (80086e8 <HAL_RCC_ClockConfig+0x3d4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f023 020f 	bic.w	r2, r3, #15
 800860a:	4937      	ldr	r1, [pc, #220]	; (80086e8 <HAL_RCC_ClockConfig+0x3d4>)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	4313      	orrs	r3, r2
 8008610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008612:	4b35      	ldr	r3, [pc, #212]	; (80086e8 <HAL_RCC_ClockConfig+0x3d4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d001      	beq.n	8008624 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e05b      	b.n	80086dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	d010      	beq.n	8008652 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800863c:	429a      	cmp	r2, r3
 800863e:	d208      	bcs.n	8008652 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008640:	4b28      	ldr	r3, [pc, #160]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4925      	ldr	r1, [pc, #148]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 800864e:	4313      	orrs	r3, r2
 8008650:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d012      	beq.n	8008684 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800866c:	429a      	cmp	r2, r3
 800866e:	d209      	bcs.n	8008684 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008670:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	4919      	ldr	r1, [pc, #100]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008680:	4313      	orrs	r3, r2
 8008682:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d010      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800869c:	429a      	cmp	r2, r3
 800869e:	d208      	bcs.n	80086b2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80086a0:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	490d      	ldr	r1, [pc, #52]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80086b2:	f000 f821 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <HAL_RCC_ClockConfig+0x3d0>)
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	490a      	ldr	r1, [pc, #40]	; (80086ec <HAL_RCC_ClockConfig+0x3d8>)
 80086c2:	5ccb      	ldrb	r3, [r1, r3]
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <HAL_RCC_ClockConfig+0x3dc>)
 80086ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <HAL_RCC_ClockConfig+0x3e0>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fc faf3 	bl	8004cbc <HAL_InitTick>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	46020c00 	.word	0x46020c00
 80086e8:	40022000 	.word	0x40022000
 80086ec:	0800e60c 	.word	0x0800e60c
 80086f0:	20000000 	.word	0x20000000
 80086f4:	2000001c 	.word	0x2000001c

080086f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b08b      	sub	sp, #44	; 0x2c
 80086fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008706:	4b78      	ldr	r3, [pc, #480]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008710:	4b75      	ldr	r3, [pc, #468]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_RCC_GetSysClockFreq+0x34>
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b0c      	cmp	r3, #12
 8008724:	d121      	bne.n	800876a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d11e      	bne.n	800876a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800872c:	4b6e      	ldr	r3, [pc, #440]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d107      	bne.n	8008748 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008738:	4b6b      	ldr	r3, [pc, #428]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800873a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800873e:	0b1b      	lsrs	r3, r3, #12
 8008740:	f003 030f 	and.w	r3, r3, #15
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
 8008746:	e005      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008748:	4b67      	ldr	r3, [pc, #412]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	0f1b      	lsrs	r3, r3, #28
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008754:	4a65      	ldr	r2, [pc, #404]	; (80088ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d110      	bne.n	8008786 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008768:	e00d      	b.n	8008786 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800876a:	4b5f      	ldr	r3, [pc, #380]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f003 030c 	and.w	r3, r3, #12
 8008772:	2b04      	cmp	r3, #4
 8008774:	d102      	bne.n	800877c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008776:	4b5e      	ldr	r3, [pc, #376]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008778:	623b      	str	r3, [r7, #32]
 800877a:	e004      	b.n	8008786 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b08      	cmp	r3, #8
 8008780:	d101      	bne.n	8008786 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008782:	4b5b      	ldr	r3, [pc, #364]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008784:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	f040 80a5 	bne.w	80088d8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800878e:	4b56      	ldr	r3, [pc, #344]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008798:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	3301      	adds	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087a6:	4b50      	ldr	r3, [pc, #320]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	091b      	lsrs	r3, r3, #4
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80087b2:	4b4d      	ldr	r3, [pc, #308]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	08db      	lsrs	r3, r3, #3
 80087b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d003      	beq.n	80087dc <HAL_RCC_GetSysClockFreq+0xe4>
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d022      	beq.n	8008820 <HAL_RCC_GetSysClockFreq+0x128>
 80087da:	e043      	b.n	8008864 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80087ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ee:	4b3e      	ldr	r3, [pc, #248]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80087fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8008802:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80088f8 <HAL_RCC_GetSysClockFreq+0x200>
 8008806:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800880a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800880e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008812:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881e:	e046      	b.n	80088ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	eddf 6a32 	vldr	s13, [pc, #200]	; 80088f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800882e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008832:	4b2d      	ldr	r3, [pc, #180]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008842:	ed97 6a01 	vldr	s12, [r7, #4]
 8008846:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80088f8 <HAL_RCC_GetSysClockFreq+0x200>
 800884a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800884e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008856:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800885a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008862:	e024      	b.n	80088ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887c:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800888c:	ed97 6a01 	vldr	s12, [r7, #4]
 8008890:	eddf 5a19 	vldr	s11, [pc, #100]	; 80088f8 <HAL_RCC_GetSysClockFreq+0x200>
 8008894:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800889c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ac:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80088ae:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b2:	0e1b      	lsrs	r3, r3, #24
 80088b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b8:	3301      	adds	r3, #1
 80088ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d2:	ee17 3a90 	vmov	r3, s15
 80088d6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80088d8:	6a3b      	ldr	r3, [r7, #32]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	372c      	adds	r7, #44	; 0x2c
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	46020c00 	.word	0x46020c00
 80088ec:	0800e624 	.word	0x0800e624
 80088f0:	00f42400 	.word	0x00f42400
 80088f4:	4b742400 	.word	0x4b742400
 80088f8:	46000000 	.word	0x46000000

080088fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008900:	f7ff fefa 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 8008904:	4602      	mov	r2, r0
 8008906:	4b07      	ldr	r3, [pc, #28]	; (8008924 <HAL_RCC_GetHCLKFreq+0x28>)
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	4906      	ldr	r1, [pc, #24]	; (8008928 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008910:	5ccb      	ldrb	r3, [r1, r3]
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	4a05      	ldr	r2, [pc, #20]	; (800892c <HAL_RCC_GetHCLKFreq+0x30>)
 8008918:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800891a:	4b04      	ldr	r3, [pc, #16]	; (800892c <HAL_RCC_GetHCLKFreq+0x30>)
 800891c:	681b      	ldr	r3, [r3, #0]
}
 800891e:	4618      	mov	r0, r3
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	46020c00 	.word	0x46020c00
 8008928:	0800e60c 	.word	0x0800e60c
 800892c:	20000000 	.word	0x20000000

08008930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008934:	f7ff ffe2 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 8008938:	4602      	mov	r2, r0
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	4903      	ldr	r1, [pc, #12]	; (8008954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008946:	5ccb      	ldrb	r3, [r1, r3]
 8008948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800894c:	4618      	mov	r0, r3
 800894e:	bd80      	pop	{r7, pc}
 8008950:	46020c00 	.word	0x46020c00
 8008954:	0800e61c 	.word	0x0800e61c

08008958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800895c:	f7ff ffce 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 8008960:	4602      	mov	r2, r0
 8008962:	4b05      	ldr	r3, [pc, #20]	; (8008978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	4903      	ldr	r1, [pc, #12]	; (800897c <HAL_RCC_GetPCLK2Freq+0x24>)
 800896e:	5ccb      	ldrb	r3, [r1, r3]
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008974:	4618      	mov	r0, r3
 8008976:	bd80      	pop	{r7, pc}
 8008978:	46020c00 	.word	0x46020c00
 800897c:	0800e61c 	.word	0x0800e61c

08008980 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008984:	f7ff ffba 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 8008988:	4602      	mov	r2, r0
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	4903      	ldr	r1, [pc, #12]	; (80089a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008996:	5ccb      	ldrb	r3, [r1, r3]
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800899c:	4618      	mov	r0, r3
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	46020c00 	.word	0x46020c00
 80089a4:	0800e61c 	.word	0x0800e61c

080089a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80089b0:	4b3e      	ldr	r3, [pc, #248]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80089be:	f7fe fd21 	bl	8007404 <HAL_PWREx_GetVoltageRange>
 80089c2:	6178      	str	r0, [r7, #20]
 80089c4:	e019      	b.n	80089fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80089c6:	4b39      	ldr	r3, [pc, #228]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089cc:	4a37      	ldr	r2, [pc, #220]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089ce:	f043 0304 	orr.w	r3, r3, #4
 80089d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80089d6:	4b35      	ldr	r3, [pc, #212]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80089e4:	f7fe fd0e 	bl	8007404 <HAL_PWREx_GetVoltageRange>
 80089e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80089ea:	4b30      	ldr	r3, [pc, #192]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089f0:	4a2e      	ldr	r2, [pc, #184]	; (8008aac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089f2:	f023 0304 	bic.w	r3, r3, #4
 80089f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a00:	d003      	beq.n	8008a0a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a08:	d109      	bne.n	8008a1e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a10:	d202      	bcs.n	8008a18 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008a12:	2301      	movs	r3, #1
 8008a14:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008a16:	e033      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008a18:	2300      	movs	r3, #0
 8008a1a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008a1c:	e030      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a24:	d208      	bcs.n	8008a38 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2c:	d102      	bne.n	8008a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008a2e:	2303      	movs	r3, #3
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	e025      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e035      	b.n	8008aa4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3e:	d90f      	bls.n	8008a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a4c:	d902      	bls.n	8008a54 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e015      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008a54:	2301      	movs	r3, #1
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	e012      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	e00f      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a66:	d109      	bne.n	8008a7c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6e:	d102      	bne.n	8008a76 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008a70:	2301      	movs	r3, #1
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	e004      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008a76:	2302      	movs	r3, #2
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	e001      	b.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f023 020f 	bic.w	r2, r3, #15
 8008a88:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 030f 	and.w	r3, r3, #15
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d001      	beq.n	8008aa2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	46020c00 	.word	0x46020c00
 8008ab0:	40022000 	.word	0x40022000

08008ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab8:	b0c4      	sub	sp, #272	; 0x110
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f002 0401 	and.w	r4, r2, #1
 8008ad8:	2500      	movs	r5, #0
 8008ada:	ea54 0305 	orrs.w	r3, r4, r5
 8008ade:	d00b      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008ae0:	4bd5      	ldr	r3, [pc, #852]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ae6:	f023 0103 	bic.w	r1, r3, #3
 8008aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af0:	4ad1      	ldr	r2, [pc, #836]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008af2:	430b      	orrs	r3, r1
 8008af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f002 0802 	and.w	r8, r2, #2
 8008b04:	f04f 0900 	mov.w	r9, #0
 8008b08:	ea58 0309 	orrs.w	r3, r8, r9
 8008b0c:	d00b      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008b0e:	4bca      	ldr	r3, [pc, #808]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b14:	f023 010c 	bic.w	r1, r3, #12
 8008b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1e:	4ac6      	ldr	r2, [pc, #792]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f002 0a04 	and.w	sl, r2, #4
 8008b32:	f04f 0b00 	mov.w	fp, #0
 8008b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b3a:	d00b      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008b3c:	4bbe      	ldr	r3, [pc, #760]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b42:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	4aba      	ldr	r2, [pc, #744]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f002 0308 	and.w	r3, r2, #8
 8008b60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b64:	2300      	movs	r3, #0
 8008b66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4313      	orrs	r3, r2
 8008b72:	d00b      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008b74:	4bb0      	ldr	r3, [pc, #704]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b84:	4aac      	ldr	r2, [pc, #688]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b86:	430b      	orrs	r3, r1
 8008b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f002 0310 	and.w	r3, r2, #16
 8008b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ba2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	d00b      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008bac:	4ba2      	ldr	r3, [pc, #648]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbc:	4a9e      	ldr	r2, [pc, #632]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d00b      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008be4:	4b94      	ldr	r3, [pc, #592]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008be6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf4:	4a90      	ldr	r2, [pc, #576]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f002 0320 	and.w	r3, r2, #32
 8008c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c16:	460b      	mov	r3, r1
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	d00b      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008c1c:	4b86      	ldr	r3, [pc, #536]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c22:	f023 0107 	bic.w	r1, r3, #7
 8008c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2c:	4a82      	ldr	r2, [pc, #520]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d00b      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008c54:	4b78      	ldr	r3, [pc, #480]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c5a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	4a74      	ldr	r2, [pc, #464]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008c86:	460b      	mov	r3, r1
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	d00b      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008c8c:	4b6a      	ldr	r3, [pc, #424]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a66      	ldr	r2, [pc, #408]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008cc4:	4b5c      	ldr	r3, [pc, #368]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd4:	4a58      	ldr	r2, [pc, #352]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008cfc:	4b4e      	ldr	r3, [pc, #312]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d02:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8008d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d0e:	430b      	orrs	r3, r1
 8008d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4313      	orrs	r3, r2
 8008d32:	d00b      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008d34:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d3a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d44:	4a3c      	ldr	r2, [pc, #240]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d46:	430b      	orrs	r3, r1
 8008d48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d00c      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008d6c:	4b32      	ldr	r3, [pc, #200]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4313      	orrs	r3, r2
 8008da4:	d00c      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008da6:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008dac:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db8:	4a1f      	ldr	r2, [pc, #124]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dd6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	d00c      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008de0:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008de6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008df4:	430b      	orrs	r3, r1
 8008df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d010      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e2c:	4a02      	ldr	r2, [pc, #8]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008e34:	e002      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008e36:	bf00      	nop
 8008e38:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008e56:	460b      	mov	r3, r1
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	d04c      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e64:	2b80      	cmp	r3, #128	; 0x80
 8008e66:	d02d      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e68:	2b80      	cmp	r3, #128	; 0x80
 8008e6a:	d827      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e6c:	2b60      	cmp	r3, #96	; 0x60
 8008e6e:	d02b      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e70:	2b60      	cmp	r3, #96	; 0x60
 8008e72:	d823      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d006      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d81f      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d009      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d011      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008e84:	e01a      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e86:	4bbe      	ldr	r3, [pc, #760]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	4abd      	ldr	r2, [pc, #756]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e90:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e92:	e01a      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e98:	3308      	adds	r3, #8
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 fc32 	bl	800b704 <RCCEx_PLL2_Config>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ea6:	e010      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eac:	332c      	adds	r3, #44	; 0x2c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fcc0 	bl	800b834 <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008eba:	e006      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008ec2:	e002      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10d      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008ed2:	4bab      	ldr	r3, [pc, #684]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ed8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8008edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ee4:	4aa6      	ldr	r2, [pc, #664]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eee:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008ef2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f06:	2300      	movs	r3, #0
 8008f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f0c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d053      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d033      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f28:	d82c      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f2e:	d02f      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f34:	d826      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f3a:	d008      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f40:	d820      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f4a:	d011      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f4c:	e01a      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f4e:	4b8c      	ldr	r3, [pc, #560]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f52:	4a8b      	ldr	r2, [pc, #556]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f58:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f5a:	e01a      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f60:	3308      	adds	r3, #8
 8008f62:	4618      	mov	r0, r3
 8008f64:	f002 fbce 	bl	800b704 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f6e:	e010      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f74:	332c      	adds	r3, #44	; 0x2c
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fc5c 	bl	800b834 <RCCEx_PLL3_Config>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f82:	e006      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008f8a:	e002      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008f8c:	bf00      	nop
 8008f8e:	e000      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f92:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10d      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008f9a:	4b79      	ldr	r3, [pc, #484]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fa0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fac:	4a74      	ldr	r2, [pc, #464]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008fb4:	e003      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008fba:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fcc:	2300      	movs	r3, #0
 8008fce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	d046      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fe2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fe6:	d028      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008fe8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fec:	d821      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8008fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff2:	d022      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff8:	d81b      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8008ffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ffe:	d01c      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009004:	d815      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900a:	d008      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800900c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009010:	d80f      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901a:	d00e      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800901c:	e009      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800901e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009022:	3308      	adds	r3, #8
 8009024:	4618      	mov	r0, r3
 8009026:	f002 fb6d 	bl	800b704 <RCCEx_PLL2_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009030:	e004      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009038:	e000      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800903a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10d      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009044:	4b4e      	ldr	r3, [pc, #312]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800904a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800904e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009056:	4a4a      	ldr	r2, [pc, #296]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009058:	430b      	orrs	r3, r1
 800905a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800905e:	e003      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009064:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009074:	673b      	str	r3, [r7, #112]	; 0x70
 8009076:	2300      	movs	r3, #0
 8009078:	677b      	str	r3, [r7, #116]	; 0x74
 800907a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800907e:	460b      	mov	r3, r1
 8009080:	4313      	orrs	r3, r2
 8009082:	d03f      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800908c:	2b04      	cmp	r3, #4
 800908e:	d81e      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090d7 	.word	0x080090d7
 800909c:	080090ad 	.word	0x080090ad
 80090a0:	080090bb 	.word	0x080090bb
 80090a4:	080090d7 	.word	0x080090d7
 80090a8:	080090d7 	.word	0x080090d7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090ac:	4b34      	ldr	r3, [pc, #208]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	4a33      	ldr	r2, [pc, #204]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80090b8:	e00e      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090be:	332c      	adds	r3, #44	; 0x2c
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 fbb7 	bl	800b834 <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80090cc:	e004      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80090d4:	e000      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80090d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80090d8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10d      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80090e0:	4b27      	ldr	r3, [pc, #156]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090e6:	f023 0107 	bic.w	r1, r3, #7
 80090ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f2:	4a23      	ldr	r2, [pc, #140]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f4:	430b      	orrs	r3, r1
 80090f6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009100:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009110:	66bb      	str	r3, [r7, #104]	; 0x68
 8009112:	2300      	movs	r3, #0
 8009114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009116:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	d04c      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800912c:	d02a      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800912e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009132:	d821      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009138:	d026      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800913a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800913e:	d81b      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009144:	d00e      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914a:	d815      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01d      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009154:	d110      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009156:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	4a09      	ldr	r2, [pc, #36]	; (8009180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800915c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009160:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009162:	e014      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009168:	332c      	adds	r3, #44	; 0x2c
 800916a:	4618      	mov	r0, r3
 800916c:	f002 fb62 	bl	800b834 <RCCEx_PLL3_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009176:	e00a      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800917e:	e006      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8009180:	46020c00 	.word	0x46020c00
        break;
 8009184:	bf00      	nop
 8009186:	e002      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8009188:	bf00      	nop
 800918a:	e000      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800918c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800918e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10d      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009196:	4baf      	ldr	r3, [pc, #700]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800919c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80091a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091a8:	4aaa      	ldr	r2, [pc, #680]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091aa:	430b      	orrs	r3, r1
 80091ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80091b0:	e003      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80091b6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80091c6:	663b      	str	r3, [r7, #96]	; 0x60
 80091c8:	2300      	movs	r3, #0
 80091ca:	667b      	str	r3, [r7, #100]	; 0x64
 80091cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f000 80b5 	beq.w	8009342 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091d8:	2300      	movs	r3, #0
 80091da:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091de:	4b9d      	ldr	r3, [pc, #628]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ec:	4b99      	ldr	r3, [pc, #612]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091f2:	4a98      	ldr	r2, [pc, #608]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091f4:	f043 0304 	orr.w	r3, r3, #4
 80091f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80091fc:	4b95      	ldr	r3, [pc, #596]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800920a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 800920e:	2301      	movs	r3, #1
 8009210:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009214:	4b90      	ldr	r3, [pc, #576]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	4a8f      	ldr	r2, [pc, #572]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009220:	f7fb fd96 	bl	8004d50 <HAL_GetTick>
 8009224:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009228:	e00b      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800922a:	f7fb fd91 	bl	8004d50 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b02      	cmp	r3, #2
 8009238:	d903      	bls.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009240:	e005      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009242:	4b85      	ldr	r3, [pc, #532]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0ed      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800924e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009252:	2b00      	cmp	r3, #0
 8009254:	d165      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009256:	4b7f      	ldr	r3, [pc, #508]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800925c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d023      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800926c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009270:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009278:	4293      	cmp	r3, r2
 800927a:	d01b      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800927c:	4b75      	ldr	r3, [pc, #468]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800927e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009286:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800928a:	4b72      	ldr	r3, [pc, #456]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800928c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009290:	4a70      	ldr	r2, [pc, #448]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009296:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800929a:	4b6e      	ldr	r3, [pc, #440]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800929c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092a0:	4a6c      	ldr	r2, [pc, #432]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092aa:	4a6a      	ldr	r2, [pc, #424]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d019      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c0:	f7fb fd46 	bl	8004d50 <HAL_GetTick>
 80092c4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092c8:	e00d      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ca:	f7fb fd41 	bl	8004d50 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	1ad2      	subs	r2, r2, r3
 80092d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80092da:	429a      	cmp	r2, r3
 80092dc:	d903      	bls.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 80092e4:	e006      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092e6:	4b5b      	ldr	r3, [pc, #364]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0ea      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80092f4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10d      	bne.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80092fc:	4b55      	ldr	r3, [pc, #340]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009302:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800930a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800930e:	4a51      	ldr	r2, [pc, #324]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009310:	430b      	orrs	r3, r1
 8009312:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009316:	e008      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009318:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800931c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8009320:	e003      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009322:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009326:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800932a:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800932e:	2b01      	cmp	r3, #1
 8009330:	d107      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009332:	4b48      	ldr	r3, [pc, #288]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009338:	4a46      	ldr	r2, [pc, #280]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800933a:	f023 0304 	bic.w	r3, r3, #4
 800933e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800934e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009350:	2300      	movs	r3, #0
 8009352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009354:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009358:	460b      	mov	r3, r1
 800935a:	4313      	orrs	r3, r2
 800935c:	d042      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800935e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800936a:	d022      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800936c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009370:	d81b      	bhi.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009376:	d011      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8009378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800937c:	d815      	bhi.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d019      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009386:	d110      	bne.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938c:	3308      	adds	r3, #8
 800938e:	4618      	mov	r0, r3
 8009390:	f002 f9b8 	bl	800b704 <RCCEx_PLL2_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800939a:	e00d      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939c:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80093a8:	e006      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80093b0:	e002      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80093b2:	bf00      	nop
 80093b4:	e000      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80093b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80093b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80093ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093d2:	4a20      	ldr	r2, [pc, #128]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093d4:	430b      	orrs	r3, r1
 80093d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093da:	e003      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80093e0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80093f0:	653b      	str	r3, [r7, #80]	; 0x50
 80093f2:	2300      	movs	r3, #0
 80093f4:	657b      	str	r3, [r7, #84]	; 0x54
 80093f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80093fa:	460b      	mov	r3, r1
 80093fc:	4313      	orrs	r3, r2
 80093fe:	d031      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940c:	d00b      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800940e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009412:	d804      	bhi.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941c:	d007      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009424:	e004      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009426:	bf00      	nop
 8009428:	e002      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800942a:	bf00      	nop
 800942c:	e000      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800942e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009430:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009434:	2b00      	cmp	r3, #0
 8009436:	d111      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800943a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800943e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800944a:	4a02      	ldr	r2, [pc, #8]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800944c:	430b      	orrs	r3, r1
 800944e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009452:	e007      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8009454:	46020c00 	.word	0x46020c00
 8009458:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009460:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009470:	64bb      	str	r3, [r7, #72]	; 0x48
 8009472:	2300      	movs	r3, #0
 8009474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009476:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800947a:	460b      	mov	r3, r1
 800947c:	4313      	orrs	r3, r2
 800947e:	d00c      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009480:	4bb2      	ldr	r3, [pc, #712]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009486:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800948a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800948e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009492:	4aae      	ldr	r2, [pc, #696]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009494:	430b      	orrs	r3, r1
 8009496:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800949a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80094a6:	643b      	str	r3, [r7, #64]	; 0x40
 80094a8:	2300      	movs	r3, #0
 80094aa:	647b      	str	r3, [r7, #68]	; 0x44
 80094ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80094b0:	460b      	mov	r3, r1
 80094b2:	4313      	orrs	r3, r2
 80094b4:	d019      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80094b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c2:	d105      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094c4:	4ba1      	ldr	r3, [pc, #644]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	4aa0      	ldr	r2, [pc, #640]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ce:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80094d0:	4b9e      	ldr	r3, [pc, #632]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094d6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80094da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094e2:	4a9a      	ldr	r2, [pc, #616]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094e4:	430b      	orrs	r3, r1
 80094e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80094ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80094f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009500:	460b      	mov	r3, r1
 8009502:	4313      	orrs	r3, r2
 8009504:	d00c      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009506:	4b91      	ldr	r3, [pc, #580]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800950c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009514:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009518:	4a8c      	ldr	r2, [pc, #560]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800951a:	430b      	orrs	r3, r1
 800951c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800952c:	633b      	str	r3, [r7, #48]	; 0x30
 800952e:	2300      	movs	r3, #0
 8009530:	637b      	str	r3, [r7, #52]	; 0x34
 8009532:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009536:	460b      	mov	r3, r1
 8009538:	4313      	orrs	r3, r2
 800953a:	d00c      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800953c:	4b83      	ldr	r3, [pc, #524]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800953e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009542:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800954a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800954e:	4a7f      	ldr	r2, [pc, #508]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009550:	430b      	orrs	r3, r1
 8009552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
 8009564:	2300      	movs	r3, #0
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009568:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800956c:	460b      	mov	r3, r1
 800956e:	4313      	orrs	r3, r2
 8009570:	d00c      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009572:	4b76      	ldr	r3, [pc, #472]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009578:	f023 0218 	bic.w	r2, r3, #24
 800957c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009580:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009584:	4971      	ldr	r1, [pc, #452]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009586:	4313      	orrs	r3, r2
 8009588:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800958c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009598:	623b      	str	r3, [r7, #32]
 800959a:	2300      	movs	r3, #0
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
 800959e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80095a2:	460b      	mov	r3, r1
 80095a4:	4313      	orrs	r3, r2
 80095a6:	d032      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80095a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095b4:	d105      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b6:	4b65      	ldr	r3, [pc, #404]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	4a64      	ldr	r2, [pc, #400]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80095c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095ce:	d108      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d4:	3308      	adds	r3, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f002 f894 	bl	800b704 <RCCEx_PLL2_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80095e2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10d      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80095ea:	4b58      	ldr	r3, [pc, #352]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80095f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095fc:	4953      	ldr	r1, [pc, #332]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009604:	e003      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009606:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800960a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800960e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	2100      	movs	r1, #0
 8009618:	61b9      	str	r1, [r7, #24]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009624:	460b      	mov	r3, r1
 8009626:	4313      	orrs	r3, r2
 8009628:	d04a      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800962a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800962e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009632:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009636:	d01e      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8009638:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800963c:	d825      	bhi.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800963e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009642:	d00e      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8009644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009648:	d81f      	bhi.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d021      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800964e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009652:	d11a      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4b3d      	ldr	r3, [pc, #244]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	4a3c      	ldr	r2, [pc, #240]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800965e:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009660:	e018      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009666:	3308      	adds	r3, #8
 8009668:	4618      	mov	r0, r3
 800966a:	f002 f84b 	bl	800b704 <RCCEx_PLL2_Config>
 800966e:	4603      	mov	r3, r0
 8009670:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009674:	e00e      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967a:	332c      	adds	r3, #44	; 0x2c
 800967c:	4618      	mov	r0, r3
 800967e:	f002 f8d9 	bl	800b834 <RCCEx_PLL3_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009688:	e004      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009690:	e000      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8009692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009694:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10d      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800969c:	4b2b      	ldr	r3, [pc, #172]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800969e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80096ae:	4927      	ldr	r1, [pc, #156]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80096b6:	e003      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80096bc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80096c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	2300      	movs	r3, #0
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d03d      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80096dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e8:	d00e      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80096ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096ee:	d815      	bhi.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d017      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096f8:	d110      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096fa:	4b14      	ldr	r3, [pc, #80]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009704:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009706:	e00e      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970c:	3308      	adds	r3, #8
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fff8 	bl	800b704 <RCCEx_PLL2_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8009724:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009726:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009734:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800973c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009740:	4902      	ldr	r1, [pc, #8]	; (800974c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009748:	e006      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800974a:	bf00      	nop
 800974c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009754:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009764:	60bb      	str	r3, [r7, #8]
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800976e:	460b      	mov	r3, r1
 8009770:	4313      	orrs	r3, r2
 8009772:	d00c      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009774:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800977a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800977e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009782:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009786:	4928      	ldr	r1, [pc, #160]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800978e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	2100      	movs	r1, #0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80097a4:	460b      	mov	r3, r1
 80097a6:	4313      	orrs	r3, r2
 80097a8:	d036      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80097aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80097b2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80097b6:	d00d      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80097b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80097bc:	d811      	bhi.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80097be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c2:	d012      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80097c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c8:	d80b      	bhi.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d106      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097d4:	4b14      	ldr	r3, [pc, #80]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d8:	4a13      	ldr	r2, [pc, #76]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097de:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80097e0:	e004      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80097e8:	e000      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80097ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10d      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80097fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009806:	4908      	ldr	r1, [pc, #32]	; (8009828 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800980e:	e003      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009810:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009814:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009818:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 800981c:	4618      	mov	r0, r3
 800981e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009822:	46bd      	mov	sp, r7
 8009824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009828:	46020c00 	.word	0x46020c00

0800982c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	; 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009834:	4ba6      	ldr	r3, [pc, #664]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800983e:	4ba4      	ldr	r3, [pc, #656]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009848:	4ba1      	ldr	r3, [pc, #644]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	3301      	adds	r3, #1
 8009854:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009856:	4b9e      	ldr	r3, [pc, #632]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985a:	091b      	lsrs	r3, r3, #4
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009862:	4b9b      	ldr	r3, [pc, #620]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	08db      	lsrs	r3, r3, #3
 8009868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d062      	beq.n	800994a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b03      	cmp	r3, #3
 8009888:	f200 8081 	bhi.w	800998e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d024      	beq.n	80098dc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d17a      	bne.n	800998e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80098a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098aa:	4b89      	ldr	r3, [pc, #548]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80098be:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80098c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098da:	e08f      	b.n	80099fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80098dc:	4b7c      	ldr	r3, [pc, #496]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80098e8:	4b79      	ldr	r3, [pc, #484]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	0f1b      	lsrs	r3, r3, #28
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	e006      	b.n	8009902 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80098f4:	4b76      	ldr	r3, [pc, #472]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	0f1b      	lsrs	r3, r3, #28
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	4a76      	ldr	r2, [pc, #472]	; (8009adc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009928:	ed97 6a02 	vldr	s12, [r7, #8]
 800992c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009944:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009948:	e058      	b.n	80099fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009954:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995c:	4b5c      	ldr	r3, [pc, #368]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800995e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800996c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009970:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009974:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009978:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800997c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009980:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009988:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800998c:	e036      	b.n	80099fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800998e:	4b50      	ldr	r3, [pc, #320]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800999a:	4b4d      	ldr	r3, [pc, #308]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	0f1b      	lsrs	r3, r3, #28
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	e006      	b.n	80099b4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80099a6:	4b4a      	ldr	r3, [pc, #296]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	4a49      	ldr	r2, [pc, #292]	; (8009adc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80099b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099da:	ed97 6a02 	vldr	s12, [r7, #8]
 80099de:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80099e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80099f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099fa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80099fc:	4b34      	ldr	r3, [pc, #208]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d017      	beq.n	8009a38 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a08:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	0a5b      	lsrs	r3, r3, #9
 8009a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2e:	ee17 2a90 	vmov	r2, s15
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009a3e:	4b24      	ldr	r3, [pc, #144]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d017      	beq.n	8009a7a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a4a:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a70:	ee17 2a90 	vmov	r2, s15
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	e002      	b.n	8009a80 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009a80:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d017      	beq.n	8009abc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a90:	0e1b      	lsrs	r3, r3, #24
 8009a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab2:	ee17 2a90 	vmov	r2, s15
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009aba:	e002      	b.n	8009ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	609a      	str	r2, [r3, #8]
}
 8009ac2:	bf00      	nop
 8009ac4:	3724      	adds	r7, #36	; 0x24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	46020c00 	.word	0x46020c00
 8009ad4:	4b742400 	.word	0x4b742400
 8009ad8:	46000000 	.word	0x46000000
 8009adc:	0800e624 	.word	0x0800e624

08009ae0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b089      	sub	sp, #36	; 0x24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009ae8:	4ba6      	ldr	r3, [pc, #664]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009af2:	4ba4      	ldr	r3, [pc, #656]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009afc:	4ba1      	ldr	r3, [pc, #644]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	3301      	adds	r3, #1
 8009b08:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009b0a:	4b9e      	ldr	r3, [pc, #632]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009b16:	4b9b      	ldr	r3, [pc, #620]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	08db      	lsrs	r3, r3, #3
 8009b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d062      	beq.n	8009bfe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	f200 8081 	bhi.w	8009c42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d024      	beq.n	8009b90 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d17a      	bne.n	8009c42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b56:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5e:	4b89      	ldr	r3, [pc, #548]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b72:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b8e:	e08f      	b.n	8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009b90:	4b7c      	ldr	r3, [pc, #496]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009b9c:	4b79      	ldr	r3, [pc, #484]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	0f1b      	lsrs	r3, r3, #28
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	e006      	b.n	8009bb6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009ba8:	4b76      	ldr	r3, [pc, #472]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bae:	041b      	lsls	r3, r3, #16
 8009bb0:	0f1b      	lsrs	r3, r3, #28
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	4a76      	ldr	r2, [pc, #472]	; (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bfc:	e058      	b.n	8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c08:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c10:	4b5c      	ldr	r3, [pc, #368]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c24:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c40:	e036      	b.n	8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009c42:	4b50      	ldr	r3, [pc, #320]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009c4e:	4b4d      	ldr	r3, [pc, #308]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	0f1b      	lsrs	r3, r3, #28
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009c5a:	4b4a      	ldr	r3, [pc, #296]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	0f1b      	lsrs	r3, r3, #28
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	4a49      	ldr	r2, [pc, #292]	; (8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	ee07 3a90 	vmov	s15, r3
 8009c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c92:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cae:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009cb0:	4b34      	ldr	r3, [pc, #208]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d017      	beq.n	8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009cbc:	4b31      	ldr	r3, [pc, #196]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc0:	0a5b      	lsrs	r3, r3, #9
 8009cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce2:	ee17 2a90 	vmov	r2, s15
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e002      	b.n	8009cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009cf2:	4b24      	ldr	r3, [pc, #144]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d017      	beq.n	8009d2e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009cfe:	4b21      	ldr	r3, [pc, #132]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d02:	0c1b      	lsrs	r3, r3, #16
 8009d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d24:	ee17 2a90 	vmov	r2, s15
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	605a      	str	r2, [r3, #4]
 8009d2c:	e002      	b.n	8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009d34:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d017      	beq.n	8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d40:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d44:	0e1b      	lsrs	r3, r3, #24
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d66:	ee17 2a90 	vmov	r2, s15
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d6e:	e002      	b.n	8009d76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	609a      	str	r2, [r3, #8]
}
 8009d76:	bf00      	nop
 8009d78:	3724      	adds	r7, #36	; 0x24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	46020c00 	.word	0x46020c00
 8009d88:	4b742400 	.word	0x4b742400
 8009d8c:	46000000 	.word	0x46000000
 8009d90:	0800e624 	.word	0x0800e624

08009d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b089      	sub	sp, #36	; 0x24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009d9c:	4ba6      	ldr	r3, [pc, #664]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009da6:	4ba4      	ldr	r3, [pc, #656]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009db0:	4ba1      	ldr	r3, [pc, #644]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	3301      	adds	r3, #1
 8009dbc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009dbe:	4b9e      	ldr	r3, [pc, #632]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	091b      	lsrs	r3, r3, #4
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009dca:	4b9b      	ldr	r3, [pc, #620]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dce:	08db      	lsrs	r3, r3, #3
 8009dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d062      	beq.n	8009eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	f200 8081 	bhi.w	8009ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d024      	beq.n	8009e44 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d17a      	bne.n	8009ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e12:	4b89      	ldr	r3, [pc, #548]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e26:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009e42:	e08f      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009e44:	4b7c      	ldr	r3, [pc, #496]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009e50:	4b79      	ldr	r3, [pc, #484]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	0f1b      	lsrs	r3, r3, #28
 8009e56:	f003 030f 	and.w	r3, r3, #15
 8009e5a:	e006      	b.n	8009e6a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009e5c:	4b76      	ldr	r3, [pc, #472]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e62:	041b      	lsls	r3, r3, #16
 8009e64:	0f1b      	lsrs	r3, r3, #28
 8009e66:	f003 030f 	and.w	r3, r3, #15
 8009e6a:	4a76      	ldr	r2, [pc, #472]	; (800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	ee07 3a90 	vmov	s15, r3
 8009e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	ee07 3a90 	vmov	s15, r3
 8009e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e90:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e94:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eb0:	e058      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec4:	4b5c      	ldr	r3, [pc, #368]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ecc:	ee07 3a90 	vmov	s15, r3
 8009ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed4:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ed8:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ef4:	e036      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009ef6:	4b50      	ldr	r3, [pc, #320]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009f02:	4b4d      	ldr	r3, [pc, #308]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	0f1b      	lsrs	r3, r3, #28
 8009f08:	f003 030f 	and.w	r3, r3, #15
 8009f0c:	e006      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009f0e:	4b4a      	ldr	r3, [pc, #296]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f14:	041b      	lsls	r3, r3, #16
 8009f16:	0f1b      	lsrs	r3, r3, #28
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	4a49      	ldr	r2, [pc, #292]	; (800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f46:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f62:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009f64:	4b34      	ldr	r3, [pc, #208]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d017      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009f70:	4b31      	ldr	r3, [pc, #196]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f74:	0a5b      	lsrs	r3, r3, #9
 8009f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f86:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f96:	ee17 2a90 	vmov	r2, s15
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009fa6:	4b24      	ldr	r3, [pc, #144]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d017      	beq.n	8009fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009fb2:	4b21      	ldr	r3, [pc, #132]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbc:	ee07 3a90 	vmov	s15, r3
 8009fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd8:	ee17 2a90 	vmov	r2, s15
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]
 8009fe0:	e002      	b.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009fe8:	4b13      	ldr	r3, [pc, #76]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d017      	beq.n	800a024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009ff4:	4b10      	ldr	r3, [pc, #64]	; (800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff8:	0e1b      	lsrs	r3, r3, #24
 8009ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a00a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a01a:	ee17 2a90 	vmov	r2, s15
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a022:	e002      	b.n	800a02a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	609a      	str	r2, [r3, #8]
}
 800a02a:	bf00      	nop
 800a02c:	3724      	adds	r7, #36	; 0x24
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	46020c00 	.word	0x46020c00
 800a03c:	4b742400 	.word	0x4b742400
 800a040:	46000000 	.word	0x46000000
 800a044:	0800e624 	.word	0x0800e624

0800a048 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08e      	sub	sp, #56	; 0x38
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a056:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800a05a:	430b      	orrs	r3, r1
 800a05c:	d145      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a05e:	4ba7      	ldr	r3, [pc, #668]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a068:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a06a:	4ba4      	ldr	r3, [pc, #656]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a06c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b02      	cmp	r3, #2
 800a076:	d108      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07e:	d104      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a084:	637b      	str	r3, [r7, #52]	; 0x34
 800a086:	f001 bb31 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a08a:	4b9c      	ldr	r3, [pc, #624]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a098:	d114      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a0:	d110      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0a2:	4b96      	ldr	r3, [pc, #600]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0b0:	d103      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a0b2:	23fa      	movs	r3, #250	; 0xfa
 800a0b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0b6:	f001 bb19 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800a0ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a0be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0c0:	f001 bb14 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a0c4:	4b8d      	ldr	r3, [pc, #564]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d0:	d107      	bne.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d8:	d103      	bne.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a0da:	4b89      	ldr	r3, [pc, #548]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a0de:	f001 bb05 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e6:	f001 bb01 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ee:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	d151      	bne.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a0f6:	4b81      	ldr	r3, [pc, #516]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0fc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a100:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	2b80      	cmp	r3, #128	; 0x80
 800a106:	d035      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d841      	bhi.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	2b60      	cmp	r3, #96	; 0x60
 800a112:	d02a      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	2b60      	cmp	r3, #96	; 0x60
 800a118:	d83b      	bhi.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d009      	beq.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	d835      	bhi.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00c      	beq.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d012      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a132:	e02e      	b.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff fb77 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a142:	f001 bad3 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff fcc8 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a154:	f001 baca 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fe19 	bl	8009d94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a166:	f001 bac1 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a16a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a16e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a170:	f001 babc 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a174:	4b61      	ldr	r3, [pc, #388]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a180:	d103      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a182:	4b60      	ldr	r3, [pc, #384]	; (800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a184:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a186:	f001 bab1 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a18e:	f001 baad 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a196:	f001 baa9 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a19a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a19e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	d158      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a1a6:	4b55      	ldr	r3, [pc, #340]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a1a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a1ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1b8:	d03b      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c0:	d846      	bhi.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1c8:	d02e      	beq.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1d0:	d83e      	bhi.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1e0:	d836      	bhi.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00d      	beq.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ee:	d012      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a1f0:	e02e      	b.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fb18 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a200:	f001 ba74 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a204:	f107 0318 	add.w	r3, r7, #24
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fc69 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a212:	f001 ba6b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a216:	f107 030c 	add.w	r3, r7, #12
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fdba 	bl	8009d94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a224:	f001 ba62 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a228:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a22e:	f001 ba5d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a232:	4b32      	ldr	r3, [pc, #200]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a23a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a23e:	d103      	bne.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a240:	4b30      	ldr	r3, [pc, #192]	; (800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a242:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a244:	f001 ba52 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a24c:	f001 ba4e 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a254:	f001 ba4a 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a25c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a260:	430b      	orrs	r3, r1
 800a262:	d126      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a264:	4b25      	ldr	r3, [pc, #148]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a266:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a26a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a26e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a270:	4b22      	ldr	r3, [pc, #136]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27c:	d106      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a284:	4b1f      	ldr	r3, [pc, #124]	; (800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a286:	637b      	str	r3, [r7, #52]	; 0x34
 800a288:	f001 ba30 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a298:	d107      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2a0:	d103      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a2a2:	4b19      	ldr	r3, [pc, #100]	; (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a6:	f001 ba21 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ae:	f001 ba1d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a2ba:	430b      	orrs	r3, r1
 800a2bc:	d16e      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a2d0:	d03d      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a2d8:	d85c      	bhi.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2e0:	d014      	beq.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2e8:	d854      	bhi.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01f      	beq.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f6:	d012      	beq.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a2f8:	e04c      	b.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a2fa:	bf00      	nop
 800a2fc:	46020c00 	.word	0x46020c00
 800a300:	0007a120 	.word	0x0007a120
 800a304:	00f42400 	.word	0x00f42400
 800a308:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a30c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff fa8b 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a31a:	f001 b9e7 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f7ff fbdc 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a32c:	f001 b9de 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a330:	4ba7      	ldr	r3, [pc, #668]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a33c:	d103      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a33e:	4ba5      	ldr	r3, [pc, #660]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a342:	f001 b9d3 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a34a:	f001 b9cf 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a34e:	4ba0      	ldr	r3, [pc, #640]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0320 	and.w	r3, r3, #32
 800a356:	2b20      	cmp	r3, #32
 800a358:	d118      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a35a:	4b9d      	ldr	r3, [pc, #628]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a366:	4b9a      	ldr	r3, [pc, #616]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	0e1b      	lsrs	r3, r3, #24
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	e006      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a372:	4b97      	ldr	r3, [pc, #604]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	0e1b      	lsrs	r3, r3, #24
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	4a95      	ldr	r2, [pc, #596]	; (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a386:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a388:	f001 b9b0 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a390:	f001 b9ac 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a398:	f001 b9a8 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	d17f      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3a8:	4b89      	ldr	r3, [pc, #548]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a3aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a3ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d165      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a3ba:	4b85      	ldr	r3, [pc, #532]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a3c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a3cc:	d034      	beq.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a3d4:	d853      	bhi.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3dc:	d00b      	beq.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3e4:	d84b      	bhi.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d016      	beq.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3f2:	d009      	beq.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a3f4:	e043      	b.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fa16 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a404:	f001 b972 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a408:	f107 0318 	add.w	r3, r7, #24
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7ff fb67 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a416:	f001 b969 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a41a:	4b6d      	ldr	r3, [pc, #436]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a426:	d103      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a428:	4b6a      	ldr	r3, [pc, #424]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a42a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a42c:	f001 b95e 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a434:	f001 b95a 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a438:	4b65      	ldr	r3, [pc, #404]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b20      	cmp	r3, #32
 800a442:	d118      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a444:	4b62      	ldr	r3, [pc, #392]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a450:	4b5f      	ldr	r3, [pc, #380]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	0e1b      	lsrs	r3, r3, #24
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	e006      	b.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a45c:	4b5c      	ldr	r3, [pc, #368]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a45e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a462:	041b      	lsls	r3, r3, #16
 800a464:	0e1b      	lsrs	r3, r3, #24
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	4a5b      	ldr	r2, [pc, #364]	; (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a472:	f001 b93b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a47a:	f001 b937 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a482:	f001 b933 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a48c:	d108      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff f9ca 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	637b      	str	r3, [r7, #52]	; 0x34
 800a49c:	f001 b926 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a4:	f001 b922 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ac:	1e51      	subs	r1, r2, #1
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	d136      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a4b2:	4b47      	ldr	r3, [pc, #284]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a4b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a4c4:	f7fe fa48 	bl	8008958 <HAL_RCC_GetPCLK2Freq>
 800a4c8:	6378      	str	r0, [r7, #52]	; 0x34
 800a4ca:	f001 b90f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d104      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a4d4:	f7fe f910 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a4d8:	6378      	str	r0, [r7, #52]	; 0x34
 800a4da:	f001 b907 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a4de:	4b3c      	ldr	r3, [pc, #240]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ea:	d106      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d103      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a4f2:	4b3a      	ldr	r3, [pc, #232]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4f6:	f001 b8f9 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a4fa:	4b35      	ldr	r3, [pc, #212]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a4fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b02      	cmp	r3, #2
 800a506:	d107      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d104      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a50e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
 800a514:	f001 b8ea 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	637b      	str	r3, [r7, #52]	; 0x34
 800a51c:	f001 b8e6 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a524:	1e91      	subs	r1, r2, #2
 800a526:	430b      	orrs	r3, r1
 800a528:	d136      	bne.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a52a:	4b29      	ldr	r3, [pc, #164]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a530:	f003 030c 	and.w	r3, r3, #12
 800a534:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a53c:	f7fe f9f8 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a540:	6378      	str	r0, [r7, #52]	; 0x34
 800a542:	f001 b8d3 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d104      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a54c:	f7fe f8d4 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a550:	6378      	str	r0, [r7, #52]	; 0x34
 800a552:	f001 b8cb 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a556:	4b1e      	ldr	r3, [pc, #120]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a562:	d106      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	2b08      	cmp	r3, #8
 800a568:	d103      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a56a:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a56c:	637b      	str	r3, [r7, #52]	; 0x34
 800a56e:	f001 b8bd 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a572:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d107      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2b0c      	cmp	r3, #12
 800a584:	d104      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
 800a58c:	f001 b8ae 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	637b      	str	r3, [r7, #52]	; 0x34
 800a594:	f001 b8aa 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a59c:	1f11      	subs	r1, r2, #4
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	d13f      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d104      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7fe f9bc 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a5b8:	6378      	str	r0, [r7, #52]	; 0x34
 800a5ba:	f001 b897 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	2b10      	cmp	r3, #16
 800a5c2:	d10d      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a5c4:	f7fe f898 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a5c8:	6378      	str	r0, [r7, #52]	; 0x34
 800a5ca:	f001 b88f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a5ce:	bf00      	nop
 800a5d0:	46020c00 	.word	0x46020c00
 800a5d4:	02dc6c00 	.word	0x02dc6c00
 800a5d8:	0800e624 	.word	0x0800e624
 800a5dc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a5e0:	4ba8      	ldr	r3, [pc, #672]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ec:	d106      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2b20      	cmp	r3, #32
 800a5f2:	d103      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a5f4:	4ba4      	ldr	r3, [pc, #656]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f8:	f001 b878 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a5fc:	4ba1      	ldr	r3, [pc, #644]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b02      	cmp	r3, #2
 800a608:	d107      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	2b30      	cmp	r3, #48	; 0x30
 800a60e:	d104      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a614:	637b      	str	r3, [r7, #52]	; 0x34
 800a616:	f001 b869 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
 800a61e:	f001 b865 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a626:	f1a2 0108 	sub.w	r1, r2, #8
 800a62a:	430b      	orrs	r3, r1
 800a62c:	d136      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a62e:	4b95      	ldr	r3, [pc, #596]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a638:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a640:	f7fe f976 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a644:	6378      	str	r0, [r7, #52]	; 0x34
 800a646:	f001 b851 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d104      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a650:	f7fe f852 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a654:	6378      	str	r0, [r7, #52]	; 0x34
 800a656:	f001 b849 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a65a:	4b8a      	ldr	r3, [pc, #552]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a666:	d106      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	2b80      	cmp	r3, #128	; 0x80
 800a66c:	d103      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a66e:	4b86      	ldr	r3, [pc, #536]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
 800a672:	f001 b83b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a676:	4b83      	ldr	r3, [pc, #524]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b02      	cmp	r3, #2
 800a682:	d107      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2bc0      	cmp	r3, #192	; 0xc0
 800a688:	d104      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68e:	637b      	str	r3, [r7, #52]	; 0x34
 800a690:	f001 b82c 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
 800a698:	f001 b828 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a0:	f1a2 0110 	sub.w	r1, r2, #16
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	d139      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a6a8:	4b76      	ldr	r3, [pc, #472]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a6aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6ba:	f7fe f939 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a6be:	6378      	str	r0, [r7, #52]	; 0x34
 800a6c0:	f001 b814 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ca:	d104      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6cc:	f7fe f814 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a6d0:	6378      	str	r0, [r7, #52]	; 0x34
 800a6d2:	f001 b80b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a6d6:	4b6b      	ldr	r3, [pc, #428]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ea:	d103      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a6ec:	4b66      	ldr	r3, [pc, #408]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a6ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a6f0:	f000 bffc 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a6f4:	4b63      	ldr	r3, [pc, #396]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a6f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d108      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a708:	d104      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a70e:	637b      	str	r3, [r7, #52]	; 0x34
 800a710:	f000 bfec 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
 800a718:	f000 bfe8 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a720:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800a724:	430b      	orrs	r3, r1
 800a726:	d139      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a728:	4b56      	ldr	r3, [pc, #344]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a72a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a72e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a732:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	2b00      	cmp	r3, #0
 800a738:	d104      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a73a:	f7fe f8f9 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a73e:	6378      	str	r0, [r7, #52]	; 0x34
 800a740:	f000 bfd4 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74a:	d104      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a74c:	f7fd ffd4 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a750:	6378      	str	r0, [r7, #52]	; 0x34
 800a752:	f000 bfcb 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a756:	4b4b      	ldr	r3, [pc, #300]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a762:	d107      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a76a:	d103      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a76c:	4b46      	ldr	r3, [pc, #280]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34
 800a770:	f000 bfbc 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a774:	4b43      	ldr	r3, [pc, #268]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d108      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a788:	d104      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a78e:	637b      	str	r3, [r7, #52]	; 0x34
 800a790:	f000 bfac 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	637b      	str	r3, [r7, #52]	; 0x34
 800a798:	f000 bfa8 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a79c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a0:	f1a2 0120 	sub.w	r1, r2, #32
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	d158      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a7a8:	4b36      	ldr	r3, [pc, #216]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d104      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a7ba:	f7fe f8e1 	bl	8008980 <HAL_RCC_GetPCLK3Freq>
 800a7be:	6378      	str	r0, [r7, #52]	; 0x34
 800a7c0:	f000 bf94 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d104      	bne.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7ca:	f7fd ff95 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a7ce:	6378      	str	r0, [r7, #52]	; 0x34
 800a7d0:	f000 bf8c 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e0:	d106      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d103      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a7e8:	4b27      	ldr	r3, [pc, #156]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ec:	f000 bf7e 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a7f0:	4b24      	ldr	r3, [pc, #144]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d107      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	2b03      	cmp	r3, #3
 800a802:	d104      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
 800a80a:	f000 bf6f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a80e:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b20      	cmp	r3, #32
 800a818:	d11b      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d118      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a820:	4b18      	ldr	r3, [pc, #96]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	0e1b      	lsrs	r3, r3, #24
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	e006      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a838:	4b12      	ldr	r3, [pc, #72]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a83a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	0e1b      	lsrs	r3, r3, #24
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	4a11      	ldr	r2, [pc, #68]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a84c:	637b      	str	r3, [r7, #52]	; 0x34
 800a84e:	f000 bf4d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	637b      	str	r3, [r7, #52]	; 0x34
 800a856:	f000 bf49 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a85a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a862:	430b      	orrs	r3, r1
 800a864:	d172      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a866:	4b07      	ldr	r3, [pc, #28]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a86c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a870:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a878:	d10a      	bne.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a87a:	f7fd ff3d 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a87e:	6378      	str	r0, [r7, #52]	; 0x34
 800a880:	f000 bf34 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a884:	46020c00 	.word	0x46020c00
 800a888:	00f42400 	.word	0x00f42400
 800a88c:	0800e624 	.word	0x0800e624
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a896:	d108      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a898:	f107 0318 	add.w	r3, r7, #24
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff f91f 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a6:	f000 bf21 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a8b0:	f7fe f824 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 800a8b4:	6378      	str	r0, [r7, #52]	; 0x34
 800a8b6:	f000 bf19 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a8c0:	d122      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a8c2:	4bb0      	ldr	r3, [pc, #704]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d118      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a8ce:	4bad      	ldr	r3, [pc, #692]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a8da:	4baa      	ldr	r3, [pc, #680]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	0e1b      	lsrs	r3, r3, #24
 800a8e0:	f003 030f 	and.w	r3, r3, #15
 800a8e4:	e006      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a8e6:	4ba7      	ldr	r3, [pc, #668]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8ec:	041b      	lsls	r3, r3, #16
 800a8ee:	0e1b      	lsrs	r3, r3, #24
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	4aa4      	ldr	r2, [pc, #656]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fc:	f000 bef6 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	637b      	str	r3, [r7, #52]	; 0x34
 800a904:	f000 bef2 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a908:	4b9e      	ldr	r3, [pc, #632]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a914:	d107      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a91c:	d103      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a91e:	4b9b      	ldr	r3, [pc, #620]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
 800a922:	f000 bee3 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a926:	4b97      	ldr	r3, [pc, #604]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a92e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a932:	d107      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a93a:	d103      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a93c:	4b93      	ldr	r3, [pc, #588]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
 800a940:	f000 bed4 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	637b      	str	r3, [r7, #52]	; 0x34
 800a948:	f000 bed0 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a950:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a954:	430b      	orrs	r3, r1
 800a956:	d158      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a958:	4b8a      	ldr	r3, [pc, #552]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a95a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	2b04      	cmp	r3, #4
 800a968:	d84b      	bhi.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9a9 	.word	0x0800a9a9
 800a974:	0800a985 	.word	0x0800a985
 800a978:	0800a997 	.word	0x0800a997
 800a97c:	0800a9b3 	.word	0x0800a9b3
 800a980:	0800a9bd 	.word	0x0800a9bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe ff4f 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a992:	f000 beab 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7ff f9fa 	bl	8009d94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9a4:	f000 bea2 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a9a8:	f7fd ffa8 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 800a9ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a9ae:	f000 be9d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a9b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9b8:	f000 be98 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a9bc:	4b71      	ldr	r3, [pc, #452]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d118      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9c8:	4b6e      	ldr	r3, [pc, #440]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a9d4:	4b6b      	ldr	r3, [pc, #428]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	0e1b      	lsrs	r3, r3, #24
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	e006      	b.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a9e0:	4b68      	ldr	r3, [pc, #416]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9e6:	041b      	lsls	r3, r3, #16
 800a9e8:	0e1b      	lsrs	r3, r3, #24
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	4a66      	ldr	r2, [pc, #408]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a9f6:	f000 be79 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9fe:	f000 be75 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa06:	f000 be71 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800aa0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800aa12:	430b      	orrs	r3, r1
 800aa14:	d167      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800aa16:	4b5b      	ldr	r3, [pc, #364]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aa18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa1c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aa20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa28:	d036      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa30:	d855      	bhi.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa38:	d029      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa40:	d84d      	bhi.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa48:	d013      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa50:	d845      	bhi.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d015      	beq.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa5e:	d13e      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fee1 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa6e:	f000 be3d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa72:	f107 030c 	add.w	r3, r7, #12
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff f98c 	bl	8009d94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa80:	f000 be34 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aa84:	f7fd ff3a 	bl	80088fc <HAL_RCC_GetHCLKFreq>
 800aa88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800aa8a:	f000 be2f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aa8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aa92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa94:	f000 be2a 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa98:	4b3a      	ldr	r3, [pc, #232]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	d118      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aaa4:	4b37      	ldr	r3, [pc, #220]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800aab0:	4b34      	ldr	r3, [pc, #208]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	0e1b      	lsrs	r3, r3, #24
 800aab6:	f003 030f 	and.w	r3, r3, #15
 800aaba:	e006      	b.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aabc:	4b31      	ldr	r3, [pc, #196]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aabe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aac2:	041b      	lsls	r3, r3, #16
 800aac4:	0e1b      	lsrs	r3, r3, #24
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	4a2f      	ldr	r2, [pc, #188]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aad0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aad2:	f000 be0b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aada:	f000 be07 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aae2:	f000 be03 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800aae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaea:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	d152      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aaf2:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aaf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aafc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab04:	f7fd ff14 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800ab08:	6378      	str	r0, [r7, #52]	; 0x34
 800ab0a:	f000 bdef 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab14:	d104      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab16:	f7fd fdef 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800ab1a:	6378      	str	r0, [r7, #52]	; 0x34
 800ab1c:	f000 bde6 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ab20:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab2c:	d107      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab34:	d103      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ab36:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
 800ab3a:	f000 bdd7 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ab3e:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	d122      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab50:	d11e      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ab5e:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	0e1b      	lsrs	r3, r3, #24
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	e006      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab70:	041b      	lsls	r3, r3, #16
 800ab72:	0e1b      	lsrs	r3, r3, #24
 800ab74:	f003 030f 	and.w	r3, r3, #15
 800ab78:	4a03      	ldr	r2, [pc, #12]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab80:	f000 bdb4 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800ab84:	46020c00 	.word	0x46020c00
 800ab88:	0800e624 	.word	0x0800e624
 800ab8c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	637b      	str	r3, [r7, #52]	; 0x34
 800ab94:	f000 bdaa 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ab98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800aba0:	430b      	orrs	r3, r1
 800aba2:	d14c      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800aba4:	4ba8      	ldr	r3, [pc, #672]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800abae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d104      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800abb6:	f7fd febb 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800abba:	6378      	str	r0, [r7, #52]	; 0x34
 800abbc:	f000 bd96 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc6:	d104      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abc8:	f7fd fd96 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800abcc:	6378      	str	r0, [r7, #52]	; 0x34
 800abce:	f000 bd8d 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800abd2:	4b9d      	ldr	r3, [pc, #628]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abde:	d107      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe6:	d103      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800abe8:	4b98      	ldr	r3, [pc, #608]	; (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800abea:	637b      	str	r3, [r7, #52]	; 0x34
 800abec:	f000 bd7e 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800abf0:	4b95      	ldr	r3, [pc, #596]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0320 	and.w	r3, r3, #32
 800abf8:	2b20      	cmp	r3, #32
 800abfa:	d11c      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac02:	d118      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac04:	4b90      	ldr	r3, [pc, #576]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ac10:	4b8d      	ldr	r3, [pc, #564]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	0e1b      	lsrs	r3, r3, #24
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	e006      	b.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ac1c:	4b8a      	ldr	r3, [pc, #552]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ac1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac22:	041b      	lsls	r3, r3, #16
 800ac24:	0e1b      	lsrs	r3, r3, #24
 800ac26:	f003 030f 	and.w	r3, r3, #15
 800ac2a:	4a89      	ldr	r2, [pc, #548]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ac2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
 800ac32:	f000 bd5b 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
 800ac3a:	f000 bd57 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ac3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac42:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ac46:	430b      	orrs	r3, r1
 800ac48:	d158      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ac4a:	4b7f      	ldr	r3, [pc, #508]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ac4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	2bc0      	cmp	r3, #192	; 0xc0
 800ac5a:	d028      	beq.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	2bc0      	cmp	r3, #192	; 0xc0
 800ac60:	d848      	bhi.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	2b80      	cmp	r3, #128	; 0x80
 800ac66:	d00e      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	2b80      	cmp	r3, #128	; 0x80
 800ac6c:	d842      	bhi.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	2b40      	cmp	r3, #64	; 0x40
 800ac78:	d014      	beq.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ac7a:	e03b      	b.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ac7c:	f7fd fe80 	bl	8008980 <HAL_RCC_GetPCLK3Freq>
 800ac80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ac82:	f000 bd33 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac86:	4b70      	ldr	r3, [pc, #448]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac92:	d103      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ac94:	4b6d      	ldr	r3, [pc, #436]	; (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac98:	f000 bd28 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aca0:	f000 bd24 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800aca4:	f7fd fd28 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800aca8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800acaa:	f000 bd1f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acae:	4b66      	ldr	r3, [pc, #408]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d118      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800acba:	4b63      	ldr	r3, [pc, #396]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800acc6:	4b60      	ldr	r3, [pc, #384]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	0e1b      	lsrs	r3, r3, #24
 800accc:	f003 030f 	and.w	r3, r3, #15
 800acd0:	e006      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800acd2:	4b5d      	ldr	r3, [pc, #372]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800acd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acd8:	041b      	lsls	r3, r3, #16
 800acda:	0e1b      	lsrs	r3, r3, #24
 800acdc:	f003 030f 	and.w	r3, r3, #15
 800ace0:	4a5b      	ldr	r2, [pc, #364]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ace2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ace8:	f000 bd00 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acf0:	f000 bcfc 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acf8:	f000 bcf8 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800acfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad00:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800ad04:	430b      	orrs	r3, r1
 800ad06:	d14c      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ad08:	4b4f      	ldr	r3, [pc, #316]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad12:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d104      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad1a:	f7fd fe09 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800ad1e:	6378      	str	r0, [r7, #52]	; 0x34
 800ad20:	f000 bce4 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad2a:	d104      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad2c:	f7fd fce4 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800ad30:	6378      	str	r0, [r7, #52]	; 0x34
 800ad32:	f000 bcdb 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ad36:	4b44      	ldr	r3, [pc, #272]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad42:	d107      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad4a:	d103      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800ad4c:	4b3f      	ldr	r3, [pc, #252]	; (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad50:	f000 bccc 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ad54:	4b3c      	ldr	r3, [pc, #240]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d11c      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad66:	d118      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad68:	4b37      	ldr	r3, [pc, #220]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d005      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800ad74:	4b34      	ldr	r3, [pc, #208]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	0e1b      	lsrs	r3, r3, #24
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	e006      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ad80:	4b31      	ldr	r3, [pc, #196]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad86:	041b      	lsls	r3, r3, #16
 800ad88:	0e1b      	lsrs	r3, r3, #24
 800ad8a:	f003 030f 	and.w	r3, r3, #15
 800ad8e:	4a30      	ldr	r2, [pc, #192]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ad90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad94:	637b      	str	r3, [r7, #52]	; 0x34
 800ad96:	f000 bca9 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9e:	f000 bca5 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800ada2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada6:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800adaa:	430b      	orrs	r3, r1
 800adac:	d152      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800adae:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800adb4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800adb8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adc0:	f7fd fdb6 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800adc4:	6378      	str	r0, [r7, #52]	; 0x34
 800adc6:	f000 bc91 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800add0:	d104      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800add2:	f7fd fc91 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800add6:	6378      	str	r0, [r7, #52]	; 0x34
 800add8:	f000 bc88 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800addc:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade8:	d107      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adf0:	d103      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800adf2:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800adf4:	637b      	str	r3, [r7, #52]	; 0x34
 800adf6:	f000 bc79 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800adfa:	4b13      	ldr	r3, [pc, #76]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	d11c      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae0c:	d118      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae0e:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d005      	beq.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	0e1b      	lsrs	r3, r3, #24
 800ae20:	f003 030f 	and.w	r3, r3, #15
 800ae24:	e006      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ae26:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae2c:	041b      	lsls	r3, r3, #16
 800ae2e:	0e1b      	lsrs	r3, r3, #24
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	4a06      	ldr	r2, [pc, #24]	; (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ae36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3c:	f000 bc56 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	637b      	str	r3, [r7, #52]	; 0x34
 800ae44:	f000 bc52 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800ae48:	46020c00 	.word	0x46020c00
 800ae4c:	00f42400 	.word	0x00f42400
 800ae50:	0800e624 	.word	0x0800e624
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800ae54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae58:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	d14a      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ae60:	4ba5      	ldr	r3, [pc, #660]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ae62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae66:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ae6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d104      	bne.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ae72:	f7fd fd5d 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800ae76:	6378      	str	r0, [r7, #52]	; 0x34
 800ae78:	f000 bc38 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae82:	d104      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae84:	f7fd fc38 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800ae88:	6378      	str	r0, [r7, #52]	; 0x34
 800ae8a:	f000 bc2f 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800ae8e:	4b9a      	ldr	r3, [pc, #616]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae9a:	d107      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aea2:	d103      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800aea4:	4b95      	ldr	r3, [pc, #596]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aea6:	637b      	str	r3, [r7, #52]	; 0x34
 800aea8:	f000 bc20 	b.w	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800aeac:	4b92      	ldr	r3, [pc, #584]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b20      	cmp	r3, #32
 800aeb6:	d11b      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aebe:	d117      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aec0:	4b8d      	ldr	r3, [pc, #564]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800aecc:	4b8a      	ldr	r3, [pc, #552]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	0e1b      	lsrs	r3, r3, #24
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	e006      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800aed8:	4b87      	ldr	r3, [pc, #540]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aeda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aede:	041b      	lsls	r3, r3, #16
 800aee0:	0e1b      	lsrs	r3, r3, #24
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	4a86      	ldr	r2, [pc, #536]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800aee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
 800aeee:	e3fd      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
 800aef4:	e3fa      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800aef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aefa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aefe:	430b      	orrs	r3, r1
 800af00:	d164      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800af02:	4b7d      	ldr	r3, [pc, #500]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	2b00      	cmp	r3, #0
 800af12:	d120      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af14:	4b78      	ldr	r3, [pc, #480]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d117      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af20:	4b75      	ldr	r3, [pc, #468]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800af2c:	4b72      	ldr	r3, [pc, #456]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	0e1b      	lsrs	r3, r3, #24
 800af32:	f003 030f 	and.w	r3, r3, #15
 800af36:	e006      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800af38:	4b6f      	ldr	r3, [pc, #444]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	0e1b      	lsrs	r3, r3, #24
 800af42:	f003 030f 	and.w	r3, r3, #15
 800af46:	4a6e      	ldr	r2, [pc, #440]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
 800af4e:	e3cd      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800af50:	2300      	movs	r3, #0
 800af52:	637b      	str	r3, [r7, #52]	; 0x34
 800af54:	e3ca      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800af56:	4b68      	ldr	r3, [pc, #416]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af64:	d112      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af6c:	d10e      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af6e:	4b62      	ldr	r3, [pc, #392]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af7c:	d102      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800af7e:	23fa      	movs	r3, #250	; 0xfa
 800af80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af82:	e3b3      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800af84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af8a:	e3af      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800af8c:	4b5a      	ldr	r3, [pc, #360]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af98:	d106      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa0:	d102      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800afa2:	4b56      	ldr	r3, [pc, #344]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
 800afa6:	e3a1      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800afa8:	4b53      	ldr	r3, [pc, #332]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800afaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d107      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afbc:	d103      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800afbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afc2:	637b      	str	r3, [r7, #52]	; 0x34
 800afc4:	e392      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
 800afca:	e38f      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800afcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800afd4:	430b      	orrs	r3, r1
 800afd6:	d164      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800afd8:	4b47      	ldr	r3, [pc, #284]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800afda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800afde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afe2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d120      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800afea:	4b43      	ldr	r3, [pc, #268]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b20      	cmp	r3, #32
 800aff4:	d117      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aff6:	4b40      	ldr	r3, [pc, #256]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d005      	beq.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800b002:	4b3d      	ldr	r3, [pc, #244]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	0e1b      	lsrs	r3, r3, #24
 800b008:	f003 030f 	and.w	r3, r3, #15
 800b00c:	e006      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800b00e:	4b3a      	ldr	r3, [pc, #232]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	0e1b      	lsrs	r3, r3, #24
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	4a38      	ldr	r2, [pc, #224]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
 800b024:	e362      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
 800b02a:	e35f      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b02c:	4b32      	ldr	r3, [pc, #200]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b02e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b03a:	d112      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b042:	d10e      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b044:	4b2c      	ldr	r3, [pc, #176]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b04a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b052:	d102      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 800b054:	23fa      	movs	r3, #250	; 0xfa
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b058:	e348      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800b05a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b060:	e344      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b062:	4b25      	ldr	r3, [pc, #148]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b06e:	d106      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b076:	d102      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800b078:	4b20      	ldr	r3, [pc, #128]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b07a:	637b      	str	r3, [r7, #52]	; 0x34
 800b07c:	e336      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b07e:	4b1e      	ldr	r3, [pc, #120]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d107      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b092:	d103      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800b094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
 800b09a:	e327      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a0:	e324      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a6:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	d14e      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b0b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d103      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b0c0:	f7fd fc36 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800b0c4:	6378      	str	r0, [r7, #52]	; 0x34
 800b0c6:	e311      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b0c8:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0d6:	d119      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0de:	d115      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0e0:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0ee:	d109      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800b0f0:	23fa      	movs	r3, #250	; 0xfa
 800b0f2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0f4:	e2fa      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b0f6:	bf00      	nop
 800b0f8:	46020c00 	.word	0x46020c00
 800b0fc:	00f42400 	.word	0x00f42400
 800b100:	0800e624 	.word	0x0800e624
      }
      else
      {
        frequency = LSI_VALUE;
 800b104:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b108:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b10a:	e2ef      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b10c:	4ba8      	ldr	r3, [pc, #672]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b118:	d106      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b120:	d102      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800b122:	4ba4      	ldr	r3, [pc, #656]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b124:	637b      	str	r3, [r7, #52]	; 0x34
 800b126:	e2e1      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b128:	4ba1      	ldr	r3, [pc, #644]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b12a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b02      	cmp	r3, #2
 800b134:	d107      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b13c:	d103      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800b13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b142:	637b      	str	r3, [r7, #52]	; 0x34
 800b144:	e2d2      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
 800b14a:	e2cf      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b14c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b150:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800b154:	430b      	orrs	r3, r1
 800b156:	d12d      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b158:	4b95      	ldr	r3, [pc, #596]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b15a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b15e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b162:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b164:	4b92      	ldr	r3, [pc, #584]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b16c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b170:	d105      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800b178:	4b8e      	ldr	r3, [pc, #568]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b17a:	637b      	str	r3, [r7, #52]	; 0x34
 800b17c:	e2b6      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b184:	d107      	bne.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fb4e 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	637b      	str	r3, [r7, #52]	; 0x34
 800b194:	e2aa      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b19c:	d107      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fc9c 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ac:	e29e      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1b2:	e29b      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	d156      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b1c0:	4b7b      	ldr	r3, [pc, #492]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b1c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b1ca:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1d2:	d028      	beq.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1da:	d845      	bhi.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1e2:	d013      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ea:	d83d      	bhi.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1f8:	d004      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800b1fa:	e035      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b1fc:	f7fd fbac 	bl	8008958 <HAL_RCC_GetPCLK2Freq>
 800b200:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b202:	e273      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b204:	f7fd fa78 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800b208:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b20a:	e26f      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b20c:	4b68      	ldr	r3, [pc, #416]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b218:	d102      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800b21a:	4b66      	ldr	r3, [pc, #408]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b21e:	e265      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b220:	2300      	movs	r3, #0
 800b222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b224:	e262      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b226:	4b62      	ldr	r3, [pc, #392]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0320 	and.w	r3, r3, #32
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d117      	bne.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b232:	4b5f      	ldr	r3, [pc, #380]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800b23e:	4b5c      	ldr	r3, [pc, #368]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	0e1b      	lsrs	r3, r3, #24
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	e006      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800b24a:	4b59      	ldr	r3, [pc, #356]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b24c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b250:	041b      	lsls	r3, r3, #16
 800b252:	0e1b      	lsrs	r3, r3, #24
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	4a57      	ldr	r2, [pc, #348]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b25e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b260:	e244      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b266:	e241      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b26c:	e23e      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b272:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b276:	430b      	orrs	r3, r1
 800b278:	d156      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b27a:	4b4d      	ldr	r3, [pc, #308]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b27c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b284:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b28c:	d028      	beq.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b294:	d845      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b29c:	d013      	beq.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2a4:	d83d      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2b2:	d004      	beq.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800b2b4:	e035      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b2b6:	f7fd fb3b 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800b2ba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b2bc:	e216      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b2be:	f7fd fa1b 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800b2c2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b2c4:	e212      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2c6:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2d2:	d102      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800b2d4:	4b37      	ldr	r3, [pc, #220]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b2d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b2d8:	e208      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2de:	e205      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2e0:	4b33      	ldr	r3, [pc, #204]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	2b20      	cmp	r3, #32
 800b2ea:	d117      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2ec:	4b30      	ldr	r3, [pc, #192]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d005      	beq.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800b2f8:	4b2d      	ldr	r3, [pc, #180]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	0e1b      	lsrs	r3, r3, #24
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	e006      	b.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 800b304:	4b2a      	ldr	r3, [pc, #168]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	0e1b      	lsrs	r3, r3, #24
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	4a29      	ldr	r2, [pc, #164]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b31a:	e1e7      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b320:	e1e4      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b326:	e1e1      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800b330:	430b      	orrs	r3, r1
 800b332:	d17c      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b334:	4b1e      	ldr	r3, [pc, #120]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b33a:	f003 0318 	and.w	r3, r3, #24
 800b33e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	2b18      	cmp	r3, #24
 800b344:	d870      	bhi.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 800b346:	a201      	add	r2, pc, #4	; (adr r2, 800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b3bd 	.word	0x0800b3bd
 800b350:	0800b429 	.word	0x0800b429
 800b354:	0800b429 	.word	0x0800b429
 800b358:	0800b429 	.word	0x0800b429
 800b35c:	0800b429 	.word	0x0800b429
 800b360:	0800b429 	.word	0x0800b429
 800b364:	0800b429 	.word	0x0800b429
 800b368:	0800b429 	.word	0x0800b429
 800b36c:	0800b3c5 	.word	0x0800b3c5
 800b370:	0800b429 	.word	0x0800b429
 800b374:	0800b429 	.word	0x0800b429
 800b378:	0800b429 	.word	0x0800b429
 800b37c:	0800b429 	.word	0x0800b429
 800b380:	0800b429 	.word	0x0800b429
 800b384:	0800b429 	.word	0x0800b429
 800b388:	0800b429 	.word	0x0800b429
 800b38c:	0800b3cd 	.word	0x0800b3cd
 800b390:	0800b429 	.word	0x0800b429
 800b394:	0800b429 	.word	0x0800b429
 800b398:	0800b429 	.word	0x0800b429
 800b39c:	0800b429 	.word	0x0800b429
 800b3a0:	0800b429 	.word	0x0800b429
 800b3a4:	0800b429 	.word	0x0800b429
 800b3a8:	0800b429 	.word	0x0800b429
 800b3ac:	0800b3e7 	.word	0x0800b3e7
 800b3b0:	46020c00 	.word	0x46020c00
 800b3b4:	00f42400 	.word	0x00f42400
 800b3b8:	0800e624 	.word	0x0800e624
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b3bc:	f7fd fae0 	bl	8008980 <HAL_RCC_GetPCLK3Freq>
 800b3c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b3c2:	e193      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b3c4:	f7fd f998 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800b3c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b3ca:	e18f      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3cc:	4b9f      	ldr	r3, [pc, #636]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800b3da:	4b9d      	ldr	r3, [pc, #628]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b3dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3de:	e185      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3e4:	e182      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b3e6:	4b99      	ldr	r3, [pc, #612]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b20      	cmp	r3, #32
 800b3f0:	d117      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b3f2:	4b96      	ldr	r3, [pc, #600]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800b3fe:	4b93      	ldr	r3, [pc, #588]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	0e1b      	lsrs	r3, r3, #24
 800b404:	f003 030f 	and.w	r3, r3, #15
 800b408:	e006      	b.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800b40a:	4b90      	ldr	r3, [pc, #576]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b40c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b410:	041b      	lsls	r3, r3, #16
 800b412:	0e1b      	lsrs	r3, r3, #24
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	4a8e      	ldr	r2, [pc, #568]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b41e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b420:	e164      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b426:	e161      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b42c:	e15e      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b432:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800b436:	430b      	orrs	r3, r1
 800b438:	d155      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b43a:	4b84      	ldr	r3, [pc, #528]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b43c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b440:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b444:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b44c:	d013      	beq.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b454:	d844      	bhi.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b45c:	d013      	beq.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b464:	d83c      	bhi.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d014      	beq.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b472:	d014      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800b474:	e034      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b476:	f107 0318 	add.w	r3, r7, #24
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fb30 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b484:	e132      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe f9ce 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b494:	e12a      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b496:	f7fd f92f 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800b49a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b49c:	e126      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b49e:	4b6b      	ldr	r3, [pc, #428]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	d117      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4aa:	4b68      	ldr	r3, [pc, #416]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800b4b6:	4b65      	ldr	r3, [pc, #404]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	0e1b      	lsrs	r3, r3, #24
 800b4bc:	f003 030f 	and.w	r3, r3, #15
 800b4c0:	e006      	b.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800b4c2:	4b62      	ldr	r3, [pc, #392]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b4c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4c8:	041b      	lsls	r3, r3, #16
 800b4ca:	0e1b      	lsrs	r3, r3, #24
 800b4cc:	f003 030f 	and.w	r3, r3, #15
 800b4d0:	4a60      	ldr	r2, [pc, #384]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4d8:	e108      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4de:	e105      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4e4:	e102      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ea:	1e59      	subs	r1, r3, #1
 800b4ec:	ea52 0301 	orrs.w	r3, r2, r1
 800b4f0:	d13c      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b4f2:	4b56      	ldr	r3, [pc, #344]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b4f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b4f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b4fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b504:	d027      	beq.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b50c:	d82b      	bhi.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b514:	d017      	beq.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b51c:	d823      	bhi.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b52a:	d004      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800b52c:	e01b      	b.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b52e:	f7fd f8e3 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800b532:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b534:	e0da      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe f976 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b544:	e0d2      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b546:	f107 0318 	add.w	r3, r7, #24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fac8 	bl	8009ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b554:	e0ca      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b556:	f107 030c 	add.w	r3, r7, #12
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fc1a 	bl	8009d94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b564:	e0c2      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b56a:	e0bf      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b570:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800b574:	430b      	orrs	r3, r1
 800b576:	d131      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b578:	4b34      	ldr	r3, [pc, #208]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b57e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b582:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b584:	4b31      	ldr	r3, [pc, #196]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d106      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	2b00      	cmp	r3, #0
 800b596:	d103      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800b598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b59c:	637b      	str	r3, [r7, #52]	; 0x34
 800b59e:	e0a5      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b5a0:	4b2a      	ldr	r3, [pc, #168]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ae:	d112      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b6:	d10e      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b5b8:	4b24      	ldr	r3, [pc, #144]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c6:	d102      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800b5c8:	23fa      	movs	r3, #250	; 0xfa
 800b5ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b5cc:	e08e      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800b5ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b5d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b5d4:	e08a      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5da:	e087      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	d13b      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b5e8:	4b18      	ldr	r3, [pc, #96]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b5f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b5f4:	4b15      	ldr	r3, [pc, #84]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b600:	d105      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800b608:	4b13      	ldr	r3, [pc, #76]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b60a:	637b      	str	r3, [r7, #52]	; 0x34
 800b60c:	e06e      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b61a:	d106      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b622:	d102      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b624:	4b0d      	ldr	r3, [pc, #52]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
 800b628:	e060      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b62a:	4b08      	ldr	r3, [pc, #32]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b636:	d106      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b63e:	d102      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800b640:	4b03      	ldr	r3, [pc, #12]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b642:	637b      	str	r3, [r7, #52]	; 0x34
 800b644:	e052      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
 800b64a:	e04f      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b64c:	46020c00 	.word	0x46020c00
 800b650:	00f42400 	.word	0x00f42400
 800b654:	0800e624 	.word	0x0800e624
 800b658:	02dc6c00 	.word	0x02dc6c00
 800b65c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b664:	f1a3 0108 	sub.w	r1, r3, #8
 800b668:	ea52 0301 	orrs.w	r3, r2, r1
 800b66c:	d13c      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b66e:	4b22      	ldr	r3, [pc, #136]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b670:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b674:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b678:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b67a:	4b1f      	ldr	r3, [pc, #124]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b686:	d105      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d102      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800b68e:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800b690:	637b      	str	r3, [r7, #52]	; 0x34
 800b692:	e02b      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b694:	4b18      	ldr	r3, [pc, #96]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6a0:	d106      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6a8:	d102      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 800b6aa:	4b15      	ldr	r3, [pc, #84]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800b6ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ae:	e01d      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b6:	d107      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe f8b5 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c6:	e011      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b6ce:	d108      	bne.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe f8a9 	bl	800982c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	085b      	lsrs	r3, r3, #1
 800b6de:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e0:	e004      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e6:	e001      	b.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3738      	adds	r7, #56	; 0x38
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	46020c00 	.word	0x46020c00
 800b6fc:	00f42400 	.word	0x00f42400
 800b700:	007a1200 	.word	0x007a1200

0800b704 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b70c:	4b47      	ldr	r3, [pc, #284]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a46      	ldr	r2, [pc, #280]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b716:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b718:	f7f9 fb1a 	bl	8004d50 <HAL_GetTick>
 800b71c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b71e:	e008      	b.n	800b732 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b720:	f7f9 fb16 	bl	8004d50 <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d901      	bls.n	800b732 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e077      	b.n	800b822 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b732:	4b3e      	ldr	r3, [pc, #248]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f0      	bne.n	800b720 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b73e:	4b3b      	ldr	r3, [pc, #236]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b746:	f023 0303 	bic.w	r3, r3, #3
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6811      	ldr	r1, [r2, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6852      	ldr	r2, [r2, #4]
 800b752:	3a01      	subs	r2, #1
 800b754:	0212      	lsls	r2, r2, #8
 800b756:	430a      	orrs	r2, r1
 800b758:	4934      	ldr	r1, [pc, #208]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b75e:	4b33      	ldr	r3, [pc, #204]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b762:	4b33      	ldr	r3, [pc, #204]	; (800b830 <RCCEx_PLL2_Config+0x12c>)
 800b764:	4013      	ands	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	6892      	ldr	r2, [r2, #8]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	68d2      	ldr	r2, [r2, #12]
 800b774:	3a01      	subs	r2, #1
 800b776:	0252      	lsls	r2, r2, #9
 800b778:	b292      	uxth	r2, r2
 800b77a:	4311      	orrs	r1, r2
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	6912      	ldr	r2, [r2, #16]
 800b780:	3a01      	subs	r2, #1
 800b782:	0412      	lsls	r2, r2, #16
 800b784:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b788:	4311      	orrs	r1, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	6952      	ldr	r2, [r2, #20]
 800b78e:	3a01      	subs	r2, #1
 800b790:	0612      	lsls	r2, r2, #24
 800b792:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b796:	430a      	orrs	r2, r1
 800b798:	4924      	ldr	r1, [pc, #144]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b79e:	4b23      	ldr	r3, [pc, #140]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	f023 020c 	bic.w	r2, r3, #12
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	4920      	ldr	r1, [pc, #128]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b7b0:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	491c      	ldr	r1, [pc, #112]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b7be:	4b1b      	ldr	r3, [pc, #108]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4a1a      	ldr	r2, [pc, #104]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7c4:	f023 0310 	bic.w	r3, r3, #16
 800b7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7ca:	4b18      	ldr	r3, [pc, #96]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	69d2      	ldr	r2, [r2, #28]
 800b7da:	00d2      	lsls	r2, r2, #3
 800b7dc:	4913      	ldr	r1, [pc, #76]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b7e2:	4b12      	ldr	r3, [pc, #72]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	4a11      	ldr	r2, [pc, #68]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7e8:	f043 0310 	orr.w	r3, r3, #16
 800b7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b7ee:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a0e      	ldr	r2, [pc, #56]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b7f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b7fa:	f7f9 faa9 	bl	8004d50 <HAL_GetTick>
 800b7fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b800:	e008      	b.n	800b814 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b802:	f7f9 faa5 	bl	8004d50 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d901      	bls.n	800b814 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	e006      	b.n	800b822 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <RCCEx_PLL2_Config+0x128>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0f0      	beq.n	800b802 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b820:	2300      	movs	r3, #0

}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	46020c00 	.word	0x46020c00
 800b830:	80800000 	.word	0x80800000

0800b834 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b83c:	4b47      	ldr	r3, [pc, #284]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a46      	ldr	r2, [pc, #280]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b846:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b848:	f7f9 fa82 	bl	8004d50 <HAL_GetTick>
 800b84c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b84e:	e008      	b.n	800b862 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b850:	f7f9 fa7e 	bl	8004d50 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d901      	bls.n	800b862 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e077      	b.n	800b952 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b862:	4b3e      	ldr	r3, [pc, #248]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1f0      	bne.n	800b850 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b86e:	4b3b      	ldr	r3, [pc, #236]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b872:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b876:	f023 0303 	bic.w	r3, r3, #3
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	6811      	ldr	r1, [r2, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	6852      	ldr	r2, [r2, #4]
 800b882:	3a01      	subs	r2, #1
 800b884:	0212      	lsls	r2, r2, #8
 800b886:	430a      	orrs	r2, r1
 800b888:	4934      	ldr	r1, [pc, #208]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b88a:	4313      	orrs	r3, r2
 800b88c:	630b      	str	r3, [r1, #48]	; 0x30
 800b88e:	4b33      	ldr	r3, [pc, #204]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b892:	4b33      	ldr	r3, [pc, #204]	; (800b960 <RCCEx_PLL3_Config+0x12c>)
 800b894:	4013      	ands	r3, r2
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6892      	ldr	r2, [r2, #8]
 800b89a:	3a01      	subs	r2, #1
 800b89c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	68d2      	ldr	r2, [r2, #12]
 800b8a4:	3a01      	subs	r2, #1
 800b8a6:	0252      	lsls	r2, r2, #9
 800b8a8:	b292      	uxth	r2, r2
 800b8aa:	4311      	orrs	r1, r2
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	6912      	ldr	r2, [r2, #16]
 800b8b0:	3a01      	subs	r2, #1
 800b8b2:	0412      	lsls	r2, r2, #16
 800b8b4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b8b8:	4311      	orrs	r1, r2
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	6952      	ldr	r2, [r2, #20]
 800b8be:	3a01      	subs	r2, #1
 800b8c0:	0612      	lsls	r2, r2, #24
 800b8c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	4924      	ldr	r1, [pc, #144]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b8ce:	4b23      	ldr	r3, [pc, #140]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d2:	f023 020c 	bic.w	r2, r3, #12
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	4920      	ldr	r1, [pc, #128]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	491c      	ldr	r1, [pc, #112]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b8ee:	4b1b      	ldr	r3, [pc, #108]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	4a1a      	ldr	r2, [pc, #104]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8f4:	f023 0310 	bic.w	r3, r3, #16
 800b8f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8fa:	4b18      	ldr	r3, [pc, #96]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b902:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	69d2      	ldr	r2, [r2, #28]
 800b90a:	00d2      	lsls	r2, r2, #3
 800b90c:	4913      	ldr	r1, [pc, #76]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b912:	4b12      	ldr	r3, [pc, #72]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	4a11      	ldr	r2, [pc, #68]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b918:	f043 0310 	orr.w	r3, r3, #16
 800b91c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a0e      	ldr	r2, [pc, #56]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b928:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b92a:	f7f9 fa11 	bl	8004d50 <HAL_GetTick>
 800b92e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b930:	e008      	b.n	800b944 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b932:	f7f9 fa0d 	bl	8004d50 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d901      	bls.n	800b944 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e006      	b.n	800b952 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b944:	4b05      	ldr	r3, [pc, #20]	; (800b95c <RCCEx_PLL3_Config+0x128>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0f0      	beq.n	800b932 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	46020c00 	.word	0x46020c00
 800b960:	80800000 	.word	0x80800000

0800b964 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e0fb      	b.n	800bb6e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a7f      	ldr	r2, [pc, #508]	; (800bb78 <HAL_SPI_Init+0x214>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d004      	beq.n	800b98a <HAL_SPI_Init+0x26>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a7d      	ldr	r2, [pc, #500]	; (800bb7c <HAL_SPI_Init+0x218>)
 800b986:	4293      	cmp	r3, r2
 800b988:	e000      	b.n	800b98c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b98a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a78      	ldr	r2, [pc, #480]	; (800bb78 <HAL_SPI_Init+0x214>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d004      	beq.n	800b9a6 <HAL_SPI_Init+0x42>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a76      	ldr	r2, [pc, #472]	; (800bb7c <HAL_SPI_Init+0x218>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d105      	bne.n	800b9b2 <HAL_SPI_Init+0x4e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	2b0f      	cmp	r3, #15
 800b9ac:	d901      	bls.n	800b9b2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e0dd      	b.n	800bb6e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fe16 	bl	800c5e4 <SPI_GetPacketSize>
 800b9b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a6e      	ldr	r2, [pc, #440]	; (800bb78 <HAL_SPI_Init+0x214>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d004      	beq.n	800b9ce <HAL_SPI_Init+0x6a>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a6c      	ldr	r2, [pc, #432]	; (800bb7c <HAL_SPI_Init+0x218>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d102      	bne.n	800b9d4 <HAL_SPI_Init+0x70>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d816      	bhi.n	800ba02 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9d8:	4a69      	ldr	r2, [pc, #420]	; (800bb80 <HAL_SPI_Init+0x21c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00e      	beq.n	800b9fc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a68      	ldr	r2, [pc, #416]	; (800bb84 <HAL_SPI_Init+0x220>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d009      	beq.n	800b9fc <HAL_SPI_Init+0x98>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a66      	ldr	r2, [pc, #408]	; (800bb88 <HAL_SPI_Init+0x224>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d004      	beq.n	800b9fc <HAL_SPI_Init+0x98>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a65      	ldr	r2, [pc, #404]	; (800bb8c <HAL_SPI_Init+0x228>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d104      	bne.n	800ba06 <HAL_SPI_Init+0xa2>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b10      	cmp	r3, #16
 800ba00:	d901      	bls.n	800ba06 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e0b3      	b.n	800bb6e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7f8 f9de 	bl	8003ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2202      	movs	r2, #2
 800ba24:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f022 0201 	bic.w	r2, r2, #1
 800ba36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ba42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba4c:	d119      	bne.n	800ba82 <HAL_SPI_Init+0x11e>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba56:	d103      	bne.n	800ba60 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d008      	beq.n	800ba72 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10c      	bne.n	800ba82 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba70:	d107      	bne.n	800ba82 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00f      	beq.n	800baae <HAL_SPI_Init+0x14a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	2b06      	cmp	r3, #6
 800ba94:	d90b      	bls.n	800baae <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	e007      	b.n	800babe <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800babc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	69da      	ldr	r2, [r3, #28]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac6:	431a      	orrs	r2, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	431a      	orrs	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad0:	ea42 0103 	orr.w	r1, r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68da      	ldr	r2, [r3, #12]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	431a      	orrs	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baee:	431a      	orrs	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	431a      	orrs	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	431a      	orrs	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	431a      	orrs	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb2a:	ea42 0103 	orr.w	r1, r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	46002000 	.word	0x46002000
 800bb7c:	56002000 	.word	0x56002000
 800bb80:	40013000 	.word	0x40013000
 800bb84:	50013000 	.word	0x50013000
 800bb88:	40003800 	.word	0x40003800
 800bb8c:	50003800 	.word	0x50003800

0800bb90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3320      	adds	r3, #32
 800bba6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d101      	bne.n	800bbba <HAL_SPI_Transmit+0x2a>
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	e203      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbc2:	f7f9 f8c5 	bl	8004d50 <HAL_GetTick>
 800bbc6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d007      	beq.n	800bbe4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800bbe0:	7efb      	ldrb	r3, [r7, #27]
 800bbe2:	e1ee      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <HAL_SPI_Transmit+0x60>
 800bbea:	88fb      	ldrh	r3, [r7, #6]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d107      	bne.n	800bc00 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800bbfc:	7efb      	ldrb	r3, [r7, #27]
 800bbfe:	e1e0      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2203      	movs	r2, #3
 800bc04:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	88fa      	ldrh	r2, [r7, #6]
 800bc1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	88fa      	ldrh	r2, [r7, #6]
 800bc22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bc50:	d108      	bne.n	800bc64 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e009      	b.n	800bc78 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bc76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	0c1b      	lsrs	r3, r3, #16
 800bc80:	041b      	lsls	r3, r3, #16
 800bc82:	88f9      	ldrh	r1, [r7, #6]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	6812      	ldr	r2, [r2, #0]
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f042 0201 	orr.w	r2, r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	69db      	ldr	r3, [r3, #28]
 800bca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10c      	bne.n	800bcc4 <HAL_SPI_Transmit+0x134>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcb2:	d107      	bne.n	800bcc4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	2b0f      	cmp	r3, #15
 800bcca:	d95b      	bls.n	800bd84 <HAL_SPI_Transmit+0x1f4>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a8f      	ldr	r2, [pc, #572]	; (800bf10 <HAL_SPI_Transmit+0x380>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d04f      	beq.n	800bd76 <HAL_SPI_Transmit+0x1e6>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a8e      	ldr	r2, [pc, #568]	; (800bf14 <HAL_SPI_Transmit+0x384>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d04a      	beq.n	800bd76 <HAL_SPI_Transmit+0x1e6>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a8c      	ldr	r2, [pc, #560]	; (800bf18 <HAL_SPI_Transmit+0x388>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d045      	beq.n	800bd76 <HAL_SPI_Transmit+0x1e6>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a8b      	ldr	r2, [pc, #556]	; (800bf1c <HAL_SPI_Transmit+0x38c>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d147      	bne.n	800bd84 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bcf4:	e03f      	b.n	800bd76 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	f003 0302 	and.w	r3, r3, #2
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d114      	bne.n	800bd2e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	3b01      	subs	r3, #1
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd2c:	e023      	b.n	800bd76 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd2e:	f7f9 f80f 	bl	8004d50 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d803      	bhi.n	800bd46 <HAL_SPI_Transmit+0x1b6>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd44:	d102      	bne.n	800bd4c <HAL_SPI_Transmit+0x1bc>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d114      	bne.n	800bd76 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 fb7b 	bl	800c448 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e125      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1b9      	bne.n	800bcf6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bd82:	e0f8      	b.n	800bf76 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	2b07      	cmp	r3, #7
 800bd8a:	f240 80ed 	bls.w	800bf68 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bd8e:	e05d      	b.n	800be4c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d132      	bne.n	800be04 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d918      	bls.n	800bddc <HAL_SPI_Transmit+0x24c>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d014      	beq.n	800bddc <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6812      	ldr	r2, [r2, #0]
 800bdbc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdc2:	1d1a      	adds	r2, r3, #4
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	3b02      	subs	r3, #2
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdda:	e037      	b.n	800be4c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bde0:	881a      	ldrh	r2, [r3, #0]
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdea:	1c9a      	adds	r2, r3, #2
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be02:	e023      	b.n	800be4c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be04:	f7f8 ffa4 	bl	8004d50 <HAL_GetTick>
 800be08:	4602      	mov	r2, r0
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d803      	bhi.n	800be1c <HAL_SPI_Transmit+0x28c>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be1a:	d102      	bne.n	800be22 <HAL_SPI_Transmit+0x292>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d114      	bne.n	800be4c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f000 fb10 	bl	800c448 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e0ba      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be52:	b29b      	uxth	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	d19b      	bne.n	800bd90 <HAL_SPI_Transmit+0x200>
 800be58:	e08d      	b.n	800bf76 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b02      	cmp	r3, #2
 800be66:	d15b      	bne.n	800bf20 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be6e:	b29b      	uxth	r3, r3
 800be70:	2b03      	cmp	r3, #3
 800be72:	d918      	bls.n	800bea6 <HAL_SPI_Transmit+0x316>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be78:	2b40      	cmp	r3, #64	; 0x40
 800be7a:	d914      	bls.n	800bea6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b04      	subs	r3, #4
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bea4:	e060      	b.n	800bf68 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beac:	b29b      	uxth	r3, r3
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d917      	bls.n	800bee2 <HAL_SPI_Transmit+0x352>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d013      	beq.n	800bee2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bebe:	881a      	ldrh	r2, [r3, #0]
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec8:	1c9a      	adds	r2, r3, #2
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	3b02      	subs	r3, #2
 800bed8:	b29a      	uxth	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bee0:	e042      	b.n	800bf68 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3320      	adds	r3, #32
 800beec:	7812      	ldrb	r2, [r2, #0]
 800beee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bf0c:	e02c      	b.n	800bf68 <HAL_SPI_Transmit+0x3d8>
 800bf0e:	bf00      	nop
 800bf10:	40013000 	.word	0x40013000
 800bf14:	50013000 	.word	0x50013000
 800bf18:	40003800 	.word	0x40003800
 800bf1c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf20:	f7f8 ff16 	bl	8004d50 <HAL_GetTick>
 800bf24:	4602      	mov	r2, r0
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d803      	bhi.n	800bf38 <HAL_SPI_Transmit+0x3a8>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf36:	d102      	bne.n	800bf3e <HAL_SPI_Transmit+0x3ae>
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d114      	bne.n	800bf68 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 fa82 	bl	800c448 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e02c      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f47f af72 	bne.w	800be5a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2108      	movs	r1, #8
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 fb01 	bl	800c588 <SPI_WaitOnFlagUntilTimeout>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf92:	f043 0220 	orr.w	r2, r3, #32
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 fa53 	bl	800c448 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e000      	b.n	800bfc2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800bfc0:	7efb      	ldrb	r3, [r7, #27]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop

0800bfcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08c      	sub	sp, #48	; 0x30
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3320      	adds	r3, #32
 800bfe6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3330      	adds	r3, #48	; 0x30
 800bfee:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d101      	bne.n	800bffe <HAL_SPI_TransmitReceive+0x32>
 800bffa:	2302      	movs	r3, #2
 800bffc:	e21f      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c006:	f7f8 fea3 	bl	8004d50 <HAL_GetTick>
 800c00a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800c00c:	887b      	ldrh	r3, [r7, #2]
 800c00e:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800c010:	887b      	ldrh	r3, [r7, #2]
 800c012:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d009      	beq.n	800c034 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800c020:	2302      	movs	r3, #2
 800c022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c02e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c032:	e204      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d005      	beq.n	800c046 <HAL_SPI_TransmitReceive+0x7a>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <HAL_SPI_TransmitReceive+0x7a>
 800c040:	887b      	ldrh	r3, [r7, #2]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c058:	e1f1      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2205      	movs	r2, #5
 800c05e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	887a      	ldrh	r2, [r7, #2]
 800c074:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	887a      	ldrh	r2, [r7, #2]
 800c07c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	887a      	ldrh	r2, [r7, #2]
 800c08a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	887a      	ldrh	r2, [r7, #2]
 800c092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800c0b0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	0c1b      	lsrs	r3, r3, #16
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	8879      	ldrh	r1, [r7, #2]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	6812      	ldr	r2, [r2, #0]
 800c0c2:	430b      	orrs	r3, r1
 800c0c4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f042 0201 	orr.w	r2, r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	69db      	ldr	r3, [r3, #28]
 800c0dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10c      	bne.n	800c0fe <HAL_SPI_TransmitReceive+0x132>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0ec:	d107      	bne.n	800c0fe <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	2b0f      	cmp	r3, #15
 800c104:	f240 8085 	bls.w	800c212 <HAL_SPI_TransmitReceive+0x246>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a7b      	ldr	r2, [pc, #492]	; (800c2fc <HAL_SPI_TransmitReceive+0x330>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d078      	beq.n	800c204 <HAL_SPI_TransmitReceive+0x238>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a7a      	ldr	r2, [pc, #488]	; (800c300 <HAL_SPI_TransmitReceive+0x334>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d073      	beq.n	800c204 <HAL_SPI_TransmitReceive+0x238>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a78      	ldr	r2, [pc, #480]	; (800c304 <HAL_SPI_TransmitReceive+0x338>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d06e      	beq.n	800c204 <HAL_SPI_TransmitReceive+0x238>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a77      	ldr	r2, [pc, #476]	; (800c308 <HAL_SPI_TransmitReceive+0x33c>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d170      	bne.n	800c212 <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c130:	e068      	b.n	800c204 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d11a      	bne.n	800c176 <HAL_SPI_TransmitReceive+0x1aa>
 800c140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c142:	2b00      	cmp	r3, #0
 800c144:	d017      	beq.n	800c176 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6812      	ldr	r2, [r2, #0]
 800c150:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b01      	subs	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c174:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695a      	ldr	r2, [r3, #20]
 800c17c:	f248 0308 	movw	r3, #32776	; 0x8008
 800c180:	4013      	ands	r3, r2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d01a      	beq.n	800c1bc <HAL_SPI_TransmitReceive+0x1f0>
 800c186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d017      	beq.n	800c1bc <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c194:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c196:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19c:	1d1a      	adds	r2, r3, #4
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c1ba:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1bc:	f7f8 fdc8 	bl	8004d50 <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d803      	bhi.n	800c1d4 <HAL_SPI_TransmitReceive+0x208>
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1d2:	d102      	bne.n	800c1da <HAL_SPI_TransmitReceive+0x20e>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d114      	bne.n	800c204 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 f934 	bl	800c448 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c200:	2303      	movs	r3, #3
 800c202:	e11c      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c206:	2b00      	cmp	r3, #0
 800c208:	d193      	bne.n	800c132 <HAL_SPI_TransmitReceive+0x166>
 800c20a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d190      	bne.n	800c132 <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c210:	e0ee      	b.n	800c3f0 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	2b07      	cmp	r3, #7
 800c218:	f240 80e4 	bls.w	800c3e4 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c21c:	e066      	b.n	800c2ec <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	695b      	ldr	r3, [r3, #20]
 800c224:	f003 0302 	and.w	r3, r3, #2
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d119      	bne.n	800c260 <HAL_SPI_TransmitReceive+0x294>
 800c22c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d016      	beq.n	800c260 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c236:	881a      	ldrh	r2, [r3, #0]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c240:	1c9a      	adds	r2, r3, #2
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	3b01      	subs	r3, #1
 800c250:	b29a      	uxth	r2, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c25e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d11a      	bne.n	800c2a4 <HAL_SPI_TransmitReceive+0x2d8>
 800c26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c270:	2b00      	cmp	r3, #0
 800c272:	d017      	beq.n	800c2a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	8812      	ldrh	r2, [r2, #0]
 800c27c:	b292      	uxth	r2, r2
 800c27e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c284:	1c9a      	adds	r2, r3, #2
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c290:	b29b      	uxth	r3, r3
 800c292:	3b01      	subs	r3, #1
 800c294:	b29a      	uxth	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c2a2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2a4:	f7f8 fd54 	bl	8004d50 <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d803      	bhi.n	800c2bc <HAL_SPI_TransmitReceive+0x2f0>
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ba:	d102      	bne.n	800c2c2 <HAL_SPI_TransmitReceive+0x2f6>
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d114      	bne.n	800c2ec <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f000 f8c0 	bl	800c448 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e0a8      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d195      	bne.n	800c21e <HAL_SPI_TransmitReceive+0x252>
 800c2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d192      	bne.n	800c21e <HAL_SPI_TransmitReceive+0x252>
 800c2f8:	e07a      	b.n	800c3f0 <HAL_SPI_TransmitReceive+0x424>
 800c2fa:	bf00      	nop
 800c2fc:	40013000 	.word	0x40013000
 800c300:	50013000 	.word	0x50013000
 800c304:	40003800 	.word	0x40003800
 800c308:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	f003 0302 	and.w	r3, r3, #2
 800c316:	2b02      	cmp	r3, #2
 800c318:	d11b      	bne.n	800c352 <HAL_SPI_TransmitReceive+0x386>
 800c31a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d018      	beq.n	800c352 <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	3320      	adds	r3, #32
 800c32a:	7812      	ldrb	r2, [r2, #0]
 800c32c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c33e:	b29b      	uxth	r3, r3
 800c340:	3b01      	subs	r3, #1
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c350:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d11d      	bne.n	800c39c <HAL_SPI_TransmitReceive+0x3d0>
 800c360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c362:	2b00      	cmp	r3, #0
 800c364:	d01a      	beq.n	800c39c <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c372:	7812      	ldrb	r2, [r2, #0]
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c388:	b29b      	uxth	r3, r3
 800c38a:	3b01      	subs	r3, #1
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c39a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c39c:	f7f8 fcd8 	bl	8004d50 <HAL_GetTick>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d803      	bhi.n	800c3b4 <HAL_SPI_TransmitReceive+0x3e8>
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3b2:	d102      	bne.n	800c3ba <HAL_SPI_TransmitReceive+0x3ee>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d114      	bne.n	800c3e4 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 f844 	bl	800c448 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e02c      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c3e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d190      	bne.n	800c30c <HAL_SPI_TransmitReceive+0x340>
 800c3ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d18d      	bne.n	800c30c <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2108      	movs	r1, #8
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 f8c4 	bl	800c588 <SPI_WaitOnFlagUntilTimeout>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c40c:	f043 0220 	orr.w	r2, r3, #32
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f816 	bl	800c448 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e001      	b.n	800c43e <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 800c43a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3728      	adds	r7, #40	; 0x28
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop

0800c448 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0208 	orr.w	r2, r2, #8
 800c466:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	699a      	ldr	r2, [r3, #24]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f042 0210 	orr.w	r2, r2, #16
 800c476:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f022 0201 	bic.w	r2, r2, #1
 800c486:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	6812      	ldr	r2, [r2, #0]
 800c492:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800c496:	f023 0303 	bic.w	r3, r3, #3
 800c49a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c4aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d014      	beq.n	800c4e2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f003 0320 	and.w	r3, r3, #32
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00f      	beq.n	800c4e2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	699a      	ldr	r2, [r3, #24]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f042 0220 	orr.w	r2, r2, #32
 800c4e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d014      	beq.n	800c518 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00f      	beq.n	800c518 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4fe:	f043 0204 	orr.w	r2, r3, #4
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	699a      	ldr	r2, [r3, #24]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c516:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00f      	beq.n	800c542 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c528:	f043 0201 	orr.w	r2, r3, #1
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	699a      	ldr	r2, [r3, #24]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c540:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00f      	beq.n	800c56c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c552:	f043 0208 	orr.w	r2, r3, #8
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699a      	ldr	r2, [r3, #24]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c56a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800c57c:	bf00      	nop
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	4613      	mov	r3, r2
 800c596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c598:	e010      	b.n	800c5bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c59a:	f7f8 fbd9 	bl	8004d50 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d803      	bhi.n	800c5b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5b0:	d102      	bne.n	800c5b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e00f      	b.n	800c5dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	695a      	ldr	r2, [r3, #20]
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2301      	moveq	r3, #1
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d0df      	beq.n	800c59a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f0:	095b      	lsrs	r3, r3, #5
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3307      	adds	r3, #7
 800c602:	08db      	lsrs	r3, r3, #3
 800c604:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d12e      	bne.n	800c68e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c636:	2b01      	cmp	r3, #1
 800c638:	d101      	bne.n	800c63e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c63a:	2302      	movs	r3, #2
 800c63c:	e028      	b.n	800c690 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f022 0201 	bic.w	r2, r2, #1
 800c65c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c66a:	ea42 0103 	orr.w	r1, r2, r3
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	689a      	ldr	r2, [r3, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	430a      	orrs	r2, r1
 800c678:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
  }
}
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e042      	b.n	800c734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7f7 fbf5 	bl	8003eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2224      	movs	r2, #36	; 0x24
 800c6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0201 	bic.w	r2, r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d002      	beq.n	800c6ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fa64 	bl	800cbb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f8b3 	bl	800c858 <UART_SetConfig>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e01b      	b.n	800c734 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c70a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689a      	ldr	r2, [r3, #8]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c71a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f042 0201 	orr.w	r2, r2, #1
 800c72a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fae3 	bl	800ccf8 <UART_CheckIdleState>
 800c732:	4603      	mov	r3, r0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	; 0x28
 800c740:	af02      	add	r7, sp, #8
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c752:	2b20      	cmp	r3, #32
 800c754:	d17b      	bne.n	800c84e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <HAL_UART_Transmit+0x26>
 800c75c:	88fb      	ldrh	r3, [r7, #6]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e074      	b.n	800c850 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2221      	movs	r2, #33	; 0x21
 800c772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c776:	f7f8 faeb 	bl	8004d50 <HAL_GetTick>
 800c77a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	88fa      	ldrh	r2, [r7, #6]
 800c780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	88fa      	ldrh	r2, [r7, #6]
 800c788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c794:	d108      	bne.n	800c7a8 <HAL_UART_Transmit+0x6c>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d104      	bne.n	800c7a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	e003      	b.n	800c7b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c7b0:	e030      	b.n	800c814 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2180      	movs	r1, #128	; 0x80
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fb45 	bl	800ce4c <UART_WaitOnFlagUntilTimeout>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d005      	beq.n	800c7d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e03d      	b.n	800c850 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10b      	bne.n	800c7f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	3302      	adds	r3, #2
 800c7ee:	61bb      	str	r3, [r7, #24]
 800c7f0:	e007      	b.n	800c802 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	3301      	adds	r3, #1
 800c800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c808:	b29b      	uxth	r3, r3
 800c80a:	3b01      	subs	r3, #1
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1c8      	bne.n	800c7b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2200      	movs	r2, #0
 800c828:	2140      	movs	r1, #64	; 0x40
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 fb0e 	bl	800ce4c <UART_WaitOnFlagUntilTimeout>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e006      	b.n	800c850 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2220      	movs	r2, #32
 800c846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	e000      	b.n	800c850 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c84e:	2302      	movs	r3, #2
  }
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c85c:	b094      	sub	sp, #80	; 0x50
 800c85e:	af00      	add	r7, sp, #0
 800c860:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	4b83      	ldr	r3, [pc, #524]	; (800ca7c <UART_SetConfig+0x224>)
 800c86e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	689a      	ldr	r2, [r3, #8]
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	431a      	orrs	r2, r3
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	431a      	orrs	r2, r3
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	4313      	orrs	r3, r2
 800c886:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	497c      	ldr	r1, [pc, #496]	; (800ca80 <UART_SetConfig+0x228>)
 800c890:	4019      	ands	r1, r3
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c898:	430b      	orrs	r3, r1
 800c89a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	68d9      	ldr	r1, [r3, #12]
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	ea40 0301 	orr.w	r3, r0, r1
 800c8b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	4b6f      	ldr	r3, [pc, #444]	; (800ca7c <UART_SetConfig+0x224>)
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d009      	beq.n	800c8d8 <UART_SetConfig+0x80>
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	4b6e      	ldr	r3, [pc, #440]	; (800ca84 <UART_SetConfig+0x22c>)
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d004      	beq.n	800c8d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	6a1a      	ldr	r2, [r3, #32]
 800c8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800c8e2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ec:	430b      	orrs	r3, r1
 800c8ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	f023 000f 	bic.w	r0, r3, #15
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	ea40 0301 	orr.w	r3, r0, r1
 800c906:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	4b5e      	ldr	r3, [pc, #376]	; (800ca88 <UART_SetConfig+0x230>)
 800c90e:	429a      	cmp	r2, r3
 800c910:	d102      	bne.n	800c918 <UART_SetConfig+0xc0>
 800c912:	2301      	movs	r3, #1
 800c914:	64bb      	str	r3, [r7, #72]	; 0x48
 800c916:	e032      	b.n	800c97e <UART_SetConfig+0x126>
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	4b5b      	ldr	r3, [pc, #364]	; (800ca8c <UART_SetConfig+0x234>)
 800c91e:	429a      	cmp	r2, r3
 800c920:	d102      	bne.n	800c928 <UART_SetConfig+0xd0>
 800c922:	2302      	movs	r3, #2
 800c924:	64bb      	str	r3, [r7, #72]	; 0x48
 800c926:	e02a      	b.n	800c97e <UART_SetConfig+0x126>
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	4b58      	ldr	r3, [pc, #352]	; (800ca90 <UART_SetConfig+0x238>)
 800c92e:	429a      	cmp	r2, r3
 800c930:	d102      	bne.n	800c938 <UART_SetConfig+0xe0>
 800c932:	2304      	movs	r3, #4
 800c934:	64bb      	str	r3, [r7, #72]	; 0x48
 800c936:	e022      	b.n	800c97e <UART_SetConfig+0x126>
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	4b55      	ldr	r3, [pc, #340]	; (800ca94 <UART_SetConfig+0x23c>)
 800c93e:	429a      	cmp	r2, r3
 800c940:	d102      	bne.n	800c948 <UART_SetConfig+0xf0>
 800c942:	2308      	movs	r3, #8
 800c944:	64bb      	str	r3, [r7, #72]	; 0x48
 800c946:	e01a      	b.n	800c97e <UART_SetConfig+0x126>
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	4b52      	ldr	r3, [pc, #328]	; (800ca98 <UART_SetConfig+0x240>)
 800c94e:	429a      	cmp	r2, r3
 800c950:	d102      	bne.n	800c958 <UART_SetConfig+0x100>
 800c952:	2310      	movs	r3, #16
 800c954:	64bb      	str	r3, [r7, #72]	; 0x48
 800c956:	e012      	b.n	800c97e <UART_SetConfig+0x126>
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	4b4f      	ldr	r3, [pc, #316]	; (800ca9c <UART_SetConfig+0x244>)
 800c95e:	429a      	cmp	r2, r3
 800c960:	d103      	bne.n	800c96a <UART_SetConfig+0x112>
 800c962:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c966:	64bb      	str	r3, [r7, #72]	; 0x48
 800c968:	e009      	b.n	800c97e <UART_SetConfig+0x126>
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b43      	ldr	r3, [pc, #268]	; (800ca7c <UART_SetConfig+0x224>)
 800c970:	429a      	cmp	r2, r3
 800c972:	d102      	bne.n	800c97a <UART_SetConfig+0x122>
 800c974:	2320      	movs	r3, #32
 800c976:	64bb      	str	r3, [r7, #72]	; 0x48
 800c978:	e001      	b.n	800c97e <UART_SetConfig+0x126>
 800c97a:	2300      	movs	r3, #0
 800c97c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b3e      	ldr	r3, [pc, #248]	; (800ca7c <UART_SetConfig+0x224>)
 800c984:	429a      	cmp	r2, r3
 800c986:	d005      	beq.n	800c994 <UART_SetConfig+0x13c>
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	4b3d      	ldr	r3, [pc, #244]	; (800ca84 <UART_SetConfig+0x22c>)
 800c98e:	429a      	cmp	r2, r3
 800c990:	f040 8088 	bne.w	800caa4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c996:	2200      	movs	r2, #0
 800c998:	623b      	str	r3, [r7, #32]
 800c99a:	627a      	str	r2, [r7, #36]	; 0x24
 800c99c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c9a0:	f7fd fb52 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800c9a4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 80eb 	beq.w	800cb84 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b2:	4a3b      	ldr	r2, [pc, #236]	; (800caa0 <UART_SetConfig+0x248>)
 800c9b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9c0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	4413      	add	r3, r2
 800c9cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d305      	bcc.n	800c9de <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d903      	bls.n	800c9e6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c9e4:	e048      	b.n	800ca78 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	61bb      	str	r3, [r7, #24]
 800c9ec:	61fa      	str	r2, [r7, #28]
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	4a2b      	ldr	r2, [pc, #172]	; (800caa0 <UART_SetConfig+0x248>)
 800c9f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	613b      	str	r3, [r7, #16]
 800c9fe:	617a      	str	r2, [r7, #20]
 800ca00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca08:	f7f3 fc4a 	bl	80002a0 <__aeabi_uldivmod>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4610      	mov	r0, r2
 800ca12:	4619      	mov	r1, r3
 800ca14:	f04f 0200 	mov.w	r2, #0
 800ca18:	f04f 0300 	mov.w	r3, #0
 800ca1c:	020b      	lsls	r3, r1, #8
 800ca1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca22:	0202      	lsls	r2, r0, #8
 800ca24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca26:	6849      	ldr	r1, [r1, #4]
 800ca28:	0849      	lsrs	r1, r1, #1
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	4605      	mov	r5, r0
 800ca30:	eb12 0804 	adds.w	r8, r2, r4
 800ca34:	eb43 0905 	adc.w	r9, r3, r5
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	60bb      	str	r3, [r7, #8]
 800ca40:	60fa      	str	r2, [r7, #12]
 800ca42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca46:	4640      	mov	r0, r8
 800ca48:	4649      	mov	r1, r9
 800ca4a:	f7f3 fc29 	bl	80002a0 <__aeabi_uldivmod>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4613      	mov	r3, r2
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca5c:	d308      	bcc.n	800ca70 <UART_SetConfig+0x218>
 800ca5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca64:	d204      	bcs.n	800ca70 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca6c:	60da      	str	r2, [r3, #12]
 800ca6e:	e003      	b.n	800ca78 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800ca76:	e085      	b.n	800cb84 <UART_SetConfig+0x32c>
 800ca78:	e084      	b.n	800cb84 <UART_SetConfig+0x32c>
 800ca7a:	bf00      	nop
 800ca7c:	46002400 	.word	0x46002400
 800ca80:	cfff69f3 	.word	0xcfff69f3
 800ca84:	56002400 	.word	0x56002400
 800ca88:	40013800 	.word	0x40013800
 800ca8c:	40004400 	.word	0x40004400
 800ca90:	40004800 	.word	0x40004800
 800ca94:	40004c00 	.word	0x40004c00
 800ca98:	40005000 	.word	0x40005000
 800ca9c:	40006400 	.word	0x40006400
 800caa0:	0800e6e4 	.word	0x0800e6e4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caac:	d13c      	bne.n	800cb28 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800caae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cab0:	2200      	movs	r2, #0
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caba:	f7fd fac5 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800cabe:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d05e      	beq.n	800cb84 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caca:	4a39      	ldr	r2, [pc, #228]	; (800cbb0 <UART_SetConfig+0x358>)
 800cacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cad0:	461a      	mov	r2, r3
 800cad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad8:	005a      	lsls	r2, r3, #1
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	085b      	lsrs	r3, r3, #1
 800cae0:	441a      	add	r2, r3
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	2b0f      	cmp	r3, #15
 800caf0:	d916      	bls.n	800cb20 <UART_SetConfig+0x2c8>
 800caf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caf8:	d212      	bcs.n	800cb20 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f023 030f 	bic.w	r3, r3, #15
 800cb02:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb12:	4313      	orrs	r3, r2
 800cb14:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cb1c:	60da      	str	r2, [r3, #12]
 800cb1e:	e031      	b.n	800cb84 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cb26:	e02d      	b.n	800cb84 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cb28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	469a      	mov	sl, r3
 800cb2e:	4693      	mov	fp, r2
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	f7fd fa88 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb38:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d021      	beq.n	800cb84 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	4a1a      	ldr	r2, [pc, #104]	; (800cbb0 <UART_SetConfig+0x358>)
 800cb46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	085b      	lsrs	r3, r3, #1
 800cb58:	441a      	add	r2, r3
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	d909      	bls.n	800cb7e <UART_SetConfig+0x326>
 800cb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb70:	d205      	bcs.n	800cb7e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	60da      	str	r2, [r3, #12]
 800cb7c:	e002      	b.n	800cb84 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	2201      	movs	r2, #1
 800cb88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	2200      	movs	r2, #0
 800cb98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cba0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3750      	adds	r7, #80	; 0x50
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbae:	bf00      	nop
 800cbb0:	0800e6e4 	.word	0x0800e6e4

0800cbb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc0:	f003 0308 	and.w	r3, r3, #8
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00a      	beq.n	800cbde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00a      	beq.n	800cc22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	430a      	orrs	r2, r1
 800cc20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	430a      	orrs	r2, r1
 800cc42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00a      	beq.n	800cc66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6a:	f003 0320 	and.w	r3, r3, #32
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	430a      	orrs	r2, r1
 800cc86:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01a      	beq.n	800ccca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	430a      	orrs	r2, r1
 800cca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb2:	d10a      	bne.n	800ccca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00a      	beq.n	800ccec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	430a      	orrs	r2, r1
 800ccea:	605a      	str	r2, [r3, #4]
  }
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b098      	sub	sp, #96	; 0x60
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd08:	f7f8 f822 	bl	8004d50 <HAL_GetTick>
 800cd0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 0308 	and.w	r3, r3, #8
 800cd18:	2b08      	cmp	r3, #8
 800cd1a:	d12f      	bne.n	800cd7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd24:	2200      	movs	r2, #0
 800cd26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f88e 	bl	800ce4c <UART_WaitOnFlagUntilTimeout>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d022      	beq.n	800cd7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	e853 3f00 	ldrex	r3, [r3]
 800cd42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd4a:	653b      	str	r3, [r7, #80]	; 0x50
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	461a      	mov	r2, r3
 800cd52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd54:	647b      	str	r3, [r7, #68]	; 0x44
 800cd56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd5c:	e841 2300 	strex	r3, r2, [r1]
 800cd60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1e6      	bne.n	800cd36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e063      	b.n	800ce44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0304 	and.w	r3, r3, #4
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d149      	bne.n	800ce1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd92:	2200      	movs	r2, #0
 800cd94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f857 	bl	800ce4c <UART_WaitOnFlagUntilTimeout>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d03c      	beq.n	800ce1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	623b      	str	r3, [r7, #32]
   return(result);
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc2:	633b      	str	r3, [r7, #48]	; 0x30
 800cdc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdca:	e841 2300 	strex	r3, r2, [r1]
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1e6      	bne.n	800cda4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3308      	adds	r3, #8
 800cddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	e853 3f00 	ldrex	r3, [r3]
 800cde4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f023 0301 	bic.w	r3, r3, #1
 800cdec:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3308      	adds	r3, #8
 800cdf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdf6:	61fa      	str	r2, [r7, #28]
 800cdf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfa:	69b9      	ldr	r1, [r7, #24]
 800cdfc:	69fa      	ldr	r2, [r7, #28]
 800cdfe:	e841 2300 	strex	r3, r2, [r1]
 800ce02:	617b      	str	r3, [r7, #20]
   return(result);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1e5      	bne.n	800cdd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e012      	b.n	800ce44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2220      	movs	r2, #32
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2220      	movs	r2, #32
 800ce2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3758      	adds	r7, #88	; 0x58
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce5c:	e049      	b.n	800cef2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce64:	d045      	beq.n	800cef2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce66:	f7f7 ff73 	bl	8004d50 <HAL_GetTick>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	69ba      	ldr	r2, [r7, #24]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d302      	bcc.n	800ce7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e048      	b.n	800cf12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0304 	and.w	r3, r3, #4
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d031      	beq.n	800cef2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	f003 0308 	and.w	r3, r3, #8
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d110      	bne.n	800cebe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2208      	movs	r2, #8
 800cea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 f838 	bl	800cf1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2208      	movs	r2, #8
 800ceae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e029      	b.n	800cf12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	69db      	ldr	r3, [r3, #28]
 800cec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cecc:	d111      	bne.n	800cef2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f81e 	bl	800cf1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e00f      	b.n	800cf12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	69da      	ldr	r2, [r3, #28]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	4013      	ands	r3, r2
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	bf0c      	ite	eq
 800cf02:	2301      	moveq	r3, #1
 800cf04:	2300      	movne	r3, #0
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	461a      	mov	r2, r3
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d0a6      	beq.n	800ce5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b095      	sub	sp, #84	; 0x54
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2a:	e853 3f00 	ldrex	r3, [r3]
 800cf2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf40:	643b      	str	r3, [r7, #64]	; 0x40
 800cf42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf48:	e841 2300 	strex	r3, r2, [r1]
 800cf4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1e6      	bne.n	800cf22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3308      	adds	r3, #8
 800cf5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	e853 3f00 	ldrex	r3, [r3]
 800cf62:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf6a:	f023 0301 	bic.w	r3, r3, #1
 800cf6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3308      	adds	r3, #8
 800cf76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf80:	e841 2300 	strex	r3, r2, [r1]
 800cf84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e3      	bne.n	800cf54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d118      	bne.n	800cfc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	f023 0310 	bic.w	r3, r3, #16
 800cfa8:	647b      	str	r3, [r7, #68]	; 0x44
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb2:	61bb      	str	r3, [r7, #24]
 800cfb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6979      	ldr	r1, [r7, #20]
 800cfb8:	69ba      	ldr	r2, [r7, #24]
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	613b      	str	r3, [r7, #16]
   return(result);
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e6      	bne.n	800cf94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2220      	movs	r2, #32
 800cfca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cfda:	bf00      	nop
 800cfdc:	3754      	adds	r7, #84	; 0x54
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d101      	bne.n	800cffc <HAL_UARTEx_DisableFifoMode+0x16>
 800cff8:	2302      	movs	r3, #2
 800cffa:	e027      	b.n	800d04c <HAL_UARTEx_DisableFifoMode+0x66>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2224      	movs	r2, #36	; 0x24
 800d008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 0201 	bic.w	r2, r2, #1
 800d022:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d02a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d101      	bne.n	800d070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d06c:	2302      	movs	r3, #2
 800d06e:	e02d      	b.n	800d0cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2224      	movs	r2, #36	; 0x24
 800d07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	430a      	orrs	r2, r1
 800d0aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f84f 	bl	800d150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	e02d      	b.n	800d148 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2224      	movs	r2, #36	; 0x24
 800d0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f811 	bl	800d150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d108      	bne.n	800d172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d170:	e031      	b.n	800d1d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d172:	2308      	movs	r3, #8
 800d174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d176:	2308      	movs	r3, #8
 800d178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	0e5b      	lsrs	r3, r3, #25
 800d182:	b2db      	uxtb	r3, r3
 800d184:	f003 0307 	and.w	r3, r3, #7
 800d188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	0f5b      	lsrs	r3, r3, #29
 800d192:	b2db      	uxtb	r3, r3
 800d194:	f003 0307 	and.w	r3, r3, #7
 800d198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
 800d19c:	7b3a      	ldrb	r2, [r7, #12]
 800d19e:	4911      	ldr	r1, [pc, #68]	; (800d1e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d1a0:	5c8a      	ldrb	r2, [r1, r2]
 800d1a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1a6:	7b3a      	ldrb	r2, [r7, #12]
 800d1a8:	490f      	ldr	r1, [pc, #60]	; (800d1e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d1aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	7b7a      	ldrb	r2, [r7, #13]
 800d1bc:	4909      	ldr	r1, [pc, #36]	; (800d1e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d1be:	5c8a      	ldrb	r2, [r1, r2]
 800d1c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1c4:	7b7a      	ldrb	r2, [r7, #13]
 800d1c6:	4908      	ldr	r1, [pc, #32]	; (800d1e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d1c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1d6:	bf00      	nop
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	0800e6fc 	.word	0x0800e6fc
 800d1e8:	0800e704 	.word	0x0800e704

0800d1ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b08b      	sub	sp, #44	; 0x2c
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	fa93 f3a3 	rbit	r3, r3
 800d206:	613b      	str	r3, [r7, #16]
  return result;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800d212:	2320      	movs	r3, #32
 800d214:	e003      	b.n	800d21e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	fab3 f383 	clz	r3, r3
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	2103      	movs	r1, #3
 800d222:	fa01 f303 	lsl.w	r3, r1, r3
 800d226:	43db      	mvns	r3, r3
 800d228:	401a      	ands	r2, r3
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	fa93 f3a3 	rbit	r3, r3
 800d234:	61fb      	str	r3, [r7, #28]
  return result;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800d240:	2320      	movs	r3, #32
 800d242:	e003      	b.n	800d24c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	fab3 f383 	clz	r3, r3
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	fa01 f303 	lsl.w	r3, r1, r3
 800d254:	431a      	orrs	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	601a      	str	r2, [r3, #0]
}
 800d25a:	bf00      	nop
 800d25c:	372c      	adds	r7, #44	; 0x2c
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	43db      	mvns	r3, r3
 800d27a:	401a      	ands	r2, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	fb01 f303 	mul.w	r3, r1, r3
 800d284:	431a      	orrs	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	605a      	str	r2, [r3, #4]
}
 800d28a:	bf00      	nop
 800d28c:	3714      	adds	r7, #20
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d296:	b480      	push	{r7}
 800d298:	b08b      	sub	sp, #44	; 0x2c
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	689a      	ldr	r2, [r3, #8]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	fa93 f3a3 	rbit	r3, r3
 800d2b0:	613b      	str	r3, [r7, #16]
  return result;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800d2bc:	2320      	movs	r3, #32
 800d2be:	e003      	b.n	800d2c8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	fab3 f383 	clz	r3, r3
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	2103      	movs	r1, #3
 800d2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d0:	43db      	mvns	r3, r3
 800d2d2:	401a      	ands	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	fa93 f3a3 	rbit	r3, r3
 800d2de:	61fb      	str	r3, [r7, #28]
  return result;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800d2ea:	2320      	movs	r3, #32
 800d2ec:	e003      	b.n	800d2f6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	fab3 f383 	clz	r3, r3
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	6879      	ldr	r1, [r7, #4]
 800d2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d2fe:	431a      	orrs	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800d304:	bf00      	nop
 800d306:	372c      	adds	r7, #44	; 0x2c
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d310:	b480      	push	{r7}
 800d312:	b08b      	sub	sp, #44	; 0x2c
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	68da      	ldr	r2, [r3, #12]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	fa93 f3a3 	rbit	r3, r3
 800d32a:	613b      	str	r3, [r7, #16]
  return result;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800d336:	2320      	movs	r3, #32
 800d338:	e003      	b.n	800d342 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	fab3 f383 	clz	r3, r3
 800d340:	b2db      	uxtb	r3, r3
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	2103      	movs	r1, #3
 800d346:	fa01 f303 	lsl.w	r3, r1, r3
 800d34a:	43db      	mvns	r3, r3
 800d34c:	401a      	ands	r2, r3
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d352:	6a3b      	ldr	r3, [r7, #32]
 800d354:	fa93 f3a3 	rbit	r3, r3
 800d358:	61fb      	str	r3, [r7, #28]
  return result;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800d364:	2320      	movs	r3, #32
 800d366:	e003      	b.n	800d370 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	fab3 f383 	clz	r3, r3
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	fa01 f303 	lsl.w	r3, r1, r3
 800d378:	431a      	orrs	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	60da      	str	r2, [r3, #12]
}
 800d37e:	bf00      	nop
 800d380:	372c      	adds	r7, #44	; 0x2c
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b08b      	sub	sp, #44	; 0x2c
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	fa93 f3a3 	rbit	r3, r3
 800d3a4:	613b      	str	r3, [r7, #16]
  return result;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800d3b0:	2320      	movs	r3, #32
 800d3b2:	e003      	b.n	800d3bc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	fab3 f383 	clz	r3, r3
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	210f      	movs	r1, #15
 800d3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d3c4:	43db      	mvns	r3, r3
 800d3c6:	401a      	ands	r2, r3
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	fa93 f3a3 	rbit	r3, r3
 800d3d2:	61fb      	str	r3, [r7, #28]
  return result;
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800d3de:	2320      	movs	r3, #32
 800d3e0:	e003      	b.n	800d3ea <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e4:	fab3 f383 	clz	r3, r3
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800d3f8:	bf00      	nop
 800d3fa:	372c      	adds	r7, #44	; 0x2c
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d404:	b480      	push	{r7}
 800d406:	b08b      	sub	sp, #44	; 0x2c
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	0a1b      	lsrs	r3, r3, #8
 800d418:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	fa93 f3a3 	rbit	r3, r3
 800d420:	613b      	str	r3, [r7, #16]
  return result;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800d42c:	2320      	movs	r3, #32
 800d42e:	e003      	b.n	800d438 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	fab3 f383 	clz	r3, r3
 800d436:	b2db      	uxtb	r3, r3
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	210f      	movs	r1, #15
 800d43c:	fa01 f303 	lsl.w	r3, r1, r3
 800d440:	43db      	mvns	r3, r3
 800d442:	401a      	ands	r2, r3
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	0a1b      	lsrs	r3, r3, #8
 800d448:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	fa93 f3a3 	rbit	r3, r3
 800d450:	61fb      	str	r3, [r7, #28]
  return result;
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800d45c:	2320      	movs	r3, #32
 800d45e:	e003      	b.n	800d468 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	fab3 f383 	clz	r3, r3
 800d466:	b2db      	uxtb	r3, r3
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	fa01 f303 	lsl.w	r3, r1, r3
 800d470:	431a      	orrs	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800d476:	bf00      	nop
 800d478:	372c      	adds	r7, #44	; 0x2c
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b08a      	sub	sp, #40	; 0x28
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	fa93 f3a3 	rbit	r3, r3
 800d498:	617b      	str	r3, [r7, #20]
  return result;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <LL_GPIO_Init+0x26>
    return 32U;
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	e003      	b.n	800d4b0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	fab3 f383 	clz	r3, r3
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d4b2:	e058      	b.n	800d566 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d04a      	beq.n	800d560 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d003      	beq.n	800d4da <LL_GPIO_Init+0x58>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d10e      	bne.n	800d4f8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6a39      	ldr	r1, [r7, #32]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff fed7 	bl	800d296 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	6819      	ldr	r1, [r3, #0]
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff feb7 	bl	800d266 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6a39      	ldr	r1, [r7, #32]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff ff05 	bl	800d310 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d121      	bne.n	800d552 <LL_GPIO_Init+0xd0>
 800d50e:	6a3b      	ldr	r3, [r7, #32]
 800d510:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	fa93 f3a3 	rbit	r3, r3
 800d518:	60bb      	str	r3, [r7, #8]
  return result;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <LL_GPIO_Init+0xa6>
    return 32U;
 800d524:	2320      	movs	r3, #32
 800d526:	e003      	b.n	800d530 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	fab3 f383 	clz	r3, r3
 800d52e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800d530:	2b07      	cmp	r3, #7
 800d532:	d807      	bhi.n	800d544 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	461a      	mov	r2, r3
 800d53a:	6a39      	ldr	r1, [r7, #32]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ff24 	bl	800d38a <LL_GPIO_SetAFPin_0_7>
 800d542:	e006      	b.n	800d552 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	461a      	mov	r2, r3
 800d54a:	6a39      	ldr	r1, [r7, #32]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff ff59 	bl	800d404 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	461a      	mov	r2, r3
 800d558:	6a39      	ldr	r1, [r7, #32]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7ff fe46 	bl	800d1ec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	3301      	adds	r3, #1
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	fa22 f303 	lsr.w	r3, r2, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d19f      	bne.n	800d4b4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3728      	adds	r7, #40	; 0x28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d57e:	b084      	sub	sp, #16
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	f107 001c 	add.w	r0, r7, #28
 800d58c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	2b03      	cmp	r3, #3
 800d594:	d105      	bne.n	800d5a2 <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f8e8 	bl	800d778 <USB_CoreReset>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d10b      	bne.n	800d5ca <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f043 0208 	orr.w	r2, r3, #8
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	f043 0220 	orr.w	r2, r3, #32
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5d6:	b004      	add	sp, #16
 800d5d8:	4770      	bx	lr

0800d5da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5da:	b480      	push	{r7}
 800d5dc:	b083      	sub	sp, #12
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f023 0201 	bic.w	r2, r3, #1
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	460b      	mov	r3, r1
 800d606:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d608:	2300      	movs	r3, #0
 800d60a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d618:	78fb      	ldrb	r3, [r7, #3]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d115      	bne.n	800d64a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d62a:	2001      	movs	r0, #1
 800d62c:	f7f7 fb9c 	bl	8004d68 <HAL_Delay>
      ms++;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	3301      	adds	r3, #1
 800d634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f890 	bl	800d75c <USB_GetMode>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d01e      	beq.n	800d680 <USB_SetCurrentMode+0x84>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b31      	cmp	r3, #49	; 0x31
 800d646:	d9f0      	bls.n	800d62a <USB_SetCurrentMode+0x2e>
 800d648:	e01a      	b.n	800d680 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d64a:	78fb      	ldrb	r3, [r7, #3]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d115      	bne.n	800d67c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d65c:	2001      	movs	r0, #1
 800d65e:	f7f7 fb83 	bl	8004d68 <HAL_Delay>
      ms++;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3301      	adds	r3, #1
 800d666:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f877 	bl	800d75c <USB_GetMode>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <USB_SetCurrentMode+0x84>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b31      	cmp	r3, #49	; 0x31
 800d678:	d9f0      	bls.n	800d65c <USB_SetCurrentMode+0x60>
 800d67a:	e001      	b.n	800d680 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	e005      	b.n	800d68c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2b32      	cmp	r3, #50	; 0x32
 800d684:	d101      	bne.n	800d68a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e000      	b.n	800d68c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4a13      	ldr	r2, [pc, #76]	; (800d6f8 <USB_FlushTxFifo+0x64>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d901      	bls.n	800d6b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	e01b      	b.n	800d6ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	daf2      	bge.n	800d6a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	019b      	lsls	r3, r3, #6
 800d6c4:	f043 0220 	orr.w	r2, r3, #32
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	4a08      	ldr	r2, [pc, #32]	; (800d6f8 <USB_FlushTxFifo+0x64>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d901      	bls.n	800d6de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e006      	b.n	800d6ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	f003 0320 	and.w	r3, r3, #32
 800d6e6:	2b20      	cmp	r3, #32
 800d6e8:	d0f0      	beq.n	800d6cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	00030d40 	.word	0x00030d40

0800d6fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d704:	2300      	movs	r3, #0
 800d706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	3301      	adds	r3, #1
 800d70c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4a11      	ldr	r2, [pc, #68]	; (800d758 <USB_FlushRxFifo+0x5c>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d901      	bls.n	800d71a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e018      	b.n	800d74c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	daf2      	bge.n	800d708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2210      	movs	r2, #16
 800d72a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3301      	adds	r3, #1
 800d730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4a08      	ldr	r2, [pc, #32]	; (800d758 <USB_FlushRxFifo+0x5c>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d901      	bls.n	800d73e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e006      	b.n	800d74c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	f003 0310 	and.w	r3, r3, #16
 800d746:	2b10      	cmp	r3, #16
 800d748:	d0f0      	beq.n	800d72c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	00030d40 	.word	0x00030d40

0800d75c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	f003 0301 	and.w	r3, r3, #1
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d780:	2300      	movs	r3, #0
 800d782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	3301      	adds	r3, #1
 800d788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	4a13      	ldr	r2, [pc, #76]	; (800d7dc <USB_CoreReset+0x64>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d901      	bls.n	800d796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e01b      	b.n	800d7ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	daf2      	bge.n	800d784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f043 0201 	orr.w	r2, r3, #1
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <USB_CoreReset+0x64>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d901      	bls.n	800d7c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e006      	b.n	800d7ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d0f0      	beq.n	800d7ae <USB_CoreReset+0x36>

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3714      	adds	r7, #20
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	00030d40 	.word	0x00030d40

0800d7e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b086      	sub	sp, #24
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d7ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d80c:	461a      	mov	r2, r3
 800d80e:	2300      	movs	r3, #0
 800d810:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d816:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d822:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#else
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d018      	beq.n	800d880 <USB_HostInit+0xa0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	2b01      	cmp	r3, #1
 800d852:	d10a      	bne.n	800d86a <USB_HostInit+0x8a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d862:	f043 0304 	orr.w	r3, r3, #4
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	e014      	b.n	800d894 <USB_HostInit+0xb4>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d878:	f023 0304 	bic.w	r3, r3, #4
 800d87c:	6013      	str	r3, [r2, #0]
 800d87e:	e009      	b.n	800d894 <USB_HostInit+0xb4>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d88e:	f023 0304 	bic.w	r3, r3, #4
 800d892:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d894:	2110      	movs	r1, #16
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff fefc 	bl	800d694 <USB_FlushTxFifo>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <USB_HostInit+0xc6>
  {
    ret = HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff ff28 	bl	800d6fc <USB_FlushRxFifo>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <USB_HostInit+0xd6>
  {
    ret = HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	613b      	str	r3, [r7, #16]
 800d8ba:	e015      	b.n	800d8e8 <USB_HostInit+0x108>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	015a      	lsls	r2, r3, #5
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8dc:	461a      	mov	r2, r3
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	613b      	str	r3, [r7, #16]
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d3e5      	bcc.n	800d8bc <USB_HostInit+0xdc>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00b      	beq.n	800d922 <USB_HostInit+0x142>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d910:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a13      	ldr	r2, [pc, #76]	; (800d964 <USB_HostInit+0x184>)
 800d916:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a13      	ldr	r2, [pc, #76]	; (800d968 <USB_HostInit+0x188>)
 800d91c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d920:	e009      	b.n	800d936 <USB_HostInit+0x156>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2280      	movs	r2, #128	; 0x80
 800d926:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a10      	ldr	r2, [pc, #64]	; (800d96c <USB_HostInit+0x18c>)
 800d92c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a0f      	ldr	r2, [pc, #60]	; (800d970 <USB_HostInit+0x190>)
 800d932:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d105      	bne.n	800d948 <USB_HostInit+0x168>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	f043 0210 	orr.w	r2, r3, #16
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	699a      	ldr	r2, [r3, #24]
 800d94c:	4b09      	ldr	r3, [pc, #36]	; (800d974 <USB_HostInit+0x194>)
 800d94e:	4313      	orrs	r3, r2
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d954:	7dfb      	ldrb	r3, [r7, #23]
}
 800d956:	4618      	mov	r0, r3
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d960:	b004      	add	sp, #16
 800d962:	4770      	bx	lr
 800d964:	01000200 	.word	0x01000200
 800d968:	00e00300 	.word	0x00e00300
 800d96c:	00600080 	.word	0x00600080
 800d970:	004000e0 	.word	0x004000e0
 800d974:	a3200008 	.word	0xa3200008

0800d978 <siprintf>:
 800d978:	b40e      	push	{r1, r2, r3}
 800d97a:	b500      	push	{lr}
 800d97c:	b09c      	sub	sp, #112	; 0x70
 800d97e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d982:	ab1d      	add	r3, sp, #116	; 0x74
 800d984:	9002      	str	r0, [sp, #8]
 800d986:	9006      	str	r0, [sp, #24]
 800d988:	9107      	str	r1, [sp, #28]
 800d98a:	9104      	str	r1, [sp, #16]
 800d98c:	4808      	ldr	r0, [pc, #32]	; (800d9b0 <siprintf+0x38>)
 800d98e:	4909      	ldr	r1, [pc, #36]	; (800d9b4 <siprintf+0x3c>)
 800d990:	f853 2b04 	ldr.w	r2, [r3], #4
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	a902      	add	r1, sp, #8
 800d998:	6800      	ldr	r0, [r0, #0]
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	f000 f8e2 	bl	800db64 <_svfiprintf_r>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
 800d9a6:	b01c      	add	sp, #112	; 0x70
 800d9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9ac:	b003      	add	sp, #12
 800d9ae:	4770      	bx	lr
 800d9b0:	20000070 	.word	0x20000070
 800d9b4:	ffff0208 	.word	0xffff0208

0800d9b8 <_vsniprintf_r>:
 800d9b8:	b530      	push	{r4, r5, lr}
 800d9ba:	4614      	mov	r4, r2
 800d9bc:	b09b      	sub	sp, #108	; 0x6c
 800d9be:	4605      	mov	r5, r0
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	2c00      	cmp	r4, #0
 800d9c4:	da05      	bge.n	800d9d2 <_vsniprintf_r+0x1a>
 800d9c6:	238b      	movs	r3, #139	; 0x8b
 800d9c8:	6003      	str	r3, [r0, #0]
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9ce:	b01b      	add	sp, #108	; 0x6c
 800d9d0:	bd30      	pop	{r4, r5, pc}
 800d9d2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d9d6:	9100      	str	r1, [sp, #0]
 800d9d8:	9104      	str	r1, [sp, #16]
 800d9da:	4669      	mov	r1, sp
 800d9dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d9e0:	bf14      	ite	ne
 800d9e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d9e6:	4623      	moveq	r3, r4
 800d9e8:	9302      	str	r3, [sp, #8]
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d9f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9f6:	f000 f8b5 	bl	800db64 <_svfiprintf_r>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	bfbc      	itt	lt
 800d9fe:	238b      	movlt	r3, #139	; 0x8b
 800da00:	602b      	strlt	r3, [r5, #0]
 800da02:	2c00      	cmp	r4, #0
 800da04:	d0e3      	beq.n	800d9ce <_vsniprintf_r+0x16>
 800da06:	9b00      	ldr	r3, [sp, #0]
 800da08:	2200      	movs	r2, #0
 800da0a:	701a      	strb	r2, [r3, #0]
 800da0c:	e7df      	b.n	800d9ce <_vsniprintf_r+0x16>
	...

0800da10 <vsniprintf>:
 800da10:	b507      	push	{r0, r1, r2, lr}
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	4613      	mov	r3, r2
 800da16:	460a      	mov	r2, r1
 800da18:	4601      	mov	r1, r0
 800da1a:	4803      	ldr	r0, [pc, #12]	; (800da28 <vsniprintf+0x18>)
 800da1c:	6800      	ldr	r0, [r0, #0]
 800da1e:	f7ff ffcb 	bl	800d9b8 <_vsniprintf_r>
 800da22:	b003      	add	sp, #12
 800da24:	f85d fb04 	ldr.w	pc, [sp], #4
 800da28:	20000070 	.word	0x20000070

0800da2c <memset>:
 800da2c:	4402      	add	r2, r0
 800da2e:	4603      	mov	r3, r0
 800da30:	4293      	cmp	r3, r2
 800da32:	d100      	bne.n	800da36 <memset+0xa>
 800da34:	4770      	bx	lr
 800da36:	f803 1b01 	strb.w	r1, [r3], #1
 800da3a:	e7f9      	b.n	800da30 <memset+0x4>

0800da3c <__errno>:
 800da3c:	4b01      	ldr	r3, [pc, #4]	; (800da44 <__errno+0x8>)
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	20000070 	.word	0x20000070

0800da48 <__libc_init_array>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4d0d      	ldr	r5, [pc, #52]	; (800da80 <__libc_init_array+0x38>)
 800da4c:	2600      	movs	r6, #0
 800da4e:	4c0d      	ldr	r4, [pc, #52]	; (800da84 <__libc_init_array+0x3c>)
 800da50:	1b64      	subs	r4, r4, r5
 800da52:	10a4      	asrs	r4, r4, #2
 800da54:	42a6      	cmp	r6, r4
 800da56:	d109      	bne.n	800da6c <__libc_init_array+0x24>
 800da58:	4d0b      	ldr	r5, [pc, #44]	; (800da88 <__libc_init_array+0x40>)
 800da5a:	2600      	movs	r6, #0
 800da5c:	4c0b      	ldr	r4, [pc, #44]	; (800da8c <__libc_init_array+0x44>)
 800da5e:	f000 fc79 	bl	800e354 <_init>
 800da62:	1b64      	subs	r4, r4, r5
 800da64:	10a4      	asrs	r4, r4, #2
 800da66:	42a6      	cmp	r6, r4
 800da68:	d105      	bne.n	800da76 <__libc_init_array+0x2e>
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da70:	3601      	adds	r6, #1
 800da72:	4798      	blx	r3
 800da74:	e7ee      	b.n	800da54 <__libc_init_array+0xc>
 800da76:	f855 3b04 	ldr.w	r3, [r5], #4
 800da7a:	3601      	adds	r6, #1
 800da7c:	4798      	blx	r3
 800da7e:	e7f2      	b.n	800da66 <__libc_init_array+0x1e>
 800da80:	0800e748 	.word	0x0800e748
 800da84:	0800e748 	.word	0x0800e748
 800da88:	0800e748 	.word	0x0800e748
 800da8c:	0800e74c 	.word	0x0800e74c

0800da90 <__retarget_lock_acquire_recursive>:
 800da90:	4770      	bx	lr

0800da92 <__retarget_lock_release_recursive>:
 800da92:	4770      	bx	lr

0800da94 <memcpy>:
 800da94:	440a      	add	r2, r1
 800da96:	1e43      	subs	r3, r0, #1
 800da98:	4291      	cmp	r1, r2
 800da9a:	d100      	bne.n	800da9e <memcpy+0xa>
 800da9c:	4770      	bx	lr
 800da9e:	b510      	push	{r4, lr}
 800daa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa4:	4291      	cmp	r1, r2
 800daa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daaa:	d1f9      	bne.n	800daa0 <memcpy+0xc>
 800daac:	bd10      	pop	{r4, pc}

0800daae <__ssputs_r>:
 800daae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab2:	461f      	mov	r7, r3
 800dab4:	688e      	ldr	r6, [r1, #8]
 800dab6:	4682      	mov	sl, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	42be      	cmp	r6, r7
 800dabc:	4690      	mov	r8, r2
 800dabe:	680b      	ldr	r3, [r1, #0]
 800dac0:	d82c      	bhi.n	800db1c <__ssputs_r+0x6e>
 800dac2:	898a      	ldrh	r2, [r1, #12]
 800dac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dac8:	d026      	beq.n	800db18 <__ssputs_r+0x6a>
 800daca:	6965      	ldr	r5, [r4, #20]
 800dacc:	6909      	ldr	r1, [r1, #16]
 800dace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dad2:	eba3 0901 	sub.w	r9, r3, r1
 800dad6:	1c7b      	adds	r3, r7, #1
 800dad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dadc:	444b      	add	r3, r9
 800dade:	106d      	asrs	r5, r5, #1
 800dae0:	429d      	cmp	r5, r3
 800dae2:	bf38      	it	cc
 800dae4:	461d      	movcc	r5, r3
 800dae6:	0553      	lsls	r3, r2, #21
 800dae8:	d527      	bpl.n	800db3a <__ssputs_r+0x8c>
 800daea:	4629      	mov	r1, r5
 800daec:	f000 f958 	bl	800dda0 <_malloc_r>
 800daf0:	4606      	mov	r6, r0
 800daf2:	b360      	cbz	r0, 800db4e <__ssputs_r+0xa0>
 800daf4:	464a      	mov	r2, r9
 800daf6:	6921      	ldr	r1, [r4, #16]
 800daf8:	f7ff ffcc 	bl	800da94 <memcpy>
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	6126      	str	r6, [r4, #16]
 800db0a:	444e      	add	r6, r9
 800db0c:	6165      	str	r5, [r4, #20]
 800db0e:	eba5 0509 	sub.w	r5, r5, r9
 800db12:	6026      	str	r6, [r4, #0]
 800db14:	463e      	mov	r6, r7
 800db16:	60a5      	str	r5, [r4, #8]
 800db18:	42be      	cmp	r6, r7
 800db1a:	d900      	bls.n	800db1e <__ssputs_r+0x70>
 800db1c:	463e      	mov	r6, r7
 800db1e:	4632      	mov	r2, r6
 800db20:	4641      	mov	r1, r8
 800db22:	6820      	ldr	r0, [r4, #0]
 800db24:	f000 fb89 	bl	800e23a <memmove>
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	2000      	movs	r0, #0
 800db2c:	1b9b      	subs	r3, r3, r6
 800db2e:	60a3      	str	r3, [r4, #8]
 800db30:	6823      	ldr	r3, [r4, #0]
 800db32:	4433      	add	r3, r6
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3a:	462a      	mov	r2, r5
 800db3c:	f000 fb4e 	bl	800e1dc <_realloc_r>
 800db40:	4606      	mov	r6, r0
 800db42:	2800      	cmp	r0, #0
 800db44:	d1e0      	bne.n	800db08 <__ssputs_r+0x5a>
 800db46:	6921      	ldr	r1, [r4, #16]
 800db48:	4650      	mov	r0, sl
 800db4a:	f000 fbaf 	bl	800e2ac <_free_r>
 800db4e:	230c      	movs	r3, #12
 800db50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db54:	f8ca 3000 	str.w	r3, [sl]
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db5e:	81a3      	strh	r3, [r4, #12]
 800db60:	e7e9      	b.n	800db36 <__ssputs_r+0x88>
	...

0800db64 <_svfiprintf_r>:
 800db64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db68:	4698      	mov	r8, r3
 800db6a:	898b      	ldrh	r3, [r1, #12]
 800db6c:	b09d      	sub	sp, #116	; 0x74
 800db6e:	4607      	mov	r7, r0
 800db70:	061b      	lsls	r3, r3, #24
 800db72:	460d      	mov	r5, r1
 800db74:	4614      	mov	r4, r2
 800db76:	d50e      	bpl.n	800db96 <_svfiprintf_r+0x32>
 800db78:	690b      	ldr	r3, [r1, #16]
 800db7a:	b963      	cbnz	r3, 800db96 <_svfiprintf_r+0x32>
 800db7c:	2140      	movs	r1, #64	; 0x40
 800db7e:	f000 f90f 	bl	800dda0 <_malloc_r>
 800db82:	6028      	str	r0, [r5, #0]
 800db84:	6128      	str	r0, [r5, #16]
 800db86:	b920      	cbnz	r0, 800db92 <_svfiprintf_r+0x2e>
 800db88:	230c      	movs	r3, #12
 800db8a:	603b      	str	r3, [r7, #0]
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db90:	e0d0      	b.n	800dd34 <_svfiprintf_r+0x1d0>
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	616b      	str	r3, [r5, #20]
 800db96:	2300      	movs	r3, #0
 800db98:	f8cd 800c 	str.w	r8, [sp, #12]
 800db9c:	f04f 0901 	mov.w	r9, #1
 800dba0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd4c <_svfiprintf_r+0x1e8>
 800dba4:	9309      	str	r3, [sp, #36]	; 0x24
 800dba6:	2320      	movs	r3, #32
 800dba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbac:	2330      	movs	r3, #48	; 0x30
 800dbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbb2:	4623      	mov	r3, r4
 800dbb4:	469a      	mov	sl, r3
 800dbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbba:	b10a      	cbz	r2, 800dbc0 <_svfiprintf_r+0x5c>
 800dbbc:	2a25      	cmp	r2, #37	; 0x25
 800dbbe:	d1f9      	bne.n	800dbb4 <_svfiprintf_r+0x50>
 800dbc0:	ebba 0b04 	subs.w	fp, sl, r4
 800dbc4:	d00b      	beq.n	800dbde <_svfiprintf_r+0x7a>
 800dbc6:	465b      	mov	r3, fp
 800dbc8:	4622      	mov	r2, r4
 800dbca:	4629      	mov	r1, r5
 800dbcc:	4638      	mov	r0, r7
 800dbce:	f7ff ff6e 	bl	800daae <__ssputs_r>
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	f000 80a9 	beq.w	800dd2a <_svfiprintf_r+0x1c6>
 800dbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbda:	445a      	add	r2, fp
 800dbdc:	9209      	str	r2, [sp, #36]	; 0x24
 800dbde:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 80a1 	beq.w	800dd2a <_svfiprintf_r+0x1c6>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbee:	f10a 0a01 	add.w	sl, sl, #1
 800dbf2:	9304      	str	r3, [sp, #16]
 800dbf4:	9307      	str	r3, [sp, #28]
 800dbf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbfa:	931a      	str	r3, [sp, #104]	; 0x68
 800dbfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc00:	4654      	mov	r4, sl
 800dc02:	2205      	movs	r2, #5
 800dc04:	4851      	ldr	r0, [pc, #324]	; (800dd4c <_svfiprintf_r+0x1e8>)
 800dc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0a:	f000 fb41 	bl	800e290 <memchr>
 800dc0e:	9a04      	ldr	r2, [sp, #16]
 800dc10:	b9d8      	cbnz	r0, 800dc4a <_svfiprintf_r+0xe6>
 800dc12:	06d0      	lsls	r0, r2, #27
 800dc14:	bf44      	itt	mi
 800dc16:	2320      	movmi	r3, #32
 800dc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc1c:	0711      	lsls	r1, r2, #28
 800dc1e:	bf44      	itt	mi
 800dc20:	232b      	movmi	r3, #43	; 0x2b
 800dc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc26:	f89a 3000 	ldrb.w	r3, [sl]
 800dc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc2c:	d015      	beq.n	800dc5a <_svfiprintf_r+0xf6>
 800dc2e:	9a07      	ldr	r2, [sp, #28]
 800dc30:	4654      	mov	r4, sl
 800dc32:	2000      	movs	r0, #0
 800dc34:	f04f 0c0a 	mov.w	ip, #10
 800dc38:	4621      	mov	r1, r4
 800dc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc3e:	3b30      	subs	r3, #48	; 0x30
 800dc40:	2b09      	cmp	r3, #9
 800dc42:	d94d      	bls.n	800dce0 <_svfiprintf_r+0x17c>
 800dc44:	b1b0      	cbz	r0, 800dc74 <_svfiprintf_r+0x110>
 800dc46:	9207      	str	r2, [sp, #28]
 800dc48:	e014      	b.n	800dc74 <_svfiprintf_r+0x110>
 800dc4a:	eba0 0308 	sub.w	r3, r0, r8
 800dc4e:	46a2      	mov	sl, r4
 800dc50:	fa09 f303 	lsl.w	r3, r9, r3
 800dc54:	4313      	orrs	r3, r2
 800dc56:	9304      	str	r3, [sp, #16]
 800dc58:	e7d2      	b.n	800dc00 <_svfiprintf_r+0x9c>
 800dc5a:	9b03      	ldr	r3, [sp, #12]
 800dc5c:	1d19      	adds	r1, r3, #4
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	9103      	str	r1, [sp, #12]
 800dc64:	bfbb      	ittet	lt
 800dc66:	425b      	neglt	r3, r3
 800dc68:	f042 0202 	orrlt.w	r2, r2, #2
 800dc6c:	9307      	strge	r3, [sp, #28]
 800dc6e:	9307      	strlt	r3, [sp, #28]
 800dc70:	bfb8      	it	lt
 800dc72:	9204      	strlt	r2, [sp, #16]
 800dc74:	7823      	ldrb	r3, [r4, #0]
 800dc76:	2b2e      	cmp	r3, #46	; 0x2e
 800dc78:	d10c      	bne.n	800dc94 <_svfiprintf_r+0x130>
 800dc7a:	7863      	ldrb	r3, [r4, #1]
 800dc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7e:	d134      	bne.n	800dcea <_svfiprintf_r+0x186>
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	3402      	adds	r4, #2
 800dc84:	1d1a      	adds	r2, r3, #4
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	9203      	str	r2, [sp, #12]
 800dc8c:	bfb8      	it	lt
 800dc8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc92:	9305      	str	r3, [sp, #20]
 800dc94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd5c <_svfiprintf_r+0x1f8>
 800dc98:	2203      	movs	r2, #3
 800dc9a:	7821      	ldrb	r1, [r4, #0]
 800dc9c:	4650      	mov	r0, sl
 800dc9e:	f000 faf7 	bl	800e290 <memchr>
 800dca2:	b138      	cbz	r0, 800dcb4 <_svfiprintf_r+0x150>
 800dca4:	eba0 000a 	sub.w	r0, r0, sl
 800dca8:	2240      	movs	r2, #64	; 0x40
 800dcaa:	9b04      	ldr	r3, [sp, #16]
 800dcac:	3401      	adds	r4, #1
 800dcae:	4082      	lsls	r2, r0
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb8:	2206      	movs	r2, #6
 800dcba:	4825      	ldr	r0, [pc, #148]	; (800dd50 <_svfiprintf_r+0x1ec>)
 800dcbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcc0:	f000 fae6 	bl	800e290 <memchr>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d038      	beq.n	800dd3a <_svfiprintf_r+0x1d6>
 800dcc8:	4b22      	ldr	r3, [pc, #136]	; (800dd54 <_svfiprintf_r+0x1f0>)
 800dcca:	bb1b      	cbnz	r3, 800dd14 <_svfiprintf_r+0x1b0>
 800dccc:	9b03      	ldr	r3, [sp, #12]
 800dcce:	3307      	adds	r3, #7
 800dcd0:	f023 0307 	bic.w	r3, r3, #7
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcda:	4433      	add	r3, r6
 800dcdc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcde:	e768      	b.n	800dbb2 <_svfiprintf_r+0x4e>
 800dce0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dce4:	460c      	mov	r4, r1
 800dce6:	2001      	movs	r0, #1
 800dce8:	e7a6      	b.n	800dc38 <_svfiprintf_r+0xd4>
 800dcea:	2300      	movs	r3, #0
 800dcec:	3401      	adds	r4, #1
 800dcee:	f04f 0c0a 	mov.w	ip, #10
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	9305      	str	r3, [sp, #20]
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcfc:	3a30      	subs	r2, #48	; 0x30
 800dcfe:	2a09      	cmp	r2, #9
 800dd00:	d903      	bls.n	800dd0a <_svfiprintf_r+0x1a6>
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d0c6      	beq.n	800dc94 <_svfiprintf_r+0x130>
 800dd06:	9105      	str	r1, [sp, #20]
 800dd08:	e7c4      	b.n	800dc94 <_svfiprintf_r+0x130>
 800dd0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd0e:	4604      	mov	r4, r0
 800dd10:	2301      	movs	r3, #1
 800dd12:	e7f0      	b.n	800dcf6 <_svfiprintf_r+0x192>
 800dd14:	ab03      	add	r3, sp, #12
 800dd16:	462a      	mov	r2, r5
 800dd18:	a904      	add	r1, sp, #16
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	4b0e      	ldr	r3, [pc, #56]	; (800dd58 <_svfiprintf_r+0x1f4>)
 800dd20:	f3af 8000 	nop.w
 800dd24:	1c42      	adds	r2, r0, #1
 800dd26:	4606      	mov	r6, r0
 800dd28:	d1d6      	bne.n	800dcd8 <_svfiprintf_r+0x174>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	065b      	lsls	r3, r3, #25
 800dd2e:	f53f af2d 	bmi.w	800db8c <_svfiprintf_r+0x28>
 800dd32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd34:	b01d      	add	sp, #116	; 0x74
 800dd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3a:	ab03      	add	r3, sp, #12
 800dd3c:	462a      	mov	r2, r5
 800dd3e:	a904      	add	r1, sp, #16
 800dd40:	4638      	mov	r0, r7
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <_svfiprintf_r+0x1f4>)
 800dd46:	f000 f91d 	bl	800df84 <_printf_i>
 800dd4a:	e7eb      	b.n	800dd24 <_svfiprintf_r+0x1c0>
 800dd4c:	0800e70c 	.word	0x0800e70c
 800dd50:	0800e716 	.word	0x0800e716
 800dd54:	00000000 	.word	0x00000000
 800dd58:	0800daaf 	.word	0x0800daaf
 800dd5c:	0800e712 	.word	0x0800e712

0800dd60 <sbrk_aligned>:
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	4e0e      	ldr	r6, [pc, #56]	; (800dd9c <sbrk_aligned+0x3c>)
 800dd64:	460c      	mov	r4, r1
 800dd66:	4605      	mov	r5, r0
 800dd68:	6831      	ldr	r1, [r6, #0]
 800dd6a:	b911      	cbnz	r1, 800dd72 <sbrk_aligned+0x12>
 800dd6c:	f000 fa80 	bl	800e270 <_sbrk_r>
 800dd70:	6030      	str	r0, [r6, #0]
 800dd72:	4621      	mov	r1, r4
 800dd74:	4628      	mov	r0, r5
 800dd76:	f000 fa7b 	bl	800e270 <_sbrk_r>
 800dd7a:	1c43      	adds	r3, r0, #1
 800dd7c:	d00a      	beq.n	800dd94 <sbrk_aligned+0x34>
 800dd7e:	1cc4      	adds	r4, r0, #3
 800dd80:	f024 0403 	bic.w	r4, r4, #3
 800dd84:	42a0      	cmp	r0, r4
 800dd86:	d007      	beq.n	800dd98 <sbrk_aligned+0x38>
 800dd88:	1a21      	subs	r1, r4, r0
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f000 fa70 	bl	800e270 <_sbrk_r>
 800dd90:	3001      	adds	r0, #1
 800dd92:	d101      	bne.n	800dd98 <sbrk_aligned+0x38>
 800dd94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dd98:	4620      	mov	r0, r4
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	200008cc 	.word	0x200008cc

0800dda0 <_malloc_r>:
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	1ccd      	adds	r5, r1, #3
 800dda6:	4607      	mov	r7, r0
 800dda8:	f025 0503 	bic.w	r5, r5, #3
 800ddac:	3508      	adds	r5, #8
 800ddae:	2d0c      	cmp	r5, #12
 800ddb0:	bf38      	it	cc
 800ddb2:	250c      	movcc	r5, #12
 800ddb4:	2d00      	cmp	r5, #0
 800ddb6:	db01      	blt.n	800ddbc <_malloc_r+0x1c>
 800ddb8:	42a9      	cmp	r1, r5
 800ddba:	d905      	bls.n	800ddc8 <_malloc_r+0x28>
 800ddbc:	230c      	movs	r3, #12
 800ddbe:	2600      	movs	r6, #0
 800ddc0:	603b      	str	r3, [r7, #0]
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de9c <_malloc_r+0xfc>
 800ddcc:	f000 f9fa 	bl	800e1c4 <__malloc_lock>
 800ddd0:	f8d8 3000 	ldr.w	r3, [r8]
 800ddd4:	461c      	mov	r4, r3
 800ddd6:	bb5c      	cbnz	r4, 800de30 <_malloc_r+0x90>
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4638      	mov	r0, r7
 800dddc:	f7ff ffc0 	bl	800dd60 <sbrk_aligned>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	4604      	mov	r4, r0
 800dde4:	d155      	bne.n	800de92 <_malloc_r+0xf2>
 800dde6:	f8d8 4000 	ldr.w	r4, [r8]
 800ddea:	4626      	mov	r6, r4
 800ddec:	2e00      	cmp	r6, #0
 800ddee:	d145      	bne.n	800de7c <_malloc_r+0xdc>
 800ddf0:	2c00      	cmp	r4, #0
 800ddf2:	d048      	beq.n	800de86 <_malloc_r+0xe6>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	eb04 0903 	add.w	r9, r4, r3
 800ddfe:	f000 fa37 	bl	800e270 <_sbrk_r>
 800de02:	4581      	cmp	r9, r0
 800de04:	d13f      	bne.n	800de86 <_malloc_r+0xe6>
 800de06:	6821      	ldr	r1, [r4, #0]
 800de08:	4638      	mov	r0, r7
 800de0a:	1a6d      	subs	r5, r5, r1
 800de0c:	4629      	mov	r1, r5
 800de0e:	f7ff ffa7 	bl	800dd60 <sbrk_aligned>
 800de12:	3001      	adds	r0, #1
 800de14:	d037      	beq.n	800de86 <_malloc_r+0xe6>
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	442b      	add	r3, r5
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	f8d8 3000 	ldr.w	r3, [r8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d038      	beq.n	800de96 <_malloc_r+0xf6>
 800de24:	685a      	ldr	r2, [r3, #4]
 800de26:	42a2      	cmp	r2, r4
 800de28:	d12b      	bne.n	800de82 <_malloc_r+0xe2>
 800de2a:	2200      	movs	r2, #0
 800de2c:	605a      	str	r2, [r3, #4]
 800de2e:	e00f      	b.n	800de50 <_malloc_r+0xb0>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	1b52      	subs	r2, r2, r5
 800de34:	d41f      	bmi.n	800de76 <_malloc_r+0xd6>
 800de36:	2a0b      	cmp	r2, #11
 800de38:	d917      	bls.n	800de6a <_malloc_r+0xca>
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	6025      	str	r5, [r4, #0]
 800de40:	bf18      	it	ne
 800de42:	6059      	strne	r1, [r3, #4]
 800de44:	6863      	ldr	r3, [r4, #4]
 800de46:	bf08      	it	eq
 800de48:	f8c8 1000 	streq.w	r1, [r8]
 800de4c:	5162      	str	r2, [r4, r5]
 800de4e:	604b      	str	r3, [r1, #4]
 800de50:	f104 060b 	add.w	r6, r4, #11
 800de54:	4638      	mov	r0, r7
 800de56:	f000 f9bb 	bl	800e1d0 <__malloc_unlock>
 800de5a:	1d23      	adds	r3, r4, #4
 800de5c:	f026 0607 	bic.w	r6, r6, #7
 800de60:	1af2      	subs	r2, r6, r3
 800de62:	d0ae      	beq.n	800ddc2 <_malloc_r+0x22>
 800de64:	1b9b      	subs	r3, r3, r6
 800de66:	50a3      	str	r3, [r4, r2]
 800de68:	e7ab      	b.n	800ddc2 <_malloc_r+0x22>
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	6862      	ldr	r2, [r4, #4]
 800de6e:	d1dd      	bne.n	800de2c <_malloc_r+0x8c>
 800de70:	f8c8 2000 	str.w	r2, [r8]
 800de74:	e7ec      	b.n	800de50 <_malloc_r+0xb0>
 800de76:	4623      	mov	r3, r4
 800de78:	6864      	ldr	r4, [r4, #4]
 800de7a:	e7ac      	b.n	800ddd6 <_malloc_r+0x36>
 800de7c:	4634      	mov	r4, r6
 800de7e:	6876      	ldr	r6, [r6, #4]
 800de80:	e7b4      	b.n	800ddec <_malloc_r+0x4c>
 800de82:	4613      	mov	r3, r2
 800de84:	e7cc      	b.n	800de20 <_malloc_r+0x80>
 800de86:	230c      	movs	r3, #12
 800de88:	4638      	mov	r0, r7
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	f000 f9a0 	bl	800e1d0 <__malloc_unlock>
 800de90:	e797      	b.n	800ddc2 <_malloc_r+0x22>
 800de92:	6025      	str	r5, [r4, #0]
 800de94:	e7dc      	b.n	800de50 <_malloc_r+0xb0>
 800de96:	605b      	str	r3, [r3, #4]
 800de98:	deff      	udf	#255	; 0xff
 800de9a:	bf00      	nop
 800de9c:	200008c8 	.word	0x200008c8

0800dea0 <_printf_common>:
 800dea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dea4:	4616      	mov	r6, r2
 800dea6:	4699      	mov	r9, r3
 800dea8:	688a      	ldr	r2, [r1, #8]
 800deaa:	4607      	mov	r7, r0
 800deac:	690b      	ldr	r3, [r1, #16]
 800deae:	460c      	mov	r4, r1
 800deb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800deb4:	4293      	cmp	r3, r2
 800deb6:	bfb8      	it	lt
 800deb8:	4613      	movlt	r3, r2
 800deba:	6033      	str	r3, [r6, #0]
 800debc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dec0:	b10a      	cbz	r2, 800dec6 <_printf_common+0x26>
 800dec2:	3301      	adds	r3, #1
 800dec4:	6033      	str	r3, [r6, #0]
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	0699      	lsls	r1, r3, #26
 800deca:	bf42      	ittt	mi
 800decc:	6833      	ldrmi	r3, [r6, #0]
 800dece:	3302      	addmi	r3, #2
 800ded0:	6033      	strmi	r3, [r6, #0]
 800ded2:	6825      	ldr	r5, [r4, #0]
 800ded4:	f015 0506 	ands.w	r5, r5, #6
 800ded8:	d106      	bne.n	800dee8 <_printf_common+0x48>
 800deda:	f104 0a19 	add.w	sl, r4, #25
 800dede:	68e3      	ldr	r3, [r4, #12]
 800dee0:	6832      	ldr	r2, [r6, #0]
 800dee2:	1a9b      	subs	r3, r3, r2
 800dee4:	42ab      	cmp	r3, r5
 800dee6:	dc2b      	bgt.n	800df40 <_printf_common+0xa0>
 800dee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800deec:	1e13      	subs	r3, r2, #0
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	bf18      	it	ne
 800def2:	2301      	movne	r3, #1
 800def4:	0692      	lsls	r2, r2, #26
 800def6:	d430      	bmi.n	800df5a <_printf_common+0xba>
 800def8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800defc:	4649      	mov	r1, r9
 800defe:	4638      	mov	r0, r7
 800df00:	47c0      	blx	r8
 800df02:	3001      	adds	r0, #1
 800df04:	d023      	beq.n	800df4e <_printf_common+0xae>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	341a      	adds	r4, #26
 800df0a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800df0e:	f003 0306 	and.w	r3, r3, #6
 800df12:	2b04      	cmp	r3, #4
 800df14:	bf0a      	itet	eq
 800df16:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800df1a:	2500      	movne	r5, #0
 800df1c:	6833      	ldreq	r3, [r6, #0]
 800df1e:	f04f 0600 	mov.w	r6, #0
 800df22:	bf08      	it	eq
 800df24:	1aed      	subeq	r5, r5, r3
 800df26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800df2a:	bf08      	it	eq
 800df2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df30:	4293      	cmp	r3, r2
 800df32:	bfc4      	itt	gt
 800df34:	1a9b      	subgt	r3, r3, r2
 800df36:	18ed      	addgt	r5, r5, r3
 800df38:	42b5      	cmp	r5, r6
 800df3a:	d11a      	bne.n	800df72 <_printf_common+0xd2>
 800df3c:	2000      	movs	r0, #0
 800df3e:	e008      	b.n	800df52 <_printf_common+0xb2>
 800df40:	2301      	movs	r3, #1
 800df42:	4652      	mov	r2, sl
 800df44:	4649      	mov	r1, r9
 800df46:	4638      	mov	r0, r7
 800df48:	47c0      	blx	r8
 800df4a:	3001      	adds	r0, #1
 800df4c:	d103      	bne.n	800df56 <_printf_common+0xb6>
 800df4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df56:	3501      	adds	r5, #1
 800df58:	e7c1      	b.n	800dede <_printf_common+0x3e>
 800df5a:	18e1      	adds	r1, r4, r3
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	2030      	movs	r0, #48	; 0x30
 800df60:	3302      	adds	r3, #2
 800df62:	4422      	add	r2, r4
 800df64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df70:	e7c2      	b.n	800def8 <_printf_common+0x58>
 800df72:	2301      	movs	r3, #1
 800df74:	4622      	mov	r2, r4
 800df76:	4649      	mov	r1, r9
 800df78:	4638      	mov	r0, r7
 800df7a:	47c0      	blx	r8
 800df7c:	3001      	adds	r0, #1
 800df7e:	d0e6      	beq.n	800df4e <_printf_common+0xae>
 800df80:	3601      	adds	r6, #1
 800df82:	e7d9      	b.n	800df38 <_printf_common+0x98>

0800df84 <_printf_i>:
 800df84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	7e0f      	ldrb	r7, [r1, #24]
 800df8a:	4691      	mov	r9, r2
 800df8c:	4680      	mov	r8, r0
 800df8e:	460c      	mov	r4, r1
 800df90:	2f78      	cmp	r7, #120	; 0x78
 800df92:	469a      	mov	sl, r3
 800df94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df9a:	d807      	bhi.n	800dfac <_printf_i+0x28>
 800df9c:	2f62      	cmp	r7, #98	; 0x62
 800df9e:	d80a      	bhi.n	800dfb6 <_printf_i+0x32>
 800dfa0:	2f00      	cmp	r7, #0
 800dfa2:	f000 80d3 	beq.w	800e14c <_printf_i+0x1c8>
 800dfa6:	2f58      	cmp	r7, #88	; 0x58
 800dfa8:	f000 80bf 	beq.w	800e12a <_printf_i+0x1a6>
 800dfac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfb4:	e03a      	b.n	800e02c <_printf_i+0xa8>
 800dfb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfba:	2b15      	cmp	r3, #21
 800dfbc:	d8f6      	bhi.n	800dfac <_printf_i+0x28>
 800dfbe:	a101      	add	r1, pc, #4	; (adr r1, 800dfc4 <_printf_i+0x40>)
 800dfc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfc4:	0800e01d 	.word	0x0800e01d
 800dfc8:	0800e031 	.word	0x0800e031
 800dfcc:	0800dfad 	.word	0x0800dfad
 800dfd0:	0800dfad 	.word	0x0800dfad
 800dfd4:	0800dfad 	.word	0x0800dfad
 800dfd8:	0800dfad 	.word	0x0800dfad
 800dfdc:	0800e031 	.word	0x0800e031
 800dfe0:	0800dfad 	.word	0x0800dfad
 800dfe4:	0800dfad 	.word	0x0800dfad
 800dfe8:	0800dfad 	.word	0x0800dfad
 800dfec:	0800dfad 	.word	0x0800dfad
 800dff0:	0800e133 	.word	0x0800e133
 800dff4:	0800e05d 	.word	0x0800e05d
 800dff8:	0800e0ef 	.word	0x0800e0ef
 800dffc:	0800dfad 	.word	0x0800dfad
 800e000:	0800dfad 	.word	0x0800dfad
 800e004:	0800e155 	.word	0x0800e155
 800e008:	0800dfad 	.word	0x0800dfad
 800e00c:	0800e05d 	.word	0x0800e05d
 800e010:	0800dfad 	.word	0x0800dfad
 800e014:	0800dfad 	.word	0x0800dfad
 800e018:	0800e0f7 	.word	0x0800e0f7
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	1d1a      	adds	r2, r3, #4
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	602a      	str	r2, [r5, #0]
 800e024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e02c:	2301      	movs	r3, #1
 800e02e:	e09e      	b.n	800e16e <_printf_i+0x1ea>
 800e030:	6820      	ldr	r0, [r4, #0]
 800e032:	682b      	ldr	r3, [r5, #0]
 800e034:	0607      	lsls	r7, r0, #24
 800e036:	f103 0104 	add.w	r1, r3, #4
 800e03a:	6029      	str	r1, [r5, #0]
 800e03c:	d501      	bpl.n	800e042 <_printf_i+0xbe>
 800e03e:	681e      	ldr	r6, [r3, #0]
 800e040:	e003      	b.n	800e04a <_printf_i+0xc6>
 800e042:	0646      	lsls	r6, r0, #25
 800e044:	d5fb      	bpl.n	800e03e <_printf_i+0xba>
 800e046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e04a:	2e00      	cmp	r6, #0
 800e04c:	da03      	bge.n	800e056 <_printf_i+0xd2>
 800e04e:	232d      	movs	r3, #45	; 0x2d
 800e050:	4276      	negs	r6, r6
 800e052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e056:	4859      	ldr	r0, [pc, #356]	; (800e1bc <_printf_i+0x238>)
 800e058:	230a      	movs	r3, #10
 800e05a:	e012      	b.n	800e082 <_printf_i+0xfe>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	6820      	ldr	r0, [r4, #0]
 800e060:	1d19      	adds	r1, r3, #4
 800e062:	6029      	str	r1, [r5, #0]
 800e064:	0605      	lsls	r5, r0, #24
 800e066:	d501      	bpl.n	800e06c <_printf_i+0xe8>
 800e068:	681e      	ldr	r6, [r3, #0]
 800e06a:	e002      	b.n	800e072 <_printf_i+0xee>
 800e06c:	0641      	lsls	r1, r0, #25
 800e06e:	d5fb      	bpl.n	800e068 <_printf_i+0xe4>
 800e070:	881e      	ldrh	r6, [r3, #0]
 800e072:	2f6f      	cmp	r7, #111	; 0x6f
 800e074:	4851      	ldr	r0, [pc, #324]	; (800e1bc <_printf_i+0x238>)
 800e076:	bf0c      	ite	eq
 800e078:	2308      	moveq	r3, #8
 800e07a:	230a      	movne	r3, #10
 800e07c:	2100      	movs	r1, #0
 800e07e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e082:	6865      	ldr	r5, [r4, #4]
 800e084:	2d00      	cmp	r5, #0
 800e086:	60a5      	str	r5, [r4, #8]
 800e088:	bfa2      	ittt	ge
 800e08a:	6821      	ldrge	r1, [r4, #0]
 800e08c:	f021 0104 	bicge.w	r1, r1, #4
 800e090:	6021      	strge	r1, [r4, #0]
 800e092:	b90e      	cbnz	r6, 800e098 <_printf_i+0x114>
 800e094:	2d00      	cmp	r5, #0
 800e096:	d04a      	beq.n	800e12e <_printf_i+0x1aa>
 800e098:	4615      	mov	r5, r2
 800e09a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e09e:	fb03 6711 	mls	r7, r3, r1, r6
 800e0a2:	5dc7      	ldrb	r7, [r0, r7]
 800e0a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0a8:	4637      	mov	r7, r6
 800e0aa:	460e      	mov	r6, r1
 800e0ac:	42bb      	cmp	r3, r7
 800e0ae:	d9f4      	bls.n	800e09a <_printf_i+0x116>
 800e0b0:	2b08      	cmp	r3, #8
 800e0b2:	d10b      	bne.n	800e0cc <_printf_i+0x148>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	07de      	lsls	r6, r3, #31
 800e0b8:	d508      	bpl.n	800e0cc <_printf_i+0x148>
 800e0ba:	6923      	ldr	r3, [r4, #16]
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	4299      	cmp	r1, r3
 800e0c0:	bfde      	ittt	le
 800e0c2:	2330      	movle	r3, #48	; 0x30
 800e0c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e0cc:	1b52      	subs	r2, r2, r5
 800e0ce:	6122      	str	r2, [r4, #16]
 800e0d0:	464b      	mov	r3, r9
 800e0d2:	aa03      	add	r2, sp, #12
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	f8cd a000 	str.w	sl, [sp]
 800e0dc:	f7ff fee0 	bl	800dea0 <_printf_common>
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	d149      	bne.n	800e178 <_printf_i+0x1f4>
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0e8:	b004      	add	sp, #16
 800e0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	f043 0320 	orr.w	r3, r3, #32
 800e0f4:	6023      	str	r3, [r4, #0]
 800e0f6:	2778      	movs	r7, #120	; 0x78
 800e0f8:	4831      	ldr	r0, [pc, #196]	; (800e1c0 <_printf_i+0x23c>)
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e100:	061f      	lsls	r7, r3, #24
 800e102:	6829      	ldr	r1, [r5, #0]
 800e104:	f851 6b04 	ldr.w	r6, [r1], #4
 800e108:	d402      	bmi.n	800e110 <_printf_i+0x18c>
 800e10a:	065f      	lsls	r7, r3, #25
 800e10c:	bf48      	it	mi
 800e10e:	b2b6      	uxthmi	r6, r6
 800e110:	07df      	lsls	r7, r3, #31
 800e112:	6029      	str	r1, [r5, #0]
 800e114:	bf44      	itt	mi
 800e116:	f043 0320 	orrmi.w	r3, r3, #32
 800e11a:	6023      	strmi	r3, [r4, #0]
 800e11c:	b91e      	cbnz	r6, 800e126 <_printf_i+0x1a2>
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	f023 0320 	bic.w	r3, r3, #32
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	2310      	movs	r3, #16
 800e128:	e7a8      	b.n	800e07c <_printf_i+0xf8>
 800e12a:	4824      	ldr	r0, [pc, #144]	; (800e1bc <_printf_i+0x238>)
 800e12c:	e7e5      	b.n	800e0fa <_printf_i+0x176>
 800e12e:	4615      	mov	r5, r2
 800e130:	e7be      	b.n	800e0b0 <_printf_i+0x12c>
 800e132:	682b      	ldr	r3, [r5, #0]
 800e134:	6826      	ldr	r6, [r4, #0]
 800e136:	1d18      	adds	r0, r3, #4
 800e138:	6961      	ldr	r1, [r4, #20]
 800e13a:	6028      	str	r0, [r5, #0]
 800e13c:	0635      	lsls	r5, r6, #24
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	d501      	bpl.n	800e146 <_printf_i+0x1c2>
 800e142:	6019      	str	r1, [r3, #0]
 800e144:	e002      	b.n	800e14c <_printf_i+0x1c8>
 800e146:	0670      	lsls	r0, r6, #25
 800e148:	d5fb      	bpl.n	800e142 <_printf_i+0x1be>
 800e14a:	8019      	strh	r1, [r3, #0]
 800e14c:	2300      	movs	r3, #0
 800e14e:	4615      	mov	r5, r2
 800e150:	6123      	str	r3, [r4, #16]
 800e152:	e7bd      	b.n	800e0d0 <_printf_i+0x14c>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	2100      	movs	r1, #0
 800e158:	1d1a      	adds	r2, r3, #4
 800e15a:	602a      	str	r2, [r5, #0]
 800e15c:	681d      	ldr	r5, [r3, #0]
 800e15e:	6862      	ldr	r2, [r4, #4]
 800e160:	4628      	mov	r0, r5
 800e162:	f000 f895 	bl	800e290 <memchr>
 800e166:	b108      	cbz	r0, 800e16c <_printf_i+0x1e8>
 800e168:	1b40      	subs	r0, r0, r5
 800e16a:	6060      	str	r0, [r4, #4]
 800e16c:	6863      	ldr	r3, [r4, #4]
 800e16e:	6123      	str	r3, [r4, #16]
 800e170:	2300      	movs	r3, #0
 800e172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e176:	e7ab      	b.n	800e0d0 <_printf_i+0x14c>
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4649      	mov	r1, r9
 800e17e:	4640      	mov	r0, r8
 800e180:	47d0      	blx	sl
 800e182:	3001      	adds	r0, #1
 800e184:	d0ae      	beq.n	800e0e4 <_printf_i+0x160>
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	079b      	lsls	r3, r3, #30
 800e18a:	d413      	bmi.n	800e1b4 <_printf_i+0x230>
 800e18c:	68e0      	ldr	r0, [r4, #12]
 800e18e:	9b03      	ldr	r3, [sp, #12]
 800e190:	4298      	cmp	r0, r3
 800e192:	bfb8      	it	lt
 800e194:	4618      	movlt	r0, r3
 800e196:	e7a7      	b.n	800e0e8 <_printf_i+0x164>
 800e198:	2301      	movs	r3, #1
 800e19a:	4632      	mov	r2, r6
 800e19c:	4649      	mov	r1, r9
 800e19e:	4640      	mov	r0, r8
 800e1a0:	47d0      	blx	sl
 800e1a2:	3001      	adds	r0, #1
 800e1a4:	d09e      	beq.n	800e0e4 <_printf_i+0x160>
 800e1a6:	3501      	adds	r5, #1
 800e1a8:	68e3      	ldr	r3, [r4, #12]
 800e1aa:	9903      	ldr	r1, [sp, #12]
 800e1ac:	1a5b      	subs	r3, r3, r1
 800e1ae:	42ab      	cmp	r3, r5
 800e1b0:	dcf2      	bgt.n	800e198 <_printf_i+0x214>
 800e1b2:	e7eb      	b.n	800e18c <_printf_i+0x208>
 800e1b4:	2500      	movs	r5, #0
 800e1b6:	f104 0619 	add.w	r6, r4, #25
 800e1ba:	e7f5      	b.n	800e1a8 <_printf_i+0x224>
 800e1bc:	0800e71d 	.word	0x0800e71d
 800e1c0:	0800e72e 	.word	0x0800e72e

0800e1c4 <__malloc_lock>:
 800e1c4:	4801      	ldr	r0, [pc, #4]	; (800e1cc <__malloc_lock+0x8>)
 800e1c6:	f7ff bc63 	b.w	800da90 <__retarget_lock_acquire_recursive>
 800e1ca:	bf00      	nop
 800e1cc:	200008c4 	.word	0x200008c4

0800e1d0 <__malloc_unlock>:
 800e1d0:	4801      	ldr	r0, [pc, #4]	; (800e1d8 <__malloc_unlock+0x8>)
 800e1d2:	f7ff bc5e 	b.w	800da92 <__retarget_lock_release_recursive>
 800e1d6:	bf00      	nop
 800e1d8:	200008c4 	.word	0x200008c4

0800e1dc <_realloc_r>:
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	4680      	mov	r8, r0
 800e1e2:	4614      	mov	r4, r2
 800e1e4:	460e      	mov	r6, r1
 800e1e6:	b921      	cbnz	r1, 800e1f2 <_realloc_r+0x16>
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ee:	f7ff bdd7 	b.w	800dda0 <_malloc_r>
 800e1f2:	b92a      	cbnz	r2, 800e200 <_realloc_r+0x24>
 800e1f4:	4625      	mov	r5, r4
 800e1f6:	f000 f859 	bl	800e2ac <_free_r>
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e200:	f000 f8a0 	bl	800e344 <_malloc_usable_size_r>
 800e204:	4284      	cmp	r4, r0
 800e206:	4607      	mov	r7, r0
 800e208:	d802      	bhi.n	800e210 <_realloc_r+0x34>
 800e20a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e20e:	d812      	bhi.n	800e236 <_realloc_r+0x5a>
 800e210:	4621      	mov	r1, r4
 800e212:	4640      	mov	r0, r8
 800e214:	f7ff fdc4 	bl	800dda0 <_malloc_r>
 800e218:	4605      	mov	r5, r0
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d0ed      	beq.n	800e1fa <_realloc_r+0x1e>
 800e21e:	42bc      	cmp	r4, r7
 800e220:	4622      	mov	r2, r4
 800e222:	4631      	mov	r1, r6
 800e224:	bf28      	it	cs
 800e226:	463a      	movcs	r2, r7
 800e228:	f7ff fc34 	bl	800da94 <memcpy>
 800e22c:	4631      	mov	r1, r6
 800e22e:	4640      	mov	r0, r8
 800e230:	f000 f83c 	bl	800e2ac <_free_r>
 800e234:	e7e1      	b.n	800e1fa <_realloc_r+0x1e>
 800e236:	4635      	mov	r5, r6
 800e238:	e7df      	b.n	800e1fa <_realloc_r+0x1e>

0800e23a <memmove>:
 800e23a:	4288      	cmp	r0, r1
 800e23c:	b510      	push	{r4, lr}
 800e23e:	eb01 0402 	add.w	r4, r1, r2
 800e242:	d902      	bls.n	800e24a <memmove+0x10>
 800e244:	4284      	cmp	r4, r0
 800e246:	4623      	mov	r3, r4
 800e248:	d807      	bhi.n	800e25a <memmove+0x20>
 800e24a:	1e43      	subs	r3, r0, #1
 800e24c:	42a1      	cmp	r1, r4
 800e24e:	d008      	beq.n	800e262 <memmove+0x28>
 800e250:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e254:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e258:	e7f8      	b.n	800e24c <memmove+0x12>
 800e25a:	4402      	add	r2, r0
 800e25c:	4601      	mov	r1, r0
 800e25e:	428a      	cmp	r2, r1
 800e260:	d100      	bne.n	800e264 <memmove+0x2a>
 800e262:	bd10      	pop	{r4, pc}
 800e264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e268:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e26c:	e7f7      	b.n	800e25e <memmove+0x24>
	...

0800e270 <_sbrk_r>:
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	2300      	movs	r3, #0
 800e274:	4d05      	ldr	r5, [pc, #20]	; (800e28c <_sbrk_r+0x1c>)
 800e276:	4604      	mov	r4, r0
 800e278:	4608      	mov	r0, r1
 800e27a:	602b      	str	r3, [r5, #0]
 800e27c:	f7f5 ff24 	bl	80040c8 <_sbrk>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	d102      	bne.n	800e28a <_sbrk_r+0x1a>
 800e284:	682b      	ldr	r3, [r5, #0]
 800e286:	b103      	cbz	r3, 800e28a <_sbrk_r+0x1a>
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	bd38      	pop	{r3, r4, r5, pc}
 800e28c:	200008d0 	.word	0x200008d0

0800e290 <memchr>:
 800e290:	b2c9      	uxtb	r1, r1
 800e292:	4402      	add	r2, r0
 800e294:	b510      	push	{r4, lr}
 800e296:	4290      	cmp	r0, r2
 800e298:	4603      	mov	r3, r0
 800e29a:	d101      	bne.n	800e2a0 <memchr+0x10>
 800e29c:	2300      	movs	r3, #0
 800e29e:	e003      	b.n	800e2a8 <memchr+0x18>
 800e2a0:	781c      	ldrb	r4, [r3, #0]
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	428c      	cmp	r4, r1
 800e2a6:	d1f6      	bne.n	800e296 <memchr+0x6>
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	bd10      	pop	{r4, pc}

0800e2ac <_free_r>:
 800e2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d043      	beq.n	800e33a <_free_r+0x8e>
 800e2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2b6:	1f0c      	subs	r4, r1, #4
 800e2b8:	9001      	str	r0, [sp, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	bfb8      	it	lt
 800e2be:	18e4      	addlt	r4, r4, r3
 800e2c0:	f7ff ff80 	bl	800e1c4 <__malloc_lock>
 800e2c4:	4a1e      	ldr	r2, [pc, #120]	; (800e340 <_free_r+0x94>)
 800e2c6:	9801      	ldr	r0, [sp, #4]
 800e2c8:	6813      	ldr	r3, [r2, #0]
 800e2ca:	b933      	cbnz	r3, 800e2da <_free_r+0x2e>
 800e2cc:	6063      	str	r3, [r4, #4]
 800e2ce:	6014      	str	r4, [r2, #0]
 800e2d0:	b003      	add	sp, #12
 800e2d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2d6:	f7ff bf7b 	b.w	800e1d0 <__malloc_unlock>
 800e2da:	42a3      	cmp	r3, r4
 800e2dc:	d908      	bls.n	800e2f0 <_free_r+0x44>
 800e2de:	6825      	ldr	r5, [r4, #0]
 800e2e0:	1961      	adds	r1, r4, r5
 800e2e2:	428b      	cmp	r3, r1
 800e2e4:	bf01      	itttt	eq
 800e2e6:	6819      	ldreq	r1, [r3, #0]
 800e2e8:	685b      	ldreq	r3, [r3, #4]
 800e2ea:	1949      	addeq	r1, r1, r5
 800e2ec:	6021      	streq	r1, [r4, #0]
 800e2ee:	e7ed      	b.n	800e2cc <_free_r+0x20>
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	b10b      	cbz	r3, 800e2fa <_free_r+0x4e>
 800e2f6:	42a3      	cmp	r3, r4
 800e2f8:	d9fa      	bls.n	800e2f0 <_free_r+0x44>
 800e2fa:	6811      	ldr	r1, [r2, #0]
 800e2fc:	1855      	adds	r5, r2, r1
 800e2fe:	42a5      	cmp	r5, r4
 800e300:	d10b      	bne.n	800e31a <_free_r+0x6e>
 800e302:	6824      	ldr	r4, [r4, #0]
 800e304:	4421      	add	r1, r4
 800e306:	1854      	adds	r4, r2, r1
 800e308:	6011      	str	r1, [r2, #0]
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	d1e0      	bne.n	800e2d0 <_free_r+0x24>
 800e30e:	681c      	ldr	r4, [r3, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	440c      	add	r4, r1
 800e314:	6053      	str	r3, [r2, #4]
 800e316:	6014      	str	r4, [r2, #0]
 800e318:	e7da      	b.n	800e2d0 <_free_r+0x24>
 800e31a:	d902      	bls.n	800e322 <_free_r+0x76>
 800e31c:	230c      	movs	r3, #12
 800e31e:	6003      	str	r3, [r0, #0]
 800e320:	e7d6      	b.n	800e2d0 <_free_r+0x24>
 800e322:	6825      	ldr	r5, [r4, #0]
 800e324:	1961      	adds	r1, r4, r5
 800e326:	428b      	cmp	r3, r1
 800e328:	bf02      	ittt	eq
 800e32a:	6819      	ldreq	r1, [r3, #0]
 800e32c:	685b      	ldreq	r3, [r3, #4]
 800e32e:	1949      	addeq	r1, r1, r5
 800e330:	6063      	str	r3, [r4, #4]
 800e332:	bf08      	it	eq
 800e334:	6021      	streq	r1, [r4, #0]
 800e336:	6054      	str	r4, [r2, #4]
 800e338:	e7ca      	b.n	800e2d0 <_free_r+0x24>
 800e33a:	b003      	add	sp, #12
 800e33c:	bd30      	pop	{r4, r5, pc}
 800e33e:	bf00      	nop
 800e340:	200008c8 	.word	0x200008c8

0800e344 <_malloc_usable_size_r>:
 800e344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e348:	1f18      	subs	r0, r3, #4
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	bfbc      	itt	lt
 800e34e:	580b      	ldrlt	r3, [r1, r0]
 800e350:	18c0      	addlt	r0, r0, r3
 800e352:	4770      	bx	lr

0800e354 <_init>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	bf00      	nop
 800e358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35a:	bc08      	pop	{r3}
 800e35c:	469e      	mov	lr, r3
 800e35e:	4770      	bx	lr

0800e360 <_fini>:
 800e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e362:	bf00      	nop
 800e364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e366:	bc08      	pop	{r3}
 800e368:	469e      	mov	lr, r3
 800e36a:	4770      	bx	lr
