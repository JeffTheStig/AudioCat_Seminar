
STM32-SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da00  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cb  0800dc50  0800dc50  0001dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e01c  0800e01c  0001e01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e024  0800e024  0001e024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800e02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000860  20000074  0800e0a0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008d4  0800e0a0  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e063  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003ba4  00000000  00000000  0003e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c0  00000000  00000000  00041cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000123f  00000000  00000000  000434b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d2b4  00000000  00000000  000446f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000212ef  00000000  00000000  000819ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017deb3  00000000  00000000  000a2c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006a5c  00000000  00000000  00220b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  002275ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000074 	.word	0x20000074
 800026c:	00000000 	.word	0x00000000
 8000270:	0800dc38 	.word	0x0800dc38

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000078 	.word	0x20000078
 800028c:	0800dc38 	.word	0x0800dc38

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d146      	bne.n	800036e <__udivmoddi4+0x9e>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d95e      	bls.n	80003a4 <__udivmoddi4+0xd4>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	409c      	lsls	r4, r3
 80002f8:	fa20 f202 	lsr.w	r2, r0, r2
 80002fc:	4317      	orrs	r7, r2
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	0c22      	lsrs	r2, r4, #16
 8000308:	fbb7 f1fe 	udiv	r1, r7, lr
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	fb01 f005 	mul.w	r0, r1, r5
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x5e>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 8134 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	b2a4      	uxth	r4, r4
 8000332:	fbb2 f0fe 	udiv	r0, r2, lr
 8000336:	fb0e 2210 	mls	r2, lr, r0, r2
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	42a5      	cmp	r5, r4
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x88>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f100 32ff 	add.w	r2, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x86>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f200 8119 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 8000356:	4610      	mov	r0, r2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0x9a>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xb4>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80fc 	beq.w	8000570 <__udivmoddi4+0x2a0>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14c      	bne.n	8000426 <__udivmoddi4+0x156>
 800038c:	42ab      	cmp	r3, r5
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2a6>
 8000392:	4282      	cmp	r2, r0
 8000394:	f240 80ef 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000398:	4608      	mov	r0, r1
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e5      	beq.n	800036a <__udivmoddi4+0x9a>
 800039e:	e9c6 4700 	strd	r4, r7, [r6]
 80003a2:	e7e2      	b.n	800036a <__udivmoddi4+0x9a>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xd8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f382 	clz	r3, r2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	f040 809f 	bne.w	80004f0 <__udivmoddi4+0x220>
 80003b2:	1a8a      	subs	r2, r1, r2
 80003b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b8:	fa1f f78c 	uxth.w	r7, ip
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb2 f5fe 	udiv	r5, r2, lr
 80003c2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c6:	0c22      	lsrs	r2, r4, #16
 80003c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003cc:	fb07 f005 	mul.w	r0, r7, r5
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d90f      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003d4:	eb1c 0202 	adds.w	r2, ip, r2
 80003d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003dc:	bf2c      	ite	cs
 80003de:	f04f 0901 	movcs.w	r9, #1
 80003e2:	f04f 0900 	movcc.w	r9, #0
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d903      	bls.n	80003f2 <__udivmoddi4+0x122>
 80003ea:	f1b9 0f00 	cmp.w	r9, #0
 80003ee:	f000 80ce 	beq.w	800058e <__udivmoddi4+0x2be>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8000400:	fb00 f707 	mul.w	r7, r0, r7
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	42a7      	cmp	r7, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	42a7      	cmp	r7, r4
 8000418:	f200 80b3 	bhi.w	8000582 <__udivmoddi4+0x2b2>
 800041c:	4610      	mov	r0, r2
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000424:	e79c      	b.n	8000360 <__udivmoddi4+0x90>
 8000426:	f1c1 0420 	rsb	r4, r1, #32
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000430:	fa22 f704 	lsr.w	r7, r2, r4
 8000434:	40e5      	lsrs	r5, r4
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f304 	lsr.w	r3, r0, r4
 800043e:	4088      	lsls	r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fbb5 fef8 	udiv	lr, r5, r8
 8000454:	fb08 551e 	mls	r5, r8, lr, r5
 8000458:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045c:	fb0e f90c 	mul.w	r9, lr, ip
 8000460:	45a9      	cmp	r9, r5
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1b2>
 8000464:	197d      	adds	r5, r7, r5
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a9      	cmp	r9, r5
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 808d 	beq.w	800059a <__udivmoddi4+0x2ca>
 8000480:	46d6      	mov	lr, sl
 8000482:	eba5 0509 	sub.w	r5, r5, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb5 f3f8 	udiv	r3, r5, r8
 800048e:	fb08 5513 	mls	r5, r8, r3, r5
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800049a:	45ac      	cmp	ip, r5
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1dc>
 800049e:	197d      	adds	r5, r7, r5
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1da>
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d87e      	bhi.n	80005a8 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004b0:	eba5 050c 	sub.w	r5, r5, ip
 80004b4:	fba3 9802 	umull	r9, r8, r3, r2
 80004b8:	4545      	cmp	r5, r8
 80004ba:	46ce      	mov	lr, r9
 80004bc:	46c4      	mov	ip, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1f6>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x200>
 80004c2:	4548      	cmp	r0, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x200>
 80004c6:	3b01      	subs	r3, #1
 80004c8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004cc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d06f      	beq.n	80005b4 <__udivmoddi4+0x2e4>
 80004d4:	ebb0 020e 	subs.w	r2, r0, lr
 80004d8:	eb65 050c 	sbc.w	r5, r5, ip
 80004dc:	40ca      	lsrs	r2, r1
 80004de:	fa05 f404 	lsl.w	r4, r5, r4
 80004e2:	40cd      	lsrs	r5, r1
 80004e4:	4618      	mov	r0, r3
 80004e6:	4314      	orrs	r4, r2
 80004e8:	2100      	movs	r1, #0
 80004ea:	e9c6 4500 	strd	r4, r5, [r6]
 80004ee:	e73c      	b.n	800036a <__udivmoddi4+0x9a>
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	f1c3 0220 	rsb	r2, r3, #32
 80004f8:	4099      	lsls	r1, r3
 80004fa:	409c      	lsls	r4, r3
 80004fc:	40d5      	lsrs	r5, r2
 80004fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000502:	fa20 f202 	lsr.w	r2, r0, r2
 8000506:	fa1f f78c 	uxth.w	r7, ip
 800050a:	fbb5 f0fe 	udiv	r0, r5, lr
 800050e:	430a      	orrs	r2, r1
 8000510:	fb0e 5510 	mls	r5, lr, r0, r5
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f507 	mul.w	r5, r0, r7
 800051e:	428d      	cmp	r5, r1
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x270>
 8000522:	eb1c 0101 	adds.w	r1, ip, r1
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	bf2c      	ite	cs
 800052c:	f04f 0901 	movcs.w	r9, #1
 8000530:	f04f 0900 	movcc.w	r9, #0
 8000534:	428d      	cmp	r5, r1
 8000536:	d902      	bls.n	800053e <__udivmoddi4+0x26e>
 8000538:	f1b9 0f00 	cmp.w	r9, #0
 800053c:	d031      	beq.n	80005a2 <__udivmoddi4+0x2d2>
 800053e:	4640      	mov	r0, r8
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5fe 	udiv	r5, r1, lr
 8000548:	fb0e 1115 	mls	r1, lr, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f107 	mul.w	r1, r5, r7
 8000554:	4291      	cmp	r1, r2
 8000556:	d907      	bls.n	8000568 <__udivmoddi4+0x298>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x296>
 8000562:	4291      	cmp	r1, r2
 8000564:	d823      	bhi.n	80005ae <__udivmoddi4+0x2de>
 8000566:	4645      	mov	r5, r8
 8000568:	1a52      	subs	r2, r2, r1
 800056a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056e:	e726      	b.n	80003be <__udivmoddi4+0xee>
 8000570:	4631      	mov	r1, r6
 8000572:	4630      	mov	r0, r6
 8000574:	e6f9      	b.n	800036a <__udivmoddi4+0x9a>
 8000576:	1a84      	subs	r4, r0, r2
 8000578:	eb65 0203 	sbc.w	r2, r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	4617      	mov	r7, r2
 8000580:	e70b      	b.n	800039a <__udivmoddi4+0xca>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14e>
 8000588:	4464      	add	r4, ip
 800058a:	3802      	subs	r0, #2
 800058c:	e6e4      	b.n	8000358 <__udivmoddi4+0x88>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	3902      	subs	r1, #2
 8000596:	4462      	add	r2, ip
 8000598:	e6c9      	b.n	800032e <__udivmoddi4+0x5e>
 800059a:	f1ae 0e02 	sub.w	lr, lr, #2
 800059e:	443d      	add	r5, r7
 80005a0:	e76f      	b.n	8000482 <__udivmoddi4+0x1b2>
 80005a2:	3802      	subs	r0, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	e7cb      	b.n	8000540 <__udivmoddi4+0x270>
 80005a8:	3b02      	subs	r3, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e77e      	b.n	80004ac <__udivmoddi4+0x1dc>
 80005ae:	3d02      	subs	r5, #2
 80005b0:	4462      	add	r2, ip
 80005b2:	e7d9      	b.n	8000568 <__udivmoddi4+0x298>
 80005b4:	4618      	mov	r0, r3
 80005b6:	4631      	mov	r1, r6
 80005b8:	e6d7      	b.n	800036a <__udivmoddi4+0x9a>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <disk_status+0x30>)
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	4905      	ldr	r1, [pc, #20]	; (80005f0 <disk_status+0x30>)
 80005da:	440a      	add	r2, r1
 80005dc:	7a12      	ldrb	r2, [r2, #8]
 80005de:	4610      	mov	r0, r2
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000b8 	.word	0x200000b8

080005f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <disk_initialize+0x48>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d111      	bne.n	8000630 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <disk_initialize+0x48>)
 8000610:	2101      	movs	r1, #1
 8000612:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <disk_initialize+0x48>)
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <disk_initialize+0x48>)
 8000624:	440a      	add	r2, r1
 8000626:	7a12      	ldrb	r2, [r2, #8]
 8000628:	4610      	mov	r0, r2
 800062a:	4798      	blx	r3
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000b8 	.word	0x200000b8

08000640 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <disk_read+0x3c>)
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	689c      	ldr	r4, [r3, #8]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <disk_read+0x3c>)
 8000660:	4413      	add	r3, r2
 8000662:	7a18      	ldrb	r0, [r3, #8]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	47a0      	blx	r4
 800066c:	4603      	mov	r3, r0
 800066e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000670:	7dfb      	ldrb	r3, [r7, #23]
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	200000b8 	.word	0x200000b8

08000680 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <disk_write+0x3c>)
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	68dc      	ldr	r4, [r3, #12]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <disk_write+0x3c>)
 80006a0:	4413      	add	r3, r2
 80006a2:	7a18      	ldrb	r0, [r3, #8]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	47a0      	blx	r4
 80006ac:	4603      	mov	r3, r0
 80006ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	460b      	mov	r3, r1
 80006ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <disk_ioctl+0x38>)
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <disk_ioctl+0x38>)
 80006e0:	440a      	add	r2, r1
 80006e2:	7a10      	ldrb	r0, [r2, #8]
 80006e4:	79b9      	ldrb	r1, [r7, #6]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	4798      	blx	r3
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000b8 	.word	0x200000b8

080006fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000700:	4904      	ldr	r1, [pc, #16]	; (8000714 <MX_FATFS_Init+0x18>)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_FATFS_Init+0x1c>)
 8000704:	f002 fe28 	bl	8003358 <FATFS_LinkDriver>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <MX_FATFS_Init+0x20>)
 800070e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000094 	.word	0x20000094
 8000718:	20000004 	.word	0x20000004
 800071c:	20000090 	.word	0x20000090

08000720 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000724:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8000744:	e007      	b.n	8000756 <mem_cpy+0x26>
		*d++ = *s++;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	1c53      	adds	r3, r2, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	1c59      	adds	r1, r3, #1
 8000750:	6179      	str	r1, [r7, #20]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f2      	bne.n	8000746 <mem_cpy+0x16>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800076e:	b480      	push	{r7}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800077e:	e005      	b.n	800078c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	617a      	str	r2, [r7, #20]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f4      	bne.n	8000780 <mem_set+0x12>
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80007bc:	bf00      	nop
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00d      	beq.n	80007e4 <mem_cmp+0x40>
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	61fa      	str	r2, [r7, #28]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	61ba      	str	r2, [r7, #24]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	1acb      	subs	r3, r1, r3
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0ec      	beq.n	80007be <mem_cmp+0x1a>
	return r;
 80007e4:	697b      	ldr	r3, [r7, #20]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80007fc:	e002      	b.n	8000804 <chk_chr+0x12>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <chk_chr+0x26>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4293      	cmp	r3, r2
 8000816:	d1f2      	bne.n	80007fe <chk_chr+0xc>
	return *str;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e038      	b.n	80008ae <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800083c:	4930      	ldr	r1, [pc, #192]	; (8000900 <chk_lock+0xd8>)
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d029      	beq.n	80008a4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000850:	492b      	ldr	r1, [pc, #172]	; (8000900 <chk_lock+0xd8>)
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000866:	429a      	cmp	r2, r3
 8000868:	d11e      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800086a:	4925      	ldr	r1, [pc, #148]	; (8000900 <chk_lock+0xd8>)
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3304      	adds	r3, #4
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000882:	429a      	cmp	r2, r3
 8000884:	d110      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8000886:	491e      	ldr	r1, [pc, #120]	; (8000900 <chk_lock+0xd8>)
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	440b      	add	r3, r1
 8000894:	3308      	adds	r3, #8
 8000896:	881a      	ldrh	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800089e:	429a      	cmp	r2, r3
 80008a0:	d102      	bne.n	80008a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80008a2:	e007      	b.n	80008b4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d9c3      	bls.n	800083c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d109      	bne.n	80008ce <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <chk_lock+0x9e>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d101      	bne.n	80008ca <chk_lock+0xa2>
 80008c6:	2300      	movs	r3, #0
 80008c8:	e013      	b.n	80008f2 <chk_lock+0xca>
 80008ca:	2312      	movs	r3, #18
 80008cc:	e011      	b.n	80008f2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <chk_lock+0xc4>
 80008d4:	490a      	ldr	r1, [pc, #40]	; (8000900 <chk_lock+0xd8>)
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	330a      	adds	r3, #10
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ea:	d101      	bne.n	80008f0 <chk_lock+0xc8>
 80008ec:	2310      	movs	r3, #16
 80008ee:	e000      	b.n	80008f2 <chk_lock+0xca>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200000a0 	.word	0x200000a0

08000904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	e002      	b.n	8000916 <enq_lock+0x12>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d809      	bhi.n	8000930 <enq_lock+0x2c>
 800091c:	490a      	ldr	r1, [pc, #40]	; (8000948 <enq_lock+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ef      	bne.n	8000910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200000a0 	.word	0x200000a0

0800094c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e02b      	b.n	80009b4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800095c:	4956      	ldr	r1, [pc, #344]	; (8000ab8 <inc_lock+0x16c>)
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4613      	mov	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000972:	429a      	cmp	r2, r3
 8000974:	d11b      	bne.n	80009ae <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8000976:	4950      	ldr	r1, [pc, #320]	; (8000ab8 <inc_lock+0x16c>)
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	3304      	adds	r3, #4
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800098e:	429a      	cmp	r2, r3
 8000990:	d10d      	bne.n	80009ae <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8000992:	4949      	ldr	r1, [pc, #292]	; (8000ab8 <inc_lock+0x16c>)
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3308      	adds	r3, #8
 80009a2:	881a      	ldrh	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d006      	beq.n	80009bc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d9d0      	bls.n	800095c <inc_lock+0x10>
 80009ba:	e000      	b.n	80009be <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80009bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d145      	bne.n	8000a50 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e002      	b.n	80009d0 <inc_lock+0x84>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3301      	adds	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d809      	bhi.n	80009ea <inc_lock+0x9e>
 80009d6:	4938      	ldr	r1, [pc, #224]	; (8000ab8 <inc_lock+0x16c>)
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1ef      	bne.n	80009ca <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d101      	bne.n	80009f4 <inc_lock+0xa8>
 80009f0:	2300      	movs	r3, #0
 80009f2:	e05a      	b.n	8000aaa <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <inc_lock+0x16c>)
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4403      	add	r3, r0
 8000a08:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <inc_lock+0x16c>)
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4403      	add	r3, r0
 8000a1e:	3304      	adds	r3, #4
 8000a20:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8000a28:	4923      	ldr	r1, [pc, #140]	; (8000ab8 <inc_lock+0x16c>)
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3308      	adds	r3, #8
 8000a38:	4602      	mov	r2, r0
 8000a3a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8000a3c:	491e      	ldr	r1, [pc, #120]	; (8000ab8 <inc_lock+0x16c>)
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	330a      	adds	r3, #10
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00c      	beq.n	8000a70 <inc_lock+0x124>
 8000a56:	4918      	ldr	r1, [pc, #96]	; (8000ab8 <inc_lock+0x16c>)
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	330a      	adds	r3, #10
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <inc_lock+0x124>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e01c      	b.n	8000aaa <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <inc_lock+0x142>
 8000a76:	4910      	ldr	r1, [pc, #64]	; (8000ab8 <inc_lock+0x16c>)
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	330a      	adds	r3, #10
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	e001      	b.n	8000a92 <inc_lock+0x146>
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <inc_lock+0x16c>)
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4403      	add	r3, r0
 8000aa0:	330a      	adds	r3, #10
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000a0 	.word	0x200000a0

08000abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d82e      	bhi.n	8000b2e <dec_lock+0x72>
		n = Files[i].ctr;
 8000ad0:	491b      	ldr	r1, [pc, #108]	; (8000b40 <dec_lock+0x84>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	330a      	adds	r3, #10
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aea:	d101      	bne.n	8000af0 <dec_lock+0x34>
 8000aec:	2300      	movs	r3, #0
 8000aee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <dec_lock+0x40>
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8000afc:	4910      	ldr	r1, [pc, #64]	; (8000b40 <dec_lock+0x84>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	330a      	adds	r3, #10
 8000b0c:	89fa      	ldrh	r2, [r7, #14]
 8000b0e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <dec_lock+0x6c>
 8000b16:	490a      	ldr	r1, [pc, #40]	; (8000b40 <dec_lock+0x84>)
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	737b      	strb	r3, [r7, #13]
 8000b2c:	e001      	b.n	8000b32 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8000b2e:	2302      	movs	r3, #2
 8000b30:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e016      	b.n	8000b80 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8000b52:	4910      	ldr	r1, [pc, #64]	; (8000b94 <clear_lock+0x50>)
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d108      	bne.n	8000b7a <clear_lock+0x36>
 8000b68:	490a      	ldr	r1, [pc, #40]	; (8000b94 <clear_lock+0x50>)
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d9e5      	bls.n	8000b52 <clear_lock+0xe>
	}
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200000a0 	.word	0x200000a0

08000b98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d038      	beq.n	8000c20 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000bb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	f7ff fd5d 	bl	8000680 <disk_write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e026      	b.n	8000c20 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d218      	bcs.n	8000c20 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	e010      	b.n	8000c1a <sync_window+0x82>
					wsect += fs->fsize;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f7ff fd36 	bl	8000680 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d8eb      	bhi.n	8000bf8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d01b      	beq.n	8000c7c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffa7 	bl	8000b98 <sync_window>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d113      	bne.n	8000c7c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	f7ff fcee 	bl	8000640 <disk_read>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff82 	bl	8000b98 <sync_window>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 809b 	bne.w	8000dd6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	f040 8088 	bne.w	8000dbc <sync_fs+0x136>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 8082 	bne.w	8000dbc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd54 	bl	800076e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2255      	movs	r2, #85	; 0x55
 8000cca:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	22aa      	movs	r2, #170	; 0xaa
 8000cd2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2252      	movs	r2, #82	; 0x52
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2252      	movs	r2, #82	; 0x52
 8000ce0:	705a      	strb	r2, [r3, #1]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2261      	movs	r2, #97	; 0x61
 8000ce6:	709a      	strb	r2, [r3, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2241      	movs	r2, #65	; 0x41
 8000cec:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2272      	movs	r2, #114	; 0x72
 8000cf2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2272      	movs	r2, #114	; 0x72
 8000cfa:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2241      	movs	r2, #65	; 0x41
 8000d02:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2261      	movs	r2, #97	; 0x61
 8000d0a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000d46:	0e1b      	lsrs	r3, r3, #24
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d88:	0e1b      	lsrs	r3, r3, #24
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8000dae:	2301      	movs	r3, #1
 8000db0:	f7ff fc66 	bl	8000680 <disk_write>
			fs->fsi_flag = 0;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc7a 	bl	80006c0 <disk_ioctl>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3b02      	subs	r3, #2
 8000dee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000df6:	3b02      	subs	r3, #2
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d301      	bcc.n	8000e02 <clust2sect+0x22>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e00a      	b.n	8000e18 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000e08:	461a      	mov	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	fb03 f202 	mul.w	r2, r3, r2
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000e16:	4413      	add	r3, r2
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d905      	bls.n	8000e40 <get_fat+0x1c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d302      	bcc.n	8000e46 <get_fat+0x22>
		val = 1;	/* Internal error */
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e0a3      	b.n	8000f8e <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d068      	beq.n	8000f28 <get_fat+0x104>
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	f300 808f 	bgt.w	8000f7a <get_fat+0x156>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d002      	beq.n	8000e66 <get_fat+0x42>
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d040      	beq.n	8000ee6 <get_fat+0xc2>
 8000e64:	e089      	b.n	8000f7a <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	0a5b      	lsrs	r3, r3, #9
 8000e7e:	4413      	add	r3, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fed1 	bl	8000c2a <move_window>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d178      	bne.n	8000f80 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff febc 	bl	8000c2a <move_window>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d165      	bne.n	8000f84 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <get_fat+0xb8>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	e002      	b.n	8000ee2 <get_fat+0xbe>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee2:	617b      	str	r3, [r7, #20]
			break;
 8000ee4:	e053      	b.n	8000f8e <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fe98 	bl	8000c2a <move_window>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d143      	bne.n	8000f88 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	617b      	str	r3, [r7, #20]
			break;
 8000f26:	e032      	b.n	8000f8e <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	09db      	lsrs	r3, r3, #7
 8000f32:	4413      	add	r3, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe77 	bl	8000c2a <move_window>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d124      	bne.n	8000f8c <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	3303      	adds	r3, #3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	061a      	lsls	r2, r3, #24
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	041b      	lsls	r3, r3, #16
 8000f60:	4313      	orrs	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	3201      	adds	r2, #1
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	0212      	lsls	r2, r2, #8
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f76:	617b      	str	r3, [r7, #20]
			break;
 8000f78:	e009      	b.n	8000f8e <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e006      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000f80:	bf00      	nop
 8000f82:	e004      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000f84:	bf00      	nop
 8000f86:	e002      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000f8c:	bf00      	nop
		}
	}

	return val;
 8000f8e:	697b      	ldr	r3, [r7, #20]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d905      	bls.n	8000fb6 <put_fat+0x1e>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d302      	bcc.n	8000fbc <put_fat+0x24>
		res = FR_INT_ERR;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	e0f6      	b.n	80011aa <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	f000 809e 	beq.w	8001104 <put_fat+0x16c>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	f300 80e4 	bgt.w	8001196 <put_fat+0x1fe>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <put_fat+0x40>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d06f      	beq.n	80010b6 <put_fat+0x11e>
 8000fd6:	e0de      	b.n	8001196 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	0a5b      	lsrs	r3, r3, #9
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fe18 	bl	8000c2a <move_window>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 80cb 	bne.w	800119c <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	617a      	str	r2, [r7, #20]
 800100c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00d      	beq.n	800103c <put_fat+0xa4>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	b25a      	sxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	e001      	b.n	8001040 <put_fat+0xa8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	0a5b      	lsrs	r3, r3, #9
 8001056:	4413      	add	r3, r2
 8001058:	4619      	mov	r1, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fde5 	bl	8000c2a <move_window>
 8001060:	4603      	mov	r3, r0
 8001062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001064:	7ffb      	ldrb	r3, [r7, #31]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 809a 	bne.w	80011a0 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <put_fat+0xf2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	b2db      	uxtb	r3, r3
 8001088:	e00e      	b.n	80010a8 <put_fat+0x110>
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f023 030f 	bic.w	r3, r3, #15
 8001094:	b25a      	sxtb	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80010b4:	e079      	b.n	80011aa <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	4413      	add	r3, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fdb0 	bl	8000c2a <move_window>
 80010ca:	4603      	mov	r3, r0
 80010cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d167      	bne.n	80011a4 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8001102:	e052      	b.n	80011aa <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	09db      	lsrs	r3, r3, #7
 800110e:	4413      	add	r3, r2
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff fd89 	bl	8000c2a <move_window>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d142      	bne.n	80011a8 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	3303      	adds	r3, #3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	061a      	lsls	r2, r3, #24
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	3302      	adds	r3, #2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	4313      	orrs	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	3201      	adds	r2, #1
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	0212      	lsls	r2, r2, #8
 800114a:	4313      	orrs	r3, r2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	4313      	orrs	r3, r2
 8001152:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b29b      	uxth	r3, r3
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29a      	uxth	r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	3301      	adds	r3, #1
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0c1a      	lsrs	r2, r3, #16
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3302      	adds	r3, #2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	0e1a      	lsrs	r2, r3, #24
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	3303      	adds	r3, #3
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8001194:	e009      	b.n	80011aa <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8001196:	2302      	movs	r3, #2
 8001198:	77fb      	strb	r3, [r7, #31]
 800119a:	e006      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 800119c:	bf00      	nop
 800119e:	e004      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a0:	bf00      	nop
 80011a2:	e002      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <put_fat+0x212>
			if (res != FR_OK) break;
 80011a8:	bf00      	nop
		}
	}

	return res;
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d905      	bls.n	80011d0 <remove_chain+0x1c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d302      	bcc.n	80011d6 <remove_chain+0x22>
		res = FR_INT_ERR;
 80011d0:	2302      	movs	r3, #2
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e043      	b.n	800125e <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80011da:	e036      	b.n	800124a <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe20 	bl	8000e24 <get_fat>
 80011e4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d035      	beq.n	8001258 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <remove_chain+0x44>
 80011f2:	2302      	movs	r3, #2
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e032      	b.n	800125e <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fe:	d102      	bne.n	8001206 <remove_chain+0x52>
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e02b      	b.n	800125e <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001206:	2200      	movs	r2, #0
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fec4 	bl	8000f98 <put_fat>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d120      	bne.n	800125c <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d00f      	beq.n	8001246 <remove_chain+0x92>
				fs->free_clust++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3c2      	bcc.n	80011dc <remove_chain+0x28>
 8001256:	e002      	b.n	800125e <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8001258:	bf00      	nop
 800125a:	e000      	b.n	800125e <remove_chain+0xaa>
			if (res != FR_OK) break;
 800125c:	bf00      	nop
		}
	}

	return res;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10f      	bne.n	8001298 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800127e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <create_chain+0x2a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	429a      	cmp	r2, r3
 8001290:	d31c      	bcc.n	80012cc <create_chain+0x64>
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e019      	b.n	80012cc <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fdc2 	bl	8000e24 <get_fat>
 80012a0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d801      	bhi.n	80012ac <create_chain+0x44>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e076      	b.n	800139a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b2:	d101      	bne.n	80012b8 <create_chain+0x50>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	e070      	b.n	800139a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d201      	bcs.n	80012c8 <create_chain+0x60>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	e068      	b.n	800139a <create_chain+0x132>
		scl = clst;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d307      	bcc.n	80012f2 <create_chain+0x8a>
			ncl = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d901      	bls.n	80012f2 <create_chain+0x8a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e053      	b.n	800139a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80012f2:	6979      	ldr	r1, [r7, #20]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fd95 	bl	8000e24 <get_fat>
 80012fa:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00e      	beq.n	8001320 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d002      	beq.n	8001310 <create_chain+0xa8>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <create_chain+0xac>
			return cs;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	e042      	b.n	800139a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1d9      	bne.n	80012d0 <create_chain+0x68>
 800131c:	2300      	movs	r3, #0
 800131e:	e03c      	b.n	800139a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8001320:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8001322:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001326:	6979      	ldr	r1, [r7, #20]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe35 	bl	8000f98 <put_fat>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <create_chain+0xe4>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe28 	bl	8000f98 <put_fat>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d11a      	bne.n	8001388 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d018      	beq.n	8001398 <create_chain+0x130>
			fs->free_clust--;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001386:	e007      	b.n	8001398 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <create_chain+0x12c>
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e000      	b.n	8001396 <create_chain+0x12e>
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80013b2:	3304      	adds	r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	0a5b      	lsrs	r3, r3, #9
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80013c0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80013c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1d1a      	adds	r2, r3, #4
 80013ce:	613a      	str	r2, [r7, #16]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <clmt_clust+0x3c>
 80013da:	2300      	movs	r3, #0
 80013dc:	e010      	b.n	8001400 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d307      	bcc.n	80013f6 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	3304      	adds	r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013f4:	e7e9      	b.n	80013ca <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80013f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4413      	add	r3, r2
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001426:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d007      	beq.n	800143e <dir_sdi+0x32>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001434:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	429a      	cmp	r2, r3
 800143c:	d301      	bcc.n	8001442 <dir_sdi+0x36>
		return FR_INT_ERR;
 800143e:	2302      	movs	r3, #2
 8001440:	e074      	b.n	800152c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <dir_sdi+0x56>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800144e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001452:	2b03      	cmp	r3, #3
 8001454:	d105      	bne.n	8001462 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800145c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001460:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800146e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001472:	461a      	mov	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4293      	cmp	r3, r2
 8001478:	d301      	bcc.n	800147e <dir_sdi+0x72>
			return FR_INT_ERR;
 800147a:	2302      	movs	r3, #2
 800147c:	e056      	b.n	800152c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001484:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e032      	b.n	80014f2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001492:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800149a:	e01e      	b.n	80014da <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fcbd 	bl	8000e24 <get_fat>
 80014aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d101      	bne.n	80014b8 <dir_sdi+0xac>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e039      	b.n	800152c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d907      	bls.n	80014ce <dir_sdi+0xc2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d301      	bcc.n	80014d2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80014ce:	2302      	movs	r3, #2
 80014d0:	e02c      	b.n	800152c <dir_sdi+0x120>
			idx -= ic;
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d2dc      	bcs.n	800149c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc78 	bl	8000de0 <clust2sect>
 80014f0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <dir_sdi+0xf8>
 8001500:	2302      	movs	r3, #2
 8001502:	e013      	b.n	800152c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	091a      	lsrs	r2, r3, #4
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	441a      	add	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	441a      	add	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <dir_next+0x26>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <dir_next+0x2a>
		return FR_NO_FILE;
 800155a:	2304      	movs	r3, #4
 800155c:	e0dd      	b.n	800171a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 80c6 	bne.w	80016f6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001588:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4293      	cmp	r3, r2
 8001592:	f0c0 80b0 	bcc.w	80016f6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8001596:	2304      	movs	r3, #4
 8001598:	e0bf      	b.n	800171a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80015a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80015a8:	3a01      	subs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80a2 	bne.w	80016f6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fc2f 	bl	8000e24 <get_fat>
 80015c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d801      	bhi.n	80015d2 <dir_next+0x9e>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e0a3      	b.n	800171a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d101      	bne.n	80015de <dir_next+0xaa>
 80015da:	2301      	movs	r3, #1
 80015dc:	e09d      	b.n	800171a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d374      	bcc.n	80016d8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <dir_next+0xc4>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e090      	b.n	800171a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f7ff fe2e 	bl	8001268 <create_chain>
 800160c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <dir_next+0xe4>
 8001614:	2307      	movs	r3, #7
 8001616:	e080      	b.n	800171a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <dir_next+0xee>
 800161e:	2302      	movs	r3, #2
 8001620:	e07b      	b.n	800171a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d101      	bne.n	800162e <dir_next+0xfa>
 800162a:	2301      	movs	r3, #1
 800162c:	e075      	b.n	800171a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff faaf 	bl	8000b98 <sync_window>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <dir_next+0x110>
 8001640:	2301      	movs	r3, #1
 8001642:	e06a      	b.n	800171a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f88c 	bl	800076e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	4610      	mov	r0, r2
 8001666:	f7ff fbbb 	bl	8000de0 <clust2sect>
 800166a:	4603      	mov	r3, r0
 800166c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e01b      	b.n	80016ae <dir_next+0x17a>
						dp->fs->wflag = 1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fa85 	bl	8000b98 <sync_window>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <dir_next+0x164>
 8001694:	2301      	movs	r3, #1
 8001696:	e040      	b.n	800171a <dir_next+0x1e6>
						dp->fs->winsect++;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800169e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80016a2:	3201      	adds	r2, #1
 80016a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	3301      	adds	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80016b8:	461a      	mov	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d3da      	bcc.n	8001676 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	1a8a      	subs	r2, r1, r2
 80016d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016e6:	6979      	ldr	r1, [r7, #20]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb79 	bl	8000de0 <clust2sect>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	441a      	add	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}

08001722 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800172c:	2100      	movs	r1, #0
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe6c 	bl	800140c <dir_sdi>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d131      	bne.n	80017a2 <dir_alloc+0x80>
		n = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f7ff fa6a 	bl	8000c2a <move_window>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11f      	bne.n	80017a0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2be5      	cmp	r3, #229	; 0xe5
 800176a:	d005      	beq.n	8001778 <dir_alloc+0x56>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3301      	adds	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d102      	bne.n	800178c <dir_alloc+0x6a>
 8001786:	e00c      	b.n	80017a2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fed0 	bl	8001534 <dir_next>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0d1      	beq.n	8001742 <dir_alloc+0x20>
 800179e:	e000      	b.n	80017a2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80017a0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d101      	bne.n	80017ac <dir_alloc+0x8a>
 80017a8:	2307      	movs	r3, #7
 80017aa:	73fb      	strb	r3, [r7, #15]
	return res;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	331b      	adds	r3, #27
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	331a      	adds	r3, #26
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d10f      	bne.n	8001804 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3315      	adds	r3, #21
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3314      	adds	r3, #20
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

	return cl;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	331a      	adds	r3, #26
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	331b      	adds	r3, #27
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	0c1a      	lsrs	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3314      	adds	r3, #20
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	b29b      	uxth	r3, r3
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3315      	adds	r3, #21
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fdce 	bl	800140c <dir_sdi>
 8001870:	4603      	mov	r3, r0
 8001872:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <dir_find+0x1e>
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	e03b      	b.n	80018f6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7ff f9cc 	bl	8000c2a <move_window>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d128      	bne.n	80018ee <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018a2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <dir_find+0x56>
 80018b0:	2304      	movs	r3, #4
 80018b2:	75fb      	strb	r3, [r7, #23]
 80018b4:	e01e      	b.n	80018f4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	330b      	adds	r3, #11
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <dir_find+0x7a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80018ca:	220b      	movs	r2, #11
 80018cc:	4619      	mov	r1, r3
 80018ce:	6938      	ldr	r0, [r7, #16]
 80018d0:	f7fe ff68 	bl	80007a4 <mem_cmp>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80018da:	2100      	movs	r1, #0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fe29 	bl	8001534 <dir_next>
 80018e2:	4603      	mov	r3, r0
 80018e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0c8      	beq.n	800187e <dir_find+0x1e>
 80018ec:	e002      	b.n	80018f4 <dir_find+0x94>
		if (res != FR_OK) break;
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <dir_find+0x94>
			break;
 80018f2:	bf00      	nop

	return res;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001906:	2101      	movs	r1, #1
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff0a 	bl	8001722 <dir_alloc>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d126      	bne.n	8001966 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f7ff f97f 	bl	8000c2a <move_window>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d117      	bne.n	8001966 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800193c:	2220      	movs	r2, #32
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe ff14 	bl	800076e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001952:	220b      	movs	r2, #11
 8001954:	4619      	mov	r1, r3
 8001956:	f7fe feeb 	bl	8000730 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e002      	b.n	8001988 <create_name+0x18>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b2f      	cmp	r3, #47	; 0x2f
 800198e:	d0f8      	beq.n	8001982 <create_name+0x12>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b5c      	cmp	r3, #92	; 0x5c
 8001996:	d0f4      	beq.n	8001982 <create_name+0x12>
	sfn = dp->fn;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800199e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80019a0:	220b      	movs	r2, #11
 80019a2:	2120      	movs	r1, #32
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7fe fee2 	bl	800076e <mem_set>
	si = i = b = 0; ni = 8;
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	2308      	movs	r3, #8
 80019b8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	617a      	str	r2, [r7, #20]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80019c8:	7fbb      	ldrb	r3, [r7, #30]
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d953      	bls.n	8001a76 <create_name+0x106>
 80019ce:	7fbb      	ldrb	r3, [r7, #30]
 80019d0:	2b2f      	cmp	r3, #47	; 0x2f
 80019d2:	d050      	beq.n	8001a76 <create_name+0x106>
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	2b5c      	cmp	r3, #92	; 0x5c
 80019d8:	d04d      	beq.n	8001a76 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80019da:	7fbb      	ldrb	r3, [r7, #30]
 80019dc:	2b2e      	cmp	r3, #46	; 0x2e
 80019de:	d003      	beq.n	80019e8 <create_name+0x78>
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d30f      	bcc.n	8001a08 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d102      	bne.n	80019f4 <create_name+0x84>
 80019ee:	7fbb      	ldrb	r3, [r7, #30]
 80019f0:	2b2e      	cmp	r3, #46	; 0x2e
 80019f2:	d001      	beq.n	80019f8 <create_name+0x88>
 80019f4:	2306      	movs	r3, #6
 80019f6:	e073      	b.n	8001ae0 <create_name+0x170>
			i = 8; ni = 11;
 80019f8:	2308      	movs	r3, #8
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	230b      	movs	r3, #11
 80019fe:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	77fb      	strb	r3, [r7, #31]
 8001a06:	e035      	b.n	8001a74 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001a08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da08      	bge.n	8001a22 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	f043 0303 	orr.w	r3, r3, #3
 8001a16:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001a18:	7fbb      	ldrb	r3, [r7, #30]
 8001a1a:	3b80      	subs	r3, #128	; 0x80
 8001a1c:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <create_name+0x178>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001a22:	7fbb      	ldrb	r3, [r7, #30]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <create_name+0x17c>)
 8001a28:	f7fe fee3 	bl	80007f2 <chk_chr>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <create_name+0xc6>
				return FR_INVALID_NAME;
 8001a32:	2306      	movs	r3, #6
 8001a34:	e054      	b.n	8001ae0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001a36:	7fbb      	ldrb	r3, [r7, #30]
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d907      	bls.n	8001a4c <create_name+0xdc>
 8001a3c:	7fbb      	ldrb	r3, [r7, #30]
 8001a3e:	2b5a      	cmp	r3, #90	; 0x5a
 8001a40:	d804      	bhi.n	8001a4c <create_name+0xdc>
				b |= 2;
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	e00c      	b.n	8001a66 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8001a4c:	7fbb      	ldrb	r3, [r7, #30]
 8001a4e:	2b60      	cmp	r3, #96	; 0x60
 8001a50:	d909      	bls.n	8001a66 <create_name+0xf6>
 8001a52:	7fbb      	ldrb	r3, [r7, #30]
 8001a54:	2b7a      	cmp	r3, #122	; 0x7a
 8001a56:	d806      	bhi.n	8001a66 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	77fb      	strb	r3, [r7, #31]
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	3b20      	subs	r3, #32
 8001a64:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	613a      	str	r2, [r7, #16]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	4413      	add	r3, r2
 8001a70:	7fba      	ldrb	r2, [r7, #30]
 8001a72:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001a74:	e7a1      	b.n	80019ba <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001a80:	7fbb      	ldrb	r3, [r7, #30]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d801      	bhi.n	8001a8a <create_name+0x11a>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e000      	b.n	8001a8c <create_name+0x11c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <create_name+0x128>
 8001a94:	2306      	movs	r3, #6
 8001a96:	e023      	b.n	8001ae0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2be5      	cmp	r3, #229	; 0xe5
 8001a9e:	d102      	bne.n	8001aa6 <create_name+0x136>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d102      	bne.n	8001ab2 <create_name+0x142>
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d103      	bne.n	8001ac4 <create_name+0x154>
 8001abc:	7fbb      	ldrb	r3, [r7, #30]
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d103      	bne.n	8001ad6 <create_name+0x166>
 8001ace:	7fbb      	ldrb	r3, [r7, #30]
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	330b      	adds	r3, #11
 8001ada:	7fba      	ldrb	r2, [r7, #30]
 8001adc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001ade:	2300      	movs	r3, #0
#endif
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0800de68 	.word	0x0800de68
 8001aec:	0800dc50 	.word	0x0800dc50

08001af0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b2f      	cmp	r3, #47	; 0x2f
 8001b00:	d003      	beq.n	8001b0a <follow_path+0x1a>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b5c      	cmp	r3, #92	; 0x5c
 8001b08:	d102      	bne.n	8001b10 <follow_path+0x20>
		path++;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	d80a      	bhi.n	8001b36 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fc72 	bl	800140c <dir_sdi>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b34:	e045      	b.n	8001bc2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff18 	bl	8001970 <create_name>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d136      	bne.n	8001bb8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe88 	bl	8001860 <dir_find>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001b5a:	7adb      	ldrb	r3, [r3, #11]
 8001b5c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d128      	bne.n	8001bbc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d123      	bne.n	8001bbc <follow_path+0xcc>
 8001b74:	2305      	movs	r3, #5
 8001b76:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8001b78:	e020      	b.n	8001bbc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11d      	bne.n	8001bc0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b8a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	330b      	adds	r3, #11
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e010      	b.n	8001bc2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe04 	bl	80017b6 <ld_clust>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001bb6:	e7be      	b.n	8001b36 <follow_path+0x46>
			if (res != FR_OK) break;
 8001bb8:	bf00      	nop
 8001bba:	e002      	b.n	8001bc2 <follow_path+0xd2>
				break;
 8001bbc:	bf00      	nop
 8001bbe:	e000      	b.n	8001bc2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001bc0:	bf00      	nop
		}
	}

	return res;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d031      	beq.n	8001c46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e002      	b.n	8001bf0 <get_ldnumber+0x24>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d903      	bls.n	8001c00 <get_ldnumber+0x34>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b3a      	cmp	r3, #58	; 0x3a
 8001bfe:	d1f4      	bne.n	8001bea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b3a      	cmp	r3, #58	; 0x3a
 8001c06:	d11c      	bne.n	8001c42 <get_ldnumber+0x76>
			tp = *path;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b30      	subs	r3, #48	; 0x30
 8001c18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d80e      	bhi.n	8001c3e <get_ldnumber+0x72>
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d10a      	bne.n	8001c3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <get_ldnumber+0x72>
					vol = (int)i;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	e002      	b.n	8001c48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8001c46:	693b      	ldr	r3, [r7, #16]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe ffd9 	bl	8000c2a <move_window>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <check_fs+0x2e>
		return 3;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04a      	b.n	8001d18 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001c88:	3301      	adds	r3, #1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <check_fs+0xcc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d001      	beq.n	8001ca6 <check_fs+0x52>
		return 2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e038      	b.n	8001d18 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3336      	adds	r3, #54	; 0x36
 8001caa:	3303      	adds	r3, #3
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	061a      	lsls	r2, r3, #24
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3336      	adds	r3, #54	; 0x36
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	3236      	adds	r2, #54	; 0x36
 8001cc0:	3201      	adds	r2, #1
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	0212      	lsls	r2, r2, #8
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <check_fs+0xd0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <check_fs+0x8a>
		return 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e01c      	b.n	8001d18 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3352      	adds	r3, #82	; 0x52
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	061a      	lsls	r2, r3, #24
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3352      	adds	r3, #82	; 0x52
 8001cec:	3302      	adds	r3, #2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	3252      	adds	r2, #82	; 0x52
 8001cf8:	3201      	adds	r2, #1
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	0212      	lsls	r2, r2, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d0c:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <check_fs+0xd0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <check_fs+0xc2>
		return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <check_fs+0xc4>

	return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	ffffaa55 	.word	0xffffaa55
 8001d24:	00544146 	.word	0x00544146

08001d28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f7ff ff45 	bl	8001bcc <get_ldnumber>
 8001d42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8001d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da01      	bge.n	8001d4e <find_volume+0x26>
 8001d4a:	230b      	movs	r3, #11
 8001d4c:	e2ac      	b.n	80022a8 <find_volume+0x580>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001d4e:	4a9e      	ldr	r2, [pc, #632]	; (8001fc8 <find_volume+0x2a0>)
 8001d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <find_volume+0x3a>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	e2a2      	b.n	80022a8 <find_volume+0x580>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d66:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01e      	beq.n	8001db0 <find_volume+0x88>
		myprintf("disk status started");/* If the volume has been mounted */
 8001d72:	4896      	ldr	r0, [pc, #600]	; (8001fcc <find_volume+0x2a4>)
 8001d74:	f001 fb38 	bl	80033e8 <myprintf>
		stat = disk_status(fs->drv);
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fc1e 	bl	80005c0 <disk_status>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001d8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <find_volume+0x84>
 8001d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8001da8:	230a      	movs	r3, #10
 8001daa:	e27d      	b.n	80022a8 <find_volume+0x580>
			return FR_OK;				/* The file system object is valid */
 8001dac:	2300      	movs	r3, #0
 8001dae:	e27b      	b.n	80022a8 <find_volume+0x580>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8001db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fc13 	bl	80005f4 <disk_initialize>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)
 8001dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <find_volume+0xbc>
//		myprintf("checking init");/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001de0:	2303      	movs	r3, #3
 8001de2:	e261      	b.n	80022a8 <find_volume+0x580>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <find_volume+0xd2>
 8001dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <find_volume+0xd2>
		return FR_WRITE_PROTECTED;
 8001df6:	230a      	movs	r3, #10
 8001df8:	e256      	b.n	80022a8 <find_volume+0x580>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8001dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e02:	f7ff ff27 	bl	8001c54 <check_fs>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8001e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d153      	bne.n	8001ebc <find_volume+0x194>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001e14:	2300      	movs	r3, #0
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
 8001e18:	e028      	b.n	8001e6c <find_volume+0x144>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8001e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001e24:	4413      	add	r3, r2
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <find_volume+0x130>
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	330b      	adds	r3, #11
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	330a      	adds	r3, #10
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	4313      	orrs	r3, r2
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	3209      	adds	r2, #9
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	3208      	adds	r2, #8
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	e000      	b.n	8001e5a <find_volume+0x132>
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3358      	adds	r3, #88	; 0x58
 8001e60:	443b      	add	r3, r7
 8001e62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e68:	3301      	adds	r3, #1
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d9d3      	bls.n	8001e1a <find_volume+0xf2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8001e72:	2300      	movs	r3, #0
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <find_volume+0x15a>
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8001e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	3358      	adds	r3, #88	; 0x58
 8001e88:	443b      	add	r3, r7
 8001e8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8001e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <find_volume+0x17a>
 8001e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e9a:	f7ff fedb 	bl	8001c54 <check_fs>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	e000      	b.n	8001ea4 <find_volume+0x17c>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8001ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <find_volume+0x194>
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d9e2      	bls.n	8001e82 <find_volume+0x15a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d101      	bne.n	8001ec8 <find_volume+0x1a0>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e1ef      	b.n	80022a8 <find_volume+0x580>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8001ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <find_volume+0x1ac>
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	e1e9      	b.n	80022a8 <find_volume+0x580>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed6:	7b1b      	ldrb	r3, [r3, #12]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	7adb      	ldrb	r3, [r3, #11]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d001      	beq.n	8001ef0 <find_volume+0x1c8>
		return FR_NO_FILESYSTEM;
 8001eec:	230d      	movs	r3, #13
 8001eee:	e1db      	b.n	80022a8 <find_volume+0x580>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	7ddb      	ldrb	r3, [r3, #23]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	7d9b      	ldrb	r3, [r3, #22]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d112      	bne.n	8001f32 <find_volume+0x20a>
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f12:	061a      	lsls	r2, r3, #24
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f20:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001f24:	0212      	lsls	r2, r2, #8
 8001f26:	4313      	orrs	r3, r2
 8001f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	7c1a      	ldrb	r2, [r3, #16]
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <find_volume+0x234>
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d001      	beq.n	8001f5c <find_volume+0x234>
		return FR_NO_FILESYSTEM;
 8001f58:	230d      	movs	r3, #13
 8001f5a:	e1a5      	b.n	80022a8 <find_volume+0x580>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001f62:	461a      	mov	r2, r3
 8001f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8001f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6e:	7b5a      	ldrb	r2, [r3, #13]
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <find_volume+0x26e>
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f86:	461a      	mov	r2, r3
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <find_volume+0x272>
		return FR_NO_FILESYSTEM;
 8001f96:	230d      	movs	r3, #13
 8001f98:	e186      	b.n	80022a8 <find_volume+0x580>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	7c9b      	ldrb	r3, [r3, #18]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa4:	7c5b      	ldrb	r3, [r3, #17]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb0:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <find_volume+0x2a8>
		return FR_NO_FILESYSTEM;
 8001fc4:	230d      	movs	r3, #13
 8001fc6:	e16f      	b.n	80022a8 <find_volume+0x580>
 8001fc8:	20000098 	.word	0x20000098
 8001fcc:	0800dc60 	.word	0x0800dc60

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	7cdb      	ldrb	r3, [r3, #19]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d112      	bne.n	8002012 <find_volume+0x2ea>
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ff2:	061a      	lsls	r2, r3, #24
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002000:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002004:	0212      	lsls	r2, r2, #8
 8002006:	4313      	orrs	r3, r2
 8002008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800200a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800200e:	4313      	orrs	r3, r2
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	7bdb      	ldrb	r3, [r3, #15]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21a      	sxth	r2, r3
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	7b9b      	ldrb	r3, [r3, #14]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <find_volume+0x308>
 800202c:	230d      	movs	r3, #13
 800202e:	e13b      	b.n	80022a8 <find_volume+0x580>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002034:	4413      	add	r3, r2
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800203c:	0912      	lsrs	r2, r2, #4
 800203e:	b292      	uxth	r2, r2
 8002040:	4413      	add	r3, r2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	429a      	cmp	r2, r3
 800204a:	d201      	bcs.n	8002050 <find_volume+0x328>
 800204c:	230d      	movs	r3, #13
 800204e:	e12b      	b.n	80022a8 <find_volume+0x580>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002058:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800205c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <find_volume+0x344>
 8002068:	230d      	movs	r3, #13
 800206a:	e11d      	b.n	80022a8 <find_volume+0x580>
	fmt = FS_FAT12;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002078:	4293      	cmp	r3, r2
 800207a:	d902      	bls.n	8002082 <find_volume+0x35a>
 800207c:	2302      	movs	r3, #2
 800207e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002088:	4293      	cmp	r3, r2
 800208a:	d902      	bls.n	8002092 <find_volume+0x36a>
 800208c:	2303      	movs	r3, #3
 800208e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80020a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a8:	441a      	add	r2, r3
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80020b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	441a      	add	r2, r3
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80020bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d121      	bne.n	8002108 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <find_volume+0x3aa>
 80020ce:	230d      	movs	r3, #13
 80020d0:	e0ea      	b.n	80022a8 <find_volume+0x580>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80020d8:	061a      	lsls	r2, r3, #24
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	4313      	orrs	r3, r2
 80020ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80020f4:	431a      	orrs	r2, r3
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
 8002106:	e025      	b.n	8002154 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <find_volume+0x3ee>
 8002112:	230d      	movs	r3, #13
 8002114:	e0c8      	b.n	80022a8 <find_volume+0x580>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800211c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211e:	441a      	add	r2, r3
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800212a:	2b02      	cmp	r3, #2
 800212c:	d104      	bne.n	8002138 <find_volume+0x410>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	e00c      	b.n	8002152 <find_volume+0x42a>
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	085a      	lsrs	r2, r3, #1
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002160:	0a5b      	lsrs	r3, r3, #9
 8002162:	429a      	cmp	r2, r3
 8002164:	d201      	bcs.n	800216a <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8002166:	230d      	movs	r3, #13
 8002168:	e09e      	b.n	80022a8 <find_volume+0x580>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800218c:	2b03      	cmp	r3, #3
 800218e:	d177      	bne.n	8002280 <find_volume+0x558>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d16a      	bne.n	8002280 <find_volume+0x558>
		&& move_window(fs, bsect + 1) == FR_OK)
 80021aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ac:	3301      	adds	r3, #1
 80021ae:	4619      	mov	r1, r3
 80021b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021b2:	f7fe fd3a 	bl	8000c2a <move_window>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d161      	bne.n	8002280 <find_volume+0x558>
	{
		fs->fsi_flag = 0;
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <find_volume+0x588>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d14f      	bne.n	8002280 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	061a      	lsls	r2, r3, #24
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	789b      	ldrb	r3, [r3, #2]
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	4313      	orrs	r3, r2
 80021ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f0:	7852      	ldrb	r2, [r2, #1]
 80021f2:	0212      	lsls	r2, r2, #8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <find_volume+0x58c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d13e      	bne.n	8002280 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8002208:	061a      	lsls	r2, r3, #24
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	4313      	orrs	r3, r2
 8002214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002216:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002220:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8002224:	4313      	orrs	r3, r2
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <find_volume+0x590>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d129      	bne.n	8002280 <find_volume+0x558>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8002232:	061a      	lsls	r2, r3, #24
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	4313      	orrs	r3, r2
 800223e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002240:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8002244:	0212      	lsls	r2, r2, #8
 8002246:	4313      	orrs	r3, r2
 8002248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800224e:	431a      	orrs	r2, r3
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800225c:	061a      	lsls	r2, r3, #24
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	4313      	orrs	r3, r2
 8002268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800226a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800226e:	0212      	lsls	r2, r2, #8
 8002270:	4313      	orrs	r3, r2
 8002272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002274:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8002278:	431a      	orrs	r2, r3
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <find_volume+0x594>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <find_volume+0x594>)
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <find_volume+0x594>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80022a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022a2:	f7fe fc4f 	bl	8000b44 <clear_lock>
#endif

	return FR_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3758      	adds	r7, #88	; 0x58
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	ffffaa55 	.word	0xffffaa55
 80022b4:	41615252 	.word	0x41615252
 80022b8:	61417272 	.word	0x61417272
 80022bc:	2000009c 	.word	0x2000009c

080022c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d022      	beq.n	8002318 <validate+0x58>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <validate+0x58>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <validate+0x58>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d10c      	bne.n	8002318 <validate+0x58>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002304:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f959 	bl	80005c0 <disk_status>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8002318:	2309      	movs	r3, #9
 800231a:	e000      	b.n	800231e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc44 	bl	8001bcc <get_ldnumber>
 8002344:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da01      	bge.n	8002350 <f_mount+0x28>
 800234c:	230b      	movs	r3, #11
 800234e:	e031      	b.n	80023b4 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <f_mount+0x94>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	61bb      	str	r3, [r7, #24]
	myprintf("inside cfs (%i)", cfs);
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <f_mount+0x98>)
 800235e:	f001 f843 	bl	80033e8 <myprintf>
	if (cfs) {
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <f_mount+0x4e>

#if _FS_LOCK
		clear_lock(cfs);
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f7fe fbeb 	bl	8000b44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <f_mount+0x94>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <f_mount+0x72>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <f_mount+0x76>
 800239a:	2300      	movs	r3, #0
 800239c:	e00a      	b.n	80023b4 <f_mount+0x8c>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2200      	movs	r2, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fcbd 	bl	8001d28 <find_volume>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000098 	.word	0x20000098
 80023c0:	0800dc74 	.word	0x0800dc74

080023c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023d0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023da:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80023de:	6019      	str	r1, [r3, #0]
 80023e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023e4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80023e8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80023ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023ee:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <f_open+0x38>
 80023f8:	2309      	movs	r3, #9
 80023fa:	e257      	b.n	80028ac <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 80023fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002400:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800240c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002410:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002414:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002418:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8002424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002428:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	f107 0108 	add.w	r1, r7, #8
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fc71 	bl	8001d28 <find_volume>
 8002446:	4603      	mov	r3, r0
 8002448:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800244c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 8229 	bne.w	80028a8 <f_open+0x4e4>
		INIT_BUF(dj);
 8002456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800245a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800245e:	f107 0214 	add.w	r2, r7, #20
 8002462:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8002466:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800246a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f107 0320 	add.w	r3, r7, #32
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb3a 	bl	8001af0 <follow_path>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8002482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002486:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800248a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800248e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002492:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800249a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <f_open+0xe6>
				res = FR_INVALID_NAME;
 80024a2:	2306      	movs	r3, #6
 80024a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80024a8:	e015      	b.n	80024d6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80024aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80024ae:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f9ac 	bl	8000828 <chk_lock>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80024d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80024da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f003 031c 	and.w	r3, r3, #28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80e6 	beq.w	80026b6 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80024ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d027      	beq.n	8002542 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80024f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d10e      	bne.n	8002518 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80024fa:	f7fe fa03 	bl	8000904 <enq_lock>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <f_open+0x14e>
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f9f8 	bl	80018fe <dir_register>
 800250e:	4603      	mov	r3, r0
 8002510:	e000      	b.n	8002514 <f_open+0x150>
 8002512:	2312      	movs	r3, #18
 8002514:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800251c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002520:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002524:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8002530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002534:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800253c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002540:	e017      	b.n	8002572 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002542:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002546:	330b      	adds	r3, #11
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f003 0311 	and.w	r3, r3, #17
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <f_open+0x196>
					res = FR_DENIED;
 8002552:	2307      	movs	r3, #7
 8002554:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002558:	e00b      	b.n	8002572 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800255a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800255e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <f_open+0x1ae>
						res = FR_EXIST;
 800256c:	2308      	movs	r3, #8
 800256e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002572:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80c1 	bne.w	80026fe <f_open+0x33a>
 800257c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002580:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b7 	beq.w	80026fe <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8002590:	f7fe f8c6 	bl	8000720 <get_fattime>
 8002594:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8002598:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800259c:	330e      	adds	r3, #14
 800259e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025b4:	330f      	adds	r3, #15
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025be:	0c1a      	lsrs	r2, r3, #16
 80025c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025c4:	3310      	adds	r3, #16
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025ce:	0e1a      	lsrs	r2, r3, #24
 80025d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025d4:	3311      	adds	r3, #17
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80025da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025de:	330b      	adds	r3, #11
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80025e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025e8:	331c      	adds	r3, #28
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025f2:	331d      	adds	r3, #29
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80025fc:	331e      	adds	r3, #30
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002606:	331f      	adds	r3, #31
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800260c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002610:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002618:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f8ca 	bl	80017b6 <ld_clust>
 8002622:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8002626:	2100      	movs	r1, #0
 8002628:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800262c:	f7ff f8f1 	bl	8001812 <st_clust>
				dj.fs->wflag = 1;
 8002630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002634:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8002642:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002646:	2b00      	cmp	r3, #0
 8002648:	d059      	beq.n	80026fe <f_open+0x33a>
					dw = dj.fs->winsect;
 800264a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800264e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002652:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002656:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800265a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800265e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002662:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800266a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fda0 	bl	80011b4 <remove_chain>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800267a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d13d      	bne.n	80026fe <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8002682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002686:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800268a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8002692:	3a01      	subs	r2, #1
 8002694:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8002698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800269c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80026a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fabe 	bl	8000c2a <move_window>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80026b4:	e023      	b.n	80026fe <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80026b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11f      	bne.n	80026fe <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80026be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80026c2:	330b      	adds	r3, #11
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <f_open+0x312>
					res = FR_NO_FILE;
 80026ce:	2304      	movs	r3, #4
 80026d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80026d4:	e013      	b.n	80026fe <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80026d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80026da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <f_open+0x33a>
 80026e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80026ec:	330b      	adds	r3, #11
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <f_open+0x33a>
						res = FR_DENIED;
 80026f8:	2307      	movs	r3, #7
 80026fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80026fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002702:	2b00      	cmp	r3, #0
 8002704:	d153      	bne.n	80027ae <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800270a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8002718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800271c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002720:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002724:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8002730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002734:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002738:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800273c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002744:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800274e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002752:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800275c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002764:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe f8e3 	bl	800094c <inc_lock>
 8002786:	4602      	mov	r2, r0
 8002788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800278c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8002796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800279a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <f_open+0x3ea>
 80027a8:	2302      	movs	r3, #2
 80027aa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80027ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d178      	bne.n	80028a8 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80027b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80027c4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80027ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80027de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80027e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ea:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe ffe1 	bl	80017b6 <ld_clust>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8002804:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002808:	331f      	adds	r3, #31
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061a      	lsls	r2, r3, #24
 800280e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002812:	331e      	adds	r3, #30
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800281e:	321d      	adds	r2, #29
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800282a:	321c      	adds	r2, #28
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002834:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800283e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002842:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800284e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002852:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800285e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002862:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800286e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002872:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002876:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800287a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800287e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8002888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800288c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002896:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800289a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800289e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80028a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08c      	sub	sp, #48	; 0x30
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fcf6 	bl	80022c0 <validate>
 80028d4:	4603      	mov	r3, r0
 80028d6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <f_read+0x2c>
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	e150      	b.n	8002b84 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80028f2:	e147      	b.n	8002b84 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8002902:	2307      	movs	r3, #7
 8002904:	e13e      	b.n	8002b84 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	429a      	cmp	r2, r3
 800291c:	f240 812d 	bls.w	8002b7a <f_read+0x2c4>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8002924:	e129      	b.n	8002b7a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80f2 	bne.w	8002b1a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800293c:	0a5b      	lsrs	r3, r3, #9
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002946:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800294a:	3b01      	subs	r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4013      	ands	r3, r2
 8002950:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d139      	bne.n	80029cc <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296a:	e018      	b.n	800299e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800297c:	4619      	mov	r1, r3
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7fe fd0f 	bl	80013a2 <clmt_clust>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002986:	e00a      	b.n	800299e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7fe fa44 	bl	8000e24 <get_fat>
 800299c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d805      	bhi.n	80029b0 <f_read+0xfa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0e9      	b.n	8002b84 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d105      	bne.n	80029c4 <f_read+0x10e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0df      	b.n	8002b84 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fe fa00 	bl	8000de0 <clust2sect>
 80029e0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <f_read+0x13e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0c7      	b.n	8002b84 <f_read+0x2ce>
			sect += csect;
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d046      	beq.n	8002a96 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8002a08:	7dfa      	ldrb	r2, [r7, #23]
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	4413      	add	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002a14:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d908      	bls.n	8002a2e <f_read+0x178>
					cc = fp->fs->csize - csect;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002a26:	461a      	mov	r2, r3
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a34:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	f7fd fdff 	bl	8000640 <disk_read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002a50:	2301      	movs	r3, #1
 8002a52:	e097      	b.n	8002b84 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d015      	beq.n	8002a8e <f_read+0x1d8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90d      	bls.n	8002a8e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4413      	add	r3, r2
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fe51 	bl	8000730 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	025b      	lsls	r3, r3, #9
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8002a94:	e05b      	b.n	8002b4e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d037      	beq.n	8002b12 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01d      	beq.n	8002aec <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f7fd fddc 	bl	8000680 <disk_write>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e054      	b.n	8002b84 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002af2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	2301      	movs	r3, #1
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	f7fd fda0 	bl	8000640 <disk_read>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e038      	b.n	8002b84 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8002b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <f_read+0x280>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b46:	4619      	mov	r1, r3
 8002b48:	6a38      	ldr	r0, [r7, #32]
 8002b4a:	f7fd fdf1 	bl	8000730 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	441a      	add	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f aed2 	bne.w	8002926 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fb8b 	bl	80022c0 <validate>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <f_write+0x2c>
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	e192      	b.n	8002ede <f_write+0x352>
	if (fp->err)							/* Check error */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002bc8:	e189      	b.n	8002ede <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8002bd8:	2307      	movs	r3, #7
 8002bda:	e180      	b.n	8002ede <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f080 8158 	bcs.w	8002ea2 <f_write+0x316>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8002bf6:	e154      	b.n	8002ea2 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8114 	bne.w	8002e30 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c18:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8002c24:	7dbb      	ldrb	r3, [r7, #22]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d151      	bne.n	8002cce <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d121      	bne.n	8002c86 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fb0c 	bl	8001268 <create_chain>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24
 8002c52:	e018      	b.n	8002c86 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7fe fb9b 	bl	80013a2 <clmt_clust>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24
 8002c6e:	e00a      	b.n	8002c86 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7fe faf2 	bl	8001268 <create_chain>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 810f 	beq.w	8002eac <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <f_write+0x114>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e11e      	b.n	8002ede <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d105      	bne.n	8002cb4 <f_write+0x128>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e114      	b.n	8002ede <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <f_write+0x142>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01d      	beq.n	8002d18 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f7fd fcc6 	bl	8000680 <disk_write>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0eb      	b.n	8002ede <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7fe f85a 	bl	8000de0 <clust2sect>
 8002d2c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <f_write+0x1b4>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0ce      	b.n	8002ede <f_write+0x352>
			sect += csect;
 8002d40:	7dbb      	ldrb	r3, [r7, #22]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0a5b      	lsrs	r3, r3, #9
 8002d4c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d048      	beq.n	8002de6 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8002d54:	7dba      	ldrb	r2, [r7, #22]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002d60:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d908      	bls.n	8002d7a <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d6e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002d72:	461a      	mov	r2, r3
 8002d74:	7dbb      	ldrb	r3, [r7, #22]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d80:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	69b9      	ldr	r1, [r7, #24]
 8002d8a:	f7fd fc79 	bl	8000680 <disk_write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e09e      	b.n	8002ede <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d916      	bls.n	8002dde <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd fcb2 	bl	8000730 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	623b      	str	r3, [r7, #32]
				continue;
 8002de4:	e047      	b.n	8002e76 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d01a      	beq.n	8002e28 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d212      	bcs.n	8002e28 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e08:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	2301      	movs	r3, #1
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	f7fd fc15 	bl	8000640 <disk_read>
 8002e16:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002e24:	2301      	movs	r3, #1
 8002e26:	e05a      	b.n	8002ede <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e3e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d901      	bls.n	8002e4c <f_write+0x2c0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc66 	bl	8000730 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	441a      	add	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	441a      	add	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f aea7 	bne.w	8002bf8 <f_write+0x6c>
 8002eaa:	e000      	b.n	8002eae <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002eac:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d905      	bls.n	8002eca <f_write+0x33e>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002ed0:	f043 0320 	orr.w	r3, r3, #32
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff f9e6 	bl	80022c0 <validate>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80a8 	bne.w	8003050 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a0 	beq.w	8003050 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d019      	beq.n	8002f52 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002f30:	2301      	movs	r3, #1
 8002f32:	f7fd fba5 	bl	8000680 <disk_write>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e088      	b.n	8003052 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f7fd fe62 	bl	8000c2a <move_window>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d16f      	bne.n	8003050 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002f76:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	330b      	adds	r3, #11
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	330b      	adds	r3, #11
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	331c      	adds	r3, #28
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	331d      	adds	r3, #29
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fb2:	0c1a      	lsrs	r2, r3, #16
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	331e      	adds	r3, #30
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fc2:	0e1a      	lsrs	r2, r3, #24
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	331f      	adds	r3, #31
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6938      	ldr	r0, [r7, #16]
 8002fd6:	f7fe fc1c 	bl	8001812 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8002fda:	f7fd fba1 	bl	8000720 <get_fattime>
 8002fde:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3316      	adds	r3, #22
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3317      	adds	r3, #23
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0c1a      	lsrs	r2, r3, #16
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3318      	adds	r3, #24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0e1a      	lsrs	r2, r3, #24
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3319      	adds	r3, #25
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3312      	adds	r3, #18
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3313      	adds	r3, #19
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003028:	f023 0320 	bic.w	r3, r3, #32
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fe1d 	bl	8000c86 <sync_fs>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8003050:	7dfb      	ldrb	r3, [r7, #23]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff3f 	bl	8002ee6 <f_sync>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff f924 	bl	80022c0 <validate>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fd17 	bl	8000abc <dec_lock>
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b08e      	sub	sp, #56	; 0x38
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	2200      	movs	r2, #0
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe32 	bl	8001d28 <find_volume>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80030d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 80af 	bne.w	8003238 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80030e6:	3b02      	subs	r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d805      	bhi.n	80030f8 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e09f      	b.n	8003238 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80030fe:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8003104:	7efb      	ldrb	r3, [r7, #27]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d125      	bne.n	8003156 <f_getfree+0xac>
				clst = 2;
 800310a:	2302      	movs	r3, #2
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800310e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003110:	69f8      	ldr	r0, [r7, #28]
 8003112:	f7fd fe87 	bl	8000e24 <get_fat>
 8003116:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <f_getfree+0x7e>
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003126:	e077      	b.n	8003218 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d103      	bne.n	8003136 <f_getfree+0x8c>
 800312e:	2302      	movs	r3, #2
 8003130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003134:	e070      	b.n	8003218 <f_getfree+0x16e>
					if (stat == 0) n++;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <f_getfree+0x98>
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	3301      	adds	r3, #1
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	3301      	adds	r3, #1
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d3dc      	bcc.n	800310e <f_getfree+0x64>
 8003154:	e060      	b.n	8003218 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d112      	bne.n	800319a <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	62ba      	str	r2, [r7, #40]	; 0x28
 800317a:	4619      	mov	r1, r3
 800317c:	69f8      	ldr	r0, [r7, #28]
 800317e:	f7fd fd54 	bl	8000c2a <move_window>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8003188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800318c:	2b00      	cmp	r3, #0
 800318e:	d142      	bne.n	8003216 <f_getfree+0x16c>
						p = fs->win.d8;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800319a:	7efb      	ldrb	r3, [r7, #27]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d115      	bne.n	80031cc <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	3301      	adds	r3, #1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <f_getfree+0x114>
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	3301      	adds	r3, #1
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	3302      	adds	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3b02      	subs	r3, #2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e01d      	b.n	8003208 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	3303      	adds	r3, #3
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	061a      	lsls	r2, r3, #24
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	4313      	orrs	r3, r2
 80031de:	6a3a      	ldr	r2, [r7, #32]
 80031e0:	3201      	adds	r2, #1
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	0212      	lsls	r2, r2, #8
 80031e6:	4313      	orrs	r3, r2
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <f_getfree+0x152>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	3301      	adds	r3, #1
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	3304      	adds	r3, #4
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3b04      	subs	r3, #4
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	3b01      	subs	r3, #1
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ac      	bne.n	800316e <f_getfree+0xc4>
 8003214:	e000      	b.n	8003218 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8003216:	bf00      	nop
			}
			fs->free_clust = n;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8003238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800323c:	4618      	mov	r0, r3
 800323e:	3738      	adds	r7, #56	; 0x38
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8003258:	e01b      	b.n	8003292 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	f107 0114 	add.w	r1, r7, #20
 8003262:	2201      	movs	r2, #1
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fb26 	bl	80028b6 <f_read>
		if (rc != 1) break;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d116      	bne.n	800329e <f_gets+0x5a>
		c = s[0];
 8003270:	7d3b      	ldrb	r3, [r7, #20]
 8003272:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b0d      	cmp	r3, #13
 8003278:	d100      	bne.n	800327c <f_gets+0x38>
 800327a:	e00a      	b.n	8003292 <f_gets+0x4e>
		*p++ = c;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	61ba      	str	r2, [r7, #24]
 8003282:	7dfa      	ldrb	r2, [r7, #23]
 8003284:	701a      	strb	r2, [r3, #0]
		n++;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b0a      	cmp	r3, #10
 8003290:	d007      	beq.n	80032a2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3b01      	subs	r3, #1
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	dbde      	blt.n	800325a <f_gets+0x16>
 800329c:	e002      	b.n	80032a4 <f_gets+0x60>
		if (rc != 1) break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80032a2:	bf00      	nop
	}
	*p = 0;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <f_gets+0x70>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	e000      	b.n	80032b6 <f_gets+0x72>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032d8:	7a5b      	ldrb	r3, [r3, #9]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d831      	bhi.n	8003344 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032e2:	7a5b      	ldrb	r3, [r3, #9]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032f0:	7a5b      	ldrb	r3, [r3, #9]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003300:	7a5b      	ldrb	r3, [r3, #9]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003308:	4413      	add	r3, r2
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 8003310:	7a5b      	ldrb	r3, [r3, #9]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	b2d1      	uxtb	r1, r2
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <FATFS_LinkDriverEx+0x94>)
 800331a:	7251      	strb	r1, [r2, #9]
 800331c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800331e:	7dbb      	ldrb	r3, [r7, #22]
 8003320:	3330      	adds	r3, #48	; 0x30
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3301      	adds	r3, #1
 800332c:	223a      	movs	r2, #58	; 0x3a
 800332e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3302      	adds	r3, #2
 8003334:	222f      	movs	r2, #47	; 0x2f
 8003336:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	3303      	adds	r3, #3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200000b8 	.word	0x200000b8

08003358 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffaa 	bl	80032c0 <FATFS_LinkDriverEx>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003382:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003386:	4909      	ldr	r1, [pc, #36]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <LL_AHB2_GRP1_EnableClock+0x34>)
 8003392:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	46020c00 	.word	0x46020c00

080033b0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033be:	4909      	ldr	r1, [pc, #36]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <LL_APB1_GRP2_EnableClock+0x34>)
 80033ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	46020c00 	.word	0x46020c00

080033e8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...){
 80033e8:	b40f      	push	{r0, r1, r2, r3}
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033fe:	480b      	ldr	r0, [pc, #44]	; (800342c <myprintf+0x44>)
 8003400:	f009 ff78 	bl	800d2f4 <vsniprintf>
	va_end(args);

	int len= strlen(buffer);
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <myprintf+0x44>)
 8003406:	f7fc ff43 	bl	8000290 <strlen>
 800340a:	4603      	mov	r3, r0
 800340c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b29a      	uxth	r2, r3
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	4905      	ldr	r1, [pc, #20]	; (800342c <myprintf+0x44>)
 8003418:	4805      	ldr	r0, [pc, #20]	; (8003430 <myprintf+0x48>)
 800341a:	f008 fe21 	bl	800c060 <HAL_UART_Transmit>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003428:	b004      	add	sp, #16
 800342a:	4770      	bx	lr
 800342c:	20000678 	.word	0x20000678
 8003430:	200001e0 	.word	0x200001e0

08003434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800343c:	f001 fbd2 	bl	8004be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003440:	f000 f91a 	bl	8003678 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8003444:	f000 f979 	bl	800373a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003448:	f000 fb28 	bl	8003a9c <MX_GPIO_Init>
  MX_ADC1_Init();
 800344c:	f000 f984 	bl	8003758 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8003450:	f000 f9f2 	bl	8003838 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8003454:	f000 fa78 	bl	8003948 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003458:	f000 faac 	bl	80039b4 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 800345c:	f000 faf6 	bl	8003a4c <MX_USB_OTG_HS_HCD_Init>
  MX_MEMORYMAP_Init();
 8003460:	f000 f9fd 	bl	800385e <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 8003464:	f000 fa02 	bl	800386c <MX_SPI1_Init>
//  MX_FileX_Init();
  /* USER CODE BEGIN 2 */
  MX_FATFS_Init();
 8003468:	f7fd f948 	bl	80006fc <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo ~\r \n\r\n");
 800346c:	4872      	ldr	r0, [pc, #456]	; (8003638 <main+0x204>)
 800346e:	f7ff ffbb 	bl	80033e8 <myprintf>
  HAL_Delay(1000);
 8003472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003476:	f001 fc39 	bl	8004cec <HAL_Delay>

  FATFS FatFs;
  FIL fil;
  FRESULT fres;

  fres= f_mount(&FatFs, "", 1);
 800347a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800347e:	2201      	movs	r2, #1
 8003480:	496e      	ldr	r1, [pc, #440]	; (800363c <main+0x208>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe ff50 	bl	8002328 <f_mount>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if(fres!= FR_OK)
 800348e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <main+0x70>
  {
	  myprintf("f_mount error (%i) \r\n", fres);
 8003496:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800349a:	4619      	mov	r1, r3
 800349c:	4868      	ldr	r0, [pc, #416]	; (8003640 <main+0x20c>)
 800349e:	f7ff ffa3 	bl	80033e8 <myprintf>
	  while(1);
 80034a2:	e7fe      	b.n	80034a2 <main+0x6e>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres= f_getfree("", &free_clusters, &getFreeFs);
 80034a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80034a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4863      	ldr	r0, [pc, #396]	; (800363c <main+0x208>)
 80034b0:	f7ff fdfb 	bl	80030aa <f_getfree>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
  if(fres != FR_OK){
 80034ba:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <main+0x9c>
	  myprintf("f_getfree error (%i)\r\n",fres);
 80034c2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80034c6:	4619      	mov	r1, r3
 80034c8:	485e      	ldr	r0, [pc, #376]	; (8003644 <main+0x210>)
 80034ca:	f7ff ff8d 	bl	80033e8 <myprintf>
	  while(1);
 80034ce:	e7fe      	b.n	80034ce <main+0x9a>
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80034d0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034d4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80034de:	3b02      	subs	r3, #2
 80034e0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80034e4:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  free_sectors = free_clusters * getFreeFs->csize;
 80034f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034fa:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003504:	461a      	mov	r2, r3
 8003506:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800350a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8003518:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800351c:	0859      	lsrs	r1, r3, #1
 800351e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	461a      	mov	r2, r3
 8003526:	4848      	ldr	r0, [pc, #288]	; (8003648 <main+0x214>)
 8003528:	f7ff ff5e 	bl	80033e8 <myprintf>

  fres = f_open(&fil, "/write.txt", FA_READ);
 800352c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003530:	2201      	movs	r2, #1
 8003532:	4946      	ldr	r1, [pc, #280]	; (800364c <main+0x218>)
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe ff45 	bl	80023c4 <f_open>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8003540:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <main+0x11c>
  	myprintf("f_open error (%i)\r\n");
 8003548:	4841      	ldr	r0, [pc, #260]	; (8003650 <main+0x21c>)
 800354a:	f7ff ff4d 	bl	80033e8 <myprintf>
  	while(1);
 800354e:	e7fe      	b.n	800354e <main+0x11a>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8003550:	4840      	ldr	r0, [pc, #256]	; (8003654 <main+0x220>)
 8003552:	f7ff ff49 	bl	80033e8 <myprintf>
    BYTE readBuf[30];

    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8003556:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	211e      	movs	r1, #30
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe70 	bl	8003244 <f_gets>
 8003564:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
      if(rres != 0) {
 8003568:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <main+0x148>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	4619      	mov	r1, r3
 8003574:	4838      	ldr	r0, [pc, #224]	; (8003658 <main+0x224>)
 8003576:	f7ff ff37 	bl	80033e8 <myprintf>
 800357a:	e005      	b.n	8003588 <main+0x154>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 800357c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003580:	4619      	mov	r1, r3
 8003582:	4836      	ldr	r0, [pc, #216]	; (800365c <main+0x228>)
 8003584:	f7ff ff30 	bl	80033e8 <myprintf>
      }
      f_close(&fil);
 8003588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fd64 	bl	800305a <f_close>

	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003596:	221a      	movs	r2, #26
 8003598:	4931      	ldr	r1, [pc, #196]	; (8003660 <main+0x22c>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe ff12 	bl	80023c4 <f_open>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if(fres == FR_OK) {
 80035a6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <main+0x182>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 80035ae:	482d      	ldr	r0, [pc, #180]	; (8003664 <main+0x230>)
 80035b0:	f7ff ff1a 	bl	80033e8 <myprintf>
 80035b4:	e005      	b.n	80035c2 <main+0x18e>
	} else {
	myprintf("f_open error (%i)\r\n", fres);
 80035b6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80035ba:	4619      	mov	r1, r3
 80035bc:	4824      	ldr	r0, [pc, #144]	; (8003650 <main+0x21c>)
 80035be:	f7ff ff13 	bl	80033e8 <myprintf>
	}
	strncpy((char*)readBuf, "a new file is made!", 19);
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <main+0x234>)
 80035c6:	461c      	mov	r4, r3
 80035c8:	4615      	mov	r5, r2
 80035ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	8022      	strh	r2, [r4, #0]
 80035d4:	3402      	adds	r4, #2
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	7023      	strb	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80035da:	463b      	mov	r3, r7
 80035dc:	1d39      	adds	r1, r7, #4
 80035de:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80035e2:	2213      	movs	r2, #19
 80035e4:	f7ff fad2 	bl	8002b8c <f_write>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	  if(fres == FR_OK) {
 80035ee:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <main+0x1d6>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80035f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035fa:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	481a      	ldr	r0, [pc, #104]	; (800366c <main+0x238>)
 8003604:	f7ff fef0 	bl	80033e8 <myprintf>
 8003608:	e002      	b.n	8003610 <main+0x1dc>
	  } else {
		myprintf("f_write error (%i)\r\n");
 800360a:	4819      	ldr	r0, [pc, #100]	; (8003670 <main+0x23c>)
 800360c:	f7ff feec 	bl	80033e8 <myprintf>
	  }

	  f_close(&fil);
 8003610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fd20 	bl	800305a <f_close>

	  f_mount(NULL, "", 0);
 800361a:	2200      	movs	r2, #0
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <main+0x208>)
 800361e:	2000      	movs	r0, #0
 8003620:	f7fe fe82 	bl	8002328 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	4813      	ldr	r0, [pc, #76]	; (8003674 <main+0x240>)
 8003628:	f003 fa60 	bl	8006aec <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800362c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003630:	f001 fb5c 	bl	8004cec <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8003634:	e7f6      	b.n	8003624 <main+0x1f0>
 8003636:	bf00      	nop
 8003638:	0800dcb8 	.word	0x0800dcb8
 800363c:	0800dcd0 	.word	0x0800dcd0
 8003640:	0800dcd4 	.word	0x0800dcd4
 8003644:	0800dcec 	.word	0x0800dcec
 8003648:	0800dd04 	.word	0x0800dd04
 800364c:	0800dd4c 	.word	0x0800dd4c
 8003650:	0800dd58 	.word	0x0800dd58
 8003654:	0800dd6c 	.word	0x0800dd6c
 8003658:	0800dd9c 	.word	0x0800dd9c
 800365c:	0800ddc8 	.word	0x0800ddc8
 8003660:	0800dddc 	.word	0x0800dddc
 8003664:	0800dde8 	.word	0x0800dde8
 8003668:	0800de18 	.word	0x0800de18
 800366c:	0800de2c 	.word	0x0800de2c
 8003670:	0800de50 	.word	0x0800de50
 8003674:	42020400 	.word	0x42020400

08003678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b09e      	sub	sp, #120	; 0x78
 800367c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800367e:	f107 0318 	add.w	r3, r7, #24
 8003682:	2260      	movs	r2, #96	; 0x60
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f009 fe42 	bl	800d310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800368c:	463b      	mov	r3, r7
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 800369c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80036a0:	f003 fac4 	bl	8006c2c <HAL_PWREx_ControlVoltageScaling>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <SystemClock_Config+0x36>
  {
    Error_Handler();
 80036aa:	f000 fad5 	bl	8003c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80036ae:	2312      	movs	r3, #18
 80036b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036b8:	2310      	movs	r3, #16
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036bc:	2301      	movs	r3, #1
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80036c0:	2310      	movs	r3, #16
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c8:	2302      	movs	r3, #2
 80036ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80036cc:	2301      	movs	r3, #1
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80036d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80036d6:	2303      	movs	r3, #3
 80036d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80036da:	2308      	movs	r3, #8
 80036dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80036de:	2308      	movs	r3, #8
 80036e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036e2:	2302      	movs	r3, #2
 80036e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036e6:	2302      	movs	r3, #2
 80036e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80036ea:	230c      	movs	r3, #12
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f2:	f107 0318 	add.w	r3, r7, #24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fbc2 	bl	8006e80 <HAL_RCC_OscConfig>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003702:	f000 faa9 	bl	8003c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003706:	231f      	movs	r3, #31
 8003708:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800371e:	463b      	mov	r3, r7
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f004 fa88 	bl	8007c38 <HAL_RCC_ClockConfig>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800372e:	f000 fa93 	bl	8003c58 <Error_Handler>
  }
}
 8003732:	bf00      	nop
 8003734:	3778      	adds	r7, #120	; 0x78
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800373e:	f003 fb61 	bl	8006e04 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003742:	2002      	movs	r0, #2
 8003744:	f003 fafe 	bl	8006d44 <HAL_PWREx_ConfigSupply>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800374e:	f000 fa83 	bl	8003c58 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800375e:	463b      	mov	r3, r7
 8003760:	2220      	movs	r2, #32
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f009 fdd3 	bl	800d310 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <MX_ADC1_Init+0xd4>)
 800376c:	4a30      	ldr	r2, [pc, #192]	; (8003830 <MX_ADC1_Init+0xd8>)
 800376e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003770:	4b2e      	ldr	r3, [pc, #184]	; (800382c <MX_ADC1_Init+0xd4>)
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <MX_ADC1_Init+0xd4>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <MX_ADC1_Init+0xd4>)
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <MX_ADC1_Init+0xd4>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <MX_ADC1_Init+0xd4>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <MX_ADC1_Init+0xd4>)
 8003790:	2204      	movs	r2, #4
 8003792:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <MX_ADC1_Init+0xd4>)
 8003796:	2200      	movs	r2, #0
 8003798:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <MX_ADC1_Init+0xd4>)
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <MX_ADC1_Init+0xd4>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <MX_ADC1_Init+0xd4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037b0:	4b1e      	ldr	r3, [pc, #120]	; (800382c <MX_ADC1_Init+0xd4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <MX_ADC1_Init+0xd4>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <MX_ADC1_Init+0xd4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <MX_ADC1_Init+0xd4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <MX_ADC1_Init+0xd4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <MX_ADC1_Init+0xd4>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <MX_ADC1_Init+0xd4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <MX_ADC1_Init+0xd4>)
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037e4:	4811      	ldr	r0, [pc, #68]	; (800382c <MX_ADC1_Init+0xd4>)
 80037e6:	f001 fda7 	bl	8005338 <HAL_ADC_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80037f0:	f000 fa32 	bl	8003c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <MX_ADC1_Init+0xdc>)
 80037f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037f8:	2306      	movs	r3, #6
 80037fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003804:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003806:	2304      	movs	r3, #4
 8003808:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800380e:	463b      	mov	r3, r7
 8003810:	4619      	mov	r1, r3
 8003812:	4806      	ldr	r0, [pc, #24]	; (800382c <MX_ADC1_Init+0xd4>)
 8003814:	f002 f878 	bl	8005908 <HAL_ADC_ConfigChannel>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800381e:	f000 fa1b 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003822:	bf00      	nop
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200000c4 	.word	0x200000c4
 8003830:	42028000 	.word	0x42028000
 8003834:	0c000008 	.word	0x0c000008

08003838 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800383c:	2000      	movs	r0, #0
 800383e:	f003 f9c5 	bl	8006bcc <HAL_ICACHE_ConfigAssociativityMode>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8003848:	f000 fa06 	bl	8003c58 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800384c:	f003 f9de 	bl	8006c0c <HAL_ICACHE_Enable>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8003856:	f000 f9ff 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}

0800385e <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800387c:	4b30      	ldr	r3, [pc, #192]	; (8003940 <MX_SPI1_Init+0xd4>)
 800387e:	4a31      	ldr	r2, [pc, #196]	; (8003944 <MX_SPI1_Init+0xd8>)
 8003880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <MX_SPI1_Init+0xd4>)
 8003884:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <MX_SPI1_Init+0xd4>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <MX_SPI1_Init+0xd4>)
 8003892:	2207      	movs	r2, #7
 8003894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003896:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <MX_SPI1_Init+0xd4>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <MX_SPI1_Init+0xd4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80038aa:	4b25      	ldr	r3, [pc, #148]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038ac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80038b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80038c4:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038c6:	2207      	movs	r2, #7
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038de:	2200      	movs	r2, #0
 80038e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <MX_SPI1_Init+0xd4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <MX_SPI1_Init+0xd4>)
 8003902:	2200      	movs	r2, #0
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003906:	480e      	ldr	r0, [pc, #56]	; (8003940 <MX_SPI1_Init+0xd4>)
 8003908:	f007 fcbe 	bl	800b288 <HAL_SPI_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8003912:	f000 f9a1 	bl	8003c58 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800391a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	; (8003940 <MX_SPI1_Init+0xd4>)
 800392a:	f008 fb08 	bl	800bf3e <HAL_SPIEx_SetConfigAutonomousMode>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8003934:	f000 f990 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000150 	.word	0x20000150
 8003944:	40013000 	.word	0x40013000

08003948 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	463b      	mov	r3, r7
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
 800395c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800395e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003962:	f7ff fd25 	bl	80033b0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003966:	2002      	movs	r0, #2
 8003968:	f7ff fd06 	bl	8003378 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800396c:	2001      	movs	r0, #1
 800396e:	f7ff fd03 	bl	8003378 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003976:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003978:	2303      	movs	r3, #3
 800397a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	463b      	mov	r3, r7
 8003982:	4619      	mov	r1, r3
 8003984:	4809      	ldr	r0, [pc, #36]	; (80039ac <MX_UCPD1_Init+0x64>)
 8003986:	f009 fa0e 	bl	800cda6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003990:	2303      	movs	r3, #3
 8003992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003998:	463b      	mov	r3, r7
 800399a:	4619      	mov	r1, r3
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_UCPD1_Init+0x68>)
 800399e:	f009 fa02 	bl	800cda6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	42020400 	.word	0x42020400
 80039b0:	42020000 	.word	0x42020000

080039b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ba:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <MX_USART1_UART_Init+0x94>)
 80039bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039da:	220c      	movs	r2, #12
 80039dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039e4:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039fc:	4811      	ldr	r0, [pc, #68]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 80039fe:	f008 fadf 	bl	800bfc0 <HAL_UART_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a08:	f000 f926 	bl	8003c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	480d      	ldr	r0, [pc, #52]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a10:	f008 ffb4 	bl	800c97c <HAL_UARTEx_SetTxFifoThreshold>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a1a:	f000 f91d 	bl	8003c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4808      	ldr	r0, [pc, #32]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a22:	f008 ffe9 	bl	800c9f8 <HAL_UARTEx_SetRxFifoThreshold>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a2c:	f000 f914 	bl	8003c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a30:	4804      	ldr	r0, [pc, #16]	; (8003a44 <MX_USART1_UART_Init+0x90>)
 8003a32:	f008 ff6a 	bl	800c90a <HAL_UARTEx_DisableFifoMode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a3c:	f000 f90c 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200001e0 	.word	0x200001e0
 8003a48:	40013800 	.word	0x40013800

08003a4c <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a52:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8003a54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a58:	2210      	movs	r2, #16
 8003a5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8003a80:	4804      	ldr	r0, [pc, #16]	; (8003a94 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003a82:	f003 f84d 	bl	8006b20 <HAL_HCD_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8003a8c:	f000 f8e4 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000274 	.word	0x20000274
 8003a98:	42040000 	.word	0x42040000

08003a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab8:	4a61      	ldr	r2, [pc, #388]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ac2:	4b5f      	ldr	r3, [pc, #380]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ae0:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af4:	4a52      	ldr	r2, [pc, #328]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003afe:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b12:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b2a:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	4a43      	ldr	r2, [pc, #268]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b32:	f043 0308 	orr.w	r3, r3, #8
 8003b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b48:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b58:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <MX_GPIO_Init+0x1a4>)
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003b66:	2201      	movs	r2, #1
 8003b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b6c:	4835      	ldr	r0, [pc, #212]	; (8003c44 <MX_GPIO_Init+0x1a8>)
 8003b6e:	f002 ffa5 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2104      	movs	r1, #4
 8003b76:	4834      	ldr	r0, [pc, #208]	; (8003c48 <MX_GPIO_Init+0x1ac>)
 8003b78:	f002 ffa0 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	4832      	ldr	r0, [pc, #200]	; (8003c4c <MX_GPIO_Init+0x1b0>)
 8003b82:	f002 ff9b 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003b86:	2200      	movs	r2, #0
 8003b88:	21a0      	movs	r1, #160	; 0xa0
 8003b8a:	4831      	ldr	r0, [pc, #196]	; (8003c50 <MX_GPIO_Init+0x1b4>)
 8003b8c:	f002 ff96 	bl	8006abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <MX_GPIO_Init+0x1b8>)
 8003b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4829      	ldr	r0, [pc, #164]	; (8003c4c <MX_GPIO_Init+0x1b0>)
 8003ba6:	f002 fdb1 	bl	800670c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4824      	ldr	r0, [pc, #144]	; (8003c50 <MX_GPIO_Init+0x1b4>)
 8003bc0:	f002 fda4 	bl	800670c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4819      	ldr	r0, [pc, #100]	; (8003c44 <MX_GPIO_Init+0x1a8>)
 8003bde:	f002 fd95 	bl	800670c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003be2:	2304      	movs	r3, #4
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be6:	2301      	movs	r3, #1
 8003be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4813      	ldr	r0, [pc, #76]	; (8003c48 <MX_GPIO_Init+0x1ac>)
 8003bfa:	f002 fd87 	bl	800670c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c02:	2301      	movs	r3, #1
 8003c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <MX_GPIO_Init+0x1b0>)
 8003c16:	f002 fd79 	bl	800670c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8003c1a:	23a0      	movs	r3, #160	; 0xa0
 8003c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2a:	f107 031c 	add.w	r3, r7, #28
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4807      	ldr	r0, [pc, #28]	; (8003c50 <MX_GPIO_Init+0x1b4>)
 8003c32:	f002 fd6b 	bl	800670c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	46020c00 	.word	0x46020c00
 8003c44:	42020c00 	.word	0x42020c00
 8003c48:	42021800 	.word	0x42021800
 8003c4c:	42020800 	.word	0x42020800
 8003c50:	42020400 	.word	0x42020400
 8003c54:	10110000 	.word	0x10110000

08003c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5c:	b672      	cpsid	i
}
 8003c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <Error_Handler+0x8>
	...

08003c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_MspInit+0x30>)
 8003c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c70:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_MspInit+0x30>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_MspInit+0x30>)
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8003c88:	f003 f8cc 	bl	8006e24 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	46020c00 	.word	0x46020c00

08003c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0c0      	sub	sp, #256	; 0x100
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	22d8      	movs	r2, #216	; 0xd8
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f009 fb29 	bl	800d310 <memset>
  if(hadc->Instance==ADC1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <HAL_ADC_MspInit+0xbc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d140      	bne.n	8003d4a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003cc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8003cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fb79 	bl	80083d8 <HAL_RCCEx_PeriphCLKConfig>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8003cec:	f7ff ffb4 	bl	8003c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d14:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <HAL_ADC_MspInit+0xc0>)
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d32:	2303      	movs	r3, #3
 8003d34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003d3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d42:	4619      	mov	r1, r3
 8003d44:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_ADC_MspInit+0xc4>)
 8003d46:	f002 fce1 	bl	800670c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d4a:	bf00      	nop
 8003d4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	42028000 	.word	0x42028000
 8003d58:	46020c00 	.word	0x46020c00
 8003d5c:	42020800 	.word	0x42020800

08003d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b0c0      	sub	sp, #256	; 0x100
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	22d8      	movs	r2, #216	; 0xd8
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f009 fac5 	bl	800d310 <memset>
  if(hspi->Instance==SPI1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <HAL_SPI_MspInit+0xc8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d146      	bne.n	8003e1e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003d90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003d9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003da4:	f107 0310 	add.w	r3, r7, #16
 8003da8:	4618      	mov	r0, r3
 8003daa:	f004 fb15 	bl	80083d8 <HAL_RCCEx_PeriphCLKConfig>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003db4:	f7ff ff50 	bl	8003c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dc4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003dc8:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_SPI_MspInit+0xcc>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003df4:	23e0      	movs	r3, #224	; 0xe0
 8003df6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e0c:	2305      	movs	r3, #5
 8003e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e16:	4619      	mov	r1, r3
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <HAL_SPI_MspInit+0xd0>)
 8003e1a:	f002 fc77 	bl	800670c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e1e:	bf00      	nop
 8003e20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40013000 	.word	0x40013000
 8003e2c:	46020c00 	.word	0x46020c00
 8003e30:	42020000 	.word	0x42020000

08003e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0c0      	sub	sp, #256	; 0x100
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e4c:	f107 0310 	add.w	r3, r7, #16
 8003e50:	22d8      	movs	r2, #216	; 0xd8
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f009 fa5b 	bl	800d310 <memset>
  if(huart->Instance==USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a27      	ldr	r2, [pc, #156]	; (8003efc <HAL_UART_MspInit+0xc8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d145      	bne.n	8003ef0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e64:	f04f 0201 	mov.w	r2, #1
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e70:	2300      	movs	r3, #0
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 faad 	bl	80083d8 <HAL_RCCEx_PeriphCLKConfig>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003e84:	f7ff fee8 	bl	8003c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003e9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_UART_MspInit+0xcc>)
 8003eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8003ec4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ede:	2307      	movs	r3, #7
 8003ee0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4806      	ldr	r0, [pc, #24]	; (8003f04 <HAL_UART_MspInit+0xd0>)
 8003eec:	f002 fc0e 	bl	800670c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ef0:	bf00      	nop
 8003ef2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40013800 	.word	0x40013800
 8003f00:	46020c00 	.word	0x46020c00
 8003f04:	42020000 	.word	0x42020000

08003f08 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b0bc      	sub	sp, #240	; 0xf0
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f10:	f107 0318 	add.w	r3, r7, #24
 8003f14:	22d8      	movs	r2, #216	; 0xd8
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f009 f9f9 	bl	800d310 <memset>
  if(hhcd->Instance==USB_OTG_HS)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a33      	ldr	r2, [pc, #204]	; (8003ff0 <HAL_HCD_MspInit+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d15e      	bne.n	8003fe6 <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0308 	mov.w	r3, #8
 8003f30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8003f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f3c:	f107 0318 	add.w	r3, r7, #24
 8003f40:	4618      	mov	r0, r3
 8003f42:	f004 fa49 	bl	80083d8 <HAL_RCCEx_PeriphCLKConfig>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 8003f4c:	f7ff fe84 	bl	8003c58 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8003f50:	200c      	movs	r0, #12
 8003f52:	f000 ff03 	bl	8004d5c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	4a25      	ldr	r2, [pc, #148]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_HCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8003fbe:	f002 ff11 	bl	8006de4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003fc2:	f002 ff3f 	bl	8006e44 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fcc:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <HAL_HCD_MspInit+0xec>)
 8003fce:	f023 0304 	bic.w	r3, r3, #4
 8003fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fd6:	e003      	b.n	8003fe0 <HAL_HCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003fd8:	f002 ff04 	bl	8006de4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003fdc:	f002 ff32 	bl	8006e44 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f000 fea7 	bl	8004d34 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8003fe6:	bf00      	nop
 8003fe8:	37f0      	adds	r7, #240	; 0xf0
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	42040000 	.word	0x42040000
 8003ff4:	46020c00 	.word	0x46020c00

08003ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <NMI_Handler+0x4>

08003ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004002:	e7fe      	b.n	8004002 <HardFault_Handler+0x4>

08004004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004008:	e7fe      	b.n	8004008 <MemManage_Handler+0x4>

0800400a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400e:	e7fe      	b.n	800400e <BusFault_Handler+0x4>

08004010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004014:	e7fe      	b.n	8004014 <UsageFault_Handler+0x4>

08004016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004044:	f000 fe32 	bl	8004cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}

0800404c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <_sbrk+0x5c>)
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <_sbrk+0x60>)
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <_sbrk+0x64>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <_sbrk+0x64>)
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <_sbrk+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <_sbrk+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	d207      	bcs.n	800408c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800407c:	f009 f950 	bl	800d320 <__errno>
 8004080:	4603      	mov	r3, r0
 8004082:	220c      	movs	r2, #12
 8004084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	e009      	b.n	80040a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <_sbrk+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <_sbrk+0x64>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <_sbrk+0x64>)
 800409c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20270000 	.word	0x20270000
 80040ac:	00000400 	.word	0x00000400
 80040b0:	20000778 	.word	0x20000778
 80040b4:	200008d8 	.word	0x200008d8

080040b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <SystemInit+0x68>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <SystemInit+0x68>)
 80040c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <SystemInit+0x6c>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <SystemInit+0x6c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <SystemInit+0x6c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <SystemInit+0x6c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <SystemInit+0x6c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <SystemInit+0x6c>)
 80040ea:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80040ee:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80040f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <SystemInit+0x6c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <SystemInit+0x6c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <SystemInit+0x6c>)
 8004100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <SystemInit+0x6c>)
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <SystemInit+0x68>)
 800410e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004112:	609a      	str	r2, [r3, #8]
  #endif
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000ed00 	.word	0xe000ed00
 8004124:	46020c00 	.word	0x46020c00

08004128 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f9d7 	bl	80044e8 <USER_SPI_initialize>
 800413a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fab5 	bl	80046c0 <USER_SPI_status>
 8004156:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8004170:	7bf8      	ldrb	r0, [r7, #15]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	f000 fab8 	bl	80046ec <USER_SPI_read>
 800417c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004196:	7bf8      	ldrb	r0, [r7, #15]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	f000 fb0b 	bl	80047b8 <USER_SPI_write>
 80041a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	603a      	str	r2, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
 80041b8:	460b      	mov	r3, r1
 80041ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80041bc:	79b9      	ldrb	r1, [r7, #6]
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fb74 	bl	80048b0 <USER_SPI_ioctl>
 80041c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80041dc:	f000 fd7a 	bl	8004cd4 <HAL_GetTick>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <SPI_Timer_On+0x20>)
 80041e4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <SPI_Timer_On+0x24>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000780 	.word	0x20000780
 80041f8:	20000784 	.word	0x20000784

080041fc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004200:	f000 fd68 	bl	8004cd4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <SPI_Timer_Status+0x24>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SPI_Timer_Status+0x28>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf34      	ite	cc
 8004214:	2301      	movcc	r3, #1
 8004216:	2300      	movcs	r3, #0
 8004218:	b2db      	uxtb	r3, r3
}
 800421a:	4618      	mov	r0, r3
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000780 	.word	0x20000780
 8004224:	20000784 	.word	0x20000784

08004228 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004232:	f107 020f 	add.w	r2, r7, #15
 8004236:	1df9      	adds	r1, r7, #7
 8004238:	2332      	movs	r3, #50	; 0x32
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2301      	movs	r3, #1
 800423e:	4804      	ldr	r0, [pc, #16]	; (8004250 <xchg_spi+0x28>)
 8004240:	f007 fb56 	bl	800b8f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000150 	.word	0x20000150

08004254 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e00a      	b.n	800427a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	18d4      	adds	r4, r2, r3
 800426a:	20ff      	movs	r0, #255	; 0xff
 800426c:	f7ff ffdc 	bl	8004228 <xchg_spi>
 8004270:	4603      	mov	r3, r0
 8004272:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d3f0      	bcc.n	8004264 <rcvr_spi_multi+0x10>
	}
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}

0800428c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b29a      	uxth	r2, r3
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4803      	ldr	r0, [pc, #12]	; (80042b0 <xmit_spi_multi+0x24>)
 80042a2:	f007 f907 	bl	800b4b4 <HAL_SPI_Transmit>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000150 	.word	0x20000150

080042b4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80042bc:	f000 fd0a 	bl	8004cd4 <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80042c6:	20ff      	movs	r0, #255	; 0xff
 80042c8:	f7ff ffae 	bl	8004228 <xchg_spi>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	d007      	beq.n	80042e6 <wait_ready+0x32>
 80042d6:	f000 fcfd 	bl	8004cd4 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d8ef      	bhi.n	80042c6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2bff      	cmp	r3, #255	; 0xff
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004300:	2201      	movs	r2, #1
 8004302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004306:	4804      	ldr	r0, [pc, #16]	; (8004318 <despiselect+0x1c>)
 8004308:	f002 fbd8 	bl	8006abc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800430c:	20ff      	movs	r0, #255	; 0xff
 800430e:	f7ff ff8b 	bl	8004228 <xchg_spi>

}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	42020c00 	.word	0x42020c00

0800431c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004326:	480a      	ldr	r0, [pc, #40]	; (8004350 <spiselect+0x34>)
 8004328:	f002 fbc8 	bl	8006abc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800432c:	20ff      	movs	r0, #255	; 0xff
 800432e:	f7ff ff7b 	bl	8004228 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004336:	f7ff ffbd 	bl	80042b4 <wait_ready>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <spiselect+0x28>
 8004340:	2301      	movs	r3, #1
 8004342:	e002      	b.n	800434a <spiselect+0x2e>

	despiselect();
 8004344:	f7ff ffda 	bl	80042fc <despiselect>
	return 0;	/* Timeout */
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	42020c00 	.word	0x42020c00

08004354 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800435e:	20c8      	movs	r0, #200	; 0xc8
 8004360:	f7ff ff38 	bl	80041d4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004364:	20ff      	movs	r0, #255	; 0xff
 8004366:	f7ff ff5f 	bl	8004228 <xchg_spi>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2bff      	cmp	r3, #255	; 0xff
 8004372:	d104      	bne.n	800437e <rcvr_datablock+0x2a>
 8004374:	f7ff ff42 	bl	80041fc <SPI_Timer_Status>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f2      	bne.n	8004364 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2bfe      	cmp	r3, #254	; 0xfe
 8004382:	d001      	beq.n	8004388 <rcvr_datablock+0x34>
 8004384:	2300      	movs	r3, #0
 8004386:	e00a      	b.n	800439e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ff62 	bl	8004254 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004390:	20ff      	movs	r0, #255	; 0xff
 8004392:	f7ff ff49 	bl	8004228 <xchg_spi>
 8004396:	20ff      	movs	r0, #255	; 0xff
 8004398:	f7ff ff46 	bl	8004228 <xchg_spi>

	return 1;						/* Function succeeded */
 800439c:	2301      	movs	r3, #1
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80043b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043b6:	f7ff ff7d 	bl	80042b4 <wait_ready>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <xmit_datablock+0x1e>
 80043c0:	2300      	movs	r3, #0
 80043c2:	e01e      	b.n	8004402 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff2e 	bl	8004228 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2bfd      	cmp	r3, #253	; 0xfd
 80043d0:	d016      	beq.n	8004400 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80043d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ff58 	bl	800428c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80043dc:	20ff      	movs	r0, #255	; 0xff
 80043de:	f7ff ff23 	bl	8004228 <xchg_spi>
 80043e2:	20ff      	movs	r0, #255	; 0xff
 80043e4:	f7ff ff20 	bl	8004228 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80043e8:	20ff      	movs	r0, #255	; 0xff
 80043ea:	f7ff ff1d 	bl	8004228 <xchg_spi>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d001      	beq.n	8004400 <xmit_datablock+0x5a>
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <xmit_datablock+0x5c>
	}
	return 1;
 8004400:	2301      	movs	r3, #1
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	da0e      	bge.n	800443c <send_cmd+0x32>
		cmd &= 0x7F;
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004424:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004426:	2100      	movs	r1, #0
 8004428:	2037      	movs	r0, #55	; 0x37
 800442a:	f7ff ffee 	bl	800440a <send_cmd>
 800442e:	4603      	mov	r3, r0
 8004430:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004432:	7bbb      	ldrb	r3, [r7, #14]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d901      	bls.n	800443c <send_cmd+0x32>
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	e051      	b.n	80044e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d008      	beq.n	8004454 <send_cmd+0x4a>
		despiselect();
 8004442:	f7ff ff5b 	bl	80042fc <despiselect>
		if (!spiselect()) return 0xFF;
 8004446:	f7ff ff69 	bl	800431c <spiselect>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <send_cmd+0x4a>
 8004450:	23ff      	movs	r3, #255	; 0xff
 8004452:	e045      	b.n	80044e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fee3 	bl	8004228 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	0e1b      	lsrs	r3, r3, #24
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fedd 	bl	8004228 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fed7 	bl	8004228 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fed1 	bl	8004228 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fecc 	bl	8004228 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <send_cmd+0x94>
 800449a:	2395      	movs	r3, #149	; 0x95
 800449c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d101      	bne.n	80044a8 <send_cmd+0x9e>
 80044a4:	2387      	movs	r3, #135	; 0x87
 80044a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff febc 	bl	8004228 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d102      	bne.n	80044bc <send_cmd+0xb2>
 80044b6:	20ff      	movs	r0, #255	; 0xff
 80044b8:	f7ff feb6 	bl	8004228 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80044bc:	230a      	movs	r3, #10
 80044be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80044c0:	20ff      	movs	r0, #255	; 0xff
 80044c2:	f7ff feb1 	bl	8004228 <xchg_spi>
 80044c6:	4603      	mov	r3, r0
 80044c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80044ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da05      	bge.n	80044de <send_cmd+0xd4>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80044de:	7bbb      	ldrb	r3, [r7, #14]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <USER_SPI_initialize+0x14>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0d6      	b.n	80046aa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80044fc:	4b6d      	ldr	r3, [pc, #436]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <USER_SPI_initialize+0x2a>
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e0cb      	b.n	80046aa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004512:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <USER_SPI_initialize+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800451c:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <USER_SPI_initialize+0x1d0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8004524:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004526:	230a      	movs	r3, #10
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e005      	b.n	8004538 <USER_SPI_initialize+0x50>
 800452c:	20ff      	movs	r0, #255	; 0xff
 800452e:	f7ff fe7b 	bl	8004228 <xchg_spi>
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	3b01      	subs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f6      	bne.n	800452c <USER_SPI_initialize+0x44>

	ty = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004542:	2100      	movs	r1, #0
 8004544:	2000      	movs	r0, #0
 8004546:	f7ff ff60 	bl	800440a <send_cmd>
 800454a:	4603      	mov	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	f040 808b 	bne.w	8004668 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004556:	f7ff fe3d 	bl	80041d4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800455a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800455e:	2008      	movs	r0, #8
 8004560:	f7ff ff53 	bl	800440a <send_cmd>
 8004564:	4603      	mov	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d151      	bne.n	800460e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	e00d      	b.n	800458c <USER_SPI_initialize+0xa4>
 8004570:	7bfc      	ldrb	r4, [r7, #15]
 8004572:	20ff      	movs	r0, #255	; 0xff
 8004574:	f7ff fe58 	bl	8004228 <xchg_spi>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	f104 0310 	add.w	r3, r4, #16
 8004580:	443b      	add	r3, r7
 8004582:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d9ee      	bls.n	8004570 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004592:	7abb      	ldrb	r3, [r7, #10]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d167      	bne.n	8004668 <USER_SPI_initialize+0x180>
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	2baa      	cmp	r3, #170	; 0xaa
 800459c:	d164      	bne.n	8004668 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800459e:	bf00      	nop
 80045a0:	f7ff fe2c 	bl	80041fc <SPI_Timer_Status>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <USER_SPI_initialize+0xd2>
 80045aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045ae:	20a9      	movs	r0, #169	; 0xa9
 80045b0:	f7ff ff2b 	bl	800440a <send_cmd>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f2      	bne.n	80045a0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80045ba:	f7ff fe1f 	bl	80041fc <SPI_Timer_Status>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d051      	beq.n	8004668 <USER_SPI_initialize+0x180>
 80045c4:	2100      	movs	r1, #0
 80045c6:	203a      	movs	r0, #58	; 0x3a
 80045c8:	f7ff ff1f 	bl	800440a <send_cmd>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d14a      	bne.n	8004668 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
 80045d6:	e00d      	b.n	80045f4 <USER_SPI_initialize+0x10c>
 80045d8:	7bfc      	ldrb	r4, [r7, #15]
 80045da:	20ff      	movs	r0, #255	; 0xff
 80045dc:	f7ff fe24 	bl	8004228 <xchg_spi>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	f104 0310 	add.w	r3, r4, #16
 80045e8:	443b      	add	r3, r7
 80045ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	3301      	adds	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d9ee      	bls.n	80045d8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80045fa:	7a3b      	ldrb	r3, [r7, #8]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <USER_SPI_initialize+0x120>
 8004604:	230c      	movs	r3, #12
 8004606:	e000      	b.n	800460a <USER_SPI_initialize+0x122>
 8004608:	2304      	movs	r3, #4
 800460a:	737b      	strb	r3, [r7, #13]
 800460c:	e02c      	b.n	8004668 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800460e:	2100      	movs	r1, #0
 8004610:	20a9      	movs	r0, #169	; 0xa9
 8004612:	f7ff fefa 	bl	800440a <send_cmd>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d804      	bhi.n	8004626 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800461c:	2302      	movs	r3, #2
 800461e:	737b      	strb	r3, [r7, #13]
 8004620:	23a9      	movs	r3, #169	; 0xa9
 8004622:	73bb      	strb	r3, [r7, #14]
 8004624:	e003      	b.n	800462e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004626:	2301      	movs	r3, #1
 8004628:	737b      	strb	r3, [r7, #13]
 800462a:	2301      	movs	r3, #1
 800462c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800462e:	bf00      	nop
 8004630:	f7ff fde4 	bl	80041fc <SPI_Timer_Status>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <USER_SPI_initialize+0x162>
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fee3 	bl	800440a <send_cmd>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f2      	bne.n	8004630 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800464a:	f7ff fdd7 	bl	80041fc <SPI_Timer_Status>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <USER_SPI_initialize+0x17c>
 8004654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004658:	2010      	movs	r0, #16
 800465a:	f7ff fed6 	bl	800440a <send_cmd>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <USER_SPI_initialize+0x180>
				ty = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <USER_SPI_initialize+0x1d4>)
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800466e:	f7ff fe45 	bl	80042fc <despiselect>

	if (ty) {			/* OK */
 8004672:	7b7b      	ldrb	r3, [r7, #13]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d012      	beq.n	800469e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <USER_SPI_initialize+0x1d0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <USER_SPI_initialize+0x1d0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800468a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e002      	b.n	80046a4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <USER_SPI_initialize+0x1cc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000018 	.word	0x20000018
 80046b8:	20000150 	.word	0x20000150
 80046bc:	2000077c 	.word	0x2000077c

080046c0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <USER_SPI_status+0x14>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e002      	b.n	80046da <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <USER_SPI_status+0x28>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000018 	.word	0x20000018

080046ec <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <USER_SPI_read+0x1c>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <USER_SPI_read+0x20>
 8004708:	2304      	movs	r3, #4
 800470a:	e04d      	b.n	80047a8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <USER_SPI_read+0xc4>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <USER_SPI_read+0x32>
 800471a:	2303      	movs	r3, #3
 800471c:	e044      	b.n	80047a8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800471e:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <USER_SPI_read+0xc8>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <USER_SPI_read+0x44>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	025b      	lsls	r3, r3, #9
 800472e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d111      	bne.n	800475a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	2011      	movs	r0, #17
 800473a:	f7ff fe66 	bl	800440a <send_cmd>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d129      	bne.n	8004798 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f7ff fe03 	bl	8004354 <rcvr_datablock>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d021      	beq.n	8004798 <USER_SPI_read+0xac>
			count = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	e01e      	b.n	8004798 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	2012      	movs	r0, #18
 800475e:	f7ff fe54 	bl	800440a <send_cmd>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d117      	bne.n	8004798 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f7ff fdf1 	bl	8004354 <rcvr_datablock>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <USER_SPI_read+0xa2>
				buff += 512;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800477e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ed      	bne.n	8004768 <USER_SPI_read+0x7c>
 800478c:	e000      	b.n	8004790 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800478e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004790:	2100      	movs	r1, #0
 8004792:	200c      	movs	r0, #12
 8004794:	f7ff fe39 	bl	800440a <send_cmd>
		}
	}
	despiselect();
 8004798:	f7ff fdb0 	bl	80042fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000018 	.word	0x20000018
 80047b4:	2000077c 	.word	0x2000077c

080047b8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <USER_SPI_write+0x1c>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <USER_SPI_write+0x20>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e063      	b.n	80048a0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <USER_SPI_write+0xf0>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <USER_SPI_write+0x32>
 80047e6:	2303      	movs	r3, #3
 80047e8:	e05a      	b.n	80048a0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <USER_SPI_write+0xf0>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <USER_SPI_write+0x44>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e051      	b.n	80048a0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <USER_SPI_write+0xf4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <USER_SPI_write+0x56>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d110      	bne.n	8004836 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	2018      	movs	r0, #24
 8004818:	f7ff fdf7 	bl	800440a <send_cmd>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d136      	bne.n	8004890 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004822:	21fe      	movs	r1, #254	; 0xfe
 8004824:	68b8      	ldr	r0, [r7, #8]
 8004826:	f7ff fdbe 	bl	80043a6 <xmit_datablock>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02f      	beq.n	8004890 <USER_SPI_write+0xd8>
			count = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	e02c      	b.n	8004890 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <USER_SPI_write+0xf4>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <USER_SPI_write+0x92>
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	2097      	movs	r0, #151	; 0x97
 8004846:	f7ff fde0 	bl	800440a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	2019      	movs	r0, #25
 800484e:	f7ff fddc 	bl	800440a <send_cmd>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11b      	bne.n	8004890 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004858:	21fc      	movs	r1, #252	; 0xfc
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f7ff fda3 	bl	80043a6 <xmit_datablock>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <USER_SPI_write+0xc4>
				buff += 512;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800486c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ee      	bne.n	8004858 <USER_SPI_write+0xa0>
 800487a:	e000      	b.n	800487e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800487c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800487e:	21fd      	movs	r1, #253	; 0xfd
 8004880:	2000      	movs	r0, #0
 8004882:	f7ff fd90 	bl	80043a6 <xmit_datablock>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <USER_SPI_write+0xd8>
 800488c:	2301      	movs	r3, #1
 800488e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004890:	f7ff fd34 	bl	80042fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000018 	.word	0x20000018
 80048ac:	2000077c 	.word	0x2000077c

080048b0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	603a      	str	r2, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	460b      	mov	r3, r1
 80048be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <USER_SPI_ioctl+0x1a>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e15a      	b.n	8004b80 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048ca:	4baf      	ldr	r3, [pc, #700]	; (8004b88 <USER_SPI_ioctl+0x2d8>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <USER_SPI_ioctl+0x2c>
 80048d8:	2303      	movs	r3, #3
 80048da:	e151      	b.n	8004b80 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80048e2:	79bb      	ldrb	r3, [r7, #6]
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	f200 8136 	bhi.w	8004b56 <USER_SPI_ioctl+0x2a6>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <USER_SPI_ioctl+0x40>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004905 	.word	0x08004905
 80048f4:	08004919 	.word	0x08004919
 80048f8:	08004b57 	.word	0x08004b57
 80048fc:	080049c5 	.word	0x080049c5
 8004900:	08004abb 	.word	0x08004abb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004904:	f7ff fd0a 	bl	800431c <spiselect>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8127 	beq.w	8004b5e <USER_SPI_ioctl+0x2ae>
 8004910:	2300      	movs	r3, #0
 8004912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004916:	e122      	b.n	8004b5e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004918:	2100      	movs	r1, #0
 800491a:	2009      	movs	r0, #9
 800491c:	f7ff fd75 	bl	800440a <send_cmd>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 811d 	bne.w	8004b62 <USER_SPI_ioctl+0x2b2>
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	2110      	movs	r1, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fd10 	bl	8004354 <rcvr_datablock>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8113 	beq.w	8004b62 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800493c:	7b3b      	ldrb	r3, [r7, #12]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d111      	bne.n	800496a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004946:	7d7b      	ldrb	r3, [r7, #21]
 8004948:	461a      	mov	r2, r3
 800494a:	7d3b      	ldrb	r3, [r7, #20]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	4413      	add	r3, r2
 8004950:	461a      	mov	r2, r3
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800495a:	4413      	add	r3, r2
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	029a      	lsls	r2, r3, #10
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e028      	b.n	80049bc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800496a:	7c7b      	ldrb	r3, [r7, #17]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	b2da      	uxtb	r2, r3
 8004972:	7dbb      	ldrb	r3, [r7, #22]
 8004974:	09db      	lsrs	r3, r3, #7
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4413      	add	r3, r2
 800497a:	b2da      	uxtb	r2, r3
 800497c:	7d7b      	ldrb	r3, [r7, #21]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	b2db      	uxtb	r3, r3
 8004988:	4413      	add	r3, r2
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3302      	adds	r3, #2
 800498e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004992:	7d3b      	ldrb	r3, [r7, #20]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	7cbb      	ldrb	r3, [r7, #18]
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a8:	4413      	add	r3, r2
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80049ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049b2:	3b09      	subs	r3, #9
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	409a      	lsls	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80049c2:	e0ce      	b.n	8004b62 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80049c4:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <USER_SPI_ioctl+0x2dc>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d031      	beq.n	8004a34 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80049d0:	2100      	movs	r1, #0
 80049d2:	208d      	movs	r0, #141	; 0x8d
 80049d4:	f7ff fd19 	bl	800440a <send_cmd>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80c3 	bne.w	8004b66 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80049e0:	20ff      	movs	r0, #255	; 0xff
 80049e2:	f7ff fc21 	bl	8004228 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80049e6:	f107 030c 	add.w	r3, r7, #12
 80049ea:	2110      	movs	r1, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fcb1 	bl	8004354 <rcvr_datablock>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80b6 	beq.w	8004b66 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80049fa:	2330      	movs	r3, #48	; 0x30
 80049fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a00:	e007      	b.n	8004a12 <USER_SPI_ioctl+0x162>
 8004a02:	20ff      	movs	r0, #255	; 0xff
 8004a04:	f7ff fc10 	bl	8004228 <xchg_spi>
 8004a08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f3      	bne.n	8004a02 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004a1a:	7dbb      	ldrb	r3, [r7, #22]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	2310      	movs	r3, #16
 8004a24:	fa03 f202 	lsl.w	r2, r3, r2
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004a32:	e098      	b.n	8004b66 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004a34:	2100      	movs	r1, #0
 8004a36:	2009      	movs	r0, #9
 8004a38:	f7ff fce7 	bl	800440a <send_cmd>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8091 	bne.w	8004b66 <USER_SPI_ioctl+0x2b6>
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	2110      	movs	r1, #16
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fc82 	bl	8004354 <rcvr_datablock>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8087 	beq.w	8004b66 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <USER_SPI_ioctl+0x2dc>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004a64:	7dbb      	ldrb	r3, [r7, #22]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004a6c:	7dfa      	ldrb	r2, [r7, #23]
 8004a6e:	09d2      	lsrs	r2, r2, #7
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	4413      	add	r3, r2
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	7e7b      	ldrb	r3, [r7, #25]
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e013      	b.n	8004ab2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004a8a:	7dbb      	ldrb	r3, [r7, #22]
 8004a8c:	109b      	asrs	r3, r3, #2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	3301      	adds	r3, #1
 8004a96:	7dfa      	ldrb	r2, [r7, #23]
 8004a98:	00d2      	lsls	r2, r2, #3
 8004a9a:	f002 0218 	and.w	r2, r2, #24
 8004a9e:	7df9      	ldrb	r1, [r7, #23]
 8004aa0:	0949      	lsrs	r1, r1, #5
 8004aa2:	b2c9      	uxtb	r1, r1
 8004aa4:	440a      	add	r2, r1
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ab8:	e055      	b.n	8004b66 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <USER_SPI_ioctl+0x2dc>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f003 0306 	and.w	r3, r3, #6
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d051      	beq.n	8004b6a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004ac6:	f107 020c 	add.w	r2, r7, #12
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	210b      	movs	r1, #11
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff feee 	bl	80048b0 <USER_SPI_ioctl>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d149      	bne.n	8004b6e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004ada:	7b3b      	ldrb	r3, [r7, #12]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <USER_SPI_ioctl+0x23e>
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d041      	beq.n	8004b72 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <USER_SPI_ioctl+0x2dc>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	025b      	lsls	r3, r3, #9
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	025b      	lsls	r3, r3, #9
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b18:	2020      	movs	r0, #32
 8004b1a:	f7ff fc76 	bl	800440a <send_cmd>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d128      	bne.n	8004b76 <USER_SPI_ioctl+0x2c6>
 8004b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b26:	2021      	movs	r0, #33	; 0x21
 8004b28:	f7ff fc6f 	bl	800440a <send_cmd>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d121      	bne.n	8004b76 <USER_SPI_ioctl+0x2c6>
 8004b32:	2100      	movs	r1, #0
 8004b34:	2026      	movs	r0, #38	; 0x26
 8004b36:	f7ff fc68 	bl	800440a <send_cmd>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11a      	bne.n	8004b76 <USER_SPI_ioctl+0x2c6>
 8004b40:	f247 5030 	movw	r0, #30000	; 0x7530
 8004b44:	f7ff fbb6 	bl	80042b4 <wait_ready>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b54:	e00f      	b.n	8004b76 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004b56:	2304      	movs	r3, #4
 8004b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b5c:	e00c      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		break;
 8004b5e:	bf00      	nop
 8004b60:	e00a      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		break;
 8004b62:	bf00      	nop
 8004b64:	e008      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		break;
 8004b66:	bf00      	nop
 8004b68:	e006      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b6a:	bf00      	nop
 8004b6c:	e004      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <USER_SPI_ioctl+0x2c8>
		break;
 8004b76:	bf00      	nop
	}

	despiselect();
 8004b78:	f7ff fbc0 	bl	80042fc <despiselect>

	return res;
 8004b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3730      	adds	r7, #48	; 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000018 	.word	0x20000018
 8004b8c:	2000077c 	.word	0x2000077c

08004b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bc8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b94:	f7ff fa90 	bl	80040b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b9a:	e003      	b.n	8004ba4 <LoopCopyDataInit>

08004b9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ba0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ba2:	3104      	adds	r1, #4

08004ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ba4:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ba8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004baa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004bac:	d3f6      	bcc.n	8004b9c <CopyDataInit>
	ldr	r2, =_sbss
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004bb0:	e002      	b.n	8004bb8 <LoopFillZerobss>

08004bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004bb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004bb4:	f842 3b04 	str.w	r3, [r2], #4

08004bb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <LoopForever+0x16>)
	cmp	r2, r3
 8004bba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004bbc:	d3f9      	bcc.n	8004bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bbe:	f008 fbb5 	bl	800d32c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bc2:	f7fe fc37 	bl	8003434 <main>

08004bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bc6:	e7fe      	b.n	8004bc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004bc8:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8004bcc:	0800e02c 	.word	0x0800e02c
	ldr	r0, =_sdata
 8004bd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004bd4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004bd8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004bdc:	200008d4 	.word	0x200008d4

08004be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004be0:	e7fe      	b.n	8004be0 <ADC1_2_IRQHandler>
	...

08004be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_Init+0x4c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <HAL_Init+0x4c>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	f001 fd57 	bl	80066a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004bfa:	f003 fa0f 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_Init+0x50>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	490b      	ldr	r1, [pc, #44]	; (8004c38 <HAL_Init+0x54>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_Init+0x58>)
 8004c12:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c14:	200f      	movs	r0, #15
 8004c16:	f000 f813 	bl	8004c40 <HAL_InitTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e002      	b.n	8004c2a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c24:	f7ff f81e 	bl	8003c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40022000 	.word	0x40022000
 8004c34:	46020c00 	.word	0x46020c00
 8004c38:	0800dee8 	.word	0x0800dee8
 8004c3c:	20000000 	.word	0x20000000

08004c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_InitTick+0x60>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e021      	b.n	8004c98 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_InitTick+0x64>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <HAL_InitTick+0x60>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fd41 	bl	80066f2 <HAL_SYSTICK_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e00e      	b.n	8004c98 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d80a      	bhi.n	8004c96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c80:	2200      	movs	r2, #0
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	f001 fd19 	bl	80066be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <HAL_InitTick+0x68>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000020 	.word	0x20000020
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	2000001c 	.word	0x2000001c

08004cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_IncTick+0x20>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_IncTick+0x24>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4413      	add	r3, r2
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <HAL_IncTick+0x24>)
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000020 	.word	0x20000020
 8004cd0:	20000788 	.word	0x20000788

08004cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_GetTick+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000788 	.word	0x20000788

08004cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7ff ffee 	bl	8004cd4 <HAL_GetTick>
 8004cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d005      	beq.n	8004d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <HAL_Delay+0x44>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d12:	bf00      	nop
 8004d14:	f7ff ffde 	bl	8004cd4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d8f7      	bhi.n	8004d14 <HAL_Delay+0x28>
  {
  }
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000020 	.word	0x20000020

08004d34 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	f023 0201 	bic.w	r2, r3, #1
 8004d44:	4904      	ldr	r1, [pc, #16]	; (8004d58 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	46000400 	.word	0x46000400

08004d5c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	46000400 	.word	0x46000400

08004d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <LL_ADC_SetResolution+0x3c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d104      	bne.n	8004e0c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f023 020c 	bic.w	r2, r3, #12
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	46021000 	.word	0x46021000

08004e2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3360      	adds	r3, #96	; 0x60
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3360      	adds	r3, #96	; 0x60
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3360      	adds	r3, #96	; 0x60
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b087      	sub	sp, #28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3360      	adds	r3, #96	; 0x60
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	d002      	beq.n	8004f6e <LL_ADC_SetGainCompensation+0x32>
 8004f68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f6c:	e000      	b.n	8004f70 <LL_ADC_SetGainCompensation+0x34>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2107      	movs	r1, #7
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a2b      	ldr	r2, [pc, #172]	; (800507c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d020      	beq.n	8005016 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3330      	adds	r3, #48	; 0x30
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0a1b      	lsrs	r3, r3, #8
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	211f      	movs	r1, #31
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	0e9b      	lsrs	r3, r3, #26
 8005000:	f003 011f 	and.w	r1, r3, #31
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	431a      	orrs	r2, r3
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8005014:	e02b      	b.n	800506e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	210f      	movs	r1, #15
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	401a      	ands	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0e9b      	lsrs	r3, r3, #26
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	e010      	b.n	8005060 <LL_ADC_REG_SetSequencerRanks+0xa0>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	613b      	str	r3, [r7, #16]
  return result;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e003      	b.n	8005060 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	f001 011f 	and.w	r1, r1, #31
 8005066:	408b      	lsls	r3, r1
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	46021000 	.word	0x46021000

08005080 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	0e9b      	lsrs	r3, r3, #26
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	2201      	movs	r2, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	e015      	b.n	80050d0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]
  return result;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80050ba:	2320      	movs	r3, #32
 80050bc:	e003      	b.n	80050c6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fab3 f383 	clz	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	0e9b      	lsrs	r3, r3, #26
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	401a      	ands	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005118:	b480      	push	{r7}
 800511a:	b08b      	sub	sp, #44	; 0x2c
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d042      	beq.n	80051b2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <LL_ADC_SetChannelSamplingTime+0x28>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	0e9b      	lsrs	r3, r3, #26
 800513a:	f003 021f 	and.w	r2, r3, #31
 800513e:	e011      	b.n	8005164 <LL_ADC_SetChannelSamplingTime+0x4c>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	617b      	str	r3, [r7, #20]
  return result;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8005156:	2320      	movs	r3, #32
 8005158:	e003      	b.n	8005162 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	fab3 f383 	clz	r3, r3
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	0e5b      	lsrs	r3, r3, #25
 8005168:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800516c:	460b      	mov	r3, r1
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	1ad2      	subs	r2, r2, r3
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3314      	adds	r3, #20
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	0e5b      	lsrs	r3, r3, #25
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	4413      	add	r3, r2
 8005190:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	2107      	movs	r1, #7
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	401a      	ands	r2, r3
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	431a      	orrs	r2, r3
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80051b0:	e00e      	b.n	80051d0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	43db      	mvns	r3, r3
 80051bc:	401a      	ands	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	0219      	lsls	r1, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	400b      	ands	r3, r1
 80051c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	615a      	str	r2, [r3, #20]
}
 80051d0:	bf00      	nop
 80051d2:	372c      	adds	r7, #44	; 0x2c
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	46021000 	.word	0x46021000

080051e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f003 0318 	and.w	r3, r3, #24
 8005202:	4908      	ldr	r1, [pc, #32]	; (8005224 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005204:	40d9      	lsrs	r1, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	400b      	ands	r3, r1
 800520a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800520e:	431a      	orrs	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	000fffff 	.word	0x000fffff

08005228 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005260:	d101      	bne.n	8005266 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b0:	d101      	bne.n	80052b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <LL_ADC_IsEnabled+0x18>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <LL_ADC_IsEnabled+0x1a>
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d101      	bne.n	8005302 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d101      	bne.n	8005328 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b08b      	sub	sp, #44	; 0x2c
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8005346:	2300      	movs	r3, #0
 8005348:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e2ce      	b.n	80058f6 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a95      	ldr	r2, [pc, #596]	; (80055bc <HAL_ADC_Init+0x284>)
 8005366:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fe fc91 	bl	8003c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff5f 	bl	800524c <LL_ADC_IsDeepPowerDownEnabled>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff45 	bl	8005228 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff ff7a 	bl	800529c <LL_ADC_IsInternalRegulatorEnabled>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d115      	bne.n	80053da <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff5e 	bl	8005274 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b8:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <HAL_ADC_Init+0x288>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	4a81      	ldr	r2, [pc, #516]	; (80055c4 <HAL_ADC_Init+0x28c>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	3301      	adds	r3, #1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053cc:	e002      	b.n	80053d4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f9      	bne.n	80053ce <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff ff5c 	bl	800529c <LL_ADC_IsInternalRegulatorEnabled>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10e      	bne.n	8005408 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ee:	f043 0210 	orr.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff6c 	bl	80052ea <LL_ADC_REG_IsConversionOngoing>
 8005412:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 825f 	bne.w	80058e0 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 825b 	bne.w	80058e0 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005432:	f043 0202 	orr.w	r2, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff40 	bl	80052c4 <LL_ADC_IsEnabled>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d14f      	bne.n	80054ea <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5b      	ldr	r2, [pc, #364]	; (80055bc <HAL_ADC_Init+0x284>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d037      	beq.n	80054c4 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5b      	ldr	r2, [pc, #364]	; (80055c8 <HAL_ADC_Init+0x290>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_ADC_Init+0x130>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a5a      	ldr	r2, [pc, #360]	; (80055cc <HAL_ADC_Init+0x294>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10e      	bne.n	8005486 <HAL_ADC_Init+0x14e>
 8005468:	4857      	ldr	r0, [pc, #348]	; (80055c8 <HAL_ADC_Init+0x290>)
 800546a:	f7ff ff2b 	bl	80052c4 <LL_ADC_IsEnabled>
 800546e:	4604      	mov	r4, r0
 8005470:	4856      	ldr	r0, [pc, #344]	; (80055cc <HAL_ADC_Init+0x294>)
 8005472:	f7ff ff27 	bl	80052c4 <LL_ADC_IsEnabled>
 8005476:	4603      	mov	r3, r0
 8005478:	4323      	orrs	r3, r4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	e008      	b.n	8005498 <HAL_ADC_Init+0x160>
 8005486:	484d      	ldr	r0, [pc, #308]	; (80055bc <HAL_ADC_Init+0x284>)
 8005488:	f7ff ff1c 	bl	80052c4 <LL_ADC_IsEnabled>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d026      	beq.n	80054ea <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a49      	ldr	r2, [pc, #292]	; (80055c8 <HAL_ADC_Init+0x290>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_ADC_Init+0x178>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a48      	ldr	r2, [pc, #288]	; (80055cc <HAL_ADC_Init+0x294>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_Init+0x17c>
 80054b0:	4a47      	ldr	r2, [pc, #284]	; (80055d0 <HAL_ADC_Init+0x298>)
 80054b2:	e000      	b.n	80054b6 <HAL_ADC_Init+0x17e>
 80054b4:	4a47      	ldr	r2, [pc, #284]	; (80055d4 <HAL_ADC_Init+0x29c>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7ff fc61 	bl	8004d84 <LL_ADC_SetCommonClock>
 80054c2:	e012      	b.n	80054ea <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f7ff fc8c 	bl	8004dec <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80054d4:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_ADC_Init+0x29c>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80054e4:	493b      	ldr	r1, [pc, #236]	; (80055d4 <HAL_ADC_Init+0x29c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a33      	ldr	r2, [pc, #204]	; (80055bc <HAL_ADC_Init+0x284>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d010      	beq.n	8005516 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054fa:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005500:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8005506:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800550e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8005510:	4313      	orrs	r3, r2
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	e035      	b.n	8005582 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7f1b      	ldrb	r3, [r3, #28]
 800551a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005522:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005524:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800552a:	2a00      	cmp	r2, #0
 800552c:	d002      	beq.n	8005534 <HAL_ADC_Init+0x1fc>
 800552e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005532:	e000      	b.n	8005536 <HAL_ADC_Init+0x1fe>
 8005534:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005536:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800553c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da04      	bge.n	8005550 <HAL_ADC_Init+0x218>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800554e:	e001      	b.n	8005554 <HAL_ADC_Init+0x21c>
 8005550:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8005554:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	491b      	ldr	r1, [pc, #108]	; (80055c8 <HAL_ADC_Init+0x290>)
 800555c:	428b      	cmp	r3, r1
 800555e:	d004      	beq.n	800556a <HAL_ADC_Init+0x232>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4919      	ldr	r1, [pc, #100]	; (80055cc <HAL_ADC_Init+0x294>)
 8005566:	428b      	cmp	r3, r1
 8005568:	d103      	bne.n	8005572 <HAL_ADC_Init+0x23a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	e003      	b.n	800557a <HAL_ADC_Init+0x242>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005578:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800557a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	4313      	orrs	r3, r2
 8005580:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d131      	bne.n	80055f0 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <HAL_ADC_Init+0x284>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	3b01      	subs	r3, #1
 800559c:	045b      	lsls	r3, r3, #17
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	e024      	b.n	80055f0 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	e01a      	b.n	80055f0 <HAL_ADC_Init+0x2b8>
 80055ba:	bf00      	nop
 80055bc:	46021000 	.word	0x46021000
 80055c0:	20000000 	.word	0x20000000
 80055c4:	053e2d63 	.word	0x053e2d63
 80055c8:	42028000 	.word	0x42028000
 80055cc:	42028100 	.word	0x42028100
 80055d0:	42028300 	.word	0x42028300
 80055d4:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a75      	ldr	r2, [pc, #468]	; (80057cc <HAL_ADC_Init+0x494>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	4313      	orrs	r3, r2
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	4313      	orrs	r3, r2
 8005614:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <HAL_ADC_Init+0x498>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	6a39      	ldr	r1, [r7, #32]
 8005626:	430b      	orrs	r3, r1
 8005628:	60d3      	str	r3, [r2, #12]
 800562a:	e031      	b.n	8005690 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	4313      	orrs	r3, r2
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	4313      	orrs	r3, r2
 8005646:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <HAL_ADC_Init+0x49c>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6a39      	ldr	r1, [r7, #32]
 8005658:	430b      	orrs	r3, r1
 800565a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a4d      	ldr	r2, [pc, #308]	; (80057cc <HAL_ADC_Init+0x494>)
 8005696:	4293      	cmp	r3, r2
 8005698:	f000 80a4 	beq.w	80057e4 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fe22 	bl	80052ea <LL_ADC_REG_IsConversionOngoing>
 80056a6:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fe2f 	bl	8005310 <LL_ADC_INJ_IsConversionOngoing>
 80056b2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d166      	bne.n	8005788 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d163      	bne.n	8005788 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7f1b      	ldrb	r3, [r3, #28]
 80056c4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4943      	ldr	r1, [pc, #268]	; (80057d8 <HAL_ADC_Init+0x4a0>)
 80056cc:	428b      	cmp	r3, r1
 80056ce:	d004      	beq.n	80056da <HAL_ADC_Init+0x3a2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4941      	ldr	r1, [pc, #260]	; (80057dc <HAL_ADC_Init+0x4a4>)
 80056d6:	428b      	cmp	r3, r1
 80056d8:	d102      	bne.n	80056e0 <HAL_ADC_Init+0x3a8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	e002      	b.n	80056e6 <HAL_ADC_Init+0x3ae>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056e6:	4313      	orrs	r3, r2
 80056e8:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f4:	f023 0303 	bic.w	r3, r3, #3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	6a39      	ldr	r1, [r7, #32]
 80056fe:	430b      	orrs	r3, r1
 8005700:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f7ff fc11 	bl	8004f3c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11e      	bne.n	8005762 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <HAL_ADC_Init+0x4a8>)
 8005732:	4013      	ands	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005738:	0411      	lsls	r1, r2, #16
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800573e:	4311      	orrs	r1, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800574a:	4311      	orrs	r1, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005750:	0892      	lsrs	r2, r2, #2
 8005752:	430a      	orrs	r2, r1
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	611a      	str	r2, [r3, #16]
 8005760:	e007      	b.n	8005772 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10c      	bne.n	80057aa <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	f023 010f 	bic.w	r1, r3, #15
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
 80057a8:	e007      	b.n	80057ba <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 020f 	bic.w	r2, r2, #15
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	f043 0201 	orr.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80057ca:	e092      	b.n	80058f2 <HAL_ADC_Init+0x5ba>
 80057cc:	46021000 	.word	0x46021000
 80057d0:	fff0c013 	.word	0xfff0c013
 80057d4:	ffde800d 	.word	0xffde800d
 80057d8:	42028000 	.word	0x42028000
 80057dc:	42028100 	.word	0x42028100
 80057e0:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d111      	bne.n	8005812 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80057f6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80057fc:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8005802:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	4313      	orrs	r3, r2
 8005808:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	4b39      	ldr	r3, [pc, #228]	; (8005900 <HAL_ADC_Init+0x5c8>)
 800581a:	4013      	ands	r3, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	430b      	orrs	r3, r1
 8005824:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	461a      	mov	r2, r3
 8005830:	2100      	movs	r1, #0
 8005832:	f7ff fba6 	bl	8004f82 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	461a      	mov	r2, r3
 8005840:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8005844:	f7ff fb9d 	bl	8004f82 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f062 020f 	orn	r2, r2, #15
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
 8005860:	e018      	b.n	8005894 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586a:	d113      	bne.n	8005894 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	3b01      	subs	r3, #1
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	f003 031c 	and.w	r3, r3, #28
 800587e:	f06f 020f 	mvn.w	r2, #15
 8005882:	fa02 f103 	lsl.w	r1, r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <HAL_ADC_Init+0x5cc>)
 800589c:	4013      	ands	r3, r2
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d10b      	bne.n	80058bc <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	f043 0201 	orr.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80058ba:	e01a      	b.n	80058f2 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c0:	f023 0312 	bic.w	r3, r3, #18
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80058de:	e008      	b.n	80058f2 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e4:	f043 0210 	orr.w	r2, r3, #16
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80058f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	372c      	adds	r7, #44	; 0x2c
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	f7fffc02 	.word	0xf7fffc02
 8005904:	833ffff3 	.word	0x833ffff3

08005908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b0b7      	sub	sp, #220	; 0xdc
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4aa8      	ldr	r2, [pc, #672]	; (8005bc4 <HAL_ADC_ConfigChannel+0x2bc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d103      	bne.n	800592e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <HAL_ADC_ConfigChannel+0x36>
 8005938:	2302      	movs	r3, #2
 800593a:	f000 bdfe 	b.w	800653a <HAL_ADC_ConfigChannel+0xc32>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fccd 	bl	80052ea <LL_ADC_REG_IsConversionOngoing>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 85c1 	bne.w	80064da <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a99      	ldr	r2, [pc, #612]	; (8005bc4 <HAL_ADC_ConfigChannel+0x2bc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f000 8409 	beq.w	8006176 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d108      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x7a>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	0e9b      	lsrs	r3, r3, #26
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	2201      	movs	r2, #1
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	e01d      	b.n	80059be <HAL_ADC_ConfigChannel+0xb6>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800599a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800599e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80059a6:	2320      	movs	r3, #32
 80059a8:	e004      	b.n	80059b4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80059aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2201      	movs	r2, #1
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	69d1      	ldr	r1, [r2, #28]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6859      	ldr	r1, [r3, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	f7ff faf1 	bl	8004fc0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fc81 	bl	80052ea <LL_ADC_REG_IsConversionOngoing>
 80059e8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fc8d 	bl	8005310 <LL_ADC_INJ_IsConversionOngoing>
 80059f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 81df 	bne.w	8005dc2 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 81da 	bne.w	8005dc2 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7ff fb7c 	bl	8005118 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d046      	beq.n	8005ad0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6919      	ldr	r1, [r3, #16]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a52:	f7ff f9eb 	bl	8004e2c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6919      	ldr	r1, [r3, #16]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f7ff fa19 	bl	8004e9a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7e9b      	ldrb	r3, [r3, #26]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d11e      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x17e>
 8005a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a84:	e000      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x180>
 8005a86:	2300      	movs	r3, #0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f7ff fa3c 	bl	8004f06 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d102      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x19c>
 8005a9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005aa2:	e000      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x19e>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7ff fa12 	bl	8004ed0 <LL_ADC_SetOffsetSignedSaturation>
 8005aac:	e189      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7ff fa24 	bl	8004f06 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7ff fa01 	bl	8004ed0 <LL_ADC_SetOffsetSignedSaturation>
 8005ace:	e178      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff f9c9 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x1f4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff f9be 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005af2:	4603      	mov	r3, r0
 8005af4:	0e9b      	lsrs	r3, r3, #26
 8005af6:	f003 021f 	and.w	r2, r3, #31
 8005afa:	e01e      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x232>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff f9b3 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b12:	fa93 f3a3 	rbit	r3, r3
 8005b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	e004      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8005b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x24a>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	0e9b      	lsrs	r3, r3, #26
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	e018      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x27c>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b5e:	fa93 f3a3 	rbit	r3, r3
 8005b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8005b76:	2320      	movs	r3, #32
 8005b78:	e004      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8005b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b7e:	fab3 f383 	clz	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d107      	bne.n	8005b98 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	f7ff f94a 	bl	8004e2c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff f965 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x2c0>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff f95a 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	0e9b      	lsrs	r3, r3, #26
 8005bbe:	f003 021f 	and.w	r2, r3, #31
 8005bc2:	e020      	b.n	8005c06 <HAL_ADC_ConfigChannel+0x2fe>
 8005bc4:	46021000 	.word	0x46021000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff f94d 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bde:	fa93 f3a3 	rbit	r3, r3
 8005be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	e004      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8005bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x316>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	e018      	b.n	8005c50 <HAL_ADC_ConfigChannel+0x348>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2a:	fa93 f3a3 	rbit	r3, r3
 8005c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8005c42:	2320      	movs	r3, #32
 8005c44:	e004      	b.n	8005c50 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8005c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c4a:	fab3 f383 	clz	r3, r3
 8005c4e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d107      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2101      	movs	r1, #1
 8005c60:	f7ff f8e4 	bl	8004e2c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f8ff 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x388>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f8f4 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	0e9b      	lsrs	r3, r3, #26
 8005c8a:	f003 021f 	and.w	r2, r3, #31
 8005c8e:	e01a      	b.n	8005cc6 <HAL_ADC_ConfigChannel+0x3be>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2102      	movs	r1, #2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff f8e9 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	e004      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8005cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <HAL_ADC_ConfigChannel+0x3d6>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	0e9b      	lsrs	r3, r3, #26
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	e011      	b.n	8005d02 <HAL_ADC_ConfigChannel+0x3fa>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce6:	fa93 f3a3 	rbit	r3, r3
 8005cea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8005cf6:	2320      	movs	r3, #32
 8005cf8:	e003      	b.n	8005d02 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfc:	fab3 f383 	clz	r3, r3
 8005d00:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d107      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2102      	movs	r1, #2
 8005d12:	f7ff f88b 	bl	8004e2c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2103      	movs	r1, #3
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff f8a6 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <HAL_ADC_ConfigChannel+0x43a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2103      	movs	r1, #3
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff f89b 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	0e9b      	lsrs	r3, r3, #26
 8005d3c:	f003 021f 	and.w	r2, r3, #31
 8005d40:	e017      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x46a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2103      	movs	r1, #3
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff f890 	bl	8004e6e <LL_ADC_GetOffsetChannel>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d54:	fa93 f3a3 	rbit	r3, r3
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8005d64:	2320      	movs	r3, #32
 8005d66:	e003      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8005d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x482>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	0e9b      	lsrs	r3, r3, #26
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	e011      	b.n	8005dae <HAL_ADC_ConfigChannel+0x4a6>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d92:	fa93 f3a3 	rbit	r3, r3
 8005d96:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8005da2:	2320      	movs	r3, #32
 8005da4:	e003      	b.n	8005dae <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8005da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d107      	bne.n	8005dc2 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2103      	movs	r1, #3
 8005dbe:	f7ff f835 	bl	8004e2c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fa7c 	bl	80052c4 <LL_ADC_IsEnabled>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 83ad 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f7ff f9fd 	bl	80051e0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dee:	f040 80d6 	bne.w	8005f9e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x50e>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	0e9b      	lsrs	r3, r3, #26
 8005e04:	3301      	adds	r3, #1
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b09      	cmp	r3, #9
 8005e0c:	bf94      	ite	ls
 8005e0e:	2301      	movls	r3, #1
 8005e10:	2300      	movhi	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	e019      	b.n	8005e4a <HAL_ADC_ConfigChannel+0x542>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1e:	fa93 f3a3 	rbit	r3, r3
 8005e22:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005e2e:	2320      	movs	r3, #32
 8005e30:	e003      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	bf94      	ite	ls
 8005e44:	2301      	movls	r3, #1
 8005e46:	2300      	movhi	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d04d      	beq.n	8005eea <HAL_ADC_ConfigChannel+0x5e2>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x562>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	0e9b      	lsrs	r3, r3, #26
 8005e60:	3301      	adds	r3, #1
 8005e62:	069b      	lsls	r3, r3, #26
 8005e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e68:	e015      	b.n	8005e96 <HAL_ADC_ConfigChannel+0x58e>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	fa93 f3a3 	rbit	r3, r3
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005e82:	2320      	movs	r3, #32
 8005e84:	e003      	b.n	8005e8e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	fab3 f383 	clz	r3, r3
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	069b      	lsls	r3, r3, #26
 8005e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_ADC_ConfigChannel+0x5ae>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	0e9b      	lsrs	r3, r3, #26
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2101      	movs	r1, #1
 8005eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb4:	e017      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5de>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	fa93 f3a3 	rbit	r3, r3
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8005ece:	2320      	movs	r3, #32
 8005ed0:	e003      	b.n	8005eda <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	fab3 f383 	clz	r3, r3
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	3301      	adds	r3, #1
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	e04e      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x680>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x5fe>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	0e9b      	lsrs	r3, r3, #26
 8005efc:	3301      	adds	r3, #1
 8005efe:	069b      	lsls	r3, r3, #26
 8005f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f04:	e015      	b.n	8005f32 <HAL_ADC_ConfigChannel+0x62a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e003      	b.n	8005f2a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	fab3 f383 	clz	r3, r3
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	069b      	lsls	r3, r3, #26
 8005f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x64a>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	0e9b      	lsrs	r3, r3, #26
 8005f44:	3301      	adds	r3, #1
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	e017      	b.n	8005f82 <HAL_ADC_ConfigChannel+0x67a>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	fa93 f3a3 	rbit	r3, r3
 8005f5e:	61bb      	str	r3, [r7, #24]
  return result;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	e003      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	fab3 f383 	clz	r3, r3
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005f9a:	f7ff f8bd 	bl	8005118 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f280 82c3 	bge.w	800652e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a92      	ldr	r2, [pc, #584]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_ADC_ConfigChannel+0x6b4>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a91      	ldr	r2, [pc, #580]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x6b8>
 8005fbc:	4b90      	ldr	r3, [pc, #576]	; (8006200 <HAL_ADC_ConfigChannel+0x8f8>)
 8005fbe:	e000      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x6ba>
 8005fc0:	4b90      	ldr	r3, [pc, #576]	; (8006204 <HAL_ADC_ConfigChannel+0x8fc>)
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe ff04 	bl	8004dd0 <LL_ADC_GetCommonPathInternalCh>
 8005fc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a89      	ldr	r2, [pc, #548]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_ADC_ConfigChannel+0x6d8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a88      	ldr	r2, [pc, #544]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10e      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x6f6>
 8005fe0:	4885      	ldr	r0, [pc, #532]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8005fe2:	f7ff f96f 	bl	80052c4 <LL_ADC_IsEnabled>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4884      	ldr	r0, [pc, #528]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 8005fea:	f7ff f96b 	bl	80052c4 <LL_ADC_IsEnabled>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4323      	orrs	r3, r4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf0c      	ite	eq
 8005ff6:	2301      	moveq	r3, #1
 8005ff8:	2300      	movne	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e008      	b.n	8006010 <HAL_ADC_ConfigChannel+0x708>
 8005ffe:	4882      	ldr	r0, [pc, #520]	; (8006208 <HAL_ADC_ConfigChannel+0x900>)
 8006000:	f7ff f960 	bl	80052c4 <LL_ADC_IsEnabled>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a6 	beq.w	8006162 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a7c      	ldr	r2, [pc, #496]	; (800620c <HAL_ADC_ConfigChannel+0x904>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d13c      	bne.n	800609a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d136      	bne.n	800609a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a71      	ldr	r2, [pc, #452]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00a      	beq.n	800604c <HAL_ADC_ConfigChannel+0x744>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a70      	ldr	r2, [pc, #448]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d005      	beq.n	800604c <HAL_ADC_ConfigChannel+0x744>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a70      	ldr	r2, [pc, #448]	; (8006208 <HAL_ADC_ConfigChannel+0x900>)
 8006046:	4293      	cmp	r3, r2
 8006048:	f040 826e 	bne.w	8006528 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a69      	ldr	r2, [pc, #420]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_ADC_ConfigChannel+0x758>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a68      	ldr	r2, [pc, #416]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d101      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x75c>
 8006060:	4a67      	ldr	r2, [pc, #412]	; (8006200 <HAL_ADC_ConfigChannel+0x8f8>)
 8006062:	e000      	b.n	8006066 <HAL_ADC_ConfigChannel+0x75e>
 8006064:	4a67      	ldr	r2, [pc, #412]	; (8006204 <HAL_ADC_ConfigChannel+0x8fc>)
 8006066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800606a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7fe fe9a 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006076:	4b66      	ldr	r3, [pc, #408]	; (8006210 <HAL_ADC_ConfigChannel+0x908>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	099b      	lsrs	r3, r3, #6
 800607c:	4a65      	ldr	r2, [pc, #404]	; (8006214 <HAL_ADC_ConfigChannel+0x90c>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	3301      	adds	r3, #1
 8006086:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8006088:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800608a:	e002      	b.n	8006092 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f9      	bne.n	800608c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006098:	e246      	b.n	8006528 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5e      	ldr	r2, [pc, #376]	; (8006218 <HAL_ADC_ConfigChannel+0x910>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d12b      	bne.n	80060fc <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80060a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d125      	bne.n	80060fc <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a50      	ldr	r2, [pc, #320]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00a      	beq.n	80060d0 <HAL_ADC_ConfigChannel+0x7c8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a4f      	ldr	r2, [pc, #316]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d005      	beq.n	80060d0 <HAL_ADC_ConfigChannel+0x7c8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a4f      	ldr	r2, [pc, #316]	; (8006208 <HAL_ADC_ConfigChannel+0x900>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f040 822e 	bne.w	800652c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a48      	ldr	r2, [pc, #288]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_ADC_ConfigChannel+0x7dc>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a47      	ldr	r2, [pc, #284]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d101      	bne.n	80060e8 <HAL_ADC_ConfigChannel+0x7e0>
 80060e4:	4a46      	ldr	r2, [pc, #280]	; (8006200 <HAL_ADC_ConfigChannel+0x8f8>)
 80060e6:	e000      	b.n	80060ea <HAL_ADC_ConfigChannel+0x7e2>
 80060e8:	4a46      	ldr	r2, [pc, #280]	; (8006204 <HAL_ADC_ConfigChannel+0x8fc>)
 80060ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7fe fe58 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060fa:	e217      	b.n	800652c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a46      	ldr	r2, [pc, #280]	; (800621c <HAL_ADC_ConfigChannel+0x914>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f040 8213 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800610c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 820c 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a37      	ldr	r2, [pc, #220]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00a      	beq.n	8006136 <HAL_ADC_ConfigChannel+0x82e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a35      	ldr	r2, [pc, #212]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d005      	beq.n	8006136 <HAL_ADC_ConfigChannel+0x82e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a36      	ldr	r2, [pc, #216]	; (8006208 <HAL_ADC_ConfigChannel+0x900>)
 8006130:	4293      	cmp	r3, r2
 8006132:	f040 81fc 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2f      	ldr	r2, [pc, #188]	; (80061f8 <HAL_ADC_ConfigChannel+0x8f0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_ADC_ConfigChannel+0x842>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2d      	ldr	r2, [pc, #180]	; (80061fc <HAL_ADC_ConfigChannel+0x8f4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_ADC_ConfigChannel+0x846>
 800614a:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <HAL_ADC_ConfigChannel+0x8f8>)
 800614c:	e000      	b.n	8006150 <HAL_ADC_ConfigChannel+0x848>
 800614e:	4a2d      	ldr	r2, [pc, #180]	; (8006204 <HAL_ADC_ConfigChannel+0x8fc>)
 8006150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe fe25 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
 8006160:	e1e5      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006174:	e1db      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	f000 811b 	beq.w	80063be <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006190:	d004      	beq.n	800619c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006196:	4a22      	ldr	r2, [pc, #136]	; (8006220 <HAL_ADC_ConfigChannel+0x918>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d107      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe ff6b 	bl	8005080 <LL_ADC_REG_SetSequencerChAdd>
 80061aa:	e059      	b.n	8006260 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	210f      	movs	r1, #15
 80061bc:	fa01 f303 	lsl.w	r3, r1, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x8d4>
 80061d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061d4:	0e9b      	lsrs	r3, r3, #26
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	e027      	b.n	800622c <HAL_ADC_ConfigChannel+0x924>
 80061dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061e0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	fa93 f3a3 	rbit	r3, r3
 80061e8:	60fb      	str	r3, [r7, #12]
  return result;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d117      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80061f4:	2320      	movs	r3, #32
 80061f6:	e019      	b.n	800622c <HAL_ADC_ConfigChannel+0x924>
 80061f8:	42028000 	.word	0x42028000
 80061fc:	42028100 	.word	0x42028100
 8006200:	42028300 	.word	0x42028300
 8006204:	46021300 	.word	0x46021300
 8006208:	46021000 	.word	0x46021000
 800620c:	ce080000 	.word	0xce080000
 8006210:	20000000 	.word	0x20000000
 8006214:	053e2d63 	.word	0x053e2d63
 8006218:	ca040000 	.word	0xca040000
 800621c:	80000001 	.word	0x80000001
 8006220:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6849      	ldr	r1, [r1, #4]
 8006230:	f001 011f 	and.w	r1, r1, #31
 8006234:	408b      	lsls	r3, r1
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	089b      	lsrs	r3, r3, #2
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	429a      	cmp	r2, r3
 800624c:	d808      	bhi.n	8006260 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800625a:	4619      	mov	r1, r3
 800625c:	f7fe feb0 	bl	8004fc0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800626e:	f7fe ff53 	bl	8005118 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f280 8159 	bge.w	800652e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a9b      	ldr	r2, [pc, #620]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_ADC_ConfigChannel+0x988>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a9a      	ldr	r2, [pc, #616]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x98c>
 8006290:	4b99      	ldr	r3, [pc, #612]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 8006292:	e000      	b.n	8006296 <HAL_ADC_ConfigChannel+0x98e>
 8006294:	4b99      	ldr	r3, [pc, #612]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fd9a 	bl	8004dd0 <LL_ADC_GetCommonPathInternalCh>
 800629c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a96      	ldr	r2, [pc, #600]	; (8006500 <HAL_ADC_ConfigChannel+0xbf8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d12b      	bne.n	8006302 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d125      	bne.n	8006302 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a8d      	ldr	r2, [pc, #564]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_ADC_ConfigChannel+0x9c2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a8b      	ldr	r2, [pc, #556]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d101      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x9c6>
 80062ca:	4a8b      	ldr	r2, [pc, #556]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 80062cc:	e000      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x9c8>
 80062ce:	4a8b      	ldr	r2, [pc, #556]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 80062d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f7fe fd65 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80062e0:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_ADC_ConfigChannel+0xbfc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	099b      	lsrs	r3, r3, #6
 80062e6:	4a88      	ldr	r2, [pc, #544]	; (8006508 <HAL_ADC_ConfigChannel+0xc00>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80062f2:	e002      	b.n	80062fa <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f9      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006300:	e045      	b.n	800638e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a81      	ldr	r2, [pc, #516]	; (800650c <HAL_ADC_ConfigChannel+0xc04>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d11b      	bne.n	8006344 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800630c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006314:	2b00      	cmp	r3, #0
 8006316:	d115      	bne.n	8006344 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a74      	ldr	r2, [pc, #464]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_ADC_ConfigChannel+0xa24>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a73      	ldr	r2, [pc, #460]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_ADC_ConfigChannel+0xa28>
 800632c:	4a72      	ldr	r2, [pc, #456]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 800632e:	e000      	b.n	8006332 <HAL_ADC_ConfigChannel+0xa2a>
 8006330:	4a72      	ldr	r2, [pc, #456]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7fe fd34 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
 8006342:	e024      	b.n	800638e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a71      	ldr	r2, [pc, #452]	; (8006510 <HAL_ADC_ConfigChannel+0xc08>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d11f      	bne.n	800638e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800634e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d115      	bne.n	8006386 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a64      	ldr	r2, [pc, #400]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_ADC_ConfigChannel+0xa66>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a62      	ldr	r2, [pc, #392]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <HAL_ADC_ConfigChannel+0xa6a>
 800636e:	4a62      	ldr	r2, [pc, #392]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 8006370:	e000      	b.n	8006374 <HAL_ADC_ConfigChannel+0xa6c>
 8006372:	4a62      	ldr	r2, [pc, #392]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f7fe fd13 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
 8006384:	e003      	b.n	800638e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a62      	ldr	r2, [pc, #392]	; (8006514 <HAL_ADC_ConfigChannel+0xc0c>)
 800638c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a61      	ldr	r2, [pc, #388]	; (8006518 <HAL_ADC_ConfigChannel+0xc10>)
 8006394:	4293      	cmp	r3, r2
 8006396:	f040 80ca 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800639a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800639e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 80c3 	bne.w	800652e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80063bc:	e0b7      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c6:	d004      	beq.n	80063d2 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80063cc:	4a53      	ldr	r2, [pc, #332]	; (800651c <HAL_ADC_ConfigChannel+0xc14>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d106      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fe83 	bl	80050e6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f280 80a2 	bge.w	800652e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_ADC_ConfigChannel+0xaf6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3e      	ldr	r2, [pc, #248]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0xafa>
 80063fe:	4b3e      	ldr	r3, [pc, #248]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 8006400:	e000      	b.n	8006404 <HAL_ADC_ConfigChannel+0xafc>
 8006402:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fce3 	bl	8004dd0 <LL_ADC_GetCommonPathInternalCh>
 800640a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <HAL_ADC_ConfigChannel+0xc18>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d115      	bne.n	8006444 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a34      	ldr	r2, [pc, #208]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_ADC_ConfigChannel+0xb24>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_ADC_ConfigChannel+0xb28>
 800642c:	4a32      	ldr	r2, [pc, #200]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 800642e:	e000      	b.n	8006432 <HAL_ADC_ConfigChannel+0xb2a>
 8006430:	4a32      	ldr	r2, [pc, #200]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fe fcb4 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
 8006442:	e034      	b.n	80064ae <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a36      	ldr	r2, [pc, #216]	; (8006524 <HAL_ADC_ConfigChannel+0xc1c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d115      	bne.n	800647a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a27      	ldr	r2, [pc, #156]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_ADC_ConfigChannel+0xb5a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <HAL_ADC_ConfigChannel+0xb5e>
 8006462:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 8006464:	e000      	b.n	8006468 <HAL_ADC_ConfigChannel+0xb60>
 8006466:	4a25      	ldr	r2, [pc, #148]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 8006468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800646c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7fe fc99 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
 8006478:	e019      	b.n	80064ae <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a24      	ldr	r2, [pc, #144]	; (8006510 <HAL_ADC_ConfigChannel+0xc08>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d114      	bne.n	80064ae <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_ADC_ConfigChannel+0xbe8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_ADC_ConfigChannel+0xb90>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_ADC_ConfigChannel+0xbec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_ADC_ConfigChannel+0xb94>
 8006498:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <HAL_ADC_ConfigChannel+0xbf0>)
 800649a:	e000      	b.n	800649e <HAL_ADC_ConfigChannel+0xb96>
 800649c:	4a17      	ldr	r2, [pc, #92]	; (80064fc <HAL_ADC_ConfigChannel+0xbf4>)
 800649e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe fc7e 	bl	8004daa <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a19      	ldr	r2, [pc, #100]	; (8006518 <HAL_ADC_ConfigChannel+0xc10>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d13a      	bne.n	800652e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d134      	bne.n	800652e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80064d8:	e029      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80064ec:	e01f      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
 80064ee:	bf00      	nop
 80064f0:	42028000 	.word	0x42028000
 80064f4:	42028100 	.word	0x42028100
 80064f8:	42028300 	.word	0x42028300
 80064fc:	46021300 	.word	0x46021300
 8006500:	b6002000 	.word	0xb6002000
 8006504:	20000000 	.word	0x20000000
 8006508:	053e2d63 	.word	0x053e2d63
 800650c:	ba004000 	.word	0xba004000
 8006510:	80000001 	.word	0x80000001
 8006514:	b2001000 	.word	0xb2001000
 8006518:	d7200000 	.word	0xd7200000
 800651c:	80000010 	.word	0x80000010
 8006520:	ce080000 	.word	0xce080000
 8006524:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800652c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8006536:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800653a:	4618      	mov	r0, r3
 800653c:	37dc      	adds	r7, #220	; 0xdc
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	bf00      	nop

08006544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <__NVIC_SetPriorityGrouping+0x44>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006560:	4013      	ands	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800656c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006576:	4a04      	ldr	r2, [pc, #16]	; (8006588 <__NVIC_SetPriorityGrouping+0x44>)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	60d3      	str	r3, [r2, #12]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	f003 0307 	and.w	r3, r3, #7
}
 800659a:	4618      	mov	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80065b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	db0a      	blt.n	80065d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	490c      	ldr	r1, [pc, #48]	; (80065f4 <__NVIC_SetPriority+0x4c>)
 80065c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065c6:	0112      	lsls	r2, r2, #4
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	440b      	add	r3, r1
 80065cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065d0:	e00a      	b.n	80065e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4908      	ldr	r1, [pc, #32]	; (80065f8 <__NVIC_SetPriority+0x50>)
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	3b04      	subs	r3, #4
 80065e0:	0112      	lsls	r2, r2, #4
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	440b      	add	r3, r1
 80065e6:	761a      	strb	r2, [r3, #24]
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	e000e100 	.word	0xe000e100
 80065f8:	e000ed00 	.word	0xe000ed00

080065fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	; 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f1c3 0307 	rsb	r3, r3, #7
 8006616:	2b04      	cmp	r3, #4
 8006618:	bf28      	it	cs
 800661a:	2304      	movcs	r3, #4
 800661c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	3304      	adds	r3, #4
 8006622:	2b06      	cmp	r3, #6
 8006624:	d902      	bls.n	800662c <NVIC_EncodePriority+0x30>
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3b03      	subs	r3, #3
 800662a:	e000      	b.n	800662e <NVIC_EncodePriority+0x32>
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43da      	mvns	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	401a      	ands	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006644:	f04f 31ff 	mov.w	r1, #4294967295
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	43d9      	mvns	r1, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006654:	4313      	orrs	r3, r2
         );
}
 8006656:	4618      	mov	r0, r3
 8006658:	3724      	adds	r7, #36	; 0x24
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3b01      	subs	r3, #1
 8006670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006674:	d301      	bcc.n	800667a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006676:	2301      	movs	r3, #1
 8006678:	e00f      	b.n	800669a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800667a:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <SysTick_Config+0x40>)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3b01      	subs	r3, #1
 8006680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006682:	210f      	movs	r1, #15
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	f7ff ff8e 	bl	80065a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <SysTick_Config+0x40>)
 800668e:	2200      	movs	r2, #0
 8006690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <SysTick_Config+0x40>)
 8006694:	2207      	movs	r2, #7
 8006696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	e000e010 	.word	0xe000e010

080066a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff47 	bl	8006544 <__NVIC_SetPriorityGrouping>
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	4603      	mov	r3, r0
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066cc:	f7ff ff5e 	bl	800658c <__NVIC_GetPriorityGrouping>
 80066d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	f7ff ff90 	bl	80065fc <NVIC_EncodePriority>
 80066dc:	4602      	mov	r2, r0
 80066de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff5f 	bl	80065a8 <__NVIC_SetPriority>
}
 80066ea:	bf00      	nop
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ffb2 	bl	8006664 <SysTick_Config>
 8006700:	4603      	mov	r3, r0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800671e:	e1ba      	b.n	8006a96 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	2101      	movs	r1, #1
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	fa01 f303 	lsl.w	r3, r1, r3
 800672c:	4013      	ands	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 81aa 	beq.w	8006a90 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a55      	ldr	r2, [pc, #340]	; (8006894 <HAL_GPIO_Init+0x188>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d15d      	bne.n	8006800 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800674a:	2201      	movs	r2, #1
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	4013      	ands	r3, r2
 8006758:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 0201 	and.w	r2, r3, #1
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	4313      	orrs	r3, r2
 800676c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006774:	4a48      	ldr	r2, [pc, #288]	; (8006898 <HAL_GPIO_Init+0x18c>)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800677c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800677e:	4a46      	ldr	r2, [pc, #280]	; (8006898 <HAL_GPIO_Init+0x18c>)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4413      	add	r3, r2
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	08da      	lsrs	r2, r3, #3
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3208      	adds	r2, #8
 8006792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006796:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	220f      	movs	r2, #15
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	43db      	mvns	r3, r3
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	4013      	ands	r3, r2
 80067ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	220b      	movs	r2, #11
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	4313      	orrs	r3, r2
 80067c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	08da      	lsrs	r2, r3, #3
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3208      	adds	r2, #8
 80067ca:	69f9      	ldr	r1, [r7, #28]
 80067cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	2203      	movs	r2, #3
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	43db      	mvns	r3, r3
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	4013      	ands	r3, r2
 80067e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	2202      	movs	r2, #2
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e067      	b.n	80068d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d003      	beq.n	8006810 <HAL_GPIO_Init+0x104>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b12      	cmp	r3, #18
 800680e:	d145      	bne.n	800689c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	08da      	lsrs	r2, r3, #3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3208      	adds	r2, #8
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	220f      	movs	r2, #15
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	4013      	ands	r3, r2
 8006832:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 020f 	and.w	r2, r3, #15
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	4313      	orrs	r3, r2
 800684c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	08da      	lsrs	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3208      	adds	r2, #8
 8006856:	69f9      	ldr	r1, [r7, #28]
 8006858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	2203      	movs	r2, #3
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	43db      	mvns	r3, r3
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	4013      	ands	r3, r2
 8006872:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 0203 	and.w	r2, r3, #3
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	4313      	orrs	r3, r2
 8006888:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e01e      	b.n	80068d0 <HAL_GPIO_Init+0x1c4>
 8006892:	bf00      	nop
 8006894:	46020000 	.word	0x46020000
 8006898:	0800df40 	.word	0x0800df40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	2203      	movs	r2, #3
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f003 0203 	and.w	r2, r3, #3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d00b      	beq.n	80068f0 <HAL_GPIO_Init+0x1e4>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d007      	beq.n	80068f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068e4:	2b11      	cmp	r3, #17
 80068e6:	d003      	beq.n	80068f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b12      	cmp	r3, #18
 80068ee:	d130      	bne.n	8006952 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	2203      	movs	r2, #3
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	43db      	mvns	r3, r3
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	4013      	ands	r3, r2
 8006906:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	4313      	orrs	r3, r2
 8006918:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8006926:	2201      	movs	r2, #1
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	43db      	mvns	r3, r3
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	4013      	ands	r3, r2
 8006934:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	091b      	lsrs	r3, r3, #4
 800693c:	f003 0201 	and.w	r2, r3, #1
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	fa02 f303 	lsl.w	r3, r2, r3
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	4313      	orrs	r3, r2
 800694a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d017      	beq.n	800698a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	2203      	movs	r2, #3
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	4013      	ands	r3, r2
 8006970:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	4313      	orrs	r3, r2
 8006982:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d07c      	beq.n	8006a90 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006996:	4a47      	ldr	r2, [pc, #284]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	089b      	lsrs	r3, r3, #2
 800699c:	3318      	adds	r3, #24
 800699e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	220f      	movs	r2, #15
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	4013      	ands	r3, r2
 80069b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0a9a      	lsrs	r2, r3, #10
 80069be:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <HAL_GPIO_Init+0x3ac>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	f002 0203 	and.w	r2, r2, #3
 80069c8:	00d2      	lsls	r2, r2, #3
 80069ca:	4093      	lsls	r3, r2
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80069d2:	4938      	ldr	r1, [pc, #224]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	3318      	adds	r3, #24
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	43db      	mvns	r3, r3
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	4013      	ands	r3, r2
 80069ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8006a04:	4a2b      	ldr	r2, [pc, #172]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006a0a:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	43db      	mvns	r3, r3
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8006a2e:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006a34:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	4013      	ands	r3, r2
 8006a44:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8006a5a:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a68:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	4013      	ands	r3, r2
 8006a72:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006a88:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <HAL_GPIO_Init+0x3a8>)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3301      	adds	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f ae3d 	bne.w	8006720 <HAL_GPIO_Init+0x14>
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	3724      	adds	r7, #36	; 0x24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	46022000 	.word	0x46022000
 8006ab8:	002f7f7f 	.word	0x002f7f7f

08006abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006acc:	787b      	ldrb	r3, [r7, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006ad8:	e002      	b.n	8006ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006afe:	887a      	ldrh	r2, [r7, #2]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4013      	ands	r3, r2
 8006b04:	041a      	lsls	r2, r3, #16
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	43d9      	mvns	r1, r3
 8006b0a:	887b      	ldrh	r3, [r7, #2]
 8006b0c:	400b      	ands	r3, r1
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	619a      	str	r2, [r3, #24]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b22:	b08d      	sub	sp, #52	; 0x34
 8006b24:	af0a      	add	r7, sp, #40	; 0x28
 8006b26:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e048      	b.n	8006bc4 <HAL_HCD_Init+0xa4>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fd f9de 	bl	8003f08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
  {
    hhcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f006 f9d0 	bl	800cefe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	687e      	ldr	r6, [r7, #4]
 8006b66:	466d      	mov	r5, sp
 8006b68:	f106 0410 	add.w	r4, r6, #16
 8006b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b7c:	1d33      	adds	r3, r6, #4
 8006b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b80:	6838      	ldr	r0, [r7, #0]
 8006b82:	f006 f98e 	bl	800cea2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f006 f9c7 	bl	800cf20 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	687e      	ldr	r6, [r7, #4]
 8006b9a:	466d      	mov	r5, sp
 8006b9c:	f106 0410 	add.w	r4, r6, #16
 8006ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bb0:	1d33      	adds	r3, r6, #4
 8006bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bb4:	6838      	ldr	r0, [r7, #0]
 8006bb6:	f006 faa5 	bl	800d104 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bcc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	e007      	b.n	8006bfa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 0204 	bic.w	r2, r3, #4
 8006bf2:	4905      	ldr	r1, [pc, #20]	; (8006c08 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40030400 	.word	0x40030400

08006c0c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_ICACHE_Enable+0x1c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a04      	ldr	r2, [pc, #16]	; (8006c28 <HAL_ICACHE_Enable+0x1c>)
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40030400 	.word	0x40030400

08006c2c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006c34:	4b39      	ldr	r3, [pc, #228]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c3c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d10b      	bne.n	8006c5e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4c:	d905      	bls.n	8006c5a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006c4e:	4b33      	ldr	r3, [pc, #204]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	4a32      	ldr	r2, [pc, #200]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c58:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e057      	b.n	8006d0e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d90a      	bls.n	8006c7c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006c66:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	60d3      	str	r3, [r2, #12]
 8006c7a:	e007      	b.n	8006c8c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006c7c:	4b27      	ldr	r3, [pc, #156]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c84:	4925      	ldr	r1, [pc, #148]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006c8c:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a24      	ldr	r2, [pc, #144]	; (8006d24 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	2232      	movs	r2, #50	; 0x32
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	099b      	lsrs	r3, r3, #6
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006caa:	e002      	b.n	8006cb2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f3      	bne.n	8006cac <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01b      	beq.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006cca:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	2232      	movs	r2, #50	; 0x32
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	4a11      	ldr	r2, [pc, #68]	; (8006d24 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006ce8:	e002      	b.n	8006cf0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f3      	bne.n	8006cea <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e000      	b.n	8006d0e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	46020800 	.word	0x46020800
 8006d20:	20000000 	.word	0x20000000
 8006d24:	10624dd3 	.word	0x10624dd3

08006d28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	46020800 	.word	0x46020800

08006d44 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <HAL_PWREx_ConfigSupply+0x94>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <HAL_PWREx_ConfigSupply+0x98>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	2232      	movs	r2, #50	; 0x32
 8006d5a:	fb02 f303 	mul.w	r3, r2, r3
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <HAL_PWREx_ConfigSupply+0x98>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	099b      	lsrs	r3, r3, #6
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d113      	bne.n	8006d98 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d76:	f023 0302 	bic.w	r3, r3, #2
 8006d7a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006d7c:	e002      	b.n	8006d84 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006d84:	4b16      	ldr	r3, [pc, #88]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d116      	bne.n	8006dbe <HAL_PWREx_ConfigSupply+0x7a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f3      	bne.n	8006d7e <HAL_PWREx_ConfigSupply+0x3a>
 8006d96:	e012      	b.n	8006dbe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006d98:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4a10      	ldr	r2, [pc, #64]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d9e:	f043 0302 	orr.w	r3, r3, #2
 8006da2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006da4:	e002      	b.n	8006dac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <HAL_PWREx_ConfigSupply+0x9c>)
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <HAL_PWREx_ConfigSupply+0x7a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f3      	bne.n	8006da6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e000      	b.n	8006dca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000000 	.word	0x20000000
 8006ddc:	10624dd3 	.word	0x10624dd3
 8006de0:	46020800 	.word	0x46020800

08006de4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df2:	6113      	str	r3, [r2, #16]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	46020800 	.word	0x46020800

08006e04 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e12:	6113      	str	r3, [r2, #16]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	46020800 	.word	0x46020800

08006e24 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_PWREx_EnableVddA+0x1c>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <HAL_PWREx_EnableVddA+0x1c>)
 8006e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e32:	6113      	str	r3, [r2, #16]
}
 8006e34:	bf00      	nop
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	46020800 	.word	0x46020800

08006e44 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8006e4a:	f7ff ff6d 	bl	8006d28 <HAL_PWREx_GetVoltageRange>
 8006e4e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e56:	d003      	beq.n	8006e60 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5e:	d107      	bne.n	8006e70 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4a05      	ldr	r2, [pc, #20]	; (8006e7c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8006e66:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8006e6a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	46020800 	.word	0x46020800

08006e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f000 bec8 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e9a:	4b99      	ldr	r3, [pc, #612]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ea4:	4b96      	ldr	r3, [pc, #600]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 816c 	beq.w	8007194 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x52>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	2b0c      	cmp	r3, #12
 8006ec6:	f040 80de 	bne.w	8007086 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 80da 	bne.w	8007086 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f000 bea5 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee4:	4b86      	ldr	r3, [pc, #536]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCC_OscConfig+0x7a>
 8006ef0:	4b83      	ldr	r3, [pc, #524]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ef8:	e005      	b.n	8006f06 <HAL_RCC_OscConfig+0x86>
 8006efa:	4b81      	ldr	r3, [pc, #516]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d255      	bcs.n	8006fb6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 f9d9 	bl	80082cc <RCC_SetFlashLatencyFromMSIRange>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f000 be82 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006f26:	4b76      	ldr	r3, [pc, #472]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	4a75      	ldr	r2, [pc, #468]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f30:	6093      	str	r3, [r2, #8]
 8006f32:	4b73      	ldr	r3, [pc, #460]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	4970      	ldr	r1, [pc, #448]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006f4c:	d309      	bcc.n	8006f62 <HAL_RCC_OscConfig+0xe2>
 8006f4e:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f023 021f 	bic.w	r2, r3, #31
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	4969      	ldr	r1, [pc, #420]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60cb      	str	r3, [r1, #12]
 8006f60:	e07e      	b.n	8007060 <HAL_RCC_OscConfig+0x1e0>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	da0a      	bge.n	8006f80 <HAL_RCC_OscConfig+0x100>
 8006f6a:	4b65      	ldr	r3, [pc, #404]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	015b      	lsls	r3, r3, #5
 8006f78:	4961      	ldr	r1, [pc, #388]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60cb      	str	r3, [r1, #12]
 8006f7e:	e06f      	b.n	8007060 <HAL_RCC_OscConfig+0x1e0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d30a      	bcc.n	8006fa0 <HAL_RCC_OscConfig+0x120>
 8006f8a:	4b5d      	ldr	r3, [pc, #372]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	4959      	ldr	r1, [pc, #356]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60cb      	str	r3, [r1, #12]
 8006f9e:	e05f      	b.n	8007060 <HAL_RCC_OscConfig+0x1e0>
 8006fa0:	4b57      	ldr	r3, [pc, #348]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	03db      	lsls	r3, r3, #15
 8006fae:	4954      	ldr	r1, [pc, #336]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60cb      	str	r3, [r1, #12]
 8006fb4:	e054      	b.n	8007060 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006fb6:	4b52      	ldr	r3, [pc, #328]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	4a51      	ldr	r2, [pc, #324]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fc0:	6093      	str	r3, [r2, #8]
 8006fc2:	4b4f      	ldr	r3, [pc, #316]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	494c      	ldr	r1, [pc, #304]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006fdc:	d309      	bcc.n	8006ff2 <HAL_RCC_OscConfig+0x172>
 8006fde:	4b48      	ldr	r3, [pc, #288]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f023 021f 	bic.w	r2, r3, #31
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	4945      	ldr	r1, [pc, #276]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60cb      	str	r3, [r1, #12]
 8006ff0:	e028      	b.n	8007044 <HAL_RCC_OscConfig+0x1c4>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da0a      	bge.n	8007010 <HAL_RCC_OscConfig+0x190>
 8006ffa:	4b41      	ldr	r3, [pc, #260]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	015b      	lsls	r3, r3, #5
 8007008:	493d      	ldr	r1, [pc, #244]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 800700a:	4313      	orrs	r3, r2
 800700c:	60cb      	str	r3, [r1, #12]
 800700e:	e019      	b.n	8007044 <HAL_RCC_OscConfig+0x1c4>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	d30a      	bcc.n	8007030 <HAL_RCC_OscConfig+0x1b0>
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	4935      	ldr	r1, [pc, #212]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 800702a:	4313      	orrs	r3, r2
 800702c:	60cb      	str	r3, [r1, #12]
 800702e:	e009      	b.n	8007044 <HAL_RCC_OscConfig+0x1c4>
 8007030:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	03db      	lsls	r3, r3, #15
 800703e:	4930      	ldr	r1, [pc, #192]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8007040:	4313      	orrs	r3, r2
 8007042:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f93c 	bl	80082cc <RCC_SetFlashLatencyFromMSIRange>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f000 bde5 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007060:	f001 f8de 	bl	8008220 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007064:	4b27      	ldr	r3, [pc, #156]	; (8007104 <HAL_RCC_OscConfig+0x284>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fde9 	bl	8004c40 <HAL_InitTick>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 808a 	beq.w	8007192 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800707e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007082:	f000 bdd2 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d066      	beq.n	800715c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800708e:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800709a:	f7fd fe1b 	bl	8004cd4 <HAL_GetTick>
 800709e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80070a0:	e009      	b.n	80070b6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070a2:	f7fd fe17 	bl	8004cd4 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d902      	bls.n	80070b6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	f000 bdba 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ef      	beq.n	80070a2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070cc:	6093      	str	r3, [r2, #8]
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4909      	ldr	r1, [pc, #36]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80070e8:	d30e      	bcc.n	8007108 <HAL_RCC_OscConfig+0x288>
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f023 021f 	bic.w	r2, r3, #31
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	4902      	ldr	r1, [pc, #8]	; (8007100 <HAL_RCC_OscConfig+0x280>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60cb      	str	r3, [r1, #12]
 80070fc:	e04a      	b.n	8007194 <HAL_RCC_OscConfig+0x314>
 80070fe:	bf00      	nop
 8007100:	46020c00 	.word	0x46020c00
 8007104:	2000001c 	.word	0x2000001c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	da0a      	bge.n	8007126 <HAL_RCC_OscConfig+0x2a6>
 8007110:	4b98      	ldr	r3, [pc, #608]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	015b      	lsls	r3, r3, #5
 800711e:	4995      	ldr	r1, [pc, #596]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007120:	4313      	orrs	r3, r2
 8007122:	60cb      	str	r3, [r1, #12]
 8007124:	e036      	b.n	8007194 <HAL_RCC_OscConfig+0x314>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712e:	d30a      	bcc.n	8007146 <HAL_RCC_OscConfig+0x2c6>
 8007130:	4b90      	ldr	r3, [pc, #576]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	498d      	ldr	r1, [pc, #564]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007140:	4313      	orrs	r3, r2
 8007142:	60cb      	str	r3, [r1, #12]
 8007144:	e026      	b.n	8007194 <HAL_RCC_OscConfig+0x314>
 8007146:	4b8b      	ldr	r3, [pc, #556]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	03db      	lsls	r3, r3, #15
 8007154:	4987      	ldr	r1, [pc, #540]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	60cb      	str	r3, [r1, #12]
 800715a:	e01b      	b.n	8007194 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800715c:	4b85      	ldr	r3, [pc, #532]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a84      	ldr	r2, [pc, #528]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007168:	f7fd fdb4 	bl	8004cd4 <HAL_GetTick>
 800716c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800716e:	e009      	b.n	8007184 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007170:	f7fd fdb0 	bl	8004cd4 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d902      	bls.n	8007184 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	f000 bd53 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007184:	4b7b      	ldr	r3, [pc, #492]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1ef      	bne.n	8007170 <HAL_RCC_OscConfig+0x2f0>
 8007190:	e000      	b.n	8007194 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007192:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 808b 	beq.w	80072b8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_OscConfig+0x334>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d109      	bne.n	80071c2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d106      	bne.n	80071c2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d17d      	bne.n	80072b8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f000 bd34 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d106      	bne.n	80071da <HAL_RCC_OscConfig+0x35a>
 80071cc:	4b69      	ldr	r3, [pc, #420]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a68      	ldr	r2, [pc, #416]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e041      	b.n	800725e <HAL_RCC_OscConfig+0x3de>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e2:	d112      	bne.n	800720a <HAL_RCC_OscConfig+0x38a>
 80071e4:	4b63      	ldr	r3, [pc, #396]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a62      	ldr	r2, [pc, #392]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	4b60      	ldr	r3, [pc, #384]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5f      	ldr	r2, [pc, #380]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	4b5d      	ldr	r3, [pc, #372]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a5c      	ldr	r2, [pc, #368]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e029      	b.n	800725e <HAL_RCC_OscConfig+0x3de>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007212:	d112      	bne.n	800723a <HAL_RCC_OscConfig+0x3ba>
 8007214:	4b57      	ldr	r3, [pc, #348]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a56      	ldr	r2, [pc, #344]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800721a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	4b54      	ldr	r3, [pc, #336]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a53      	ldr	r2, [pc, #332]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4b51      	ldr	r3, [pc, #324]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a50      	ldr	r2, [pc, #320]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e011      	b.n	800725e <HAL_RCC_OscConfig+0x3de>
 800723a:	4b4e      	ldr	r3, [pc, #312]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a4d      	ldr	r2, [pc, #308]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a4a      	ldr	r2, [pc, #296]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800724c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4b48      	ldr	r3, [pc, #288]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a47      	ldr	r2, [pc, #284]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800725c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d014      	beq.n	8007290 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007266:	f7fd fd35 	bl	8004cd4 <HAL_GetTick>
 800726a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726c:	e009      	b.n	8007282 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800726e:	f7fd fd31 	bl	8004cd4 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b64      	cmp	r3, #100	; 0x64
 800727a:	d902      	bls.n	8007282 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	f000 bcd4 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007282:	4b3c      	ldr	r3, [pc, #240]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0ef      	beq.n	800726e <HAL_RCC_OscConfig+0x3ee>
 800728e:	e013      	b.n	80072b8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007290:	f7fd fd20 	bl	8004cd4 <HAL_GetTick>
 8007294:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007296:	e009      	b.n	80072ac <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007298:	f7fd fd1c 	bl	8004cd4 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d902      	bls.n	80072ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	f000 bcbf 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ac:	4b31      	ldr	r3, [pc, #196]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1ef      	bne.n	8007298 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d05f      	beq.n	8007384 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d005      	beq.n	80072d6 <HAL_RCC_OscConfig+0x456>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d114      	bne.n	80072fa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d111      	bne.n	80072fa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	f000 bca3 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80072e4:	4b23      	ldr	r3, [pc, #140]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	4920      	ldr	r1, [pc, #128]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072f8:	e044      	b.n	8007384 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d024      	beq.n	800734c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007302:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800730e:	f7fd fce1 	bl	8004cd4 <HAL_GetTick>
 8007312:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007314:	e009      	b.n	800732a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007316:	f7fd fcdd 	bl	8004cd4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d902      	bls.n	800732a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	f000 bc80 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0ef      	beq.n	8007316 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	490b      	ldr	r1, [pc, #44]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]
 800734a:	e01b      	b.n	8007384 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a08      	ldr	r2, [pc, #32]	; (8007374 <HAL_RCC_OscConfig+0x4f4>)
 8007352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007356:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007358:	f7fd fcbc 	bl	8004cd4 <HAL_GetTick>
 800735c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800735e:	e00b      	b.n	8007378 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007360:	f7fd fcb8 	bl	8004cd4 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d904      	bls.n	8007378 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	f000 bc5b 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
 8007374:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007378:	4baf      	ldr	r3, [pc, #700]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1ed      	bne.n	8007360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80c8 	beq.w	8007522 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007398:	4ba7      	ldr	r3, [pc, #668]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800739a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d111      	bne.n	80073ca <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a6:	4ba4      	ldr	r3, [pc, #656]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	4aa2      	ldr	r2, [pc, #648]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80073ae:	f043 0304 	orr.w	r3, r3, #4
 80073b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80073b6:	4ba0      	ldr	r3, [pc, #640]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80073b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073ca:	4b9c      	ldr	r3, [pc, #624]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80073d6:	4b99      	ldr	r3, [pc, #612]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	4a98      	ldr	r2, [pc, #608]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073e2:	f7fd fc77 	bl	8004cd4 <HAL_GetTick>
 80073e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073e8:	e009      	b.n	80073fe <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ea:	f7fd fc73 	bl	8004cd4 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d902      	bls.n	80073fe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	f000 bc16 	b.w	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073fe:	4b8f      	ldr	r3, [pc, #572]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0ef      	beq.n	80073ea <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d05f      	beq.n	80074d2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007412:	4b89      	ldr	r3, [pc, #548]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007418:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007424:	429a      	cmp	r2, r3
 8007426:	d037      	beq.n	8007498 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e3f4      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01b      	beq.n	8007482 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800744c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007450:	4a79      	ldr	r2, [pc, #484]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007452:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007456:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800745a:	f7fd fc3b 	bl	8004cd4 <HAL_GetTick>
 800745e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007462:	f7fd fc37 	bl	8004cd4 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b05      	cmp	r3, #5
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e3da      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007474:	4b70      	ldr	r3, [pc, #448]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800747a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1ef      	bne.n	8007462 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007482:	4b6d      	ldr	r3, [pc, #436]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007488:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4969      	ldr	r1, [pc, #420]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007498:	4b67      	ldr	r3, [pc, #412]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800749a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800749e:	4a66      	ldr	r2, [pc, #408]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80074a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80074a8:	f7fd fc14 	bl	8004cd4 <HAL_GetTick>
 80074ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b0:	f7fd fc10 	bl	8004cd4 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e3b3      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80074c2:	4b5d      	ldr	r3, [pc, #372]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80074c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ef      	beq.n	80074b0 <HAL_RCC_OscConfig+0x630>
 80074d0:	e01b      	b.n	800750a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80074d2:	4b59      	ldr	r3, [pc, #356]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80074d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074d8:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80074da:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80074de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80074e2:	f7fd fbf7 	bl	8004cd4 <HAL_GetTick>
 80074e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ea:	f7fd fbf3 	bl	8004cd4 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e396      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80074fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1ef      	bne.n	80074ea <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800750a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007512:	4b49      	ldr	r3, [pc, #292]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	4a47      	ldr	r2, [pc, #284]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800751a:	f023 0304 	bic.w	r3, r3, #4
 800751e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8111 	beq.w	8007752 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007536:	4b40      	ldr	r3, [pc, #256]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d111      	bne.n	8007568 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007544:	4b3c      	ldr	r3, [pc, #240]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800754a:	4a3b      	ldr	r2, [pc, #236]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800754c:	f043 0304 	orr.w	r3, r3, #4
 8007550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007554:	4b38      	ldr	r3, [pc, #224]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007568:	4b34      	ldr	r3, [pc, #208]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d118      	bne.n	80075a6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007574:	4b31      	ldr	r3, [pc, #196]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	4a30      	ldr	r2, [pc, #192]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007580:	f7fd fba8 	bl	8004cd4 <HAL_GetTick>
 8007584:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007588:	f7fd fba4 	bl	8004cd4 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e347      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800759a:	4b28      	ldr	r3, [pc, #160]	; (800763c <HAL_RCC_OscConfig+0x7bc>)
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f0      	beq.n	8007588 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01f      	beq.n	80075f2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d010      	beq.n	80075e0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075be:	4b1e      	ldr	r3, [pc, #120]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075c6:	f043 0304 	orr.w	r3, r3, #4
 80075ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075ce:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d4:	4a18      	ldr	r2, [pc, #96]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075de:	e018      	b.n	8007612 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075e0:	4b15      	ldr	r3, [pc, #84]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e6:	4a14      	ldr	r2, [pc, #80]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80075f0:	e00f      	b.n	8007612 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f8:	4a0f      	ldr	r2, [pc, #60]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007602:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 8007604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007608:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <HAL_RCC_OscConfig+0x7b8>)
 800760a:	f023 0304 	bic.w	r3, r3, #4
 800760e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d057      	beq.n	80076ca <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800761a:	f7fd fb5b 	bl	8004cd4 <HAL_GetTick>
 800761e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007620:	e00e      	b.n	8007640 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007622:	f7fd fb57 	bl	8004cd4 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007630:	4293      	cmp	r3, r2
 8007632:	d905      	bls.n	8007640 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e2f8      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
 8007638:	46020c00 	.word	0x46020c00
 800763c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007640:	4b9c      	ldr	r3, [pc, #624]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0e9      	beq.n	8007622 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01b      	beq.n	8007692 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800765a:	4b96      	ldr	r3, [pc, #600]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800765c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007660:	4a94      	ldr	r2, [pc, #592]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800766a:	e00a      	b.n	8007682 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766c:	f7fd fb32 	bl	8004cd4 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	; 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e2d3      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007682:	4b8c      	ldr	r3, [pc, #560]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0ed      	beq.n	800766c <HAL_RCC_OscConfig+0x7ec>
 8007690:	e053      	b.n	800773a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007692:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007698:	4a86      	ldr	r2, [pc, #536]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800769a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800769e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80076a2:	e00a      	b.n	80076ba <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a4:	f7fd fb16 	bl	8004cd4 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e2b7      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80076ba:	4b7e      	ldr	r3, [pc, #504]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80076bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ed      	bne.n	80076a4 <HAL_RCC_OscConfig+0x824>
 80076c8:	e037      	b.n	800773a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80076ca:	f7fd fb03 	bl	8004cd4 <HAL_GetTick>
 80076ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076d0:	e00a      	b.n	80076e8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d2:	f7fd faff 	bl	8004cd4 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e2a0      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076e8:	4b72      	ldr	r3, [pc, #456]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80076ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1ed      	bne.n	80076d2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80076f6:	4b6f      	ldr	r3, [pc, #444]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80076f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01a      	beq.n	800773a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007704:	4b6b      	ldr	r3, [pc, #428]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800770a:	4a6a      	ldr	r2, [pc, #424]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800770c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007710:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007714:	e00a      	b.n	800772c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fd fadd 	bl	8004cd4 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e27e      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800772c:	4b61      	ldr	r3, [pc, #388]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800772e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1ed      	bne.n	8007716 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800773a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007742:	4b5c      	ldr	r3, [pc, #368]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007748:	4a5a      	ldr	r2, [pc, #360]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800774a:	f023 0304 	bic.w	r3, r3, #4
 800774e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d036      	beq.n	80077cc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d019      	beq.n	800779a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007766:	4b53      	ldr	r3, [pc, #332]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a52      	ldr	r2, [pc, #328]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800776c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007770:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007772:	f7fd faaf 	bl	8004cd4 <HAL_GetTick>
 8007776:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800777a:	f7fd faab 	bl	8004cd4 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e24e      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800778c:	4b49      	ldr	r3, [pc, #292]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCC_OscConfig+0x8fa>
 8007798:	e018      	b.n	80077cc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800779a:	4b46      	ldr	r3, [pc, #280]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a45      	ldr	r2, [pc, #276]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80077a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80077a6:	f7fd fa95 	bl	8004cd4 <HAL_GetTick>
 80077aa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ae:	f7fd fa91 	bl	8004cd4 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e234      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80077c0:	4b3c      	ldr	r3, [pc, #240]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f0      	bne.n	80077ae <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d036      	beq.n	8007846 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80077e0:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a33      	ldr	r2, [pc, #204]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80077e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80077ec:	f7fd fa72 	bl	8004cd4 <HAL_GetTick>
 80077f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80077f4:	f7fd fa6e 	bl	8004cd4 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e211      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007806:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f0      	beq.n	80077f4 <HAL_RCC_OscConfig+0x974>
 8007812:	e018      	b.n	8007846 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a26      	ldr	r2, [pc, #152]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800781a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007820:	f7fd fa58 	bl	8004cd4 <HAL_GetTick>
 8007824:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007828:	f7fd fa54 	bl	8004cd4 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e1f7      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800783a:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d07f      	beq.n	8007952 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	2b00      	cmp	r3, #0
 8007858:	d062      	beq.n	8007920 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007864:	6093      	str	r3, [r2, #8]
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	4910      	ldr	r1, [pc, #64]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007874:	4313      	orrs	r3, r2
 8007876:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007880:	d309      	bcc.n	8007896 <HAL_RCC_OscConfig+0xa16>
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f023 021f 	bic.w	r2, r3, #31
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4909      	ldr	r1, [pc, #36]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 8007890:	4313      	orrs	r3, r2
 8007892:	60cb      	str	r3, [r1, #12]
 8007894:	e02a      	b.n	80078ec <HAL_RCC_OscConfig+0xa6c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	da0c      	bge.n	80078b8 <HAL_RCC_OscConfig+0xa38>
 800789e:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	015b      	lsls	r3, r3, #5
 80078ac:	4901      	ldr	r1, [pc, #4]	; (80078b4 <HAL_RCC_OscConfig+0xa34>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60cb      	str	r3, [r1, #12]
 80078b2:	e01b      	b.n	80078ec <HAL_RCC_OscConfig+0xa6c>
 80078b4:	46020c00 	.word	0x46020c00
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d30a      	bcc.n	80078d8 <HAL_RCC_OscConfig+0xa58>
 80078c2:	4ba1      	ldr	r3, [pc, #644]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	029b      	lsls	r3, r3, #10
 80078d0:	499d      	ldr	r1, [pc, #628]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60cb      	str	r3, [r1, #12]
 80078d6:	e009      	b.n	80078ec <HAL_RCC_OscConfig+0xa6c>
 80078d8:	4b9b      	ldr	r3, [pc, #620]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	03db      	lsls	r3, r3, #15
 80078e6:	4998      	ldr	r1, [pc, #608]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80078ec:	4b96      	ldr	r3, [pc, #600]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a95      	ldr	r2, [pc, #596]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80078f2:	f043 0310 	orr.w	r3, r3, #16
 80078f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80078f8:	f7fd f9ec 	bl	8004cd4 <HAL_GetTick>
 80078fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007900:	f7fd f9e8 	bl	8004cd4 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e18b      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007912:	4b8d      	ldr	r3, [pc, #564]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0xa80>
 800791e:	e018      	b.n	8007952 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007920:	4b89      	ldr	r3, [pc, #548]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a88      	ldr	r2, [pc, #544]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007926:	f023 0310 	bic.w	r3, r3, #16
 800792a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800792c:	f7fd f9d2 	bl	8004cd4 <HAL_GetTick>
 8007930:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007934:	f7fd f9ce 	bl	8004cd4 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e171      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007946:	4b80      	ldr	r3, [pc, #512]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8166 	beq.w	8007c28 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007962:	4b79      	ldr	r3, [pc, #484]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f003 030c 	and.w	r3, r3, #12
 800796a:	2b0c      	cmp	r3, #12
 800796c:	f000 80f2 	beq.w	8007b54 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	2b02      	cmp	r3, #2
 8007976:	f040 80c5 	bne.w	8007b04 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800797a:	4b73      	ldr	r3, [pc, #460]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a72      	ldr	r2, [pc, #456]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007984:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007986:	f7fd f9a5 	bl	8004cd4 <HAL_GetTick>
 800798a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800798e:	f7fd f9a1 	bl	8004cd4 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e144      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80079a0:	4b69      	ldr	r3, [pc, #420]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f0      	bne.n	800798e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ac:	4b66      	ldr	r3, [pc, #408]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80079ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d111      	bne.n	80079de <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80079bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079c0:	4a61      	ldr	r2, [pc, #388]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80079c2:	f043 0304 	orr.w	r3, r3, #4
 80079c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80079ca:	4b5f      	ldr	r3, [pc, #380]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 80079cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80079de:	4b5b      	ldr	r3, [pc, #364]	; (8007b4c <HAL_RCC_OscConfig+0xccc>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079ea:	d102      	bne.n	80079f2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80079f2:	4b56      	ldr	r3, [pc, #344]	; (8007b4c <HAL_RCC_OscConfig+0xccc>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4a55      	ldr	r2, [pc, #340]	; (8007b4c <HAL_RCC_OscConfig+0xccc>)
 80079f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079fc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80079fe:	4b52      	ldr	r3, [pc, #328]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a12:	3a01      	subs	r2, #1
 8007a14:	0212      	lsls	r2, r2, #8
 8007a16:	4311      	orrs	r1, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	494a      	ldr	r1, [pc, #296]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	628b      	str	r3, [r1, #40]	; 0x28
 8007a24:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a28:	4b49      	ldr	r3, [pc, #292]	; (8007b50 <HAL_RCC_OscConfig+0xcd0>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a30:	3a01      	subs	r2, #1
 8007a32:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a3a:	3a01      	subs	r2, #1
 8007a3c:	0252      	lsls	r2, r2, #9
 8007a3e:	b292      	uxth	r2, r2
 8007a40:	4311      	orrs	r1, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a46:	3a01      	subs	r2, #1
 8007a48:	0412      	lsls	r2, r2, #16
 8007a4a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007a4e:	4311      	orrs	r1, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a54:	3a01      	subs	r2, #1
 8007a56:	0612      	lsls	r2, r2, #24
 8007a58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	493a      	ldr	r1, [pc, #232]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007a64:	4b38      	ldr	r3, [pc, #224]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	4a37      	ldr	r2, [pc, #220]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a6a:	f023 0310 	bic.w	r3, r3, #16
 8007a6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a74:	4a34      	ldr	r2, [pc, #208]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007a7a:	4b33      	ldr	r3, [pc, #204]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	4a32      	ldr	r2, [pc, #200]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a80:	f043 0310 	orr.w	r3, r3, #16
 8007a84:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007a86:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f023 020c 	bic.w	r2, r3, #12
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	492d      	ldr	r1, [pc, #180]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8007a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d105      	bne.n	8007aac <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007aa0:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <HAL_RCC_OscConfig+0xccc>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a29      	ldr	r2, [pc, #164]	; (8007b4c <HAL_RCC_OscConfig+0xccc>)
 8007aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aaa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007aac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007ab4:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aba:	4a23      	ldr	r2, [pc, #140]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007abc:	f023 0304 	bic.w	r3, r3, #4
 8007ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ac4:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ace:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ada:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007adc:	f7fd f8fa 	bl	8004cd4 <HAL_GetTick>
 8007ae0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae4:	f7fd f8f6 	bl	8004cd4 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e099      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0xc64>
 8007b02:	e091      	b.n	8007c28 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007b04:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a0f      	ldr	r2, [pc, #60]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b10:	f7fd f8e0 	bl	8004cd4 <HAL_GetTick>
 8007b14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b18:	f7fd f8dc 	bl	8004cd4 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e07f      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1f0      	bne.n	8007b18 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007b36:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	4a03      	ldr	r2, [pc, #12]	; (8007b48 <HAL_RCC_OscConfig+0xcc8>)
 8007b3c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007b40:	f023 0303 	bic.w	r3, r3, #3
 8007b44:	6293      	str	r3, [r2, #40]	; 0x28
 8007b46:	e06f      	b.n	8007c28 <HAL_RCC_OscConfig+0xda8>
 8007b48:	46020c00 	.word	0x46020c00
 8007b4c:	46020800 	.word	0x46020800
 8007b50:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007b54:	4b37      	ldr	r3, [pc, #220]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d039      	beq.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0203 	and.w	r2, r3, #3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d132      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	0a1b      	lsrs	r3, r3, #8
 8007b7a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d129      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d122      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11a      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	0a5b      	lsrs	r3, r3, #9
 8007baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d111      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d108      	bne.n	8007bdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	0e1b      	lsrs	r3, r3, #24
 8007bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e024      	b.n	8007c2a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007be0:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	08db      	lsrs	r3, r3, #3
 8007be6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d01a      	beq.n	8007c28 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	4a0f      	ldr	r2, [pc, #60]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007bf8:	f023 0310 	bic.w	r3, r3, #16
 8007bfc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfe:	f7fd f869 	bl	8004cd4 <HAL_GetTick>
 8007c02:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007c04:	bf00      	nop
 8007c06:	f7fd f865 	bl	8004cd4 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d0f9      	beq.n	8007c06 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <HAL_RCC_OscConfig+0xdb4>)
 8007c22:	f043 0310 	orr.w	r3, r3, #16
 8007c26:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3738      	adds	r7, #56	; 0x38
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	46020c00 	.word	0x46020c00

08007c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e1d9      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c4c:	4b9b      	ldr	r3, [pc, #620]	; (8007ebc <HAL_RCC_ClockConfig+0x284>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d910      	bls.n	8007c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5a:	4b98      	ldr	r3, [pc, #608]	; (8007ebc <HAL_RCC_ClockConfig+0x284>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 020f 	bic.w	r2, r3, #15
 8007c62:	4996      	ldr	r1, [pc, #600]	; (8007ebc <HAL_RCC_ClockConfig+0x284>)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b94      	ldr	r3, [pc, #592]	; (8007ebc <HAL_RCC_ClockConfig+0x284>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e1c1      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d010      	beq.n	8007caa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	4b8c      	ldr	r3, [pc, #560]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d908      	bls.n	8007caa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007c98:	4b89      	ldr	r3, [pc, #548]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	4986      	ldr	r1, [pc, #536]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d012      	beq.n	8007cdc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	4b81      	ldr	r3, [pc, #516]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	091b      	lsrs	r3, r3, #4
 8007cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d909      	bls.n	8007cdc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007cc8:	4b7d      	ldr	r3, [pc, #500]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	497a      	ldr	r1, [pc, #488]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	4b74      	ldr	r3, [pc, #464]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d908      	bls.n	8007d0a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007cf8:	4b71      	ldr	r3, [pc, #452]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	496e      	ldr	r1, [pc, #440]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d010      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b69      	ldr	r3, [pc, #420]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d908      	bls.n	8007d38 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007d26:	4b66      	ldr	r3, [pc, #408]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f023 020f 	bic.w	r2, r3, #15
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4963      	ldr	r1, [pc, #396]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80d2 	beq.w	8007eea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d143      	bne.n	8007dda <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d52:	4b5b      	ldr	r3, [pc, #364]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d110      	bne.n	8007d82 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007d60:	4b57      	ldr	r3, [pc, #348]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d66:	4a56      	ldr	r2, [pc, #344]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d68:	f043 0304 	orr.w	r3, r3, #4
 8007d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007d70:	4b53      	ldr	r3, [pc, #332]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007d82:	f7fc ffa7 	bl	8004cd4 <HAL_GetTick>
 8007d86:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007d88:	4b4e      	ldr	r3, [pc, #312]	; (8007ec4 <HAL_RCC_ClockConfig+0x28c>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007d96:	f7fc ff9d 	bl	8004cd4 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e12b      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007da8:	4b46      	ldr	r3, [pc, #280]	; (8007ec4 <HAL_RCC_ClockConfig+0x28c>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d107      	bne.n	8007dca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007dba:	4b41      	ldr	r3, [pc, #260]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc0:	4a3f      	ldr	r2, [pc, #252]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007dc2:	f023 0304 	bic.w	r3, r3, #4
 8007dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007dca:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d121      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e112      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d107      	bne.n	8007df2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007de2:	4b37      	ldr	r3, [pc, #220]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d115      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e106      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d107      	bne.n	8007e0a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007dfa:	4b31      	ldr	r3, [pc, #196]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e0fa      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e0f2      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007e1a:	4b29      	ldr	r3, [pc, #164]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f023 0203 	bic.w	r2, r3, #3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4926      	ldr	r1, [pc, #152]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007e2c:	f7fc ff52 	bl	8004cd4 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d112      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e3c:	f7fc ff4a 	bl	8004cd4 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e0d6      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e52:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	2b0c      	cmp	r3, #12
 8007e5c:	d1ee      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x204>
 8007e5e:	e044      	b.n	8007eea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d112      	bne.n	8007e8e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e68:	e00a      	b.n	8007e80 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e6a:	f7fc ff33 	bl	8004cd4 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e0bf      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e80:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d1ee      	bne.n	8007e6a <HAL_RCC_ClockConfig+0x232>
 8007e8c:	e02d      	b.n	8007eea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d123      	bne.n	8007ede <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e96:	e00a      	b.n	8007eae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e98:	f7fc ff1c 	bl	8004cd4 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e0a8      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <HAL_RCC_ClockConfig+0x288>)
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f003 030c 	and.w	r3, r3, #12
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1ee      	bne.n	8007e98 <HAL_RCC_ClockConfig+0x260>
 8007eba:	e016      	b.n	8007eea <HAL_RCC_ClockConfig+0x2b2>
 8007ebc:	40022000 	.word	0x40022000
 8007ec0:	46020c00 	.word	0x46020c00
 8007ec4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec8:	f7fc ff04 	bl	8004cd4 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e090      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ede:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d1ee      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	4b43      	ldr	r3, [pc, #268]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d208      	bcs.n	8007f18 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007f06:	4b40      	ldr	r3, [pc, #256]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f023 020f 	bic.w	r2, r3, #15
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	493d      	ldr	r1, [pc, #244]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f18:	4b3c      	ldr	r3, [pc, #240]	; (800800c <HAL_RCC_ClockConfig+0x3d4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d210      	bcs.n	8007f48 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f26:	4b39      	ldr	r3, [pc, #228]	; (800800c <HAL_RCC_ClockConfig+0x3d4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f023 020f 	bic.w	r2, r3, #15
 8007f2e:	4937      	ldr	r1, [pc, #220]	; (800800c <HAL_RCC_ClockConfig+0x3d4>)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f36:	4b35      	ldr	r3, [pc, #212]	; (800800c <HAL_RCC_ClockConfig+0x3d4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d001      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e05b      	b.n	8008000 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	4b2b      	ldr	r3, [pc, #172]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d208      	bcs.n	8007f76 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007f64:	4b28      	ldr	r3, [pc, #160]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4925      	ldr	r1, [pc, #148]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d012      	beq.n	8007fa8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	4b20      	ldr	r3, [pc, #128]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	091b      	lsrs	r3, r3, #4
 8007f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d209      	bcs.n	8007fa8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007f94:	4b1c      	ldr	r3, [pc, #112]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	4919      	ldr	r1, [pc, #100]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d010      	beq.n	8007fd6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695a      	ldr	r2, [r3, #20]
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d208      	bcs.n	8007fd6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007fc4:	4b10      	ldr	r3, [pc, #64]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	490d      	ldr	r1, [pc, #52]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007fd6:	f000 f821 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <HAL_RCC_ClockConfig+0x3d0>)
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	490a      	ldr	r1, [pc, #40]	; (8008010 <HAL_RCC_ClockConfig+0x3d8>)
 8007fe6:	5ccb      	ldrb	r3, [r1, r3]
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <HAL_RCC_ClockConfig+0x3dc>)
 8007fee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007ff0:	4b09      	ldr	r3, [pc, #36]	; (8008018 <HAL_RCC_ClockConfig+0x3e0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc fe23 	bl	8004c40 <HAL_InitTick>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  return status;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	46020c00 	.word	0x46020c00
 800800c:	40022000 	.word	0x40022000
 8008010:	0800dee8 	.word	0x0800dee8
 8008014:	20000000 	.word	0x20000000
 8008018:	2000001c 	.word	0x2000001c

0800801c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800802a:	4b78      	ldr	r3, [pc, #480]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f003 030c 	and.w	r3, r3, #12
 8008032:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008034:	4b75      	ldr	r3, [pc, #468]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f003 0303 	and.w	r3, r3, #3
 800803c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <HAL_RCC_GetSysClockFreq+0x34>
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b0c      	cmp	r3, #12
 8008048:	d121      	bne.n	800808e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d11e      	bne.n	800808e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008050:	4b6e      	ldr	r3, [pc, #440]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d107      	bne.n	800806c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800805c:	4b6b      	ldr	r3, [pc, #428]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800805e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008062:	0b1b      	lsrs	r3, r3, #12
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
 800806a:	e005      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800806c:	4b67      	ldr	r3, [pc, #412]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	0f1b      	lsrs	r3, r3, #28
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008078:	4a65      	ldr	r2, [pc, #404]	; (8008210 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008080:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800808c:	e00d      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800808e:	4b5f      	ldr	r3, [pc, #380]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 030c 	and.w	r3, r3, #12
 8008096:	2b04      	cmp	r3, #4
 8008098:	d102      	bne.n	80080a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800809a:	4b5e      	ldr	r3, [pc, #376]	; (8008214 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	e004      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d101      	bne.n	80080aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080a6:	4b5b      	ldr	r3, [pc, #364]	; (8008214 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80080a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	f040 80a5 	bne.w	80081fc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80080b2:	4b56      	ldr	r3, [pc, #344]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80080bc:	4b53      	ldr	r3, [pc, #332]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80080ca:	4b50      	ldr	r3, [pc, #320]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	091b      	lsrs	r3, r3, #4
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80080d6:	4b4d      	ldr	r3, [pc, #308]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	08db      	lsrs	r3, r3, #3
 80080dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d003      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0xe4>
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d022      	beq.n	8008144 <HAL_RCC_GetSysClockFreq+0x128>
 80080fe:	e043      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008218 <HAL_RCC_GetSysClockFreq+0x1fc>
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b3e      	ldr	r3, [pc, #248]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008122:	ed97 6a01 	vldr	s12, [r7, #4]
 8008126:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800821c <HAL_RCC_GetSysClockFreq+0x200>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008142:	e046      	b.n	80081d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008218 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b2d      	ldr	r3, [pc, #180]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008166:	ed97 6a01 	vldr	s12, [r7, #4]
 800816a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800821c <HAL_RCC_GetSysClockFreq+0x200>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008186:	e024      	b.n	80081d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80081a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80081b0:	ed97 6a01 	vldr	s12, [r7, #4]
 80081b4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800821c <HAL_RCC_GetSysClockFreq+0x200>
 80081b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80081c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081d0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80081d2:	4b0e      	ldr	r3, [pc, #56]	; (800820c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	0e1b      	lsrs	r3, r3, #24
 80081d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081dc:	3301      	adds	r3, #1
 80081de:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f6:	ee17 3a90 	vmov	r3, s15
 80081fa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80081fc:	6a3b      	ldr	r3, [r7, #32]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	372c      	adds	r7, #44	; 0x2c
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	46020c00 	.word	0x46020c00
 8008210:	0800df00 	.word	0x0800df00
 8008214:	00f42400 	.word	0x00f42400
 8008218:	4b742400 	.word	0x4b742400
 800821c:	46000000 	.word	0x46000000

08008220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008224:	f7ff fefa 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8008228:	4602      	mov	r2, r0
 800822a:	4b07      	ldr	r3, [pc, #28]	; (8008248 <HAL_RCC_GetHCLKFreq+0x28>)
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	4906      	ldr	r1, [pc, #24]	; (800824c <HAL_RCC_GetHCLKFreq+0x2c>)
 8008234:	5ccb      	ldrb	r3, [r1, r3]
 8008236:	fa22 f303 	lsr.w	r3, r2, r3
 800823a:	4a05      	ldr	r2, [pc, #20]	; (8008250 <HAL_RCC_GetHCLKFreq+0x30>)
 800823c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800823e:	4b04      	ldr	r3, [pc, #16]	; (8008250 <HAL_RCC_GetHCLKFreq+0x30>)
 8008240:	681b      	ldr	r3, [r3, #0]
}
 8008242:	4618      	mov	r0, r3
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	46020c00 	.word	0x46020c00
 800824c:	0800dee8 	.word	0x0800dee8
 8008250:	20000000 	.word	0x20000000

08008254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008258:	f7ff ffe2 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 800825c:	4602      	mov	r2, r0
 800825e:	4b05      	ldr	r3, [pc, #20]	; (8008274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	4903      	ldr	r1, [pc, #12]	; (8008278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800826a:	5ccb      	ldrb	r3, [r1, r3]
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	46020c00 	.word	0x46020c00
 8008278:	0800def8 	.word	0x0800def8

0800827c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008280:	f7ff ffce 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 8008284:	4602      	mov	r2, r0
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	4903      	ldr	r1, [pc, #12]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008292:	5ccb      	ldrb	r3, [r1, r3]
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}
 800829c:	46020c00 	.word	0x46020c00
 80082a0:	0800def8 	.word	0x0800def8

080082a4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80082a8:	f7ff ffba 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	4903      	ldr	r1, [pc, #12]	; (80082c8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80082ba:	5ccb      	ldrb	r3, [r1, r3]
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	46020c00 	.word	0x46020c00
 80082c8:	0800def8 	.word	0x0800def8

080082cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082d4:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80082d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082e2:	f7fe fd21 	bl	8006d28 <HAL_PWREx_GetVoltageRange>
 80082e6:	6178      	str	r0, [r7, #20]
 80082e8:	e019      	b.n	800831e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082ea:	4b39      	ldr	r3, [pc, #228]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80082ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f0:	4a37      	ldr	r2, [pc, #220]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80082f2:	f043 0304 	orr.w	r3, r3, #4
 80082f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80082fa:	4b35      	ldr	r3, [pc, #212]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80082fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008308:	f7fe fd0e 	bl	8006d28 <HAL_PWREx_GetVoltageRange>
 800830c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800830e:	4b30      	ldr	r3, [pc, #192]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008314:	4a2e      	ldr	r2, [pc, #184]	; (80083d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008316:	f023 0304 	bic.w	r3, r3, #4
 800831a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008324:	d003      	beq.n	800832e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800832c:	d109      	bne.n	8008342 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008334:	d202      	bcs.n	800833c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008336:	2301      	movs	r3, #1
 8008338:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800833a:	e033      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008340:	e030      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008348:	d208      	bcs.n	800835c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008350:	d102      	bne.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008352:	2303      	movs	r3, #3
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	e025      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e035      	b.n	80083c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008362:	d90f      	bls.n	8008384 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008370:	d902      	bls.n	8008378 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	e015      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008378:	2301      	movs	r3, #1
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	e012      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	e00f      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838a:	d109      	bne.n	80083a0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008392:	d102      	bne.n	800839a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008394:	2301      	movs	r3, #1
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	e004      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800839a:	2302      	movs	r3, #2
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	e001      	b.n	80083a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80083a0:	2301      	movs	r3, #1
 80083a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f023 020f 	bic.w	r2, r3, #15
 80083ac:	4909      	ldr	r1, [pc, #36]	; (80083d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d001      	beq.n	80083c6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	46020c00 	.word	0x46020c00
 80083d4:	40022000 	.word	0x40022000

080083d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	b0c4      	sub	sp, #272	; 0x110
 80083de:	af00      	add	r7, sp, #0
 80083e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083ea:	2300      	movs	r3, #0
 80083ec:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f002 0401 	and.w	r4, r2, #1
 80083fc:	2500      	movs	r5, #0
 80083fe:	ea54 0305 	orrs.w	r3, r4, r5
 8008402:	d00b      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008404:	4bd5      	ldr	r3, [pc, #852]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800840a:	f023 0103 	bic.w	r1, r3, #3
 800840e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	4ad1      	ldr	r2, [pc, #836]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008416:	430b      	orrs	r3, r1
 8008418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800841c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f002 0802 	and.w	r8, r2, #2
 8008428:	f04f 0900 	mov.w	r9, #0
 800842c:	ea58 0309 	orrs.w	r3, r8, r9
 8008430:	d00b      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008432:	4bca      	ldr	r3, [pc, #808]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008438:	f023 010c 	bic.w	r1, r3, #12
 800843c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	4ac6      	ldr	r2, [pc, #792]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008444:	430b      	orrs	r3, r1
 8008446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800844a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f002 0a04 	and.w	sl, r2, #4
 8008456:	f04f 0b00 	mov.w	fp, #0
 800845a:	ea5a 030b 	orrs.w	r3, sl, fp
 800845e:	d00b      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008460:	4bbe      	ldr	r3, [pc, #760]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008466:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800846a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800846e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008470:	4aba      	ldr	r2, [pc, #744]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008472:	430b      	orrs	r3, r1
 8008474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f002 0308 	and.w	r3, r2, #8
 8008484:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800848e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	d00b      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008498:	4bb0      	ldr	r3, [pc, #704]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800849a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800849e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a8:	4aac      	ldr	r2, [pc, #688]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084aa:	430b      	orrs	r3, r1
 80084ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 0310 	and.w	r3, r2, #16
 80084bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084c6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d00b      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80084d0:	4ba2      	ldr	r3, [pc, #648]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e0:	4a9e      	ldr	r2, [pc, #632]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80084e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80084f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008502:	460b      	mov	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	d00b      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008508:	4b94      	ldr	r3, [pc, #592]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800850a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800850e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008518:	4a90      	ldr	r2, [pc, #576]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800851a:	430b      	orrs	r3, r1
 800851c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f002 0320 	and.w	r3, r2, #32
 800852c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008530:	2300      	movs	r3, #0
 8008532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800853a:	460b      	mov	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	d00b      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008540:	4b86      	ldr	r3, [pc, #536]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008546:	f023 0107 	bic.w	r1, r3, #7
 800854a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800854e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008550:	4a82      	ldr	r2, [pc, #520]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008552:	430b      	orrs	r3, r1
 8008554:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800856e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d00b      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008578:	4b78      	ldr	r3, [pc, #480]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800857a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008588:	4a74      	ldr	r2, [pc, #464]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800858a:	430b      	orrs	r3, r1
 800858c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800859c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d00b      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80085b0:	4b6a      	ldr	r3, [pc, #424]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a66      	ldr	r2, [pc, #408]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80085d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d00b      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80085e8:	4b5c      	ldr	r3, [pc, #368]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80085f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f8:	4a58      	ldr	r2, [pc, #352]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085fa:	430b      	orrs	r3, r1
 80085fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800860c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008610:	2300      	movs	r3, #0
 8008612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008616:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d00b      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008620:	4b4e      	ldr	r3, [pc, #312]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008626:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800862a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008630:	4a4a      	ldr	r2, [pc, #296]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008632:	430b      	orrs	r3, r1
 8008634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800864e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008652:	460b      	mov	r3, r1
 8008654:	4313      	orrs	r3, r2
 8008656:	d00b      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800865a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800865e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008668:	4a3c      	ldr	r2, [pc, #240]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800866a:	430b      	orrs	r3, r1
 800866c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800867c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008680:	2300      	movs	r3, #0
 8008682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008686:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800868a:	460b      	mov	r3, r1
 800868c:	4313      	orrs	r3, r2
 800868e:	d00c      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008690:	4b32      	ldr	r3, [pc, #200]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008696:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800869a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a2:	4a2e      	ldr	r2, [pc, #184]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086a4:	430b      	orrs	r3, r1
 80086a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80086aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80086b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086ba:	2300      	movs	r3, #0
 80086bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80086c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d00c      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80086ca:	4b24      	ldr	r3, [pc, #144]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086d0:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80086d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086dc:	4a1f      	ldr	r2, [pc, #124]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086de:	430b      	orrs	r3, r1
 80086e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80086e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80086f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086f4:	2300      	movs	r3, #0
 80086f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086fe:	460b      	mov	r3, r1
 8008700:	4313      	orrs	r3, r2
 8008702:	d00c      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008704:	4b15      	ldr	r3, [pc, #84]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800870a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800870e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008718:	430b      	orrs	r3, r1
 800871a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800871e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800872a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800872e:	2300      	movs	r3, #0
 8008730:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008734:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008738:	460b      	mov	r3, r1
 800873a:	4313      	orrs	r3, r2
 800873c:	d010      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800873e:	4b07      	ldr	r3, [pc, #28]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008744:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800874c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008750:	4a02      	ldr	r2, [pc, #8]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008752:	430b      	orrs	r3, r1
 8008754:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008758:	e002      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800875a:	bf00      	nop
 800875c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800876c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008776:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800877a:	460b      	mov	r3, r1
 800877c:	4313      	orrs	r3, r2
 800877e:	d04c      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008788:	2b80      	cmp	r3, #128	; 0x80
 800878a:	d02d      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800878c:	2b80      	cmp	r3, #128	; 0x80
 800878e:	d827      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008790:	2b60      	cmp	r3, #96	; 0x60
 8008792:	d02b      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008794:	2b60      	cmp	r3, #96	; 0x60
 8008796:	d823      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d006      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d81f      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d011      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80087a8:	e01a      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087aa:	4bbe      	ldr	r3, [pc, #760]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	4abd      	ldr	r2, [pc, #756]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80087b6:	e01a      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087bc:	3308      	adds	r3, #8
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 fc32 	bl	800b028 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80087ca:	e010      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d0:	332c      	adds	r3, #44	; 0x2c
 80087d2:	4618      	mov	r0, r3
 80087d4:	f002 fcc0 	bl	800b158 <RCCEx_PLL3_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80087de:	e006      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80087e6:	e002      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80087e8:	bf00      	nop
 80087ea:	e000      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80087ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ee:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80087f6:	4bab      	ldr	r3, [pc, #684]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80087fc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8008800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008804:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008808:	4aa6      	ldr	r2, [pc, #664]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800880a:	430b      	orrs	r3, r1
 800880c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008810:	e003      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008812:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008816:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800881a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008830:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d053      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008846:	d033      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8008848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800884c:	d82c      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800884e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008852:	d02f      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008858:	d826      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800885a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885e:	d008      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008864:	d820      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	d011      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008870:	e01a      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008872:	4b8c      	ldr	r3, [pc, #560]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	4a8b      	ldr	r2, [pc, #556]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800887c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800887e:	e01a      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008884:	3308      	adds	r3, #8
 8008886:	4618      	mov	r0, r3
 8008888:	f002 fbce 	bl	800b028 <RCCEx_PLL2_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008892:	e010      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008898:	332c      	adds	r3, #44	; 0x2c
 800889a:	4618      	mov	r0, r3
 800889c:	f002 fc5c 	bl	800b158 <RCCEx_PLL3_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80088a6:	e006      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80088ae:	e002      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80088b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10d      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80088be:	4b79      	ldr	r3, [pc, #484]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80088c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088d0:	4a74      	ldr	r2, [pc, #464]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088d2:	430b      	orrs	r3, r1
 80088d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80088d8:	e003      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088da:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80088de:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80088e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80088ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80088f0:	2300      	movs	r3, #0
 80088f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80088f8:	460b      	mov	r3, r1
 80088fa:	4313      	orrs	r3, r2
 80088fc:	d046      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80088fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008906:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800890a:	d028      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800890c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008910:	d821      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8008912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008916:	d022      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800891c:	d81b      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800891e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008922:	d01c      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008928:	d815      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800892a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800892e:	d008      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008934:	d80f      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d011      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893e:	d00e      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008940:	e009      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008946:	3308      	adds	r3, #8
 8008948:	4618      	mov	r0, r3
 800894a:	f002 fb6d 	bl	800b028 <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008954:	e004      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800895c:	e000      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800895e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008960:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10d      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008968:	4b4e      	ldr	r3, [pc, #312]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800896a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800896e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800897a:	4a4a      	ldr	r2, [pc, #296]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800897c:	430b      	orrs	r3, r1
 800897e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008982:	e003      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008984:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008988:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800898c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008998:	673b      	str	r3, [r7, #112]	; 0x70
 800899a:	2300      	movs	r3, #0
 800899c:	677b      	str	r3, [r7, #116]	; 0x74
 800899e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d03f      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80089a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d81e      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80089b4:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	080089fb 	.word	0x080089fb
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089df 	.word	0x080089df
 80089c8:	080089fb 	.word	0x080089fb
 80089cc:	080089fb 	.word	0x080089fb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089d0:	4b34      	ldr	r3, [pc, #208]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	4a33      	ldr	r2, [pc, #204]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80089d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089da:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80089dc:	e00e      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e2:	332c      	adds	r3, #44	; 0x2c
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 fbb7 	bl	800b158 <RCCEx_PLL3_Config>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80089f0:	e004      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80089f8:	e000      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80089fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80089fc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008a04:	4b27      	ldr	r3, [pc, #156]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a0a:	f023 0107 	bic.w	r1, r3, #7
 8008a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a16:	4a23      	ldr	r2, [pc, #140]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008a24:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a36:	2300      	movs	r3, #0
 8008a38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d04c      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a50:	d02a      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8008a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a56:	d821      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8008a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a5c:	d026      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8008a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a62:	d81b      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8008a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a68:	d00e      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8008a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a6e:	d815      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d110      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a84:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008a86:	e014      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a8c:	332c      	adds	r3, #44	; 0x2c
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f002 fb62 	bl	800b158 <RCCEx_PLL3_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008aa2:	e006      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8008aa4:	46020c00 	.word	0x46020c00
        break;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8008ab0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008ab2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10d      	bne.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008aba:	4baf      	ldr	r3, [pc, #700]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ac0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008acc:	4aaa      	ldr	r2, [pc, #680]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008ad4:	e003      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008ada:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008aea:	663b      	str	r3, [r7, #96]	; 0x60
 8008aec:	2300      	movs	r3, #0
 8008aee:	667b      	str	r3, [r7, #100]	; 0x64
 8008af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008af4:	460b      	mov	r3, r1
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f000 80b5 	beq.w	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b02:	4b9d      	ldr	r3, [pc, #628]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d113      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b10:	4b99      	ldr	r3, [pc, #612]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b16:	4a98      	ldr	r2, [pc, #608]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008b18:	f043 0304 	orr.w	r3, r3, #4
 8008b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008b20:	4b95      	ldr	r3, [pc, #596]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008b38:	4b90      	ldr	r3, [pc, #576]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	4a8f      	ldr	r2, [pc, #572]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b44:	f7fc f8c6 	bl	8004cd4 <HAL_GetTick>
 8008b48:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b4c:	e00b      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b4e:	f7fc f8c1 	bl	8004cd4 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d903      	bls.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008b64:	e005      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b66:	4b85      	ldr	r3, [pc, #532]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0ed      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8008b72:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d165      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b7a:	4b7f      	ldr	r3, [pc, #508]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d023      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8008b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b94:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8008b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d01b      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ba0:	4b75      	ldr	r3, [pc, #468]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008baa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bae:	4b72      	ldr	r3, [pc, #456]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bb4:	4a70      	ldr	r2, [pc, #448]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bbe:	4b6e      	ldr	r3, [pc, #440]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bc4:	4a6c      	ldr	r2, [pc, #432]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008bce:	4a6a      	ldr	r2, [pc, #424]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d019      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be4:	f7fc f876 	bl	8004cd4 <HAL_GetTick>
 8008be8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bec:	e00d      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bee:	f7fc f871 	bl	8004cd4 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf8:	1ad2      	subs	r2, r2, r3
 8008bfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d903      	bls.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8008c08:	e006      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c0a:	4b5b      	ldr	r3, [pc, #364]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0ea      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8008c18:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10d      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008c20:	4b55      	ldr	r3, [pc, #340]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8008c32:	4a51      	ldr	r2, [pc, #324]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008c34:	430b      	orrs	r3, r1
 8008c36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008c3a:	e008      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c3c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008c40:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008c4a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c4e:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d107      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c56:	4b48      	ldr	r3, [pc, #288]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c5c:	4a46      	ldr	r2, [pc, #280]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008c5e:	f023 0304 	bic.w	r3, r3, #4
 8008c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c74:	2300      	movs	r3, #0
 8008c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	d042      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008c8e:	d022      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008c90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008c94:	d81b      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8008c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c9a:	d011      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8008c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ca0:	d815      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d019      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x902>
 8008ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008caa:	d110      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f002 f9b8 	bl	800b028 <RCCEx_PLL2_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008cbe:	e00d      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc0:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc4:	4a2c      	ldr	r2, [pc, #176]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cca:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008ccc:	e006      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8008cda:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008cdc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008ce4:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cf6:	4a20      	ldr	r2, [pc, #128]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008d04:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008d14:	653b      	str	r3, [r7, #80]	; 0x50
 8008d16:	2300      	movs	r3, #0
 8008d18:	657b      	str	r3, [r7, #84]	; 0x54
 8008d1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d031      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d30:	d00b      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d36:	d804      	bhi.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d40:	d007      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008d48:	e004      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8008d4a:	bf00      	nop
 8008d4c:	e002      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8008d52:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008d54:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d111      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d6e:	4a02      	ldr	r2, [pc, #8]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d76:	e007      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8008d78:	46020c00 	.word	0x46020c00
 8008d7c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008d84:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d96:	2300      	movs	r3, #0
 8008d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4313      	orrs	r3, r2
 8008da2:	d00c      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008da4:	4bb2      	ldr	r3, [pc, #712]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008da6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008daa:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8008dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008db6:	4aae      	ldr	r2, [pc, #696]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008db8:	430b      	orrs	r3, r1
 8008dba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008dca:	643b      	str	r3, [r7, #64]	; 0x40
 8008dcc:	2300      	movs	r3, #0
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	d019      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008de6:	d105      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008de8:	4ba1      	ldr	r3, [pc, #644]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	4aa0      	ldr	r2, [pc, #640]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008df4:	4b9e      	ldr	r3, [pc, #632]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008df6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008dfa:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e06:	4a9a      	ldr	r2, [pc, #616]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008e24:	460b      	mov	r3, r1
 8008e26:	4313      	orrs	r3, r2
 8008e28:	d00c      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008e2a:	4b91      	ldr	r3, [pc, #580]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008e3c:	4a8c      	ldr	r2, [pc, #560]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e50:	633b      	str	r3, [r7, #48]	; 0x30
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34
 8008e56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d00c      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008e60:	4b83      	ldr	r3, [pc, #524]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008e72:	4a7f      	ldr	r2, [pc, #508]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e74:	430b      	orrs	r3, r1
 8008e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e88:	2300      	movs	r3, #0
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008e90:	460b      	mov	r3, r1
 8008e92:	4313      	orrs	r3, r2
 8008e94:	d00c      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008e96:	4b76      	ldr	r3, [pc, #472]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e9c:	f023 0218 	bic.w	r2, r3, #24
 8008ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008ea8:	4971      	ldr	r1, [pc, #452]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8008ebc:	623b      	str	r3, [r7, #32]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	d032      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ed8:	d105      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eda:	4b65      	ldr	r3, [pc, #404]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	4a64      	ldr	r2, [pc, #400]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ee4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ef2:	d108      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ef8:	3308      	adds	r3, #8
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 f894 	bl	800b028 <RCCEx_PLL2_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 8008f06:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10d      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008f0e:	4b58      	ldr	r3, [pc, #352]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008f10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008f20:	4953      	ldr	r1, [pc, #332]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8008f28:	e003      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008f2e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8008f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	61b9      	str	r1, [r7, #24]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	61fb      	str	r3, [r7, #28]
 8008f44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	d04a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8008f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f5a:	d01e      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8008f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f60:	d825      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8008f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f66:	d00e      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f6c:	d81f      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d021      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f76:	d11a      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f78:	4b3d      	ldr	r3, [pc, #244]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	4a3c      	ldr	r2, [pc, #240]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f82:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008f84:	e018      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 f84b 	bl	800b028 <RCCEx_PLL2_Config>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008f98:	e00e      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9e:	332c      	adds	r3, #44	; 0x2c
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 f8d9 	bl	800b158 <RCCEx_PLL3_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008fac:	e004      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8008fb4:	e000      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8008fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10d      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008fc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008fd2:	4927      	ldr	r1, [pc, #156]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8008fda:	e003      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008fe0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	d03d      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800900c:	d00e      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800900e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009012:	d815      	bhi.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009014:	2b00      	cmp	r3, #0
 8009016:	d017      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800901c:	d110      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800901e:	4b14      	ldr	r3, [pc, #80]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	4a13      	ldr	r2, [pc, #76]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009028:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800902a:	e00e      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800902c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009030:	3308      	adds	r3, #8
 8009032:	4618      	mov	r0, r3
 8009034:	f001 fff8 	bl	800b028 <RCCEx_PLL2_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800903e:	e004      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8009048:	bf00      	nop
    }
    if (ret == HAL_OK)
 800904a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800904e:	2b00      	cmp	r3, #0
 8009050:	d110      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009052:	4b07      	ldr	r3, [pc, #28]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009058:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800905c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009064:	4902      	ldr	r1, [pc, #8]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009066:	4313      	orrs	r3, r2
 8009068:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800906c:	e006      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800906e:	bf00      	nop
 8009070:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009074:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009078:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800907c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009092:	460b      	mov	r3, r1
 8009094:	4313      	orrs	r3, r2
 8009096:	d00c      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009098:	4b2c      	ldr	r3, [pc, #176]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800909a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800909e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80090a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80090aa:	4928      	ldr	r1, [pc, #160]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80090b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	2100      	movs	r1, #0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	607b      	str	r3, [r7, #4]
 80090c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090c8:	460b      	mov	r3, r1
 80090ca:	4313      	orrs	r3, r2
 80090cc:	d036      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80090ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80090d6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80090da:	d00d      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80090dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80090e0:	d811      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80090e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090e6:	d012      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ec:	d80b      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80090f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f6:	d106      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090f8:	4b14      	ldr	r3, [pc, #80]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	4a13      	ldr	r2, [pc, #76]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80090fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009102:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009104:	e004      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800910c:	e000      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800910e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009110:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800911a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800911e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009126:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800912a:	4908      	ldr	r1, [pc, #32]	; (800914c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009132:	e003      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009134:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009138:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800913c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8009140:	4618      	mov	r0, r3
 8009142:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009146:	46bd      	mov	sp, r7
 8009148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800914c:	46020c00 	.word	0x46020c00

08009150 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009150:	b480      	push	{r7}
 8009152:	b089      	sub	sp, #36	; 0x24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009158:	4ba6      	ldr	r3, [pc, #664]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009160:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009162:	4ba4      	ldr	r3, [pc, #656]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800916c:	4ba1      	ldr	r3, [pc, #644]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	0a1b      	lsrs	r3, r3, #8
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	3301      	adds	r3, #1
 8009178:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800917a:	4b9e      	ldr	r3, [pc, #632]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	091b      	lsrs	r3, r3, #4
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009186:	4b9b      	ldr	r3, [pc, #620]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	08db      	lsrs	r3, r3, #3
 800918c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d062      	beq.n	800926e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	f200 8081 	bhi.w	80092b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d024      	beq.n	8009200 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d17a      	bne.n	80092b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b89      	ldr	r3, [pc, #548]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80091de:	ed97 6a02 	vldr	s12, [r7, #8]
 80091e2:	eddf 5a86 	vldr	s11, [pc, #536]	; 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fe:	e08f      	b.n	8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009200:	4b7c      	ldr	r3, [pc, #496]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800920c:	4b79      	ldr	r3, [pc, #484]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	0f1b      	lsrs	r3, r3, #28
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	e006      	b.n	8009226 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009218:	4b76      	ldr	r3, [pc, #472]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800921a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	0f1b      	lsrs	r3, r3, #28
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	4a76      	ldr	r2, [pc, #472]	; (8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800922c:	ee07 3a90 	vmov	s15, r3
 8009230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009250:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800925c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009260:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009268:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800926c:	e058      	b.n	8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	ee07 3a90 	vmov	s15, r3
 8009274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009278:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800927c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009280:	4b5c      	ldr	r3, [pc, #368]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009288:	ee07 3a90 	vmov	s15, r3
 800928c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009290:	ed97 6a02 	vldr	s12, [r7, #8]
 8009294:	eddf 5a59 	vldr	s11, [pc, #356]	; 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009298:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800929c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092b0:	e036      	b.n	8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092b2:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80092be:	4b4d      	ldr	r3, [pc, #308]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	0f1b      	lsrs	r3, r3, #28
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	e006      	b.n	80092d8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80092ca:	4b4a      	ldr	r3, [pc, #296]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	0f1b      	lsrs	r3, r3, #28
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	4a49      	ldr	r2, [pc, #292]	; (8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80092da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009302:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009312:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800931e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009320:	4b34      	ldr	r3, [pc, #208]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800932c:	4b31      	ldr	r3, [pc, #196]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800932e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009330:	0a5b      	lsrs	r3, r3, #9
 8009332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800933e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009342:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009346:	edd7 6a07 	vldr	s13, [r7, #28]
 800934a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009352:	ee17 2a90 	vmov	r2, s15
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d017      	beq.n	800939e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800936e:	4b21      	ldr	r3, [pc, #132]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009372:	0c1b      	lsrs	r3, r3, #16
 8009374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009384:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009388:	edd7 6a07 	vldr	s13, [r7, #28]
 800938c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009394:	ee17 2a90 	vmov	r2, s15
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	e002      	b.n	80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d017      	beq.n	80093e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093b0:	4b10      	ldr	r3, [pc, #64]	; (80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b4:	0e1b      	lsrs	r3, r3, #24
 80093b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80093c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80093ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d6:	ee17 2a90 	vmov	r2, s15
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093de:	e002      	b.n	80093e6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	609a      	str	r2, [r3, #8]
}
 80093e6:	bf00      	nop
 80093e8:	3724      	adds	r7, #36	; 0x24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	46020c00 	.word	0x46020c00
 80093f8:	4b742400 	.word	0x4b742400
 80093fc:	46000000 	.word	0x46000000
 8009400:	0800df00 	.word	0x0800df00

08009404 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009404:	b480      	push	{r7}
 8009406:	b089      	sub	sp, #36	; 0x24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800940c:	4ba6      	ldr	r3, [pc, #664]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800940e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009416:	4ba4      	ldr	r3, [pc, #656]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009420:	4ba1      	ldr	r3, [pc, #644]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	0a1b      	lsrs	r3, r3, #8
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	3301      	adds	r3, #1
 800942c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800942e:	4b9e      	ldr	r3, [pc, #632]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	091b      	lsrs	r3, r3, #4
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800943a:	4b9b      	ldr	r3, [pc, #620]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	08db      	lsrs	r3, r3, #3
 8009440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	fb02 f303 	mul.w	r3, r2, r3
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009452:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d062      	beq.n	8009522 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b03      	cmp	r3, #3
 8009460:	f200 8081 	bhi.w	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d024      	beq.n	80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b02      	cmp	r3, #2
 800946e:	d17a      	bne.n	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b89      	ldr	r3, [pc, #548]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009492:	ed97 6a02 	vldr	s12, [r7, #8]
 8009496:	eddf 5a86 	vldr	s11, [pc, #536]	; 80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094b2:	e08f      	b.n	80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80094b4:	4b7c      	ldr	r3, [pc, #496]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80094c0:	4b79      	ldr	r3, [pc, #484]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	0f1b      	lsrs	r3, r3, #28
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	e006      	b.n	80094da <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80094cc:	4b76      	ldr	r3, [pc, #472]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094d2:	041b      	lsls	r3, r3, #16
 80094d4:	0f1b      	lsrs	r3, r3, #28
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	4a76      	ldr	r2, [pc, #472]	; (80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80094dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a02 	vldr	s12, [r7, #8]
 8009504:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009520:	e058      	b.n	80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b5c      	ldr	r3, [pc, #368]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009544:	ed97 6a02 	vldr	s12, [r7, #8]
 8009548:	eddf 5a59 	vldr	s11, [pc, #356]	; 80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009564:	e036      	b.n	80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009566:	4b50      	ldr	r3, [pc, #320]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009572:	4b4d      	ldr	r3, [pc, #308]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	0f1b      	lsrs	r3, r3, #28
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	e006      	b.n	800958c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800957e:	4b4a      	ldr	r3, [pc, #296]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009584:	041b      	lsls	r3, r3, #16
 8009586:	0f1b      	lsrs	r3, r3, #28
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	4a49      	ldr	r2, [pc, #292]	; (80096b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800958e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80095ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80095ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095d2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80095d4:	4b34      	ldr	r3, [pc, #208]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d017      	beq.n	8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80095e0:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e4:	0a5b      	lsrs	r3, r3, #9
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80095f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80095fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009606:	ee17 2a90 	vmov	r2, s15
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e002      	b.n	8009616 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009616:	4b24      	ldr	r3, [pc, #144]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d017      	beq.n	8009652 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009622:	4b21      	ldr	r3, [pc, #132]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009638:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800963c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009648:	ee17 2a90 	vmov	r2, s15
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	605a      	str	r2, [r3, #4]
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009658:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d017      	beq.n	8009694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009668:	0e1b      	lsrs	r3, r3, #24
 800966a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800967a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800967e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800968a:	ee17 2a90 	vmov	r2, s15
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009692:	e002      	b.n	800969a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
}
 800969a:	bf00      	nop
 800969c:	3724      	adds	r7, #36	; 0x24
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	46020c00 	.word	0x46020c00
 80096ac:	4b742400 	.word	0x4b742400
 80096b0:	46000000 	.word	0x46000000
 80096b4:	0800df00 	.word	0x0800df00

080096b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b089      	sub	sp, #36	; 0x24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80096c0:	4ba6      	ldr	r3, [pc, #664]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80096ca:	4ba4      	ldr	r3, [pc, #656]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80096d4:	4ba1      	ldr	r3, [pc, #644]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	3301      	adds	r3, #1
 80096e0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80096e2:	4b9e      	ldr	r3, [pc, #632]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80096ee:	4b9b      	ldr	r3, [pc, #620]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80096f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f2:	08db      	lsrs	r3, r3, #3
 80096f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	fb02 f303 	mul.w	r3, r2, r3
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009706:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d062      	beq.n	80097d6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b03      	cmp	r3, #3
 8009714:	f200 8081 	bhi.w	800981a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d024      	beq.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d17a      	bne.n	800981a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b89      	ldr	r3, [pc, #548]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009746:	ed97 6a02 	vldr	s12, [r7, #8]
 800974a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009766:	e08f      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009768:	4b7c      	ldr	r3, [pc, #496]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009774:	4b79      	ldr	r3, [pc, #484]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	0f1b      	lsrs	r3, r3, #28
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	e006      	b.n	800978e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009780:	4b76      	ldr	r3, [pc, #472]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009786:	041b      	lsls	r3, r3, #16
 8009788:	0f1b      	lsrs	r3, r3, #28
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	4a76      	ldr	r2, [pc, #472]	; (8009968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	ee07 3a90 	vmov	s15, r3
 80097b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80097b8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80097bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80097cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097d4:	e058      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80097e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e8:	4b5c      	ldr	r3, [pc, #368]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80097fc:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009800:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009804:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009818:	e036      	b.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800981a:	4b50      	ldr	r3, [pc, #320]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009826:	4b4d      	ldr	r3, [pc, #308]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	0f1b      	lsrs	r3, r3, #28
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	e006      	b.n	8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009832:	4b4a      	ldr	r3, [pc, #296]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	0f1b      	lsrs	r3, r3, #28
 800983c:	f003 030f 	and.w	r3, r3, #15
 8009840:	4a49      	ldr	r2, [pc, #292]	; (8009968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009866:	ed97 6a02 	vldr	s12, [r7, #8]
 800986a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800986e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800987e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009886:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009888:	4b34      	ldr	r3, [pc, #208]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d017      	beq.n	80098c4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009894:	4b31      	ldr	r3, [pc, #196]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80098a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ba:	ee17 2a90 	vmov	r2, s15
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e002      	b.n	80098ca <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80098ca:	4b24      	ldr	r3, [pc, #144]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d017      	beq.n	8009906 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e0:	ee07 3a90 	vmov	s15, r3
 80098e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80098e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098fc:	ee17 2a90 	vmov	r2, s15
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]
 8009904:	e002      	b.n	800990c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800990c:	4b13      	ldr	r3, [pc, #76]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d017      	beq.n	8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009918:	4b10      	ldr	r3, [pc, #64]	; (800995c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	0e1b      	lsrs	r3, r3, #24
 800991e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800992a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800992e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009932:	edd7 6a07 	vldr	s13, [r7, #28]
 8009936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800993a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993e:	ee17 2a90 	vmov	r2, s15
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009946:	e002      	b.n	800994e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	609a      	str	r2, [r3, #8]
}
 800994e:	bf00      	nop
 8009950:	3724      	adds	r7, #36	; 0x24
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	46020c00 	.word	0x46020c00
 8009960:	4b742400 	.word	0x4b742400
 8009964:	46000000 	.word	0x46000000
 8009968:	0800df00 	.word	0x0800df00

0800996c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08e      	sub	sp, #56	; 0x38
 8009970:	af00      	add	r7, sp, #0
 8009972:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800997e:	430b      	orrs	r3, r1
 8009980:	d145      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009982:	4ba7      	ldr	r3, [pc, #668]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800998e:	4ba4      	ldr	r3, [pc, #656]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b02      	cmp	r3, #2
 800999a:	d108      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a2:	d104      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80099a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
 80099aa:	f001 bb31 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80099ae:	4b9c      	ldr	r3, [pc, #624]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099bc:	d114      	bne.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c4:	d110      	bne.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099c6:	4b96      	ldr	r3, [pc, #600]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099d4:	d103      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80099d6:	23fa      	movs	r3, #250	; 0xfa
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099da:	f001 bb19 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80099de:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099e4:	f001 bb14 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80099e8:	4b8d      	ldr	r3, [pc, #564]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099f4:	d107      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099fc:	d103      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80099fe:	4b89      	ldr	r3, [pc, #548]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
 8009a02:	f001 bb05 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	637b      	str	r3, [r7, #52]	; 0x34
 8009a0a:	f001 bb01 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a12:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009a16:	430b      	orrs	r3, r1
 8009a18:	d151      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a1a:	4b81      	ldr	r3, [pc, #516]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a20:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009a24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	2b80      	cmp	r3, #128	; 0x80
 8009a2a:	d035      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	2b80      	cmp	r3, #128	; 0x80
 8009a30:	d841      	bhi.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	2b60      	cmp	r3, #96	; 0x60
 8009a36:	d02a      	beq.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	2b60      	cmp	r3, #96	; 0x60
 8009a3c:	d83b      	bhi.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	2b40      	cmp	r3, #64	; 0x40
 8009a42:	d009      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d835      	bhi.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00c      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	d012      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009a56:	e02e      	b.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7ff fb77 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a66:	f001 bad3 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a6a:	f107 0318 	add.w	r3, r7, #24
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff fcc8 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a78:	f001 baca 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a7c:	f107 030c 	add.w	r3, r7, #12
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff fe19 	bl	80096b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a8a:	f001 bac1 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009a8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a94:	f001 babc 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a98:	4b61      	ldr	r3, [pc, #388]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa4:	d103      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009aa6:	4b60      	ldr	r3, [pc, #384]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009aa8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009aaa:	f001 bab1 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ab2:	f001 baad 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009aba:	f001 baa9 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	d158      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009aca:	4b55      	ldr	r3, [pc, #340]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009adc:	d03b      	beq.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae4:	d846      	bhi.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aec:	d02e      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009af4:	d83e      	bhi.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009afc:	d00b      	beq.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b04:	d836      	bhi.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00d      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b12:	d012      	beq.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009b14:	e02e      	b.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff fb18 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b24:	f001 ba74 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b28:	f107 0318 	add.w	r3, r7, #24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff fc69 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b36:	f001 ba6b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b3a:	f107 030c 	add.w	r3, r7, #12
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fdba 	bl	80096b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b48:	f001 ba62 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b4c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b52:	f001 ba5d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b56:	4b32      	ldr	r3, [pc, #200]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b62:	d103      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009b64:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b68:	f001 ba52 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b70:	f001 ba4e 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b78:	f001 ba4a 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b80:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009b84:	430b      	orrs	r3, r1
 8009b86:	d126      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b92:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009b94:	4b22      	ldr	r3, [pc, #136]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba0:	d106      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d103      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009ba8:	4b1f      	ldr	r3, [pc, #124]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009baa:	637b      	str	r3, [r7, #52]	; 0x34
 8009bac:	f001 ba30 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009bb0:	4b1b      	ldr	r3, [pc, #108]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bbc:	d107      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bc4:	d103      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009bc6:	4b19      	ldr	r3, [pc, #100]	; (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8009bca:	f001 ba21 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd2:	f001 ba1d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bda:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8009bde:	430b      	orrs	r3, r1
 8009be0:	d16e      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009be2:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009be8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009bec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009bf4:	d03d      	beq.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009bfc:	d85c      	bhi.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c04:	d014      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c0c:	d854      	bhi.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01f      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c1a:	d012      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009c1c:	e04c      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c1e:	bf00      	nop
 8009c20:	46020c00 	.word	0x46020c00
 8009c24:	0007a120 	.word	0x0007a120
 8009c28:	00f42400 	.word	0x00f42400
 8009c2c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff fa8b 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c3e:	f001 b9e7 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c42:	f107 0318 	add.w	r3, r7, #24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fbdc 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c50:	f001 b9de 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009c54:	4ba7      	ldr	r3, [pc, #668]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c60:	d103      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009c62:	4ba5      	ldr	r3, [pc, #660]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c66:	f001 b9d3 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c6e:	f001 b9cf 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c72:	4ba0      	ldr	r3, [pc, #640]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0320 	and.w	r3, r3, #32
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d118      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c7e:	4b9d      	ldr	r3, [pc, #628]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c8a:	4b9a      	ldr	r3, [pc, #616]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	0e1b      	lsrs	r3, r3, #24
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009c96:	4b97      	ldr	r3, [pc, #604]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	0e1b      	lsrs	r3, r3, #24
 8009ca0:	f003 030f 	and.w	r3, r3, #15
 8009ca4:	4a95      	ldr	r2, [pc, #596]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009caa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cac:	f001 b9b0 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cb4:	f001 b9ac 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cbc:	f001 b9a8 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	d17f      	bne.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009ccc:	4b89      	ldr	r3, [pc, #548]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cd6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d165      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009cde:	4b85      	ldr	r3, [pc, #532]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ce4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009ce8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009cf0:	d034      	beq.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009cf8:	d853      	bhi.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d00:	d00b      	beq.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d08:	d84b      	bhi.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d016      	beq.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d16:	d009      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009d18:	e043      	b.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fa16 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d28:	f001 b972 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d2c:	f107 0318 	add.w	r3, r7, #24
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fb67 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d3a:	f001 b969 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009d3e:	4b6d      	ldr	r3, [pc, #436]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d4a:	d103      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8009d4c:	4b6a      	ldr	r3, [pc, #424]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d50:	f001 b95e 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d58:	f001 b95a 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d5c:	4b65      	ldr	r3, [pc, #404]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d118      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d68:	4b62      	ldr	r3, [pc, #392]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009d74:	4b5f      	ldr	r3, [pc, #380]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	0e1b      	lsrs	r3, r3, #24
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	e006      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009d80:	4b5c      	ldr	r3, [pc, #368]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	4a5b      	ldr	r2, [pc, #364]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d94:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d96:	f001 b93b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d9e:	f001 b937 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009da6:	f001 b933 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db0:	d108      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff f9ca 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc0:	f001 b926 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc8:	f001 b922 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dd0:	1e51      	subs	r1, r2, #1
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	d136      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009dd6:	4b47      	ldr	r3, [pc, #284]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009de8:	f7fe fa48 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 8009dec:	6378      	str	r0, [r7, #52]	; 0x34
 8009dee:	f001 b90f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d104      	bne.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009df8:	f7fe f910 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8009dfc:	6378      	str	r0, [r7, #52]	; 0x34
 8009dfe:	f001 b907 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009e02:	4b3c      	ldr	r3, [pc, #240]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e0e:	d106      	bne.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d103      	bne.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8009e16:	4b3a      	ldr	r3, [pc, #232]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
 8009e1a:	f001 b8f9 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009e1e:	4b35      	ldr	r3, [pc, #212]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d104      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8009e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
 8009e38:	f001 b8ea 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e40:	f001 b8e6 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e48:	1e91      	subs	r1, r2, #2
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	d136      	bne.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e4e:	4b29      	ldr	r3, [pc, #164]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e54:	f003 030c 	and.w	r3, r3, #12
 8009e58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e60:	f7fe f9f8 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 8009e64:	6378      	str	r0, [r7, #52]	; 0x34
 8009e66:	f001 b8d3 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d104      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e70:	f7fe f8d4 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8009e74:	6378      	str	r0, [r7, #52]	; 0x34
 8009e76:	f001 b8cb 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009e7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e86:	d106      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d103      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
 8009e92:	f001 b8bd 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009e96:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d107      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2b0c      	cmp	r3, #12
 8009ea8:	d104      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb0:	f001 b8ae 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb8:	f001 b8aa 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec0:	1f11      	subs	r1, r2, #4
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	d13f      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009ec6:	4b0b      	ldr	r3, [pc, #44]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ecc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ed0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d104      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009ed8:	f7fe f9bc 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 8009edc:	6378      	str	r0, [r7, #52]	; 0x34
 8009ede:	f001 b897 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d10d      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ee8:	f7fe f898 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8009eec:	6378      	str	r0, [r7, #52]	; 0x34
 8009eee:	f001 b88f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8009ef2:	bf00      	nop
 8009ef4:	46020c00 	.word	0x46020c00
 8009ef8:	02dc6c00 	.word	0x02dc6c00
 8009efc:	0800df00 	.word	0x0800df00
 8009f00:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f04:	4ba8      	ldr	r3, [pc, #672]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f10:	d106      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d103      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8009f18:	4ba4      	ldr	r3, [pc, #656]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f1c:	f001 b878 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f20:	4ba1      	ldr	r3, [pc, #644]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d107      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	2b30      	cmp	r3, #48	; 0x30
 8009f32:	d104      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
 8009f3a:	f001 b869 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
 8009f42:	f001 b865 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f4a:	f1a2 0108 	sub.w	r1, r2, #8
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	d136      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009f52:	4b95      	ldr	r3, [pc, #596]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f5c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f64:	f7fe f976 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 8009f68:	6378      	str	r0, [r7, #52]	; 0x34
 8009f6a:	f001 b851 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	2b40      	cmp	r3, #64	; 0x40
 8009f72:	d104      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f74:	f7fe f852 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8009f78:	6378      	str	r0, [r7, #52]	; 0x34
 8009f7a:	f001 b849 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009f7e:	4b8a      	ldr	r3, [pc, #552]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f8a:	d106      	bne.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	2b80      	cmp	r3, #128	; 0x80
 8009f90:	d103      	bne.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8009f92:	4b86      	ldr	r3, [pc, #536]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34
 8009f96:	f001 b83b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009f9a:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d107      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	2bc0      	cmp	r3, #192	; 0xc0
 8009fac:	d104      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8009fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb4:	f001 b82c 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34
 8009fbc:	f001 b828 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc4:	f1a2 0110 	sub.w	r1, r2, #16
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	d139      	bne.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009fcc:	4b76      	ldr	r3, [pc, #472]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d104      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009fde:	f7fe f939 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 8009fe2:	6378      	str	r0, [r7, #52]	; 0x34
 8009fe4:	f001 b814 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d104      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ff0:	f7fe f814 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8009ff4:	6378      	str	r0, [r7, #52]	; 0x34
 8009ff6:	f001 b80b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009ffa:	4b6b      	ldr	r3, [pc, #428]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a006:	d107      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00e:	d103      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a010:	4b66      	ldr	r3, [pc, #408]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a012:	637b      	str	r3, [r7, #52]	; 0x34
 800a014:	f000 bffc 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a018:	4b63      	ldr	r3, [pc, #396]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a01a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b02      	cmp	r3, #2
 800a024:	d108      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a02c:	d104      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a032:	637b      	str	r3, [r7, #52]	; 0x34
 800a034:	f000 bfec 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
 800a03c:	f000 bfe8 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a044:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800a048:	430b      	orrs	r3, r1
 800a04a:	d139      	bne.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a04c:	4b56      	ldr	r3, [pc, #344]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a04e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a056:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a05e:	f7fe f8f9 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a062:	6378      	str	r0, [r7, #52]	; 0x34
 800a064:	f000 bfd4 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06e:	d104      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a070:	f7fd ffd4 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a074:	6378      	str	r0, [r7, #52]	; 0x34
 800a076:	f000 bfcb 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a07a:	4b4b      	ldr	r3, [pc, #300]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a08e:	d103      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a090:	4b46      	ldr	r3, [pc, #280]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a092:	637b      	str	r3, [r7, #52]	; 0x34
 800a094:	f000 bfbc 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a098:	4b43      	ldr	r3, [pc, #268]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d108      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0ac:	d104      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a0ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b4:	f000 bfac 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a0bc:	f000 bfa8 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c4:	f1a2 0120 	sub.w	r1, r2, #32
 800a0c8:	430b      	orrs	r3, r1
 800a0ca:	d158      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d104      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a0de:	f7fe f8e1 	bl	80082a4 <HAL_RCC_GetPCLK3Freq>
 800a0e2:	6378      	str	r0, [r7, #52]	; 0x34
 800a0e4:	f000 bf94 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d104      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a0ee:	f7fd ff95 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a0f2:	6378      	str	r0, [r7, #52]	; 0x34
 800a0f4:	f000 bf8c 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a104:	d106      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d103      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a10c:	4b27      	ldr	r3, [pc, #156]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a10e:	637b      	str	r3, [r7, #52]	; 0x34
 800a110:	f000 bf7e 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d107      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	2b03      	cmp	r3, #3
 800a126:	d104      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a12c:	637b      	str	r3, [r7, #52]	; 0x34
 800a12e:	f000 bf6f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a132:	4b1d      	ldr	r3, [pc, #116]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d11b      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	2b04      	cmp	r3, #4
 800a142:	d118      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a144:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a150:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	0e1b      	lsrs	r3, r3, #24
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	e006      	b.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a15c:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a15e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	0e1b      	lsrs	r3, r3, #24
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	4a11      	ldr	r2, [pc, #68]	; (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
 800a172:	f000 bf4d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
 800a17a:	f000 bf49 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a182:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a186:	430b      	orrs	r3, r1
 800a188:	d172      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a18c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a190:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a194:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19c:	d10a      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a19e:	f7fd ff3d 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a1a2:	6378      	str	r0, [r7, #52]	; 0x34
 800a1a4:	f000 bf34 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a1a8:	46020c00 	.word	0x46020c00
 800a1ac:	00f42400 	.word	0x00f42400
 800a1b0:	0800df00 	.word	0x0800df00
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ba:	d108      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1bc:	f107 0318 	add.w	r3, r7, #24
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff f91f 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ca:	f000 bf21 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a1d4:	f7fe f824 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 800a1d8:	6378      	str	r0, [r7, #52]	; 0x34
 800a1da:	f000 bf19 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a1e4:	d122      	bne.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1e6:	4bb0      	ldr	r3, [pc, #704]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d118      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1f2:	4bad      	ldr	r3, [pc, #692]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a1fe:	4baa      	ldr	r3, [pc, #680]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	0e1b      	lsrs	r3, r3, #24
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	e006      	b.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a20a:	4ba7      	ldr	r3, [pc, #668]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a20c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	0e1b      	lsrs	r3, r3, #24
 800a214:	f003 030f 	and.w	r3, r3, #15
 800a218:	4aa4      	ldr	r2, [pc, #656]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a21e:	637b      	str	r3, [r7, #52]	; 0x34
 800a220:	f000 bef6 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	637b      	str	r3, [r7, #52]	; 0x34
 800a228:	f000 bef2 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a22c:	4b9e      	ldr	r3, [pc, #632]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a238:	d107      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a240:	d103      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a242:	4b9b      	ldr	r3, [pc, #620]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
 800a246:	f000 bee3 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a24a:	4b97      	ldr	r3, [pc, #604]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a256:	d107      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a25e:	d103      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a260:	4b93      	ldr	r3, [pc, #588]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
 800a264:	f000 bed4 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	637b      	str	r3, [r7, #52]	; 0x34
 800a26c:	f000 bed0 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a274:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a278:	430b      	orrs	r3, r1
 800a27a:	d158      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a27c:	4b8a      	ldr	r3, [pc, #552]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a27e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d84b      	bhi.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a28e:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a294:	0800a2cd 	.word	0x0800a2cd
 800a298:	0800a2a9 	.word	0x0800a2a9
 800a29c:	0800a2bb 	.word	0x0800a2bb
 800a2a0:	0800a2d7 	.word	0x0800a2d7
 800a2a4:	0800a2e1 	.word	0x0800a2e1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe ff4f 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2b6:	f000 beab 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ba:	f107 030c 	add.w	r3, r7, #12
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff f9fa 	bl	80096b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2c8:	f000 bea2 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a2cc:	f7fd ffa8 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 800a2d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a2d2:	f000 be9d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a2d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a2da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2dc:	f000 be98 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a2e0:	4b71      	ldr	r3, [pc, #452]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d118      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a2ec:	4b6e      	ldr	r3, [pc, #440]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a2f8:	4b6b      	ldr	r3, [pc, #428]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	0e1b      	lsrs	r3, r3, #24
 800a2fe:	f003 030f 	and.w	r3, r3, #15
 800a302:	e006      	b.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a304:	4b68      	ldr	r3, [pc, #416]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a30a:	041b      	lsls	r3, r3, #16
 800a30c:	0e1b      	lsrs	r3, r3, #24
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	4a66      	ldr	r2, [pc, #408]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a318:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a31a:	f000 be79 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a322:	f000 be75 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a32a:	f000 be71 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a32e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a332:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800a336:	430b      	orrs	r3, r1
 800a338:	d167      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a33a:	4b5b      	ldr	r3, [pc, #364]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a33c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a340:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a344:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a34c:	d036      	beq.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a354:	d855      	bhi.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a35c:	d029      	beq.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a364:	d84d      	bhi.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a36c:	d013      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a374:	d845      	bhi.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d015      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a382:	d13e      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fee1 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a392:	f000 be3d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a396:	f107 030c 	add.w	r3, r7, #12
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff f98c 	bl	80096b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3a4:	f000 be34 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a3a8:	f7fd ff3a 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 800a3ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a3ae:	f000 be2f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a3b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3b8:	f000 be2a 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a3bc:	4b3a      	ldr	r3, [pc, #232]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d118      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a3c8:	4b37      	ldr	r3, [pc, #220]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a3d4:	4b34      	ldr	r3, [pc, #208]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	0e1b      	lsrs	r3, r3, #24
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	e006      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a3e0:	4b31      	ldr	r3, [pc, #196]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	0e1b      	lsrs	r3, r3, #24
 800a3ea:	f003 030f 	and.w	r3, r3, #15
 800a3ee:	4a2f      	ldr	r2, [pc, #188]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3f6:	f000 be0b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3fe:	f000 be07 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a406:	f000 be03 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800a412:	430b      	orrs	r3, r1
 800a414:	d152      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a416:	4b24      	ldr	r3, [pc, #144]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a41c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a420:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a428:	f7fd ff14 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a42c:	6378      	str	r0, [r7, #52]	; 0x34
 800a42e:	f000 bdef 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a438:	d104      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a43a:	f7fd fdef 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a43e:	6378      	str	r0, [r7, #52]	; 0x34
 800a440:	f000 bde6 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a444:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a450:	d107      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a458:	d103      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a45a:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
 800a45e:	f000 bdd7 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d122      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a474:	d11e      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a476:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	0e1b      	lsrs	r3, r3, #24
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	e006      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a48e:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a494:	041b      	lsls	r3, r3, #16
 800a496:	0e1b      	lsrs	r3, r3, #24
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	4a03      	ldr	r2, [pc, #12]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a4:	f000 bdb4 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a4a8:	46020c00 	.word	0x46020c00
 800a4ac:	0800df00 	.word	0x0800df00
 800a4b0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b8:	f000 bdaa 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	d14c      	bne.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a4c8:	4ba8      	ldr	r3, [pc, #672]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a4ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a4d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a4da:	f7fd febb 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a4de:	6378      	str	r0, [r7, #52]	; 0x34
 800a4e0:	f000 bd96 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ea:	d104      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a4ec:	f7fd fd96 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a4f0:	6378      	str	r0, [r7, #52]	; 0x34
 800a4f2:	f000 bd8d 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a4f6:	4b9d      	ldr	r3, [pc, #628]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a502:	d107      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a50a:	d103      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a50c:	4b98      	ldr	r3, [pc, #608]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a50e:	637b      	str	r3, [r7, #52]	; 0x34
 800a510:	f000 bd7e 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a514:	4b95      	ldr	r3, [pc, #596]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d11c      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a526:	d118      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a528:	4b90      	ldr	r3, [pc, #576]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a534:	4b8d      	ldr	r3, [pc, #564]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	0e1b      	lsrs	r3, r3, #24
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	e006      	b.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a540:	4b8a      	ldr	r3, [pc, #552]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a546:	041b      	lsls	r3, r3, #16
 800a548:	0e1b      	lsrs	r3, r3, #24
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	4a89      	ldr	r2, [pc, #548]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a554:	637b      	str	r3, [r7, #52]	; 0x34
 800a556:	f000 bd5b 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
 800a55e:	f000 bd57 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a566:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a56a:	430b      	orrs	r3, r1
 800a56c:	d158      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a56e:	4b7f      	ldr	r3, [pc, #508]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a574:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a578:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	2bc0      	cmp	r3, #192	; 0xc0
 800a57e:	d028      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2bc0      	cmp	r3, #192	; 0xc0
 800a584:	d848      	bhi.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2b80      	cmp	r3, #128	; 0x80
 800a58a:	d00e      	beq.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	2b80      	cmp	r3, #128	; 0x80
 800a590:	d842      	bhi.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	2b40      	cmp	r3, #64	; 0x40
 800a59c:	d014      	beq.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a59e:	e03b      	b.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a5a0:	f7fd fe80 	bl	80082a4 <HAL_RCC_GetPCLK3Freq>
 800a5a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a5a6:	f000 bd33 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5aa:	4b70      	ldr	r3, [pc, #448]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b6:	d103      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800a5b8:	4b6d      	ldr	r3, [pc, #436]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a5bc:	f000 bd28 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a5c4:	f000 bd24 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a5c8:	f7fd fd28 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a5cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a5ce:	f000 bd1f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a5d2:	4b66      	ldr	r3, [pc, #408]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 0320 	and.w	r3, r3, #32
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d118      	bne.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a5de:	4b63      	ldr	r3, [pc, #396]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800a5ea:	4b60      	ldr	r3, [pc, #384]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	0e1b      	lsrs	r3, r3, #24
 800a5f0:	f003 030f 	and.w	r3, r3, #15
 800a5f4:	e006      	b.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800a5f6:	4b5d      	ldr	r3, [pc, #372]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5fc:	041b      	lsls	r3, r3, #16
 800a5fe:	0e1b      	lsrs	r3, r3, #24
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	4a5b      	ldr	r2, [pc, #364]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a60c:	f000 bd00 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a614:	f000 bcfc 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 800a618:	2300      	movs	r3, #0
 800a61a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a61c:	f000 bcf8 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a624:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800a628:	430b      	orrs	r3, r1
 800a62a:	d14c      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a62c:	4b4f      	ldr	r3, [pc, #316]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a62e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a636:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a63e:	f7fd fe09 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a642:	6378      	str	r0, [r7, #52]	; 0x34
 800a644:	f000 bce4 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a64e:	d104      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a650:	f7fd fce4 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a654:	6378      	str	r0, [r7, #52]	; 0x34
 800a656:	f000 bcdb 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a65a:	4b44      	ldr	r3, [pc, #272]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a666:	d107      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a66e:	d103      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800a670:	4b3f      	ldr	r3, [pc, #252]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a672:	637b      	str	r3, [r7, #52]	; 0x34
 800a674:	f000 bccc 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a678:	4b3c      	ldr	r3, [pc, #240]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b20      	cmp	r3, #32
 800a682:	d11c      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a68a:	d118      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a68c:	4b37      	ldr	r3, [pc, #220]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800a698:	4b34      	ldr	r3, [pc, #208]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	0e1b      	lsrs	r3, r3, #24
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	e006      	b.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a6a4:	4b31      	ldr	r3, [pc, #196]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	0e1b      	lsrs	r3, r3, #24
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	4a30      	ldr	r2, [pc, #192]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ba:	f000 bca9 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c2:	f000 bca5 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800a6c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ca:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	d152      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800a6d2:	4b26      	ldr	r3, [pc, #152]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a6d8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800a6dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6e4:	f7fd fdb6 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a6e8:	6378      	str	r0, [r7, #52]	; 0x34
 800a6ea:	f000 bc91 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6f4:	d104      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6f6:	f7fd fc91 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a6fa:	6378      	str	r0, [r7, #52]	; 0x34
 800a6fc:	f000 bc88 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800a700:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a70c:	d107      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a714:	d103      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800a716:	4b16      	ldr	r3, [pc, #88]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
 800a71a:	f000 bc79 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b20      	cmp	r3, #32
 800a728:	d11c      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a730:	d118      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a732:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800a73e:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	0e1b      	lsrs	r3, r3, #24
 800a744:	f003 030f 	and.w	r3, r3, #15
 800a748:	e006      	b.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800a74a:	4b08      	ldr	r3, [pc, #32]	; (800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a74c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a750:	041b      	lsls	r3, r3, #16
 800a752:	0e1b      	lsrs	r3, r3, #24
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	4a06      	ldr	r2, [pc, #24]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
 800a760:	f000 bc56 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
 800a768:	f000 bc52 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a76c:	46020c00 	.word	0x46020c00
 800a770:	00f42400 	.word	0x00f42400
 800a774:	0800df00 	.word	0x0800df00
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800a778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77c:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800a780:	430b      	orrs	r3, r1
 800a782:	d14a      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800a784:	4ba5      	ldr	r3, [pc, #660]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a786:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a78a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a78e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a796:	f7fd fd5d 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a79a:	6378      	str	r0, [r7, #52]	; 0x34
 800a79c:	f000 bc38 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7a6:	d104      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7a8:	f7fd fc38 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800a7ac:	6378      	str	r0, [r7, #52]	; 0x34
 800a7ae:	f000 bc2f 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800a7b2:	4b9a      	ldr	r3, [pc, #616]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7c6:	d103      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800a7c8:	4b95      	ldr	r3, [pc, #596]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a7cc:	f000 bc20 	b.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800a7d0:	4b92      	ldr	r3, [pc, #584]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d11b      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7e2:	d117      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a7e4:	4b8d      	ldr	r3, [pc, #564]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a7f0:	4b8a      	ldr	r3, [pc, #552]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	0e1b      	lsrs	r3, r3, #24
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	e006      	b.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800a7fc:	4b87      	ldr	r3, [pc, #540]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a7fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a802:	041b      	lsls	r3, r3, #16
 800a804:	0e1b      	lsrs	r3, r3, #24
 800a806:	f003 030f 	and.w	r3, r3, #15
 800a80a:	4a86      	ldr	r2, [pc, #536]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a810:	637b      	str	r3, [r7, #52]	; 0x34
 800a812:	e3fd      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
 800a818:	e3fa      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a822:	430b      	orrs	r3, r1
 800a824:	d164      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a826:	4b7d      	ldr	r3, [pc, #500]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a82c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a830:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d120      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a838:	4b78      	ldr	r3, [pc, #480]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b20      	cmp	r3, #32
 800a842:	d117      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a844:	4b75      	ldr	r3, [pc, #468]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d005      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800a850:	4b72      	ldr	r3, [pc, #456]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	0e1b      	lsrs	r3, r3, #24
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	e006      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800a85c:	4b6f      	ldr	r3, [pc, #444]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a85e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	0e1b      	lsrs	r3, r3, #24
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	4a6e      	ldr	r2, [pc, #440]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
 800a872:	e3cd      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	637b      	str	r3, [r7, #52]	; 0x34
 800a878:	e3ca      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a87a:	4b68      	ldr	r3, [pc, #416]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a87c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a888:	d112      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a890:	d10e      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a892:	4b62      	ldr	r3, [pc, #392]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a89c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a0:	d102      	bne.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800a8a2:	23fa      	movs	r3, #250	; 0xfa
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8a6:	e3b3      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800a8a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8ae:	e3af      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a8b0:	4b5a      	ldr	r3, [pc, #360]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8bc:	d106      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8c4:	d102      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800a8c6:	4b56      	ldr	r3, [pc, #344]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ca:	e3a1      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a8cc:	4b53      	ldr	r3, [pc, #332]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a8ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d107      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e0:	d103      	bne.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e8:	e392      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ee:	e38f      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8f4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	d164      	bne.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a8fc:	4b47      	ldr	r3, [pc, #284]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a8fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a902:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a906:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d120      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a90e:	4b43      	ldr	r3, [pc, #268]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b20      	cmp	r3, #32
 800a918:	d117      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a91a:	4b40      	ldr	r3, [pc, #256]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d005      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800a926:	4b3d      	ldr	r3, [pc, #244]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	0e1b      	lsrs	r3, r3, #24
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	e006      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800a932:	4b3a      	ldr	r3, [pc, #232]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	0e1b      	lsrs	r3, r3, #24
 800a93c:	f003 030f 	and.w	r3, r3, #15
 800a940:	4a38      	ldr	r2, [pc, #224]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a946:	637b      	str	r3, [r7, #52]	; 0x34
 800a948:	e362      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
 800a94e:	e35f      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a950:	4b32      	ldr	r3, [pc, #200]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a95a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a95e:	d112      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a966:	d10e      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a968:	4b2c      	ldr	r3, [pc, #176]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a96e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a976:	d102      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 800a978:	23fa      	movs	r3, #250	; 0xfa
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a97c:	e348      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800a97e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a982:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a984:	e344      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a986:	4b25      	ldr	r3, [pc, #148]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a98e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a992:	d106      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a99a:	d102      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800a99c:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a0:	e336      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a9a2:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a9a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9b6:	d103      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800a9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9be:	e327      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c4:	e324      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ca:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	d14e      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a9d2:	4b12      	ldr	r3, [pc, #72]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a9d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a9dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d103      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a9e4:	f7fd fc36 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800a9e8:	6378      	str	r0, [r7, #52]	; 0x34
 800a9ea:	e311      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800a9ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9fa:	d119      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa02:	d115      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800aa06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa12:	d109      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800aa14:	23fa      	movs	r3, #250	; 0xfa
 800aa16:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa18:	e2fa      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800aa1a:	bf00      	nop
 800aa1c:	46020c00 	.word	0x46020c00
 800aa20:	00f42400 	.word	0x00f42400
 800aa24:	0800df00 	.word	0x0800df00
      }
      else
      {
        frequency = LSI_VALUE;
 800aa28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa2e:	e2ef      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aa30:	4ba8      	ldr	r3, [pc, #672]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa3c:	d106      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa44:	d102      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800aa46:	4ba4      	ldr	r3, [pc, #656]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4a:	e2e1      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800aa4c:	4ba1      	ldr	r3, [pc, #644]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aa4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d107      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aa60:	d103      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800aa62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34
 800aa68:	e2d2      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6e:	e2cf      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	d12d      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800aa7c:	4b95      	ldr	r3, [pc, #596]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aa7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa82:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800aa86:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800aa88:	4b92      	ldr	r3, [pc, #584]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa94:	d105      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800aa9c:	4b8e      	ldr	r3, [pc, #568]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa0:	e2b6      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaa8:	d107      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fb4e 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	637b      	str	r3, [r7, #52]	; 0x34
 800aab8:	e2aa      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac0:	d107      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac2:	f107 0318 	add.w	r3, r7, #24
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fc9c 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	637b      	str	r3, [r7, #52]	; 0x34
 800aad0:	e29e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	637b      	str	r3, [r7, #52]	; 0x34
 800aad6:	e29b      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800aad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aadc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800aae0:	430b      	orrs	r3, r1
 800aae2:	d156      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800aae4:	4b7b      	ldr	r3, [pc, #492]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800aaee:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aaf6:	d028      	beq.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aafe:	d845      	bhi.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab06:	d013      	beq.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab0e:	d83d      	bhi.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab1c:	d004      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800ab1e:	e035      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ab20:	f7fd fbac 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 800ab24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ab26:	e273      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ab28:	f7fd fa78 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800ab2c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ab2e:	e26f      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab30:	4b68      	ldr	r3, [pc, #416]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab3c:	d102      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800ab3e:	4b66      	ldr	r3, [pc, #408]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab40:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab42:	e265      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab48:	e262      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab4a:	4b62      	ldr	r3, [pc, #392]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d117      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab56:	4b5f      	ldr	r3, [pc, #380]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d005      	beq.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800ab62:	4b5c      	ldr	r3, [pc, #368]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	0e1b      	lsrs	r3, r3, #24
 800ab68:	f003 030f 	and.w	r3, r3, #15
 800ab6c:	e006      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800ab6e:	4b59      	ldr	r3, [pc, #356]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ab70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab74:	041b      	lsls	r3, r3, #16
 800ab76:	0e1b      	lsrs	r3, r3, #24
 800ab78:	f003 030f 	and.w	r3, r3, #15
 800ab7c:	4a57      	ldr	r2, [pc, #348]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ab7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab84:	e244      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab8a:	e241      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab90:	e23e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ab92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab96:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800ab9a:	430b      	orrs	r3, r1
 800ab9c:	d156      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ab9e:	4b4d      	ldr	r3, [pc, #308]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800aba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aba8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abb0:	d028      	beq.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abb8:	d845      	bhi.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc0:	d013      	beq.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc8:	d83d      	bhi.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd6:	d004      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800abd8:	e035      	b.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800abda:	f7fd fb3b 	bl	8008254 <HAL_RCC_GetPCLK1Freq>
 800abde:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800abe0:	e216      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800abe2:	f7fd fa1b 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800abe6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800abe8:	e212      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abea:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abf6:	d102      	bne.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800abf8:	4b37      	ldr	r3, [pc, #220]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abfc:	e208      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac02:	e205      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac04:	4b33      	ldr	r3, [pc, #204]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d117      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac10:	4b30      	ldr	r3, [pc, #192]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800ac1c:	4b2d      	ldr	r3, [pc, #180]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	0e1b      	lsrs	r3, r3, #24
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	e006      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 800ac28:	4b2a      	ldr	r3, [pc, #168]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ac2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	0e1b      	lsrs	r3, r3, #24
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	4a29      	ldr	r2, [pc, #164]	; (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac3e:	e1e7      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac44:	e1e4      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac4a:	e1e1      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ac4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac50:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800ac54:	430b      	orrs	r3, r1
 800ac56:	d17c      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ac58:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ac5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac5e:	f003 0318 	and.w	r3, r3, #24
 800ac62:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	2b18      	cmp	r3, #24
 800ac68:	d870      	bhi.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ace1 	.word	0x0800ace1
 800ac74:	0800ad4d 	.word	0x0800ad4d
 800ac78:	0800ad4d 	.word	0x0800ad4d
 800ac7c:	0800ad4d 	.word	0x0800ad4d
 800ac80:	0800ad4d 	.word	0x0800ad4d
 800ac84:	0800ad4d 	.word	0x0800ad4d
 800ac88:	0800ad4d 	.word	0x0800ad4d
 800ac8c:	0800ad4d 	.word	0x0800ad4d
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800ad4d 	.word	0x0800ad4d
 800ac98:	0800ad4d 	.word	0x0800ad4d
 800ac9c:	0800ad4d 	.word	0x0800ad4d
 800aca0:	0800ad4d 	.word	0x0800ad4d
 800aca4:	0800ad4d 	.word	0x0800ad4d
 800aca8:	0800ad4d 	.word	0x0800ad4d
 800acac:	0800ad4d 	.word	0x0800ad4d
 800acb0:	0800acf1 	.word	0x0800acf1
 800acb4:	0800ad4d 	.word	0x0800ad4d
 800acb8:	0800ad4d 	.word	0x0800ad4d
 800acbc:	0800ad4d 	.word	0x0800ad4d
 800acc0:	0800ad4d 	.word	0x0800ad4d
 800acc4:	0800ad4d 	.word	0x0800ad4d
 800acc8:	0800ad4d 	.word	0x0800ad4d
 800accc:	0800ad4d 	.word	0x0800ad4d
 800acd0:	0800ad0b 	.word	0x0800ad0b
 800acd4:	46020c00 	.word	0x46020c00
 800acd8:	00f42400 	.word	0x00f42400
 800acdc:	0800df00 	.word	0x0800df00
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ace0:	f7fd fae0 	bl	80082a4 <HAL_RCC_GetPCLK3Freq>
 800ace4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ace6:	e193      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ace8:	f7fd f998 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800acec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800acee:	e18f      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acf0:	4b9f      	ldr	r3, [pc, #636]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acfc:	d102      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800acfe:	4b9d      	ldr	r3, [pc, #628]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad02:	e185      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad08:	e182      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad0a:	4b99      	ldr	r3, [pc, #612]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d117      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad16:	4b96      	ldr	r3, [pc, #600]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800ad22:	4b93      	ldr	r3, [pc, #588]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	0e1b      	lsrs	r3, r3, #24
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	e006      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800ad2e:	4b90      	ldr	r3, [pc, #576]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ad30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	0e1b      	lsrs	r3, r3, #24
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	4a8e      	ldr	r2, [pc, #568]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ad3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad44:	e164      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad4a:	e161      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad50:	e15e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ad52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad56:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800ad5a:	430b      	orrs	r3, r1
 800ad5c:	d155      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ad5e:	4b84      	ldr	r3, [pc, #528]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ad60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ad64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad70:	d013      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad78:	d844      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad80:	d013      	beq.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad88:	d83c      	bhi.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d014      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad96:	d014      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800ad98:	e034      	b.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad9a:	f107 0318 	add.w	r3, r7, #24
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fb30 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ada8:	e132      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe f9ce 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adb8:	e12a      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800adba:	f7fd f92f 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800adbe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800adc0:	e126      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800adc2:	4b6b      	ldr	r3, [pc, #428]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d117      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adce:	4b68      	ldr	r3, [pc, #416]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800adda:	4b65      	ldr	r3, [pc, #404]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	0e1b      	lsrs	r3, r3, #24
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	e006      	b.n	800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800ade6:	4b62      	ldr	r3, [pc, #392]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ade8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adec:	041b      	lsls	r3, r3, #16
 800adee:	0e1b      	lsrs	r3, r3, #24
 800adf0:	f003 030f 	and.w	r3, r3, #15
 800adf4:	4a60      	ldr	r2, [pc, #384]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800adf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800adfc:	e108      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae02:	e105      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae08:	e102      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800ae0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae0e:	1e59      	subs	r1, r3, #1
 800ae10:	ea52 0301 	orrs.w	r3, r2, r1
 800ae14:	d13c      	bne.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800ae16:	4b56      	ldr	r3, [pc, #344]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ae18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ae20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae28:	d027      	beq.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae30:	d82b      	bhi.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae38:	d017      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae40:	d823      	bhi.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae4e:	d004      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800ae50:	e01b      	b.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ae52:	f7fd f8e3 	bl	800801c <HAL_RCC_GetSysClockFreq>
 800ae56:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae58:	e0da      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe f976 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae68:	e0d2      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6a:	f107 0318 	add.w	r3, r7, #24
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fac8 	bl	8009404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae78:	e0ca      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7a:	f107 030c 	add.w	r3, r7, #12
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fc1a 	bl	80096b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae88:	e0c2      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae8e:	e0bf      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ae90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae94:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	d131      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ae9c:	4b34      	ldr	r3, [pc, #208]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800ae9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aea6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800aea8:	4b31      	ldr	r3, [pc, #196]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800aeaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d106      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d103      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800aebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
 800aec2:	e0a5      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800aec4:	4b2a      	ldr	r3, [pc, #168]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800aec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aeca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aed2:	d112      	bne.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeda:	d10e      	bne.n	800aefa <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aedc:	4b24      	ldr	r3, [pc, #144]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800aede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeea:	d102      	bne.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800aeec:	23fa      	movs	r3, #250	; 0xfa
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aef0:	e08e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800aef2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aef6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aef8:	e08a      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
 800aefe:	e087      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800af00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af04:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800af08:	430b      	orrs	r3, r1
 800af0a:	d13b      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800af0c:	4b18      	ldr	r3, [pc, #96]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800af0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800af18:	4b15      	ldr	r3, [pc, #84]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af24:	d105      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d102      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800af2c:	4b13      	ldr	r3, [pc, #76]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34
 800af30:	e06e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800af32:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af3e:	d106      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af46:	d102      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
 800af4c:	e060      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800af4e:	4b08      	ldr	r3, [pc, #32]	; (800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5a:	d106      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af62:	d102      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800af64:	4b03      	ldr	r3, [pc, #12]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af66:	637b      	str	r3, [r7, #52]	; 0x34
 800af68:	e052      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
 800af6e:	e04f      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800af70:	46020c00 	.word	0x46020c00
 800af74:	00f42400 	.word	0x00f42400
 800af78:	0800df00 	.word	0x0800df00
 800af7c:	02dc6c00 	.word	0x02dc6c00
 800af80:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800af84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af88:	f1a3 0108 	sub.w	r1, r3, #8
 800af8c:	ea52 0301 	orrs.w	r3, r2, r1
 800af90:	d13c      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800af92:	4b22      	ldr	r3, [pc, #136]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800af94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af98:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800af9c:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800af9e:	4b1f      	ldr	r3, [pc, #124]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afaa:	d105      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800afb2:	4b1b      	ldr	r3, [pc, #108]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34
 800afb6:	e02b      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800afb8:	4b18      	ldr	r3, [pc, #96]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc4:	d106      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afcc:	d102      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 800afce:	4b15      	ldr	r3, [pc, #84]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800afd0:	637b      	str	r3, [r7, #52]	; 0x34
 800afd2:	e01d      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afda:	d107      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe f8b5 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	637b      	str	r3, [r7, #52]	; 0x34
 800afea:	e011      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800aff2:	d108      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe f8a9 	bl	8009150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	085b      	lsrs	r3, r3, #1
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
 800b004:	e004      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
 800b00a:	e001      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b012:	4618      	mov	r0, r3
 800b014:	3738      	adds	r7, #56	; 0x38
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	46020c00 	.word	0x46020c00
 800b020:	00f42400 	.word	0x00f42400
 800b024:	007a1200 	.word	0x007a1200

0800b028 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b030:	4b47      	ldr	r3, [pc, #284]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a46      	ldr	r2, [pc, #280]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b03a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b03c:	f7f9 fe4a 	bl	8004cd4 <HAL_GetTick>
 800b040:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b042:	e008      	b.n	800b056 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b044:	f7f9 fe46 	bl	8004cd4 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e077      	b.n	800b146 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b056:	4b3e      	ldr	r3, [pc, #248]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1f0      	bne.n	800b044 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b062:	4b3b      	ldr	r3, [pc, #236]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6811      	ldr	r1, [r2, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6852      	ldr	r2, [r2, #4]
 800b076:	3a01      	subs	r2, #1
 800b078:	0212      	lsls	r2, r2, #8
 800b07a:	430a      	orrs	r2, r1
 800b07c:	4934      	ldr	r1, [pc, #208]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b082:	4b33      	ldr	r3, [pc, #204]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b086:	4b33      	ldr	r3, [pc, #204]	; (800b154 <RCCEx_PLL2_Config+0x12c>)
 800b088:	4013      	ands	r3, r2
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	6892      	ldr	r2, [r2, #8]
 800b08e:	3a01      	subs	r2, #1
 800b090:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	68d2      	ldr	r2, [r2, #12]
 800b098:	3a01      	subs	r2, #1
 800b09a:	0252      	lsls	r2, r2, #9
 800b09c:	b292      	uxth	r2, r2
 800b09e:	4311      	orrs	r1, r2
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	6912      	ldr	r2, [r2, #16]
 800b0a4:	3a01      	subs	r2, #1
 800b0a6:	0412      	lsls	r2, r2, #16
 800b0a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b0ac:	4311      	orrs	r1, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6952      	ldr	r2, [r2, #20]
 800b0b2:	3a01      	subs	r2, #1
 800b0b4:	0612      	lsls	r2, r2, #24
 800b0b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	4924      	ldr	r1, [pc, #144]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b0c2:	4b23      	ldr	r3, [pc, #140]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	f023 020c 	bic.w	r2, r3, #12
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	4920      	ldr	r1, [pc, #128]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b0d4:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	491c      	ldr	r1, [pc, #112]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e6:	4a1a      	ldr	r2, [pc, #104]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0e8:	f023 0310 	bic.w	r3, r3, #16
 800b0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0ee:	4b18      	ldr	r3, [pc, #96]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	69d2      	ldr	r2, [r2, #28]
 800b0fe:	00d2      	lsls	r2, r2, #3
 800b100:	4913      	ldr	r1, [pc, #76]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b102:	4313      	orrs	r3, r2
 800b104:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b106:	4b12      	ldr	r3, [pc, #72]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	4a11      	ldr	r2, [pc, #68]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b10c:	f043 0310 	orr.w	r3, r3, #16
 800b110:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b112:	4b0f      	ldr	r3, [pc, #60]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a0e      	ldr	r2, [pc, #56]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b11c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b11e:	f7f9 fdd9 	bl	8004cd4 <HAL_GetTick>
 800b122:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b124:	e008      	b.n	800b138 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b126:	f7f9 fdd5 	bl	8004cd4 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e006      	b.n	800b146 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <RCCEx_PLL2_Config+0x128>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b144:	2300      	movs	r3, #0

}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	46020c00 	.word	0x46020c00
 800b154:	80800000 	.word	0x80800000

0800b158 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b160:	4b47      	ldr	r3, [pc, #284]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a46      	ldr	r2, [pc, #280]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b16a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b16c:	f7f9 fdb2 	bl	8004cd4 <HAL_GetTick>
 800b170:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b172:	e008      	b.n	800b186 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b174:	f7f9 fdae 	bl	8004cd4 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d901      	bls.n	800b186 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e077      	b.n	800b276 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b186:	4b3e      	ldr	r3, [pc, #248]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f0      	bne.n	800b174 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b192:	4b3b      	ldr	r3, [pc, #236]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6811      	ldr	r1, [r2, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	6852      	ldr	r2, [r2, #4]
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	0212      	lsls	r2, r2, #8
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	4934      	ldr	r1, [pc, #208]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	630b      	str	r3, [r1, #48]	; 0x30
 800b1b2:	4b33      	ldr	r3, [pc, #204]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1b6:	4b33      	ldr	r3, [pc, #204]	; (800b284 <RCCEx_PLL3_Config+0x12c>)
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	6892      	ldr	r2, [r2, #8]
 800b1be:	3a01      	subs	r2, #1
 800b1c0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	68d2      	ldr	r2, [r2, #12]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	0252      	lsls	r2, r2, #9
 800b1cc:	b292      	uxth	r2, r2
 800b1ce:	4311      	orrs	r1, r2
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6912      	ldr	r2, [r2, #16]
 800b1d4:	3a01      	subs	r2, #1
 800b1d6:	0412      	lsls	r2, r2, #16
 800b1d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b1dc:	4311      	orrs	r1, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	6952      	ldr	r2, [r2, #20]
 800b1e2:	3a01      	subs	r2, #1
 800b1e4:	0612      	lsls	r2, r2, #24
 800b1e6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	4924      	ldr	r1, [pc, #144]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b1f2:	4b23      	ldr	r3, [pc, #140]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f6:	f023 020c 	bic.w	r2, r3, #12
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	4920      	ldr	r1, [pc, #128]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b200:	4313      	orrs	r3, r2
 800b202:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b204:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a1b      	ldr	r3, [r3, #32]
 800b20c:	491c      	ldr	r1, [pc, #112]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b212:	4b1b      	ldr	r3, [pc, #108]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b216:	4a1a      	ldr	r2, [pc, #104]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b218:	f023 0310 	bic.w	r3, r3, #16
 800b21c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b21e:	4b18      	ldr	r3, [pc, #96]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	69d2      	ldr	r2, [r2, #28]
 800b22e:	00d2      	lsls	r2, r2, #3
 800b230:	4913      	ldr	r1, [pc, #76]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b232:	4313      	orrs	r3, r2
 800b234:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b236:	4b12      	ldr	r3, [pc, #72]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23a:	4a11      	ldr	r2, [pc, #68]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b23c:	f043 0310 	orr.w	r3, r3, #16
 800b240:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a0e      	ldr	r2, [pc, #56]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b24c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b24e:	f7f9 fd41 	bl	8004cd4 <HAL_GetTick>
 800b252:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b254:	e008      	b.n	800b268 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b256:	f7f9 fd3d 	bl	8004cd4 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d901      	bls.n	800b268 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e006      	b.n	800b276 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <RCCEx_PLL3_Config+0x128>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0f0      	beq.n	800b256 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	46020c00 	.word	0x46020c00
 800b284:	80800000 	.word	0x80800000

0800b288 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e0fb      	b.n	800b492 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a7f      	ldr	r2, [pc, #508]	; (800b49c <HAL_SPI_Init+0x214>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d004      	beq.n	800b2ae <HAL_SPI_Init+0x26>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a7d      	ldr	r2, [pc, #500]	; (800b4a0 <HAL_SPI_Init+0x218>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	e000      	b.n	800b2b0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b2ae:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a78      	ldr	r2, [pc, #480]	; (800b49c <HAL_SPI_Init+0x214>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d004      	beq.n	800b2ca <HAL_SPI_Init+0x42>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a76      	ldr	r2, [pc, #472]	; (800b4a0 <HAL_SPI_Init+0x218>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d105      	bne.n	800b2d6 <HAL_SPI_Init+0x4e>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	2b0f      	cmp	r3, #15
 800b2d0:	d901      	bls.n	800b2d6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e0dd      	b.n	800b492 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fe16 	bl	800bf08 <SPI_GetPacketSize>
 800b2dc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a6e      	ldr	r2, [pc, #440]	; (800b49c <HAL_SPI_Init+0x214>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d004      	beq.n	800b2f2 <HAL_SPI_Init+0x6a>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a6c      	ldr	r2, [pc, #432]	; (800b4a0 <HAL_SPI_Init+0x218>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d102      	bne.n	800b2f8 <HAL_SPI_Init+0x70>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d816      	bhi.n	800b326 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2fc:	4a69      	ldr	r2, [pc, #420]	; (800b4a4 <HAL_SPI_Init+0x21c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00e      	beq.n	800b320 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a68      	ldr	r2, [pc, #416]	; (800b4a8 <HAL_SPI_Init+0x220>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d009      	beq.n	800b320 <HAL_SPI_Init+0x98>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a66      	ldr	r2, [pc, #408]	; (800b4ac <HAL_SPI_Init+0x224>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d004      	beq.n	800b320 <HAL_SPI_Init+0x98>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a65      	ldr	r2, [pc, #404]	; (800b4b0 <HAL_SPI_Init+0x228>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d104      	bne.n	800b32a <HAL_SPI_Init+0xa2>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b10      	cmp	r3, #16
 800b324:	d901      	bls.n	800b32a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e0b3      	b.n	800b492 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d106      	bne.n	800b344 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7f8 fd0e 	bl	8003d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 0201 	bic.w	r2, r2, #1
 800b35a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b366:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b370:	d119      	bne.n	800b3a6 <HAL_SPI_Init+0x11e>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b37a:	d103      	bne.n	800b384 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b380:	2b00      	cmp	r3, #0
 800b382:	d008      	beq.n	800b396 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10c      	bne.n	800b3a6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b394:	d107      	bne.n	800b3a6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b3a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00f      	beq.n	800b3d2 <HAL_SPI_Init+0x14a>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	2b06      	cmp	r3, #6
 800b3b8:	d90b      	bls.n	800b3d2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	e007      	b.n	800b3e2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	69da      	ldr	r2, [r3, #28]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f4:	ea42 0103 	orr.w	r1, r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	431a      	orrs	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	431a      	orrs	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	431a      	orrs	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	431a      	orrs	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	431a      	orrs	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	431a      	orrs	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b436:	431a      	orrs	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	431a      	orrs	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b44e:	ea42 0103 	orr.w	r1, r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	46002000 	.word	0x46002000
 800b4a0:	56002000 	.word	0x56002000
 800b4a4:	40013000 	.word	0x40013000
 800b4a8:	50013000 	.word	0x50013000
 800b4ac:	40003800 	.word	0x40003800
 800b4b0:	50003800 	.word	0x50003800

0800b4b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08a      	sub	sp, #40	; 0x28
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3320      	adds	r3, #32
 800b4ca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d101      	bne.n	800b4de <HAL_SPI_Transmit+0x2a>
 800b4da:	2302      	movs	r3, #2
 800b4dc:	e203      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4e6:	f7f9 fbf5 	bl	8004cd4 <HAL_GetTick>
 800b4ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d007      	beq.n	800b508 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b504:	7efb      	ldrb	r3, [r7, #27]
 800b506:	e1ee      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <HAL_SPI_Transmit+0x60>
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d107      	bne.n	800b524 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b520:	7efb      	ldrb	r3, [r7, #27]
 800b522:	e1e0      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2203      	movs	r2, #3
 800b528:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	88fa      	ldrh	r2, [r7, #6]
 800b53e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	88fa      	ldrh	r2, [r7, #6]
 800b546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b574:	d108      	bne.n	800b588 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	e009      	b.n	800b59c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b59a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	0c1b      	lsrs	r3, r3, #16
 800b5a4:	041b      	lsls	r3, r3, #16
 800b5a6:	88f9      	ldrh	r1, [r7, #6]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0201 	orr.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10c      	bne.n	800b5e8 <HAL_SPI_Transmit+0x134>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5d6:	d107      	bne.n	800b5e8 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	2b0f      	cmp	r3, #15
 800b5ee:	d95b      	bls.n	800b6a8 <HAL_SPI_Transmit+0x1f4>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a8f      	ldr	r2, [pc, #572]	; (800b834 <HAL_SPI_Transmit+0x380>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d04f      	beq.n	800b69a <HAL_SPI_Transmit+0x1e6>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a8e      	ldr	r2, [pc, #568]	; (800b838 <HAL_SPI_Transmit+0x384>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d04a      	beq.n	800b69a <HAL_SPI_Transmit+0x1e6>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a8c      	ldr	r2, [pc, #560]	; (800b83c <HAL_SPI_Transmit+0x388>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d045      	beq.n	800b69a <HAL_SPI_Transmit+0x1e6>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a8b      	ldr	r2, [pc, #556]	; (800b840 <HAL_SPI_Transmit+0x38c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d147      	bne.n	800b6a8 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b618:	e03f      	b.n	800b69a <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b02      	cmp	r3, #2
 800b626:	d114      	bne.n	800b652 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b638:	1d1a      	adds	r2, r3, #4
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b644:	b29b      	uxth	r3, r3
 800b646:	3b01      	subs	r3, #1
 800b648:	b29a      	uxth	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b650:	e023      	b.n	800b69a <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b652:	f7f9 fb3f 	bl	8004cd4 <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d803      	bhi.n	800b66a <HAL_SPI_Transmit+0x1b6>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d102      	bne.n	800b670 <HAL_SPI_Transmit+0x1bc>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d114      	bne.n	800b69a <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fb7b 	bl	800bd6c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e125      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1b9      	bne.n	800b61a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b6a6:	e0f8      	b.n	800b89a <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	f240 80ed 	bls.w	800b88c <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b6b2:	e05d      	b.n	800b770 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d132      	bne.n	800b728 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d918      	bls.n	800b700 <HAL_SPI_Transmit+0x24c>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d014      	beq.n	800b700 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6e6:	1d1a      	adds	r2, r3, #4
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	3b02      	subs	r3, #2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b6fe:	e037      	b.n	800b770 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b704:	881a      	ldrh	r2, [r3, #0]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b70e:	1c9a      	adds	r2, r3, #2
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	3b01      	subs	r3, #1
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b726:	e023      	b.n	800b770 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b728:	f7f9 fad4 	bl	8004cd4 <HAL_GetTick>
 800b72c:	4602      	mov	r2, r0
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	d803      	bhi.n	800b740 <HAL_SPI_Transmit+0x28c>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73e:	d102      	bne.n	800b746 <HAL_SPI_Transmit+0x292>
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d114      	bne.n	800b770 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f000 fb10 	bl	800bd6c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b75a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e0ba      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b776:	b29b      	uxth	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d19b      	bne.n	800b6b4 <HAL_SPI_Transmit+0x200>
 800b77c:	e08d      	b.n	800b89a <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d15b      	bne.n	800b844 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b792:	b29b      	uxth	r3, r3
 800b794:	2b03      	cmp	r3, #3
 800b796:	d918      	bls.n	800b7ca <HAL_SPI_Transmit+0x316>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	d914      	bls.n	800b7ca <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7b0:	1d1a      	adds	r2, r3, #4
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b04      	subs	r3, #4
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b7c8:	e060      	b.n	800b88c <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d917      	bls.n	800b806 <HAL_SPI_Transmit+0x352>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d013      	beq.n	800b806 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7e2:	881a      	ldrh	r2, [r3, #0]
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ec:	1c9a      	adds	r2, r3, #2
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	3b02      	subs	r3, #2
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b804:	e042      	b.n	800b88c <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3320      	adds	r3, #32
 800b810:	7812      	ldrb	r2, [r2, #0]
 800b812:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b830:	e02c      	b.n	800b88c <HAL_SPI_Transmit+0x3d8>
 800b832:	bf00      	nop
 800b834:	40013000 	.word	0x40013000
 800b838:	50013000 	.word	0x50013000
 800b83c:	40003800 	.word	0x40003800
 800b840:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b844:	f7f9 fa46 	bl	8004cd4 <HAL_GetTick>
 800b848:	4602      	mov	r2, r0
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d803      	bhi.n	800b85c <HAL_SPI_Transmit+0x3a8>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85a:	d102      	bne.n	800b862 <HAL_SPI_Transmit+0x3ae>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d114      	bne.n	800b88c <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 fa82 	bl	800bd6c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800b888:	2303      	movs	r3, #3
 800b88a:	e02c      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b892:	b29b      	uxth	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	f47f af72 	bne.w	800b77e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2108      	movs	r1, #8
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fb01 	bl	800beac <SPI_WaitOnFlagUntilTimeout>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d007      	beq.n	800b8c0 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8b6:	f043 0220 	orr.w	r2, r3, #32
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 fa53 	bl	800bd6c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e000      	b.n	800b8e6 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800b8e4:	7efb      	ldrb	r3, [r7, #27]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop

0800b8f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08c      	sub	sp, #48	; 0x30
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3320      	adds	r3, #32
 800b90a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3330      	adds	r3, #48	; 0x30
 800b912:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d101      	bne.n	800b922 <HAL_SPI_TransmitReceive+0x32>
 800b91e:	2302      	movs	r3, #2
 800b920:	e21f      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b92a:	f7f9 f9d3 	bl	8004cd4 <HAL_GetTick>
 800b92e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800b930:	887b      	ldrh	r3, [r7, #2]
 800b932:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800b934:	887b      	ldrh	r3, [r7, #2]
 800b936:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	d009      	beq.n	800b958 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800b944:	2302      	movs	r3, #2
 800b946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b956:	e204      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <HAL_SPI_TransmitReceive+0x7a>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_SPI_TransmitReceive+0x7a>
 800b964:	887b      	ldrh	r3, [r7, #2]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b97c:	e1f1      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2205      	movs	r2, #5
 800b982:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	887a      	ldrh	r2, [r7, #2]
 800b998:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	887a      	ldrh	r2, [r7, #2]
 800b9a0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	887a      	ldrh	r2, [r7, #2]
 800b9ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	887a      	ldrh	r2, [r7, #2]
 800b9b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800b9d4:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	0c1b      	lsrs	r3, r3, #16
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	8879      	ldrh	r1, [r7, #2]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	6812      	ldr	r2, [r2, #0]
 800b9e6:	430b      	orrs	r3, r1
 800b9e8:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0201 	orr.w	r2, r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10c      	bne.n	800ba22 <HAL_SPI_TransmitReceive+0x132>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba10:	d107      	bne.n	800ba22 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	f240 8085 	bls.w	800bb36 <HAL_SPI_TransmitReceive+0x246>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a7b      	ldr	r2, [pc, #492]	; (800bc20 <HAL_SPI_TransmitReceive+0x330>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d078      	beq.n	800bb28 <HAL_SPI_TransmitReceive+0x238>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a7a      	ldr	r2, [pc, #488]	; (800bc24 <HAL_SPI_TransmitReceive+0x334>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d073      	beq.n	800bb28 <HAL_SPI_TransmitReceive+0x238>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a78      	ldr	r2, [pc, #480]	; (800bc28 <HAL_SPI_TransmitReceive+0x338>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d06e      	beq.n	800bb28 <HAL_SPI_TransmitReceive+0x238>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a77      	ldr	r2, [pc, #476]	; (800bc2c <HAL_SPI_TransmitReceive+0x33c>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d170      	bne.n	800bb36 <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba54:	e068      	b.n	800bb28 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	f003 0302 	and.w	r3, r3, #2
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d11a      	bne.n	800ba9a <HAL_SPI_TransmitReceive+0x1aa>
 800ba64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d017      	beq.n	800ba9a <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba7a:	1d1a      	adds	r2, r3, #4
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba98:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	695a      	ldr	r2, [r3, #20]
 800baa0:	f248 0308 	movw	r3, #32776	; 0x8008
 800baa4:	4013      	ands	r3, r2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d01a      	beq.n	800bae0 <HAL_SPI_TransmitReceive+0x1f0>
 800baaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baac:	2b00      	cmp	r3, #0
 800baae:	d017      	beq.n	800bae0 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800baba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac0:	1d1a      	adds	r2, r3, #4
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bade:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bae0:	f7f9 f8f8 	bl	8004cd4 <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baec:	429a      	cmp	r2, r3
 800baee:	d803      	bhi.n	800baf8 <HAL_SPI_TransmitReceive+0x208>
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf6:	d102      	bne.n	800bafe <HAL_SPI_TransmitReceive+0x20e>
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d114      	bne.n	800bb28 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f934 	bl	800bd6c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e11c      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bb28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d193      	bne.n	800ba56 <HAL_SPI_TransmitReceive+0x166>
 800bb2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d190      	bne.n	800ba56 <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bb34:	e0ee      	b.n	800bd14 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	2b07      	cmp	r3, #7
 800bb3c:	f240 80e4 	bls.w	800bd08 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bb40:	e066      	b.n	800bc10 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d119      	bne.n	800bb84 <HAL_SPI_TransmitReceive+0x294>
 800bb50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb5a:	881a      	ldrh	r2, [r3, #0]
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb64:	1c9a      	adds	r2, r3, #2
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb82:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d11a      	bne.n	800bbc8 <HAL_SPI_TransmitReceive+0x2d8>
 800bb92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d017      	beq.n	800bbc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	8812      	ldrh	r2, [r2, #0]
 800bba0:	b292      	uxth	r2, r2
 800bba2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba8:	1c9a      	adds	r2, r3, #2
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bbc6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbc8:	f7f9 f884 	bl	8004cd4 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d803      	bhi.n	800bbe0 <HAL_SPI_TransmitReceive+0x2f0>
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbde:	d102      	bne.n	800bbe6 <HAL_SPI_TransmitReceive+0x2f6>
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d114      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 f8c0 	bl	800bd6c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e0a8      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d195      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x252>
 800bc16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d192      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x252>
 800bc1c:	e07a      	b.n	800bd14 <HAL_SPI_TransmitReceive+0x424>
 800bc1e:	bf00      	nop
 800bc20:	40013000 	.word	0x40013000
 800bc24:	50013000 	.word	0x50013000
 800bc28:	40003800 	.word	0x40003800
 800bc2c:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d11b      	bne.n	800bc76 <HAL_SPI_TransmitReceive+0x386>
 800bc3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d018      	beq.n	800bc76 <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3320      	adds	r3, #32
 800bc4e:	7812      	ldrb	r2, [r2, #0]
 800bc50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc74:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d11d      	bne.n	800bcc0 <HAL_SPI_TransmitReceive+0x3d0>
 800bc84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d01a      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc96:	7812      	ldrb	r2, [r2, #0]
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800bcbe:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcc0:	f7f9 f808 	bl	8004cd4 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d803      	bhi.n	800bcd8 <HAL_SPI_TransmitReceive+0x3e8>
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd6:	d102      	bne.n	800bcde <HAL_SPI_TransmitReceive+0x3ee>
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d114      	bne.n	800bd08 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f844 	bl	800bd6c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e02c      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d190      	bne.n	800bc30 <HAL_SPI_TransmitReceive+0x340>
 800bd0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d18d      	bne.n	800bc30 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2108      	movs	r1, #8
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f8c4 	bl	800beac <SPI_WaitOnFlagUntilTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd30:	f043 0220 	orr.w	r2, r3, #32
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f000 f816 	bl	800bd6c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e001      	b.n	800bd62 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 800bd5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3728      	adds	r7, #40	; 0x28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop

0800bd6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	699a      	ldr	r2, [r3, #24]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0208 	orr.w	r2, r2, #8
 800bd8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699a      	ldr	r2, [r3, #24]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f042 0210 	orr.w	r2, r2, #16
 800bd9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0201 	bic.w	r2, r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	6812      	ldr	r2, [r2, #0]
 800bdb6:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800bdba:	f023 0303 	bic.w	r3, r3, #3
 800bdbe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689a      	ldr	r2, [r3, #8]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bdce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b04      	cmp	r3, #4
 800bdda:	d014      	beq.n	800be06 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00f      	beq.n	800be06 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	699a      	ldr	r2, [r3, #24]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f042 0220 	orr.w	r2, r2, #32
 800be04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d014      	beq.n	800be3c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00f      	beq.n	800be3c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be22:	f043 0204 	orr.w	r2, r3, #4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00f      	beq.n	800be66 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4c:	f043 0201 	orr.w	r2, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00f      	beq.n	800be90 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be76:	f043 0208 	orr.w	r2, r3, #8
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	4613      	mov	r3, r2
 800beba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bebc:	e010      	b.n	800bee0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bebe:	f7f8 ff09 	bl	8004cd4 <HAL_GetTick>
 800bec2:	4602      	mov	r2, r0
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	429a      	cmp	r2, r3
 800becc:	d803      	bhi.n	800bed6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d102      	bne.n	800bedc <SPI_WaitOnFlagUntilTimeout+0x30>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e00f      	b.n	800bf00 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	695a      	ldr	r2, [r3, #20]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	4013      	ands	r3, r2
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	429a      	cmp	r2, r3
 800beee:	bf0c      	ite	eq
 800bef0:	2301      	moveq	r3, #1
 800bef2:	2300      	movne	r3, #0
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	461a      	mov	r2, r3
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	429a      	cmp	r2, r3
 800befc:	d0df      	beq.n	800bebe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf14:	095b      	lsrs	r3, r3, #5
 800bf16:	3301      	adds	r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	3307      	adds	r3, #7
 800bf26:	08db      	lsrs	r3, r3, #3
 800bf28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d12e      	bne.n	800bfb2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d101      	bne.n	800bf62 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e028      	b.n	800bfb4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 0201 	bic.w	r2, r2, #1
 800bf80:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800bf8e:	ea42 0103 	orr.w	r1, r2, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	689a      	ldr	r2, [r3, #8]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e000      	b.n	800bfb4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
  }
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e042      	b.n	800c058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7f7 ff25 	bl	8003e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2224      	movs	r2, #36	; 0x24
 800bfee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 0201 	bic.w	r2, r2, #1
 800c000:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa64 	bl	800c4d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8b3 	bl	800c17c <UART_SetConfig>
 800c016:	4603      	mov	r3, r0
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d101      	bne.n	800c020 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	e01b      	b.n	800c058 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c02e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c03e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0201 	orr.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fae3 	bl	800c61c <UART_CheckIdleState>
 800c056:	4603      	mov	r3, r0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	; 0x28
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	4613      	mov	r3, r2
 800c06e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c076:	2b20      	cmp	r3, #32
 800c078:	d17b      	bne.n	800c172 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <HAL_UART_Transmit+0x26>
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e074      	b.n	800c174 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2221      	movs	r2, #33	; 0x21
 800c096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c09a:	f7f8 fe1b 	bl	8004cd4 <HAL_GetTick>
 800c09e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	88fa      	ldrh	r2, [r7, #6]
 800c0a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	88fa      	ldrh	r2, [r7, #6]
 800c0ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b8:	d108      	bne.n	800c0cc <HAL_UART_Transmit+0x6c>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d104      	bne.n	800c0cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	61bb      	str	r3, [r7, #24]
 800c0ca:	e003      	b.n	800c0d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c0d4:	e030      	b.n	800c138 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2180      	movs	r1, #128	; 0x80
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 fb45 	bl	800c770 <UART_WaitOnFlagUntilTimeout>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e03d      	b.n	800c174 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10b      	bne.n	800c116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c10c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	3302      	adds	r3, #2
 800c112:	61bb      	str	r3, [r7, #24]
 800c114:	e007      	b.n	800c126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	3301      	adds	r3, #1
 800c124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	3b01      	subs	r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c13e:	b29b      	uxth	r3, r3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1c8      	bne.n	800c0d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2200      	movs	r2, #0
 800c14c:	2140      	movs	r1, #64	; 0x40
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 fb0e 	bl	800c770 <UART_WaitOnFlagUntilTimeout>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d005      	beq.n	800c166 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e006      	b.n	800c174 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e000      	b.n	800c174 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c172:	2302      	movs	r3, #2
  }
}
 800c174:	4618      	mov	r0, r3
 800c176:	3720      	adds	r7, #32
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c17c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c180:	b094      	sub	sp, #80	; 0x50
 800c182:	af00      	add	r7, sp, #0
 800c184:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	4b83      	ldr	r3, [pc, #524]	; (800c3a0 <UART_SetConfig+0x224>)
 800c192:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	431a      	orrs	r2, r3
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	497c      	ldr	r1, [pc, #496]	; (800c3a4 <UART_SetConfig+0x228>)
 800c1b4:	4019      	ands	r1, r3
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	68d9      	ldr	r1, [r3, #12]
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	ea40 0301 	orr.w	r3, r0, r1
 800c1d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b6f      	ldr	r3, [pc, #444]	; (800c3a0 <UART_SetConfig+0x224>)
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d009      	beq.n	800c1fc <UART_SetConfig+0x80>
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	4b6e      	ldr	r3, [pc, #440]	; (800c3a8 <UART_SetConfig+0x22c>)
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d004      	beq.n	800c1fc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800c206:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c210:	430b      	orrs	r3, r1
 800c212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	f023 000f 	bic.w	r0, r3, #15
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	ea40 0301 	orr.w	r3, r0, r1
 800c22a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	4b5e      	ldr	r3, [pc, #376]	; (800c3ac <UART_SetConfig+0x230>)
 800c232:	429a      	cmp	r2, r3
 800c234:	d102      	bne.n	800c23c <UART_SetConfig+0xc0>
 800c236:	2301      	movs	r3, #1
 800c238:	64bb      	str	r3, [r7, #72]	; 0x48
 800c23a:	e032      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4b5b      	ldr	r3, [pc, #364]	; (800c3b0 <UART_SetConfig+0x234>)
 800c242:	429a      	cmp	r2, r3
 800c244:	d102      	bne.n	800c24c <UART_SetConfig+0xd0>
 800c246:	2302      	movs	r3, #2
 800c248:	64bb      	str	r3, [r7, #72]	; 0x48
 800c24a:	e02a      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	4b58      	ldr	r3, [pc, #352]	; (800c3b4 <UART_SetConfig+0x238>)
 800c252:	429a      	cmp	r2, r3
 800c254:	d102      	bne.n	800c25c <UART_SetConfig+0xe0>
 800c256:	2304      	movs	r3, #4
 800c258:	64bb      	str	r3, [r7, #72]	; 0x48
 800c25a:	e022      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	4b55      	ldr	r3, [pc, #340]	; (800c3b8 <UART_SetConfig+0x23c>)
 800c262:	429a      	cmp	r2, r3
 800c264:	d102      	bne.n	800c26c <UART_SetConfig+0xf0>
 800c266:	2308      	movs	r3, #8
 800c268:	64bb      	str	r3, [r7, #72]	; 0x48
 800c26a:	e01a      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	4b52      	ldr	r3, [pc, #328]	; (800c3bc <UART_SetConfig+0x240>)
 800c272:	429a      	cmp	r2, r3
 800c274:	d102      	bne.n	800c27c <UART_SetConfig+0x100>
 800c276:	2310      	movs	r3, #16
 800c278:	64bb      	str	r3, [r7, #72]	; 0x48
 800c27a:	e012      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b4f      	ldr	r3, [pc, #316]	; (800c3c0 <UART_SetConfig+0x244>)
 800c282:	429a      	cmp	r2, r3
 800c284:	d103      	bne.n	800c28e <UART_SetConfig+0x112>
 800c286:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c28a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c28c:	e009      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	4b43      	ldr	r3, [pc, #268]	; (800c3a0 <UART_SetConfig+0x224>)
 800c294:	429a      	cmp	r2, r3
 800c296:	d102      	bne.n	800c29e <UART_SetConfig+0x122>
 800c298:	2320      	movs	r3, #32
 800c29a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c29c:	e001      	b.n	800c2a2 <UART_SetConfig+0x126>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	4b3e      	ldr	r3, [pc, #248]	; (800c3a0 <UART_SetConfig+0x224>)
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d005      	beq.n	800c2b8 <UART_SetConfig+0x13c>
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	4b3d      	ldr	r3, [pc, #244]	; (800c3a8 <UART_SetConfig+0x22c>)
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	f040 8088 	bne.w	800c3c8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	623b      	str	r3, [r7, #32]
 800c2be:	627a      	str	r2, [r7, #36]	; 0x24
 800c2c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c2c4:	f7fd fb52 	bl	800996c <HAL_RCCEx_GetPeriphCLKFreq>
 800c2c8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 80eb 	beq.w	800c4a8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	4a3b      	ldr	r2, [pc, #236]	; (800c3c4 <UART_SetConfig+0x248>)
 800c2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2e4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d305      	bcc.n	800c302 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d903      	bls.n	800c30a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c308:	e048      	b.n	800c39c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c30c:	2200      	movs	r2, #0
 800c30e:	61bb      	str	r3, [r7, #24]
 800c310:	61fa      	str	r2, [r7, #28]
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c316:	4a2b      	ldr	r2, [pc, #172]	; (800c3c4 <UART_SetConfig+0x248>)
 800c318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	2200      	movs	r2, #0
 800c320:	613b      	str	r3, [r7, #16]
 800c322:	617a      	str	r2, [r7, #20]
 800c324:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c328:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c32c:	f7f3 ffb8 	bl	80002a0 <__aeabi_uldivmod>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4610      	mov	r0, r2
 800c336:	4619      	mov	r1, r3
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	020b      	lsls	r3, r1, #8
 800c342:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c346:	0202      	lsls	r2, r0, #8
 800c348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c34a:	6849      	ldr	r1, [r1, #4]
 800c34c:	0849      	lsrs	r1, r1, #1
 800c34e:	2000      	movs	r0, #0
 800c350:	460c      	mov	r4, r1
 800c352:	4605      	mov	r5, r0
 800c354:	eb12 0804 	adds.w	r8, r2, r4
 800c358:	eb43 0905 	adc.w	r9, r3, r5
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	60bb      	str	r3, [r7, #8]
 800c364:	60fa      	str	r2, [r7, #12]
 800c366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c36a:	4640      	mov	r0, r8
 800c36c:	4649      	mov	r1, r9
 800c36e:	f7f3 ff97 	bl	80002a0 <__aeabi_uldivmod>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4613      	mov	r3, r2
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c380:	d308      	bcc.n	800c394 <UART_SetConfig+0x218>
 800c382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c388:	d204      	bcs.n	800c394 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c390:	60da      	str	r2, [r3, #12]
 800c392:	e003      	b.n	800c39c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800c39a:	e085      	b.n	800c4a8 <UART_SetConfig+0x32c>
 800c39c:	e084      	b.n	800c4a8 <UART_SetConfig+0x32c>
 800c39e:	bf00      	nop
 800c3a0:	46002400 	.word	0x46002400
 800c3a4:	cfff69f3 	.word	0xcfff69f3
 800c3a8:	56002400 	.word	0x56002400
 800c3ac:	40013800 	.word	0x40013800
 800c3b0:	40004400 	.word	0x40004400
 800c3b4:	40004800 	.word	0x40004800
 800c3b8:	40004c00 	.word	0x40004c00
 800c3bc:	40005000 	.word	0x40005000
 800c3c0:	40006400 	.word	0x40006400
 800c3c4:	0800dfc0 	.word	0x0800dfc0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3d0:	d13c      	bne.n	800c44c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3de:	f7fd fac5 	bl	800996c <HAL_RCCEx_GetPeriphCLKFreq>
 800c3e2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d05e      	beq.n	800c4a8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	4a39      	ldr	r2, [pc, #228]	; (800c4d4 <UART_SetConfig+0x358>)
 800c3f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3fc:	005a      	lsls	r2, r3, #1
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	085b      	lsrs	r3, r3, #1
 800c404:	441a      	add	r2, r3
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	2b0f      	cmp	r3, #15
 800c414:	d916      	bls.n	800c444 <UART_SetConfig+0x2c8>
 800c416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c41c:	d212      	bcs.n	800c444 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c420:	b29b      	uxth	r3, r3
 800c422:	f023 030f 	bic.w	r3, r3, #15
 800c426:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	085b      	lsrs	r3, r3, #1
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	b29a      	uxth	r2, r3
 800c434:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c436:	4313      	orrs	r3, r2
 800c438:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c440:	60da      	str	r2, [r3, #12]
 800c442:	e031      	b.n	800c4a8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c44a:	e02d      	b.n	800c4a8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c44e:	2200      	movs	r2, #0
 800c450:	469a      	mov	sl, r3
 800c452:	4693      	mov	fp, r2
 800c454:	4650      	mov	r0, sl
 800c456:	4659      	mov	r1, fp
 800c458:	f7fd fa88 	bl	800996c <HAL_RCCEx_GetPeriphCLKFreq>
 800c45c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d021      	beq.n	800c4a8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	4a1a      	ldr	r2, [pc, #104]	; (800c4d4 <UART_SetConfig+0x358>)
 800c46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c46e:	461a      	mov	r2, r3
 800c470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c472:	fbb3 f2f2 	udiv	r2, r3, r2
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	085b      	lsrs	r3, r3, #1
 800c47c:	441a      	add	r2, r3
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	fbb2 f3f3 	udiv	r3, r2, r3
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48a:	2b0f      	cmp	r3, #15
 800c48c:	d909      	bls.n	800c4a2 <UART_SetConfig+0x326>
 800c48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c494:	d205      	bcs.n	800c4a2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c498:	b29a      	uxth	r2, r3
 800c49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	60da      	str	r2, [r3, #12]
 800c4a0:	e002      	b.n	800c4a8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c4c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3750      	adds	r7, #80	; 0x50
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800dfc0 	.word	0x0800dfc0

0800c4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c528:	f003 0302 	and.w	r3, r3, #2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00a      	beq.n	800c546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	430a      	orrs	r2, r1
 800c544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54a:	f003 0304 	and.w	r3, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	430a      	orrs	r2, r1
 800c566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00a      	beq.n	800c58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00a      	beq.n	800c5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	430a      	orrs	r2, r1
 800c5aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01a      	beq.n	800c5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	430a      	orrs	r2, r1
 800c5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d6:	d10a      	bne.n	800c5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	605a      	str	r2, [r3, #4]
  }
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b098      	sub	sp, #96	; 0x60
 800c620:	af02      	add	r7, sp, #8
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c62c:	f7f8 fb52 	bl	8004cd4 <HAL_GetTick>
 800c630:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0308 	and.w	r3, r3, #8
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d12f      	bne.n	800c6a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c648:	2200      	movs	r2, #0
 800c64a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f88e 	bl	800c770 <UART_WaitOnFlagUntilTimeout>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d022      	beq.n	800c6a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	e853 3f00 	ldrex	r3, [r3]
 800c666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c66e:	653b      	str	r3, [r7, #80]	; 0x50
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	461a      	mov	r2, r3
 800c676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c678:	647b      	str	r3, [r7, #68]	; 0x44
 800c67a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e6      	bne.n	800c65a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2220      	movs	r2, #32
 800c690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e063      	b.n	800c768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0304 	and.w	r3, r3, #4
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d149      	bne.n	800c742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f857 	bl	800c770 <UART_WaitOnFlagUntilTimeout>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d03c      	beq.n	800c742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	e853 3f00 	ldrex	r3, [r3]
 800c6d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6e6:	633b      	str	r3, [r7, #48]	; 0x30
 800c6e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e6      	bne.n	800c6c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3308      	adds	r3, #8
 800c700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	60fb      	str	r3, [r7, #12]
   return(result);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f023 0301 	bic.w	r3, r3, #1
 800c710:	64bb      	str	r3, [r7, #72]	; 0x48
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3308      	adds	r3, #8
 800c718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c71a:	61fa      	str	r2, [r7, #28]
 800c71c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	69b9      	ldr	r1, [r7, #24]
 800c720:	69fa      	ldr	r2, [r7, #28]
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	617b      	str	r3, [r7, #20]
   return(result);
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e5      	bne.n	800c6fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c73e:	2303      	movs	r3, #3
 800c740:	e012      	b.n	800c768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3758      	adds	r7, #88	; 0x58
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	4613      	mov	r3, r2
 800c77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c780:	e049      	b.n	800c816 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c788:	d045      	beq.n	800c816 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c78a:	f7f8 faa3 	bl	8004cd4 <HAL_GetTick>
 800c78e:	4602      	mov	r2, r0
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	69ba      	ldr	r2, [r7, #24]
 800c796:	429a      	cmp	r2, r3
 800c798:	d302      	bcc.n	800c7a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e048      	b.n	800c836 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0304 	and.w	r3, r3, #4
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d031      	beq.n	800c816 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	f003 0308 	and.w	r3, r3, #8
 800c7bc:	2b08      	cmp	r3, #8
 800c7be:	d110      	bne.n	800c7e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2208      	movs	r2, #8
 800c7c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 f838 	bl	800c83e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2208      	movs	r2, #8
 800c7d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e029      	b.n	800c836 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7f0:	d111      	bne.n	800c816 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f81e 	bl	800c83e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2220      	movs	r2, #32
 800c806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e00f      	b.n	800c836 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	69da      	ldr	r2, [r3, #28]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	4013      	ands	r3, r2
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	429a      	cmp	r2, r3
 800c824:	bf0c      	ite	eq
 800c826:	2301      	moveq	r3, #1
 800c828:	2300      	movne	r3, #0
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	429a      	cmp	r2, r3
 800c832:	d0a6      	beq.n	800c782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c83e:	b480      	push	{r7}
 800c840:	b095      	sub	sp, #84	; 0x54
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c85a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	461a      	mov	r2, r3
 800c862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c864:	643b      	str	r3, [r7, #64]	; 0x40
 800c866:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c86a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c86c:	e841 2300 	strex	r3, r2, [r1]
 800c870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1e6      	bne.n	800c846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3308      	adds	r3, #8
 800c87e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	e853 3f00 	ldrex	r3, [r3]
 800c886:	61fb      	str	r3, [r7, #28]
   return(result);
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c88e:	f023 0301 	bic.w	r3, r3, #1
 800c892:	64bb      	str	r3, [r7, #72]	; 0x48
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3308      	adds	r3, #8
 800c89a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c89c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c89e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a4:	e841 2300 	strex	r3, r2, [r1]
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e3      	bne.n	800c878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d118      	bne.n	800c8ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f023 0310 	bic.w	r3, r3, #16
 800c8cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d6:	61bb      	str	r3, [r7, #24]
 800c8d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6979      	ldr	r1, [r7, #20]
 800c8dc:	69ba      	ldr	r2, [r7, #24]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c8fe:	bf00      	nop
 800c900:	3754      	adds	r7, #84	; 0x54
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c90a:	b480      	push	{r7}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d101      	bne.n	800c920 <HAL_UARTEx_DisableFifoMode+0x16>
 800c91c:	2302      	movs	r3, #2
 800c91e:	e027      	b.n	800c970 <HAL_UARTEx_DisableFifoMode+0x66>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2224      	movs	r2, #36	; 0x24
 800c92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 0201 	bic.w	r2, r2, #1
 800c946:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c94e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2220      	movs	r2, #32
 800c962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d101      	bne.n	800c994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c990:	2302      	movs	r3, #2
 800c992:	e02d      	b.n	800c9f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2224      	movs	r2, #36	; 0x24
 800c9a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f022 0201 	bic.w	r2, r2, #1
 800c9ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f84f 	bl	800ca74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d101      	bne.n	800ca10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	e02d      	b.n	800ca6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2224      	movs	r2, #36	; 0x24
 800ca1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f022 0201 	bic.w	r2, r2, #1
 800ca36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	430a      	orrs	r2, r1
 800ca4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f811 	bl	800ca74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2220      	movs	r2, #32
 800ca5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d108      	bne.n	800ca96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca94:	e031      	b.n	800cafa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca96:	2308      	movs	r3, #8
 800ca98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca9a:	2308      	movs	r3, #8
 800ca9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	0e5b      	lsrs	r3, r3, #25
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	0f5b      	lsrs	r3, r3, #29
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 0307 	and.w	r3, r3, #7
 800cabc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	7b3a      	ldrb	r2, [r7, #12]
 800cac2:	4911      	ldr	r1, [pc, #68]	; (800cb08 <UARTEx_SetNbDataToProcess+0x94>)
 800cac4:	5c8a      	ldrb	r2, [r1, r2]
 800cac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800caca:	7b3a      	ldrb	r2, [r7, #12]
 800cacc:	490f      	ldr	r1, [pc, #60]	; (800cb0c <UARTEx_SetNbDataToProcess+0x98>)
 800cace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cad0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	7b7a      	ldrb	r2, [r7, #13]
 800cae0:	4909      	ldr	r1, [pc, #36]	; (800cb08 <UARTEx_SetNbDataToProcess+0x94>)
 800cae2:	5c8a      	ldrb	r2, [r1, r2]
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cae8:	7b7a      	ldrb	r2, [r7, #13]
 800caea:	4908      	ldr	r1, [pc, #32]	; (800cb0c <UARTEx_SetNbDataToProcess+0x98>)
 800caec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caee:	fb93 f3f2 	sdiv	r3, r3, r2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cafa:	bf00      	nop
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	0800dfd8 	.word	0x0800dfd8
 800cb0c:	0800dfe0 	.word	0x0800dfe0

0800cb10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b08b      	sub	sp, #44	; 0x2c
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	fa93 f3a3 	rbit	r3, r3
 800cb2a:	613b      	str	r3, [r7, #16]
  return result;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800cb36:	2320      	movs	r3, #32
 800cb38:	e003      	b.n	800cb42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	fab3 f383 	clz	r3, r3
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	2103      	movs	r1, #3
 800cb46:	fa01 f303 	lsl.w	r3, r1, r3
 800cb4a:	43db      	mvns	r3, r3
 800cb4c:	401a      	ands	r2, r3
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	fa93 f3a3 	rbit	r3, r3
 800cb58:	61fb      	str	r3, [r7, #28]
  return result;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800cb64:	2320      	movs	r3, #32
 800cb66:	e003      	b.n	800cb70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	fab3 f383 	clz	r3, r3
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	fa01 f303 	lsl.w	r3, r1, r3
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	601a      	str	r2, [r3, #0]
}
 800cb7e:	bf00      	nop
 800cb80:	372c      	adds	r7, #44	; 0x2c
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	60b9      	str	r1, [r7, #8]
 800cb94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	43db      	mvns	r3, r3
 800cb9e:	401a      	ands	r2, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	6879      	ldr	r1, [r7, #4]
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	605a      	str	r2, [r3, #4]
}
 800cbae:	bf00      	nop
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b08b      	sub	sp, #44	; 0x2c
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	689a      	ldr	r2, [r3, #8]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	fa93 f3a3 	rbit	r3, r3
 800cbd4:	613b      	str	r3, [r7, #16]
  return result;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800cbe0:	2320      	movs	r3, #32
 800cbe2:	e003      	b.n	800cbec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	fab3 f383 	clz	r3, r3
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	2103      	movs	r1, #3
 800cbf0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbf4:	43db      	mvns	r3, r3
 800cbf6:	401a      	ands	r2, r3
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	fa93 f3a3 	rbit	r3, r3
 800cc02:	61fb      	str	r3, [r7, #28]
  return result;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800cc0e:	2320      	movs	r3, #32
 800cc10:	e003      	b.n	800cc1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	fab3 f383 	clz	r3, r3
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc22:	431a      	orrs	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800cc28:	bf00      	nop
 800cc2a:	372c      	adds	r7, #44	; 0x2c
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b08b      	sub	sp, #44	; 0x2c
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	fa93 f3a3 	rbit	r3, r3
 800cc4e:	613b      	str	r3, [r7, #16]
  return result;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800cc5a:	2320      	movs	r3, #32
 800cc5c:	e003      	b.n	800cc66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	fab3 f383 	clz	r3, r3
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	005b      	lsls	r3, r3, #1
 800cc68:	2103      	movs	r1, #3
 800cc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc6e:	43db      	mvns	r3, r3
 800cc70:	401a      	ands	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	fa93 f3a3 	rbit	r3, r3
 800cc7c:	61fb      	str	r3, [r7, #28]
  return result;
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800cc88:	2320      	movs	r3, #32
 800cc8a:	e003      	b.n	800cc94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	fab3 f383 	clz	r3, r3
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	6879      	ldr	r1, [r7, #4]
 800cc98:	fa01 f303 	lsl.w	r3, r1, r3
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	60da      	str	r2, [r3, #12]
}
 800cca2:	bf00      	nop
 800cca4:	372c      	adds	r7, #44	; 0x2c
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b08b      	sub	sp, #44	; 0x2c
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6a1a      	ldr	r2, [r3, #32]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	fa93 f3a3 	rbit	r3, r3
 800ccc8:	613b      	str	r3, [r7, #16]
  return result;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ccd4:	2320      	movs	r3, #32
 800ccd6:	e003      	b.n	800cce0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	fab3 f383 	clz	r3, r3
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	210f      	movs	r1, #15
 800cce4:	fa01 f303 	lsl.w	r3, r1, r3
 800cce8:	43db      	mvns	r3, r3
 800ccea:	401a      	ands	r2, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	fa93 f3a3 	rbit	r3, r3
 800ccf6:	61fb      	str	r3, [r7, #28]
  return result;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800cd02:	2320      	movs	r3, #32
 800cd04:	e003      	b.n	800cd0e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	fab3 f383 	clz	r3, r3
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	fa01 f303 	lsl.w	r3, r1, r3
 800cd16:	431a      	orrs	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800cd1c:	bf00      	nop
 800cd1e:	372c      	adds	r7, #44	; 0x2c
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b08b      	sub	sp, #44	; 0x2c
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	0a1b      	lsrs	r3, r3, #8
 800cd3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	fa93 f3a3 	rbit	r3, r3
 800cd44:	613b      	str	r3, [r7, #16]
  return result;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800cd50:	2320      	movs	r3, #32
 800cd52:	e003      	b.n	800cd5c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	fab3 f383 	clz	r3, r3
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	210f      	movs	r1, #15
 800cd60:	fa01 f303 	lsl.w	r3, r1, r3
 800cd64:	43db      	mvns	r3, r3
 800cd66:	401a      	ands	r2, r3
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	fa93 f3a3 	rbit	r3, r3
 800cd74:	61fb      	str	r3, [r7, #28]
  return result;
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800cd80:	2320      	movs	r3, #32
 800cd82:	e003      	b.n	800cd8c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	fab3 f383 	clz	r3, r3
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	fa01 f303 	lsl.w	r3, r1, r3
 800cd94:	431a      	orrs	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800cd9a:	bf00      	nop
 800cd9c:	372c      	adds	r7, #44	; 0x2c
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b08a      	sub	sp, #40	; 0x28
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	fa93 f3a3 	rbit	r3, r3
 800cdbc:	617b      	str	r3, [r7, #20]
  return result;
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <LL_GPIO_Init+0x26>
    return 32U;
 800cdc8:	2320      	movs	r3, #32
 800cdca:	e003      	b.n	800cdd4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	fab3 f383 	clz	r3, r3
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800cdd6:	e058      	b.n	800ce8a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	2101      	movs	r1, #1
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	fa01 f303 	lsl.w	r3, r1, r3
 800cde4:	4013      	ands	r3, r2
 800cde6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d04a      	beq.n	800ce84 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d003      	beq.n	800cdfe <LL_GPIO_Init+0x58>
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d10e      	bne.n	800ce1c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6a39      	ldr	r1, [r7, #32]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff fed7 	bl	800cbba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	461a      	mov	r2, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff feb7 	bl	800cb8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	461a      	mov	r2, r3
 800ce22:	6a39      	ldr	r1, [r7, #32]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff ff05 	bl	800cc34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d121      	bne.n	800ce76 <LL_GPIO_Init+0xd0>
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	fa93 f3a3 	rbit	r3, r3
 800ce3c:	60bb      	str	r3, [r7, #8]
  return result;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d101      	bne.n	800ce4c <LL_GPIO_Init+0xa6>
    return 32U;
 800ce48:	2320      	movs	r3, #32
 800ce4a:	e003      	b.n	800ce54 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	fab3 f383 	clz	r3, r3
 800ce52:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800ce54:	2b07      	cmp	r3, #7
 800ce56:	d807      	bhi.n	800ce68 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	6a39      	ldr	r1, [r7, #32]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff ff24 	bl	800ccae <LL_GPIO_SetAFPin_0_7>
 800ce66:	e006      	b.n	800ce76 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6a39      	ldr	r1, [r7, #32]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff ff59 	bl	800cd28 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6a39      	ldr	r1, [r7, #32]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fe46 	bl	800cb10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	3301      	adds	r3, #1
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	fa22 f303 	lsr.w	r3, r2, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d19f      	bne.n	800cdd8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3728      	adds	r7, #40	; 0x28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cea2:	b084      	sub	sp, #16
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	f107 001c 	add.w	r0, r7, #28
 800ceb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d105      	bne.n	800cec6 <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f8e8 	bl	800d09c <USB_CoreReset>
 800cecc:	4603      	mov	r3, r0
 800cece:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d10b      	bne.n	800ceee <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f043 0208 	orr.w	r2, r3, #8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	f043 0220 	orr.w	r2, r3, #32
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cefa:	b004      	add	sp, #16
 800cefc:	4770      	bx	lr

0800cefe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f023 0201 	bic.w	r2, r3, #1
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d115      	bne.n	800cf6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cf4e:	2001      	movs	r0, #1
 800cf50:	f7f7 fecc 	bl	8004cec <HAL_Delay>
      ms++;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f890 	bl	800d080 <USB_GetMode>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d01e      	beq.n	800cfa4 <USB_SetCurrentMode+0x84>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b31      	cmp	r3, #49	; 0x31
 800cf6a:	d9f0      	bls.n	800cf4e <USB_SetCurrentMode+0x2e>
 800cf6c:	e01a      	b.n	800cfa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d115      	bne.n	800cfa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cf80:	2001      	movs	r0, #1
 800cf82:	f7f7 feb3 	bl	8004cec <HAL_Delay>
      ms++;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f877 	bl	800d080 <USB_GetMode>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d005      	beq.n	800cfa4 <USB_SetCurrentMode+0x84>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b31      	cmp	r3, #49	; 0x31
 800cf9c:	d9f0      	bls.n	800cf80 <USB_SetCurrentMode+0x60>
 800cf9e:	e001      	b.n	800cfa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e005      	b.n	800cfb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b32      	cmp	r3, #50	; 0x32
 800cfa8:	d101      	bne.n	800cfae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e000      	b.n	800cfb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4a13      	ldr	r2, [pc, #76]	; (800d01c <USB_FlushTxFifo+0x64>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d901      	bls.n	800cfd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e01b      	b.n	800d010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	daf2      	bge.n	800cfc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	019b      	lsls	r3, r3, #6
 800cfe8:	f043 0220 	orr.w	r2, r3, #32
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3301      	adds	r3, #1
 800cff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4a08      	ldr	r2, [pc, #32]	; (800d01c <USB_FlushTxFifo+0x64>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d901      	bls.n	800d002 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e006      	b.n	800d010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	f003 0320 	and.w	r3, r3, #32
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	d0f0      	beq.n	800cff0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	00030d40 	.word	0x00030d40

0800d020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d028:	2300      	movs	r3, #0
 800d02a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	4a11      	ldr	r2, [pc, #68]	; (800d07c <USB_FlushRxFifo+0x5c>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d901      	bls.n	800d03e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e018      	b.n	800d070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	2b00      	cmp	r3, #0
 800d044:	daf2      	bge.n	800d02c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2210      	movs	r2, #16
 800d04e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4a08      	ldr	r2, [pc, #32]	; (800d07c <USB_FlushRxFifo+0x5c>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d901      	bls.n	800d062 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e006      	b.n	800d070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	f003 0310 	and.w	r3, r3, #16
 800d06a:	2b10      	cmp	r3, #16
 800d06c:	d0f0      	beq.n	800d050 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	00030d40 	.word	0x00030d40

0800d080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	f003 0301 	and.w	r3, r3, #1
}
 800d090:	4618      	mov	r0, r3
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	4a13      	ldr	r2, [pc, #76]	; (800d100 <USB_CoreReset+0x64>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d901      	bls.n	800d0ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	e01b      	b.n	800d0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	daf2      	bge.n	800d0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f043 0201 	orr.w	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4a09      	ldr	r2, [pc, #36]	; (800d100 <USB_CoreReset+0x64>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d901      	bls.n	800d0e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e006      	b.n	800d0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d0f0      	beq.n	800d0d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	00030d40 	.word	0x00030d40

0800d104 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d104:	b084      	sub	sp, #16
 800d106:	b580      	push	{r7, lr}
 800d108:	b086      	sub	sp, #24
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d122:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d130:	461a      	mov	r2, r3
 800d132:	2300      	movs	r3, #0
 800d134:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#else
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d018      	beq.n	800d1a4 <USB_HostInit+0xa0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	2b01      	cmp	r3, #1
 800d176:	d10a      	bne.n	800d18e <USB_HostInit+0x8a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d186:	f043 0304 	orr.w	r3, r3, #4
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	e014      	b.n	800d1b8 <USB_HostInit+0xb4>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d19c:	f023 0304 	bic.w	r3, r3, #4
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	e009      	b.n	800d1b8 <USB_HostInit+0xb4>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1b2:	f023 0304 	bic.w	r3, r3, #4
 800d1b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d1b8:	2110      	movs	r1, #16
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff fefc 	bl	800cfb8 <USB_FlushTxFifo>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <USB_HostInit+0xc6>
  {
    ret = HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff ff28 	bl	800d020 <USB_FlushRxFifo>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <USB_HostInit+0xd6>
  {
    ret = HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d1da:	2300      	movs	r3, #0
 800d1dc:	613b      	str	r3, [r7, #16]
 800d1de:	e015      	b.n	800d20c <USB_HostInit+0x108>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	015a      	lsls	r2, r3, #5
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d200:	461a      	mov	r2, r3
 800d202:	2300      	movs	r3, #0
 800d204:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	3301      	adds	r3, #1
 800d20a:	613b      	str	r3, [r7, #16]
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	429a      	cmp	r2, r3
 800d212:	d3e5      	bcc.n	800d1e0 <USB_HostInit+0xdc>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f04f 32ff 	mov.w	r2, #4294967295
 800d220:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00b      	beq.n	800d246 <USB_HostInit+0x142>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d234:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a13      	ldr	r2, [pc, #76]	; (800d288 <USB_HostInit+0x184>)
 800d23a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a13      	ldr	r2, [pc, #76]	; (800d28c <USB_HostInit+0x188>)
 800d240:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d244:	e009      	b.n	800d25a <USB_HostInit+0x156>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2280      	movs	r2, #128	; 0x80
 800d24a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a10      	ldr	r2, [pc, #64]	; (800d290 <USB_HostInit+0x18c>)
 800d250:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a0f      	ldr	r2, [pc, #60]	; (800d294 <USB_HostInit+0x190>)
 800d256:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d105      	bne.n	800d26c <USB_HostInit+0x168>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	f043 0210 	orr.w	r2, r3, #16
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	699a      	ldr	r2, [r3, #24]
 800d270:	4b09      	ldr	r3, [pc, #36]	; (800d298 <USB_HostInit+0x194>)
 800d272:	4313      	orrs	r3, r2
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d278:	7dfb      	ldrb	r3, [r7, #23]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d284:	b004      	add	sp, #16
 800d286:	4770      	bx	lr
 800d288:	01000200 	.word	0x01000200
 800d28c:	00e00300 	.word	0x00e00300
 800d290:	00600080 	.word	0x00600080
 800d294:	004000e0 	.word	0x004000e0
 800d298:	a3200008 	.word	0xa3200008

0800d29c <_vsniprintf_r>:
 800d29c:	b530      	push	{r4, r5, lr}
 800d29e:	4614      	mov	r4, r2
 800d2a0:	b09b      	sub	sp, #108	; 0x6c
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	da05      	bge.n	800d2b6 <_vsniprintf_r+0x1a>
 800d2aa:	238b      	movs	r3, #139	; 0x8b
 800d2ac:	6003      	str	r3, [r0, #0]
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b2:	b01b      	add	sp, #108	; 0x6c
 800d2b4:	bd30      	pop	{r4, r5, pc}
 800d2b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d2ba:	9100      	str	r1, [sp, #0]
 800d2bc:	9104      	str	r1, [sp, #16]
 800d2be:	4669      	mov	r1, sp
 800d2c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d2c4:	bf14      	ite	ne
 800d2c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d2ca:	4623      	moveq	r3, r4
 800d2cc:	9302      	str	r3, [sp, #8]
 800d2ce:	9305      	str	r3, [sp, #20]
 800d2d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d2d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2da:	f000 f9ad 	bl	800d638 <_svfiprintf_r>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	bfbc      	itt	lt
 800d2e2:	238b      	movlt	r3, #139	; 0x8b
 800d2e4:	602b      	strlt	r3, [r5, #0]
 800d2e6:	2c00      	cmp	r4, #0
 800d2e8:	d0e3      	beq.n	800d2b2 <_vsniprintf_r+0x16>
 800d2ea:	9b00      	ldr	r3, [sp, #0]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]
 800d2f0:	e7df      	b.n	800d2b2 <_vsniprintf_r+0x16>
	...

0800d2f4 <vsniprintf>:
 800d2f4:	b507      	push	{r0, r1, r2, lr}
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	460a      	mov	r2, r1
 800d2fc:	4601      	mov	r1, r0
 800d2fe:	4803      	ldr	r0, [pc, #12]	; (800d30c <vsniprintf+0x18>)
 800d300:	6800      	ldr	r0, [r0, #0]
 800d302:	f7ff ffcb 	bl	800d29c <_vsniprintf_r>
 800d306:	b003      	add	sp, #12
 800d308:	f85d fb04 	ldr.w	pc, [sp], #4
 800d30c:	20000070 	.word	0x20000070

0800d310 <memset>:
 800d310:	4402      	add	r2, r0
 800d312:	4603      	mov	r3, r0
 800d314:	4293      	cmp	r3, r2
 800d316:	d100      	bne.n	800d31a <memset+0xa>
 800d318:	4770      	bx	lr
 800d31a:	f803 1b01 	strb.w	r1, [r3], #1
 800d31e:	e7f9      	b.n	800d314 <memset+0x4>

0800d320 <__errno>:
 800d320:	4b01      	ldr	r3, [pc, #4]	; (800d328 <__errno+0x8>)
 800d322:	6818      	ldr	r0, [r3, #0]
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	20000070 	.word	0x20000070

0800d32c <__libc_init_array>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	4d0d      	ldr	r5, [pc, #52]	; (800d364 <__libc_init_array+0x38>)
 800d330:	2600      	movs	r6, #0
 800d332:	4c0d      	ldr	r4, [pc, #52]	; (800d368 <__libc_init_array+0x3c>)
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	42a6      	cmp	r6, r4
 800d33a:	d109      	bne.n	800d350 <__libc_init_array+0x24>
 800d33c:	4d0b      	ldr	r5, [pc, #44]	; (800d36c <__libc_init_array+0x40>)
 800d33e:	2600      	movs	r6, #0
 800d340:	4c0b      	ldr	r4, [pc, #44]	; (800d370 <__libc_init_array+0x44>)
 800d342:	f000 fc79 	bl	800dc38 <_init>
 800d346:	1b64      	subs	r4, r4, r5
 800d348:	10a4      	asrs	r4, r4, #2
 800d34a:	42a6      	cmp	r6, r4
 800d34c:	d105      	bne.n	800d35a <__libc_init_array+0x2e>
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	f855 3b04 	ldr.w	r3, [r5], #4
 800d354:	3601      	adds	r6, #1
 800d356:	4798      	blx	r3
 800d358:	e7ee      	b.n	800d338 <__libc_init_array+0xc>
 800d35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35e:	3601      	adds	r6, #1
 800d360:	4798      	blx	r3
 800d362:	e7f2      	b.n	800d34a <__libc_init_array+0x1e>
 800d364:	0800e024 	.word	0x0800e024
 800d368:	0800e024 	.word	0x0800e024
 800d36c:	0800e024 	.word	0x0800e024
 800d370:	0800e028 	.word	0x0800e028

0800d374 <__retarget_lock_acquire_recursive>:
 800d374:	4770      	bx	lr

0800d376 <__retarget_lock_release_recursive>:
 800d376:	4770      	bx	lr

0800d378 <memcpy>:
 800d378:	440a      	add	r2, r1
 800d37a:	1e43      	subs	r3, r0, #1
 800d37c:	4291      	cmp	r1, r2
 800d37e:	d100      	bne.n	800d382 <memcpy+0xa>
 800d380:	4770      	bx	lr
 800d382:	b510      	push	{r4, lr}
 800d384:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d388:	4291      	cmp	r1, r2
 800d38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d38e:	d1f9      	bne.n	800d384 <memcpy+0xc>
 800d390:	bd10      	pop	{r4, pc}
	...

0800d394 <_free_r>:
 800d394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d396:	2900      	cmp	r1, #0
 800d398:	d043      	beq.n	800d422 <_free_r+0x8e>
 800d39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d39e:	1f0c      	subs	r4, r1, #4
 800d3a0:	9001      	str	r0, [sp, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bfb8      	it	lt
 800d3a6:	18e4      	addlt	r4, r4, r3
 800d3a8:	f000 f8e0 	bl	800d56c <__malloc_lock>
 800d3ac:	4a1e      	ldr	r2, [pc, #120]	; (800d428 <_free_r+0x94>)
 800d3ae:	9801      	ldr	r0, [sp, #4]
 800d3b0:	6813      	ldr	r3, [r2, #0]
 800d3b2:	b933      	cbnz	r3, 800d3c2 <_free_r+0x2e>
 800d3b4:	6063      	str	r3, [r4, #4]
 800d3b6:	6014      	str	r4, [r2, #0]
 800d3b8:	b003      	add	sp, #12
 800d3ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3be:	f000 b8db 	b.w	800d578 <__malloc_unlock>
 800d3c2:	42a3      	cmp	r3, r4
 800d3c4:	d908      	bls.n	800d3d8 <_free_r+0x44>
 800d3c6:	6825      	ldr	r5, [r4, #0]
 800d3c8:	1961      	adds	r1, r4, r5
 800d3ca:	428b      	cmp	r3, r1
 800d3cc:	bf01      	itttt	eq
 800d3ce:	6819      	ldreq	r1, [r3, #0]
 800d3d0:	685b      	ldreq	r3, [r3, #4]
 800d3d2:	1949      	addeq	r1, r1, r5
 800d3d4:	6021      	streq	r1, [r4, #0]
 800d3d6:	e7ed      	b.n	800d3b4 <_free_r+0x20>
 800d3d8:	461a      	mov	r2, r3
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	b10b      	cbz	r3, 800d3e2 <_free_r+0x4e>
 800d3de:	42a3      	cmp	r3, r4
 800d3e0:	d9fa      	bls.n	800d3d8 <_free_r+0x44>
 800d3e2:	6811      	ldr	r1, [r2, #0]
 800d3e4:	1855      	adds	r5, r2, r1
 800d3e6:	42a5      	cmp	r5, r4
 800d3e8:	d10b      	bne.n	800d402 <_free_r+0x6e>
 800d3ea:	6824      	ldr	r4, [r4, #0]
 800d3ec:	4421      	add	r1, r4
 800d3ee:	1854      	adds	r4, r2, r1
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	42a3      	cmp	r3, r4
 800d3f4:	d1e0      	bne.n	800d3b8 <_free_r+0x24>
 800d3f6:	681c      	ldr	r4, [r3, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	440c      	add	r4, r1
 800d3fc:	6053      	str	r3, [r2, #4]
 800d3fe:	6014      	str	r4, [r2, #0]
 800d400:	e7da      	b.n	800d3b8 <_free_r+0x24>
 800d402:	d902      	bls.n	800d40a <_free_r+0x76>
 800d404:	230c      	movs	r3, #12
 800d406:	6003      	str	r3, [r0, #0]
 800d408:	e7d6      	b.n	800d3b8 <_free_r+0x24>
 800d40a:	6825      	ldr	r5, [r4, #0]
 800d40c:	1961      	adds	r1, r4, r5
 800d40e:	428b      	cmp	r3, r1
 800d410:	bf02      	ittt	eq
 800d412:	6819      	ldreq	r1, [r3, #0]
 800d414:	685b      	ldreq	r3, [r3, #4]
 800d416:	1949      	addeq	r1, r1, r5
 800d418:	6063      	str	r3, [r4, #4]
 800d41a:	bf08      	it	eq
 800d41c:	6021      	streq	r1, [r4, #0]
 800d41e:	6054      	str	r4, [r2, #4]
 800d420:	e7ca      	b.n	800d3b8 <_free_r+0x24>
 800d422:	b003      	add	sp, #12
 800d424:	bd30      	pop	{r4, r5, pc}
 800d426:	bf00      	nop
 800d428:	200008cc 	.word	0x200008cc

0800d42c <sbrk_aligned>:
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	4e0e      	ldr	r6, [pc, #56]	; (800d468 <sbrk_aligned+0x3c>)
 800d430:	460c      	mov	r4, r1
 800d432:	4605      	mov	r5, r0
 800d434:	6831      	ldr	r1, [r6, #0]
 800d436:	b911      	cbnz	r1, 800d43e <sbrk_aligned+0x12>
 800d438:	f000 fba8 	bl	800db8c <_sbrk_r>
 800d43c:	6030      	str	r0, [r6, #0]
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f000 fba3 	bl	800db8c <_sbrk_r>
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	d00a      	beq.n	800d460 <sbrk_aligned+0x34>
 800d44a:	1cc4      	adds	r4, r0, #3
 800d44c:	f024 0403 	bic.w	r4, r4, #3
 800d450:	42a0      	cmp	r0, r4
 800d452:	d007      	beq.n	800d464 <sbrk_aligned+0x38>
 800d454:	1a21      	subs	r1, r4, r0
 800d456:	4628      	mov	r0, r5
 800d458:	f000 fb98 	bl	800db8c <_sbrk_r>
 800d45c:	3001      	adds	r0, #1
 800d45e:	d101      	bne.n	800d464 <sbrk_aligned+0x38>
 800d460:	f04f 34ff 	mov.w	r4, #4294967295
 800d464:	4620      	mov	r0, r4
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	200008d0 	.word	0x200008d0

0800d46c <_malloc_r>:
 800d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d470:	1ccd      	adds	r5, r1, #3
 800d472:	4607      	mov	r7, r0
 800d474:	f025 0503 	bic.w	r5, r5, #3
 800d478:	3508      	adds	r5, #8
 800d47a:	2d0c      	cmp	r5, #12
 800d47c:	bf38      	it	cc
 800d47e:	250c      	movcc	r5, #12
 800d480:	2d00      	cmp	r5, #0
 800d482:	db01      	blt.n	800d488 <_malloc_r+0x1c>
 800d484:	42a9      	cmp	r1, r5
 800d486:	d905      	bls.n	800d494 <_malloc_r+0x28>
 800d488:	230c      	movs	r3, #12
 800d48a:	2600      	movs	r6, #0
 800d48c:	603b      	str	r3, [r7, #0]
 800d48e:	4630      	mov	r0, r6
 800d490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d568 <_malloc_r+0xfc>
 800d498:	f000 f868 	bl	800d56c <__malloc_lock>
 800d49c:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a0:	461c      	mov	r4, r3
 800d4a2:	bb5c      	cbnz	r4, 800d4fc <_malloc_r+0x90>
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f7ff ffc0 	bl	800d42c <sbrk_aligned>
 800d4ac:	1c43      	adds	r3, r0, #1
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	d155      	bne.n	800d55e <_malloc_r+0xf2>
 800d4b2:	f8d8 4000 	ldr.w	r4, [r8]
 800d4b6:	4626      	mov	r6, r4
 800d4b8:	2e00      	cmp	r6, #0
 800d4ba:	d145      	bne.n	800d548 <_malloc_r+0xdc>
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	d048      	beq.n	800d552 <_malloc_r+0xe6>
 800d4c0:	6823      	ldr	r3, [r4, #0]
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	eb04 0903 	add.w	r9, r4, r3
 800d4ca:	f000 fb5f 	bl	800db8c <_sbrk_r>
 800d4ce:	4581      	cmp	r9, r0
 800d4d0:	d13f      	bne.n	800d552 <_malloc_r+0xe6>
 800d4d2:	6821      	ldr	r1, [r4, #0]
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	1a6d      	subs	r5, r5, r1
 800d4d8:	4629      	mov	r1, r5
 800d4da:	f7ff ffa7 	bl	800d42c <sbrk_aligned>
 800d4de:	3001      	adds	r0, #1
 800d4e0:	d037      	beq.n	800d552 <_malloc_r+0xe6>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	442b      	add	r3, r5
 800d4e6:	6023      	str	r3, [r4, #0]
 800d4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d038      	beq.n	800d562 <_malloc_r+0xf6>
 800d4f0:	685a      	ldr	r2, [r3, #4]
 800d4f2:	42a2      	cmp	r2, r4
 800d4f4:	d12b      	bne.n	800d54e <_malloc_r+0xe2>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	e00f      	b.n	800d51c <_malloc_r+0xb0>
 800d4fc:	6822      	ldr	r2, [r4, #0]
 800d4fe:	1b52      	subs	r2, r2, r5
 800d500:	d41f      	bmi.n	800d542 <_malloc_r+0xd6>
 800d502:	2a0b      	cmp	r2, #11
 800d504:	d917      	bls.n	800d536 <_malloc_r+0xca>
 800d506:	1961      	adds	r1, r4, r5
 800d508:	42a3      	cmp	r3, r4
 800d50a:	6025      	str	r5, [r4, #0]
 800d50c:	bf18      	it	ne
 800d50e:	6059      	strne	r1, [r3, #4]
 800d510:	6863      	ldr	r3, [r4, #4]
 800d512:	bf08      	it	eq
 800d514:	f8c8 1000 	streq.w	r1, [r8]
 800d518:	5162      	str	r2, [r4, r5]
 800d51a:	604b      	str	r3, [r1, #4]
 800d51c:	f104 060b 	add.w	r6, r4, #11
 800d520:	4638      	mov	r0, r7
 800d522:	f000 f829 	bl	800d578 <__malloc_unlock>
 800d526:	1d23      	adds	r3, r4, #4
 800d528:	f026 0607 	bic.w	r6, r6, #7
 800d52c:	1af2      	subs	r2, r6, r3
 800d52e:	d0ae      	beq.n	800d48e <_malloc_r+0x22>
 800d530:	1b9b      	subs	r3, r3, r6
 800d532:	50a3      	str	r3, [r4, r2]
 800d534:	e7ab      	b.n	800d48e <_malloc_r+0x22>
 800d536:	42a3      	cmp	r3, r4
 800d538:	6862      	ldr	r2, [r4, #4]
 800d53a:	d1dd      	bne.n	800d4f8 <_malloc_r+0x8c>
 800d53c:	f8c8 2000 	str.w	r2, [r8]
 800d540:	e7ec      	b.n	800d51c <_malloc_r+0xb0>
 800d542:	4623      	mov	r3, r4
 800d544:	6864      	ldr	r4, [r4, #4]
 800d546:	e7ac      	b.n	800d4a2 <_malloc_r+0x36>
 800d548:	4634      	mov	r4, r6
 800d54a:	6876      	ldr	r6, [r6, #4]
 800d54c:	e7b4      	b.n	800d4b8 <_malloc_r+0x4c>
 800d54e:	4613      	mov	r3, r2
 800d550:	e7cc      	b.n	800d4ec <_malloc_r+0x80>
 800d552:	230c      	movs	r3, #12
 800d554:	4638      	mov	r0, r7
 800d556:	603b      	str	r3, [r7, #0]
 800d558:	f000 f80e 	bl	800d578 <__malloc_unlock>
 800d55c:	e797      	b.n	800d48e <_malloc_r+0x22>
 800d55e:	6025      	str	r5, [r4, #0]
 800d560:	e7dc      	b.n	800d51c <_malloc_r+0xb0>
 800d562:	605b      	str	r3, [r3, #4]
 800d564:	deff      	udf	#255	; 0xff
 800d566:	bf00      	nop
 800d568:	200008cc 	.word	0x200008cc

0800d56c <__malloc_lock>:
 800d56c:	4801      	ldr	r0, [pc, #4]	; (800d574 <__malloc_lock+0x8>)
 800d56e:	f7ff bf01 	b.w	800d374 <__retarget_lock_acquire_recursive>
 800d572:	bf00      	nop
 800d574:	200008c8 	.word	0x200008c8

0800d578 <__malloc_unlock>:
 800d578:	4801      	ldr	r0, [pc, #4]	; (800d580 <__malloc_unlock+0x8>)
 800d57a:	f7ff befc 	b.w	800d376 <__retarget_lock_release_recursive>
 800d57e:	bf00      	nop
 800d580:	200008c8 	.word	0x200008c8

0800d584 <__ssputs_r>:
 800d584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	461f      	mov	r7, r3
 800d58a:	688e      	ldr	r6, [r1, #8]
 800d58c:	4682      	mov	sl, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	42be      	cmp	r6, r7
 800d592:	4690      	mov	r8, r2
 800d594:	680b      	ldr	r3, [r1, #0]
 800d596:	d82c      	bhi.n	800d5f2 <__ssputs_r+0x6e>
 800d598:	898a      	ldrh	r2, [r1, #12]
 800d59a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d59e:	d026      	beq.n	800d5ee <__ssputs_r+0x6a>
 800d5a0:	6965      	ldr	r5, [r4, #20]
 800d5a2:	6909      	ldr	r1, [r1, #16]
 800d5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5a8:	eba3 0901 	sub.w	r9, r3, r1
 800d5ac:	1c7b      	adds	r3, r7, #1
 800d5ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5b2:	444b      	add	r3, r9
 800d5b4:	106d      	asrs	r5, r5, #1
 800d5b6:	429d      	cmp	r5, r3
 800d5b8:	bf38      	it	cc
 800d5ba:	461d      	movcc	r5, r3
 800d5bc:	0553      	lsls	r3, r2, #21
 800d5be:	d527      	bpl.n	800d610 <__ssputs_r+0x8c>
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f7ff ff53 	bl	800d46c <_malloc_r>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	b360      	cbz	r0, 800d624 <__ssputs_r+0xa0>
 800d5ca:	464a      	mov	r2, r9
 800d5cc:	6921      	ldr	r1, [r4, #16]
 800d5ce:	f7ff fed3 	bl	800d378 <memcpy>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5dc:	81a3      	strh	r3, [r4, #12]
 800d5de:	6126      	str	r6, [r4, #16]
 800d5e0:	444e      	add	r6, r9
 800d5e2:	6165      	str	r5, [r4, #20]
 800d5e4:	eba5 0509 	sub.w	r5, r5, r9
 800d5e8:	6026      	str	r6, [r4, #0]
 800d5ea:	463e      	mov	r6, r7
 800d5ec:	60a5      	str	r5, [r4, #8]
 800d5ee:	42be      	cmp	r6, r7
 800d5f0:	d900      	bls.n	800d5f4 <__ssputs_r+0x70>
 800d5f2:	463e      	mov	r6, r7
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	6820      	ldr	r0, [r4, #0]
 800d5fa:	f000 faad 	bl	800db58 <memmove>
 800d5fe:	68a3      	ldr	r3, [r4, #8]
 800d600:	2000      	movs	r0, #0
 800d602:	1b9b      	subs	r3, r3, r6
 800d604:	60a3      	str	r3, [r4, #8]
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	4433      	add	r3, r6
 800d60a:	6023      	str	r3, [r4, #0]
 800d60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d610:	462a      	mov	r2, r5
 800d612:	f000 fad9 	bl	800dbc8 <_realloc_r>
 800d616:	4606      	mov	r6, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	d1e0      	bne.n	800d5de <__ssputs_r+0x5a>
 800d61c:	6921      	ldr	r1, [r4, #16]
 800d61e:	4650      	mov	r0, sl
 800d620:	f7ff feb8 	bl	800d394 <_free_r>
 800d624:	230c      	movs	r3, #12
 800d626:	f04f 30ff 	mov.w	r0, #4294967295
 800d62a:	f8ca 3000 	str.w	r3, [sl]
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	e7e9      	b.n	800d60c <__ssputs_r+0x88>

0800d638 <_svfiprintf_r>:
 800d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63c:	4698      	mov	r8, r3
 800d63e:	898b      	ldrh	r3, [r1, #12]
 800d640:	b09d      	sub	sp, #116	; 0x74
 800d642:	4607      	mov	r7, r0
 800d644:	061b      	lsls	r3, r3, #24
 800d646:	460d      	mov	r5, r1
 800d648:	4614      	mov	r4, r2
 800d64a:	d50e      	bpl.n	800d66a <_svfiprintf_r+0x32>
 800d64c:	690b      	ldr	r3, [r1, #16]
 800d64e:	b963      	cbnz	r3, 800d66a <_svfiprintf_r+0x32>
 800d650:	2140      	movs	r1, #64	; 0x40
 800d652:	f7ff ff0b 	bl	800d46c <_malloc_r>
 800d656:	6028      	str	r0, [r5, #0]
 800d658:	6128      	str	r0, [r5, #16]
 800d65a:	b920      	cbnz	r0, 800d666 <_svfiprintf_r+0x2e>
 800d65c:	230c      	movs	r3, #12
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
 800d664:	e0d0      	b.n	800d808 <_svfiprintf_r+0x1d0>
 800d666:	2340      	movs	r3, #64	; 0x40
 800d668:	616b      	str	r3, [r5, #20]
 800d66a:	2300      	movs	r3, #0
 800d66c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d670:	f04f 0901 	mov.w	r9, #1
 800d674:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d820 <_svfiprintf_r+0x1e8>
 800d678:	9309      	str	r3, [sp, #36]	; 0x24
 800d67a:	2320      	movs	r3, #32
 800d67c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d680:	2330      	movs	r3, #48	; 0x30
 800d682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d686:	4623      	mov	r3, r4
 800d688:	469a      	mov	sl, r3
 800d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68e:	b10a      	cbz	r2, 800d694 <_svfiprintf_r+0x5c>
 800d690:	2a25      	cmp	r2, #37	; 0x25
 800d692:	d1f9      	bne.n	800d688 <_svfiprintf_r+0x50>
 800d694:	ebba 0b04 	subs.w	fp, sl, r4
 800d698:	d00b      	beq.n	800d6b2 <_svfiprintf_r+0x7a>
 800d69a:	465b      	mov	r3, fp
 800d69c:	4622      	mov	r2, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7ff ff6f 	bl	800d584 <__ssputs_r>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f000 80a9 	beq.w	800d7fe <_svfiprintf_r+0x1c6>
 800d6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ae:	445a      	add	r2, fp
 800d6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80a1 	beq.w	800d7fe <_svfiprintf_r+0x1c6>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c2:	f10a 0a01 	add.w	sl, sl, #1
 800d6c6:	9304      	str	r3, [sp, #16]
 800d6c8:	9307      	str	r3, [sp, #28]
 800d6ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6ce:	931a      	str	r3, [sp, #104]	; 0x68
 800d6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6d4:	4654      	mov	r4, sl
 800d6d6:	2205      	movs	r2, #5
 800d6d8:	4851      	ldr	r0, [pc, #324]	; (800d820 <_svfiprintf_r+0x1e8>)
 800d6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6de:	f000 fa65 	bl	800dbac <memchr>
 800d6e2:	9a04      	ldr	r2, [sp, #16]
 800d6e4:	b9d8      	cbnz	r0, 800d71e <_svfiprintf_r+0xe6>
 800d6e6:	06d0      	lsls	r0, r2, #27
 800d6e8:	bf44      	itt	mi
 800d6ea:	2320      	movmi	r3, #32
 800d6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6f0:	0711      	lsls	r1, r2, #28
 800d6f2:	bf44      	itt	mi
 800d6f4:	232b      	movmi	r3, #43	; 0x2b
 800d6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d700:	d015      	beq.n	800d72e <_svfiprintf_r+0xf6>
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	4654      	mov	r4, sl
 800d706:	2000      	movs	r0, #0
 800d708:	f04f 0c0a 	mov.w	ip, #10
 800d70c:	4621      	mov	r1, r4
 800d70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d712:	3b30      	subs	r3, #48	; 0x30
 800d714:	2b09      	cmp	r3, #9
 800d716:	d94d      	bls.n	800d7b4 <_svfiprintf_r+0x17c>
 800d718:	b1b0      	cbz	r0, 800d748 <_svfiprintf_r+0x110>
 800d71a:	9207      	str	r2, [sp, #28]
 800d71c:	e014      	b.n	800d748 <_svfiprintf_r+0x110>
 800d71e:	eba0 0308 	sub.w	r3, r0, r8
 800d722:	46a2      	mov	sl, r4
 800d724:	fa09 f303 	lsl.w	r3, r9, r3
 800d728:	4313      	orrs	r3, r2
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	e7d2      	b.n	800d6d4 <_svfiprintf_r+0x9c>
 800d72e:	9b03      	ldr	r3, [sp, #12]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	9103      	str	r1, [sp, #12]
 800d738:	bfbb      	ittet	lt
 800d73a:	425b      	neglt	r3, r3
 800d73c:	f042 0202 	orrlt.w	r2, r2, #2
 800d740:	9307      	strge	r3, [sp, #28]
 800d742:	9307      	strlt	r3, [sp, #28]
 800d744:	bfb8      	it	lt
 800d746:	9204      	strlt	r2, [sp, #16]
 800d748:	7823      	ldrb	r3, [r4, #0]
 800d74a:	2b2e      	cmp	r3, #46	; 0x2e
 800d74c:	d10c      	bne.n	800d768 <_svfiprintf_r+0x130>
 800d74e:	7863      	ldrb	r3, [r4, #1]
 800d750:	2b2a      	cmp	r3, #42	; 0x2a
 800d752:	d134      	bne.n	800d7be <_svfiprintf_r+0x186>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	3402      	adds	r4, #2
 800d758:	1d1a      	adds	r2, r3, #4
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	9203      	str	r2, [sp, #12]
 800d760:	bfb8      	it	lt
 800d762:	f04f 33ff 	movlt.w	r3, #4294967295
 800d766:	9305      	str	r3, [sp, #20]
 800d768:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d830 <_svfiprintf_r+0x1f8>
 800d76c:	2203      	movs	r2, #3
 800d76e:	7821      	ldrb	r1, [r4, #0]
 800d770:	4650      	mov	r0, sl
 800d772:	f000 fa1b 	bl	800dbac <memchr>
 800d776:	b138      	cbz	r0, 800d788 <_svfiprintf_r+0x150>
 800d778:	eba0 000a 	sub.w	r0, r0, sl
 800d77c:	2240      	movs	r2, #64	; 0x40
 800d77e:	9b04      	ldr	r3, [sp, #16]
 800d780:	3401      	adds	r4, #1
 800d782:	4082      	lsls	r2, r0
 800d784:	4313      	orrs	r3, r2
 800d786:	9304      	str	r3, [sp, #16]
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	2206      	movs	r2, #6
 800d78e:	4825      	ldr	r0, [pc, #148]	; (800d824 <_svfiprintf_r+0x1ec>)
 800d790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d794:	f000 fa0a 	bl	800dbac <memchr>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d038      	beq.n	800d80e <_svfiprintf_r+0x1d6>
 800d79c:	4b22      	ldr	r3, [pc, #136]	; (800d828 <_svfiprintf_r+0x1f0>)
 800d79e:	bb1b      	cbnz	r3, 800d7e8 <_svfiprintf_r+0x1b0>
 800d7a0:	9b03      	ldr	r3, [sp, #12]
 800d7a2:	3307      	adds	r3, #7
 800d7a4:	f023 0307 	bic.w	r3, r3, #7
 800d7a8:	3308      	adds	r3, #8
 800d7aa:	9303      	str	r3, [sp, #12]
 800d7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ae:	4433      	add	r3, r6
 800d7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b2:	e768      	b.n	800d686 <_svfiprintf_r+0x4e>
 800d7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	e7a6      	b.n	800d70c <_svfiprintf_r+0xd4>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	9305      	str	r3, [sp, #20]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7d0:	3a30      	subs	r2, #48	; 0x30
 800d7d2:	2a09      	cmp	r2, #9
 800d7d4:	d903      	bls.n	800d7de <_svfiprintf_r+0x1a6>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0c6      	beq.n	800d768 <_svfiprintf_r+0x130>
 800d7da:	9105      	str	r1, [sp, #20]
 800d7dc:	e7c4      	b.n	800d768 <_svfiprintf_r+0x130>
 800d7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e7f0      	b.n	800d7ca <_svfiprintf_r+0x192>
 800d7e8:	ab03      	add	r3, sp, #12
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	a904      	add	r1, sp, #16
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	4b0e      	ldr	r3, [pc, #56]	; (800d82c <_svfiprintf_r+0x1f4>)
 800d7f4:	f3af 8000 	nop.w
 800d7f8:	1c42      	adds	r2, r0, #1
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	d1d6      	bne.n	800d7ac <_svfiprintf_r+0x174>
 800d7fe:	89ab      	ldrh	r3, [r5, #12]
 800d800:	065b      	lsls	r3, r3, #25
 800d802:	f53f af2d 	bmi.w	800d660 <_svfiprintf_r+0x28>
 800d806:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d808:	b01d      	add	sp, #116	; 0x74
 800d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80e:	ab03      	add	r3, sp, #12
 800d810:	462a      	mov	r2, r5
 800d812:	a904      	add	r1, sp, #16
 800d814:	4638      	mov	r0, r7
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	4b04      	ldr	r3, [pc, #16]	; (800d82c <_svfiprintf_r+0x1f4>)
 800d81a:	f000 f87d 	bl	800d918 <_printf_i>
 800d81e:	e7eb      	b.n	800d7f8 <_svfiprintf_r+0x1c0>
 800d820:	0800dfe8 	.word	0x0800dfe8
 800d824:	0800dff2 	.word	0x0800dff2
 800d828:	00000000 	.word	0x00000000
 800d82c:	0800d585 	.word	0x0800d585
 800d830:	0800dfee 	.word	0x0800dfee

0800d834 <_printf_common>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	4616      	mov	r6, r2
 800d83a:	4699      	mov	r9, r3
 800d83c:	688a      	ldr	r2, [r1, #8]
 800d83e:	4607      	mov	r7, r0
 800d840:	690b      	ldr	r3, [r1, #16]
 800d842:	460c      	mov	r4, r1
 800d844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d848:	4293      	cmp	r3, r2
 800d84a:	bfb8      	it	lt
 800d84c:	4613      	movlt	r3, r2
 800d84e:	6033      	str	r3, [r6, #0]
 800d850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d854:	b10a      	cbz	r2, 800d85a <_printf_common+0x26>
 800d856:	3301      	adds	r3, #1
 800d858:	6033      	str	r3, [r6, #0]
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	0699      	lsls	r1, r3, #26
 800d85e:	bf42      	ittt	mi
 800d860:	6833      	ldrmi	r3, [r6, #0]
 800d862:	3302      	addmi	r3, #2
 800d864:	6033      	strmi	r3, [r6, #0]
 800d866:	6825      	ldr	r5, [r4, #0]
 800d868:	f015 0506 	ands.w	r5, r5, #6
 800d86c:	d106      	bne.n	800d87c <_printf_common+0x48>
 800d86e:	f104 0a19 	add.w	sl, r4, #25
 800d872:	68e3      	ldr	r3, [r4, #12]
 800d874:	6832      	ldr	r2, [r6, #0]
 800d876:	1a9b      	subs	r3, r3, r2
 800d878:	42ab      	cmp	r3, r5
 800d87a:	dc2b      	bgt.n	800d8d4 <_printf_common+0xa0>
 800d87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d880:	1e13      	subs	r3, r2, #0
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	bf18      	it	ne
 800d886:	2301      	movne	r3, #1
 800d888:	0692      	lsls	r2, r2, #26
 800d88a:	d430      	bmi.n	800d8ee <_printf_common+0xba>
 800d88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d890:	4649      	mov	r1, r9
 800d892:	4638      	mov	r0, r7
 800d894:	47c0      	blx	r8
 800d896:	3001      	adds	r0, #1
 800d898:	d023      	beq.n	800d8e2 <_printf_common+0xae>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	341a      	adds	r4, #26
 800d89e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d8a2:	f003 0306 	and.w	r3, r3, #6
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	bf0a      	itet	eq
 800d8aa:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d8ae:	2500      	movne	r5, #0
 800d8b0:	6833      	ldreq	r3, [r6, #0]
 800d8b2:	f04f 0600 	mov.w	r6, #0
 800d8b6:	bf08      	it	eq
 800d8b8:	1aed      	subeq	r5, r5, r3
 800d8ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d8be:	bf08      	it	eq
 800d8c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	bfc4      	itt	gt
 800d8c8:	1a9b      	subgt	r3, r3, r2
 800d8ca:	18ed      	addgt	r5, r5, r3
 800d8cc:	42b5      	cmp	r5, r6
 800d8ce:	d11a      	bne.n	800d906 <_printf_common+0xd2>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e008      	b.n	800d8e6 <_printf_common+0xb2>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4652      	mov	r2, sl
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4638      	mov	r0, r7
 800d8dc:	47c0      	blx	r8
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d103      	bne.n	800d8ea <_printf_common+0xb6>
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ea:	3501      	adds	r5, #1
 800d8ec:	e7c1      	b.n	800d872 <_printf_common+0x3e>
 800d8ee:	18e1      	adds	r1, r4, r3
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	2030      	movs	r0, #48	; 0x30
 800d8f4:	3302      	adds	r3, #2
 800d8f6:	4422      	add	r2, r4
 800d8f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d904:	e7c2      	b.n	800d88c <_printf_common+0x58>
 800d906:	2301      	movs	r3, #1
 800d908:	4622      	mov	r2, r4
 800d90a:	4649      	mov	r1, r9
 800d90c:	4638      	mov	r0, r7
 800d90e:	47c0      	blx	r8
 800d910:	3001      	adds	r0, #1
 800d912:	d0e6      	beq.n	800d8e2 <_printf_common+0xae>
 800d914:	3601      	adds	r6, #1
 800d916:	e7d9      	b.n	800d8cc <_printf_common+0x98>

0800d918 <_printf_i>:
 800d918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d91c:	7e0f      	ldrb	r7, [r1, #24]
 800d91e:	4691      	mov	r9, r2
 800d920:	4680      	mov	r8, r0
 800d922:	460c      	mov	r4, r1
 800d924:	2f78      	cmp	r7, #120	; 0x78
 800d926:	469a      	mov	sl, r3
 800d928:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d92a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d92e:	d807      	bhi.n	800d940 <_printf_i+0x28>
 800d930:	2f62      	cmp	r7, #98	; 0x62
 800d932:	d80a      	bhi.n	800d94a <_printf_i+0x32>
 800d934:	2f00      	cmp	r7, #0
 800d936:	f000 80d3 	beq.w	800dae0 <_printf_i+0x1c8>
 800d93a:	2f58      	cmp	r7, #88	; 0x58
 800d93c:	f000 80bf 	beq.w	800dabe <_printf_i+0x1a6>
 800d940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d948:	e03a      	b.n	800d9c0 <_printf_i+0xa8>
 800d94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d94e:	2b15      	cmp	r3, #21
 800d950:	d8f6      	bhi.n	800d940 <_printf_i+0x28>
 800d952:	a101      	add	r1, pc, #4	; (adr r1, 800d958 <_printf_i+0x40>)
 800d954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d958:	0800d9b1 	.word	0x0800d9b1
 800d95c:	0800d9c5 	.word	0x0800d9c5
 800d960:	0800d941 	.word	0x0800d941
 800d964:	0800d941 	.word	0x0800d941
 800d968:	0800d941 	.word	0x0800d941
 800d96c:	0800d941 	.word	0x0800d941
 800d970:	0800d9c5 	.word	0x0800d9c5
 800d974:	0800d941 	.word	0x0800d941
 800d978:	0800d941 	.word	0x0800d941
 800d97c:	0800d941 	.word	0x0800d941
 800d980:	0800d941 	.word	0x0800d941
 800d984:	0800dac7 	.word	0x0800dac7
 800d988:	0800d9f1 	.word	0x0800d9f1
 800d98c:	0800da83 	.word	0x0800da83
 800d990:	0800d941 	.word	0x0800d941
 800d994:	0800d941 	.word	0x0800d941
 800d998:	0800dae9 	.word	0x0800dae9
 800d99c:	0800d941 	.word	0x0800d941
 800d9a0:	0800d9f1 	.word	0x0800d9f1
 800d9a4:	0800d941 	.word	0x0800d941
 800d9a8:	0800d941 	.word	0x0800d941
 800d9ac:	0800da8b 	.word	0x0800da8b
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	1d1a      	adds	r2, r3, #4
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e09e      	b.n	800db02 <_printf_i+0x1ea>
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	0607      	lsls	r7, r0, #24
 800d9ca:	f103 0104 	add.w	r1, r3, #4
 800d9ce:	6029      	str	r1, [r5, #0]
 800d9d0:	d501      	bpl.n	800d9d6 <_printf_i+0xbe>
 800d9d2:	681e      	ldr	r6, [r3, #0]
 800d9d4:	e003      	b.n	800d9de <_printf_i+0xc6>
 800d9d6:	0646      	lsls	r6, r0, #25
 800d9d8:	d5fb      	bpl.n	800d9d2 <_printf_i+0xba>
 800d9da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	da03      	bge.n	800d9ea <_printf_i+0xd2>
 800d9e2:	232d      	movs	r3, #45	; 0x2d
 800d9e4:	4276      	negs	r6, r6
 800d9e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ea:	4859      	ldr	r0, [pc, #356]	; (800db50 <_printf_i+0x238>)
 800d9ec:	230a      	movs	r3, #10
 800d9ee:	e012      	b.n	800da16 <_printf_i+0xfe>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	1d19      	adds	r1, r3, #4
 800d9f6:	6029      	str	r1, [r5, #0]
 800d9f8:	0605      	lsls	r5, r0, #24
 800d9fa:	d501      	bpl.n	800da00 <_printf_i+0xe8>
 800d9fc:	681e      	ldr	r6, [r3, #0]
 800d9fe:	e002      	b.n	800da06 <_printf_i+0xee>
 800da00:	0641      	lsls	r1, r0, #25
 800da02:	d5fb      	bpl.n	800d9fc <_printf_i+0xe4>
 800da04:	881e      	ldrh	r6, [r3, #0]
 800da06:	2f6f      	cmp	r7, #111	; 0x6f
 800da08:	4851      	ldr	r0, [pc, #324]	; (800db50 <_printf_i+0x238>)
 800da0a:	bf0c      	ite	eq
 800da0c:	2308      	moveq	r3, #8
 800da0e:	230a      	movne	r3, #10
 800da10:	2100      	movs	r1, #0
 800da12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da16:	6865      	ldr	r5, [r4, #4]
 800da18:	2d00      	cmp	r5, #0
 800da1a:	60a5      	str	r5, [r4, #8]
 800da1c:	bfa2      	ittt	ge
 800da1e:	6821      	ldrge	r1, [r4, #0]
 800da20:	f021 0104 	bicge.w	r1, r1, #4
 800da24:	6021      	strge	r1, [r4, #0]
 800da26:	b90e      	cbnz	r6, 800da2c <_printf_i+0x114>
 800da28:	2d00      	cmp	r5, #0
 800da2a:	d04a      	beq.n	800dac2 <_printf_i+0x1aa>
 800da2c:	4615      	mov	r5, r2
 800da2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800da32:	fb03 6711 	mls	r7, r3, r1, r6
 800da36:	5dc7      	ldrb	r7, [r0, r7]
 800da38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da3c:	4637      	mov	r7, r6
 800da3e:	460e      	mov	r6, r1
 800da40:	42bb      	cmp	r3, r7
 800da42:	d9f4      	bls.n	800da2e <_printf_i+0x116>
 800da44:	2b08      	cmp	r3, #8
 800da46:	d10b      	bne.n	800da60 <_printf_i+0x148>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	07de      	lsls	r6, r3, #31
 800da4c:	d508      	bpl.n	800da60 <_printf_i+0x148>
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	6861      	ldr	r1, [r4, #4]
 800da52:	4299      	cmp	r1, r3
 800da54:	bfde      	ittt	le
 800da56:	2330      	movle	r3, #48	; 0x30
 800da58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da60:	1b52      	subs	r2, r2, r5
 800da62:	6122      	str	r2, [r4, #16]
 800da64:	464b      	mov	r3, r9
 800da66:	aa03      	add	r2, sp, #12
 800da68:	4621      	mov	r1, r4
 800da6a:	4640      	mov	r0, r8
 800da6c:	f8cd a000 	str.w	sl, [sp]
 800da70:	f7ff fee0 	bl	800d834 <_printf_common>
 800da74:	3001      	adds	r0, #1
 800da76:	d149      	bne.n	800db0c <_printf_i+0x1f4>
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	b004      	add	sp, #16
 800da7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	f043 0320 	orr.w	r3, r3, #32
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	2778      	movs	r7, #120	; 0x78
 800da8c:	4831      	ldr	r0, [pc, #196]	; (800db54 <_printf_i+0x23c>)
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da94:	061f      	lsls	r7, r3, #24
 800da96:	6829      	ldr	r1, [r5, #0]
 800da98:	f851 6b04 	ldr.w	r6, [r1], #4
 800da9c:	d402      	bmi.n	800daa4 <_printf_i+0x18c>
 800da9e:	065f      	lsls	r7, r3, #25
 800daa0:	bf48      	it	mi
 800daa2:	b2b6      	uxthmi	r6, r6
 800daa4:	07df      	lsls	r7, r3, #31
 800daa6:	6029      	str	r1, [r5, #0]
 800daa8:	bf44      	itt	mi
 800daaa:	f043 0320 	orrmi.w	r3, r3, #32
 800daae:	6023      	strmi	r3, [r4, #0]
 800dab0:	b91e      	cbnz	r6, 800daba <_printf_i+0x1a2>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	f023 0320 	bic.w	r3, r3, #32
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	2310      	movs	r3, #16
 800dabc:	e7a8      	b.n	800da10 <_printf_i+0xf8>
 800dabe:	4824      	ldr	r0, [pc, #144]	; (800db50 <_printf_i+0x238>)
 800dac0:	e7e5      	b.n	800da8e <_printf_i+0x176>
 800dac2:	4615      	mov	r5, r2
 800dac4:	e7be      	b.n	800da44 <_printf_i+0x12c>
 800dac6:	682b      	ldr	r3, [r5, #0]
 800dac8:	6826      	ldr	r6, [r4, #0]
 800daca:	1d18      	adds	r0, r3, #4
 800dacc:	6961      	ldr	r1, [r4, #20]
 800dace:	6028      	str	r0, [r5, #0]
 800dad0:	0635      	lsls	r5, r6, #24
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	d501      	bpl.n	800dada <_printf_i+0x1c2>
 800dad6:	6019      	str	r1, [r3, #0]
 800dad8:	e002      	b.n	800dae0 <_printf_i+0x1c8>
 800dada:	0670      	lsls	r0, r6, #25
 800dadc:	d5fb      	bpl.n	800dad6 <_printf_i+0x1be>
 800dade:	8019      	strh	r1, [r3, #0]
 800dae0:	2300      	movs	r3, #0
 800dae2:	4615      	mov	r5, r2
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	e7bd      	b.n	800da64 <_printf_i+0x14c>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	2100      	movs	r1, #0
 800daec:	1d1a      	adds	r2, r3, #4
 800daee:	602a      	str	r2, [r5, #0]
 800daf0:	681d      	ldr	r5, [r3, #0]
 800daf2:	6862      	ldr	r2, [r4, #4]
 800daf4:	4628      	mov	r0, r5
 800daf6:	f000 f859 	bl	800dbac <memchr>
 800dafa:	b108      	cbz	r0, 800db00 <_printf_i+0x1e8>
 800dafc:	1b40      	subs	r0, r0, r5
 800dafe:	6060      	str	r0, [r4, #4]
 800db00:	6863      	ldr	r3, [r4, #4]
 800db02:	6123      	str	r3, [r4, #16]
 800db04:	2300      	movs	r3, #0
 800db06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0a:	e7ab      	b.n	800da64 <_printf_i+0x14c>
 800db0c:	6923      	ldr	r3, [r4, #16]
 800db0e:	462a      	mov	r2, r5
 800db10:	4649      	mov	r1, r9
 800db12:	4640      	mov	r0, r8
 800db14:	47d0      	blx	sl
 800db16:	3001      	adds	r0, #1
 800db18:	d0ae      	beq.n	800da78 <_printf_i+0x160>
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	079b      	lsls	r3, r3, #30
 800db1e:	d413      	bmi.n	800db48 <_printf_i+0x230>
 800db20:	68e0      	ldr	r0, [r4, #12]
 800db22:	9b03      	ldr	r3, [sp, #12]
 800db24:	4298      	cmp	r0, r3
 800db26:	bfb8      	it	lt
 800db28:	4618      	movlt	r0, r3
 800db2a:	e7a7      	b.n	800da7c <_printf_i+0x164>
 800db2c:	2301      	movs	r3, #1
 800db2e:	4632      	mov	r2, r6
 800db30:	4649      	mov	r1, r9
 800db32:	4640      	mov	r0, r8
 800db34:	47d0      	blx	sl
 800db36:	3001      	adds	r0, #1
 800db38:	d09e      	beq.n	800da78 <_printf_i+0x160>
 800db3a:	3501      	adds	r5, #1
 800db3c:	68e3      	ldr	r3, [r4, #12]
 800db3e:	9903      	ldr	r1, [sp, #12]
 800db40:	1a5b      	subs	r3, r3, r1
 800db42:	42ab      	cmp	r3, r5
 800db44:	dcf2      	bgt.n	800db2c <_printf_i+0x214>
 800db46:	e7eb      	b.n	800db20 <_printf_i+0x208>
 800db48:	2500      	movs	r5, #0
 800db4a:	f104 0619 	add.w	r6, r4, #25
 800db4e:	e7f5      	b.n	800db3c <_printf_i+0x224>
 800db50:	0800dff9 	.word	0x0800dff9
 800db54:	0800e00a 	.word	0x0800e00a

0800db58 <memmove>:
 800db58:	4288      	cmp	r0, r1
 800db5a:	b510      	push	{r4, lr}
 800db5c:	eb01 0402 	add.w	r4, r1, r2
 800db60:	d902      	bls.n	800db68 <memmove+0x10>
 800db62:	4284      	cmp	r4, r0
 800db64:	4623      	mov	r3, r4
 800db66:	d807      	bhi.n	800db78 <memmove+0x20>
 800db68:	1e43      	subs	r3, r0, #1
 800db6a:	42a1      	cmp	r1, r4
 800db6c:	d008      	beq.n	800db80 <memmove+0x28>
 800db6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db76:	e7f8      	b.n	800db6a <memmove+0x12>
 800db78:	4402      	add	r2, r0
 800db7a:	4601      	mov	r1, r0
 800db7c:	428a      	cmp	r2, r1
 800db7e:	d100      	bne.n	800db82 <memmove+0x2a>
 800db80:	bd10      	pop	{r4, pc}
 800db82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db8a:	e7f7      	b.n	800db7c <memmove+0x24>

0800db8c <_sbrk_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	2300      	movs	r3, #0
 800db90:	4d05      	ldr	r5, [pc, #20]	; (800dba8 <_sbrk_r+0x1c>)
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f6 fa58 	bl	800404c <_sbrk>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_sbrk_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_sbrk_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	200008c4 	.word	0x200008c4

0800dbac <memchr>:
 800dbac:	b2c9      	uxtb	r1, r1
 800dbae:	4402      	add	r2, r0
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	4290      	cmp	r0, r2
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	d101      	bne.n	800dbbc <memchr+0x10>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e003      	b.n	800dbc4 <memchr+0x18>
 800dbbc:	781c      	ldrb	r4, [r3, #0]
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	428c      	cmp	r4, r1
 800dbc2:	d1f6      	bne.n	800dbb2 <memchr+0x6>
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	bd10      	pop	{r4, pc}

0800dbc8 <_realloc_r>:
 800dbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbcc:	4680      	mov	r8, r0
 800dbce:	4614      	mov	r4, r2
 800dbd0:	460e      	mov	r6, r1
 800dbd2:	b921      	cbnz	r1, 800dbde <_realloc_r+0x16>
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbda:	f7ff bc47 	b.w	800d46c <_malloc_r>
 800dbde:	b92a      	cbnz	r2, 800dbec <_realloc_r+0x24>
 800dbe0:	4625      	mov	r5, r4
 800dbe2:	f7ff fbd7 	bl	800d394 <_free_r>
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbec:	f000 f81b 	bl	800dc26 <_malloc_usable_size_r>
 800dbf0:	4284      	cmp	r4, r0
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	d802      	bhi.n	800dbfc <_realloc_r+0x34>
 800dbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbfa:	d812      	bhi.n	800dc22 <_realloc_r+0x5a>
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	4640      	mov	r0, r8
 800dc00:	f7ff fc34 	bl	800d46c <_malloc_r>
 800dc04:	4605      	mov	r5, r0
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d0ed      	beq.n	800dbe6 <_realloc_r+0x1e>
 800dc0a:	42bc      	cmp	r4, r7
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	4631      	mov	r1, r6
 800dc10:	bf28      	it	cs
 800dc12:	463a      	movcs	r2, r7
 800dc14:	f7ff fbb0 	bl	800d378 <memcpy>
 800dc18:	4631      	mov	r1, r6
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	f7ff fbba 	bl	800d394 <_free_r>
 800dc20:	e7e1      	b.n	800dbe6 <_realloc_r+0x1e>
 800dc22:	4635      	mov	r5, r6
 800dc24:	e7df      	b.n	800dbe6 <_realloc_r+0x1e>

0800dc26 <_malloc_usable_size_r>:
 800dc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc2a:	1f18      	subs	r0, r3, #4
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	bfbc      	itt	lt
 800dc30:	580b      	ldrlt	r3, [r1, r0]
 800dc32:	18c0      	addlt	r0, r0, r3
 800dc34:	4770      	bx	lr
	...

0800dc38 <_init>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	bf00      	nop
 800dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3e:	bc08      	pop	{r3}
 800dc40:	469e      	mov	lr, r3
 800dc42:	4770      	bx	lr

0800dc44 <_fini>:
 800dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc46:	bf00      	nop
 800dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4a:	bc08      	pop	{r3}
 800dc4c:	469e      	mov	lr, r3
 800dc4e:	4770      	bx	lr
