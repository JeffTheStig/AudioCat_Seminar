
STM32-SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd30  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800ff80  0800ff80  0001ff80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010548  08010548  00020548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010550  08010550  00020550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010554  08010554  00020554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08010558  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000860  20000074  080105cc  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008d4  080105cc  000308d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e8ef  00000000  00000000  000300ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003d7a  00000000  00000000  0004e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001830  00000000  00000000  00052758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001293  00000000  00000000  00053f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d837  00000000  00000000  0005521b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021172  00000000  00000000  00092a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017eb35  00000000  00000000  000b3bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000704c  00000000  00000000  002326fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00239748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000074 	.word	0x20000074
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ff68 	.word	0x0800ff68

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000078 	.word	0x20000078
 800028c:	0800ff68 	.word	0x0800ff68

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 b982 	b.w	8000eb8 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d146      	bne.n	8000c6a <__udivmoddi4+0x9e>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d95e      	bls.n	8000ca0 <__udivmoddi4+0xd4>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	409c      	lsls	r4, r3
 8000bf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf8:	4317      	orrs	r7, r2
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x5e>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x5c>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f200 8134 	bhi.w	8000e90 <__udivmoddi4+0x2c4>
 8000c28:	4639      	mov	r1, r7
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	fb00 f505 	mul.w	r5, r0, r5
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x88>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x86>
 8000c4c:	42a5      	cmp	r5, r4
 8000c4e:	f200 8119 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000c52:	4610      	mov	r0, r2
 8000c54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11e      	cbz	r6, 8000c66 <__udivmoddi4+0x9a>
 8000c5e:	40dc      	lsrs	r4, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	e9c6 4300 	strd	r4, r3, [r6]
 8000c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0xb4>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f000 80fc 	beq.w	8000e6c <__udivmoddi4+0x2a0>
 8000c74:	2100      	movs	r1, #0
 8000c76:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	fab3 f183 	clz	r1, r3
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d14c      	bne.n	8000d22 <__udivmoddi4+0x156>
 8000c88:	42ab      	cmp	r3, r5
 8000c8a:	f0c0 80f2 	bcc.w	8000e72 <__udivmoddi4+0x2a6>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f240 80ef 	bls.w	8000e72 <__udivmoddi4+0x2a6>
 8000c94:	4608      	mov	r0, r1
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e5      	beq.n	8000c66 <__udivmoddi4+0x9a>
 8000c9a:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9e:	e7e2      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xd8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f382 	clz	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 809f 	bne.w	8000dec <__udivmoddi4+0x220>
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cbe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc8:	fb07 f005 	mul.w	r0, r7, r5
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d90f      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd8:	bf2c      	ite	cs
 8000cda:	f04f 0901 	movcs.w	r9, #1
 8000cde:	f04f 0900 	movcc.w	r9, #0
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d903      	bls.n	8000cee <__udivmoddi4+0x122>
 8000ce6:	f1b9 0f00 	cmp.w	r9, #0
 8000cea:	f000 80ce 	beq.w	8000e8a <__udivmoddi4+0x2be>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf8:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	42a7      	cmp	r7, r4
 8000d14:	f200 80b3 	bhi.w	8000e7e <__udivmoddi4+0x2b2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	1be4      	subs	r4, r4, r7
 8000d1c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d20:	e79c      	b.n	8000c5c <__udivmoddi4+0x90>
 8000d22:	f1c1 0420 	rsb	r4, r1, #32
 8000d26:	408b      	lsls	r3, r1
 8000d28:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d2c:	fa22 f704 	lsr.w	r7, r2, r4
 8000d30:	40e5      	lsrs	r5, r4
 8000d32:	408a      	lsls	r2, r1
 8000d34:	431f      	orrs	r7, r3
 8000d36:	fa20 f304 	lsr.w	r3, r0, r4
 8000d3a:	4088      	lsls	r0, r1
 8000d3c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	fa1f fc87 	uxth.w	ip, r7
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb5 fef8 	udiv	lr, r5, r8
 8000d50:	fb08 551e 	mls	r5, r8, lr, r5
 8000d54:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a9      	cmp	r9, r5
 8000d5e:	d90e      	bls.n	8000d7e <__udivmoddi4+0x1b2>
 8000d60:	197d      	adds	r5, r7, r5
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000d66:	bf2c      	ite	cs
 8000d68:	f04f 0b01 	movcs.w	fp, #1
 8000d6c:	f04f 0b00 	movcc.w	fp, #0
 8000d70:	45a9      	cmp	r9, r5
 8000d72:	d903      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d74:	f1bb 0f00 	cmp.w	fp, #0
 8000d78:	f000 808d 	beq.w	8000e96 <__udivmoddi4+0x2ca>
 8000d7c:	46d6      	mov	lr, sl
 8000d7e:	eba5 0509 	sub.w	r5, r5, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb5 f3f8 	udiv	r3, r5, r8
 8000d8a:	fb08 5513 	mls	r5, r8, r3, r5
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d96:	45ac      	cmp	ip, r5
 8000d98:	d906      	bls.n	8000da8 <__udivmoddi4+0x1dc>
 8000d9a:	197d      	adds	r5, r7, r5
 8000d9c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000da0:	d201      	bcs.n	8000da6 <__udivmoddi4+0x1da>
 8000da2:	45ac      	cmp	ip, r5
 8000da4:	d87e      	bhi.n	8000ea4 <__udivmoddi4+0x2d8>
 8000da6:	4643      	mov	r3, r8
 8000da8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dac:	eba5 050c 	sub.w	r5, r5, ip
 8000db0:	fba3 9802 	umull	r9, r8, r3, r2
 8000db4:	4545      	cmp	r5, r8
 8000db6:	46ce      	mov	lr, r9
 8000db8:	46c4      	mov	ip, r8
 8000dba:	d302      	bcc.n	8000dc2 <__udivmoddi4+0x1f6>
 8000dbc:	d106      	bne.n	8000dcc <__udivmoddi4+0x200>
 8000dbe:	4548      	cmp	r0, r9
 8000dc0:	d204      	bcs.n	8000dcc <__udivmoddi4+0x200>
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d06f      	beq.n	8000eb0 <__udivmoddi4+0x2e4>
 8000dd0:	ebb0 020e 	subs.w	r2, r0, lr
 8000dd4:	eb65 050c 	sbc.w	r5, r5, ip
 8000dd8:	40ca      	lsrs	r2, r1
 8000dda:	fa05 f404 	lsl.w	r4, r5, r4
 8000dde:	40cd      	lsrs	r5, r1
 8000de0:	4618      	mov	r0, r3
 8000de2:	4314      	orrs	r4, r2
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 4500 	strd	r4, r5, [r6]
 8000dea:	e73c      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	f1c3 0220 	rsb	r2, r3, #32
 8000df4:	4099      	lsls	r1, r3
 8000df6:	409c      	lsls	r4, r3
 8000df8:	40d5      	lsrs	r5, r2
 8000dfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000e02:	fa1f f78c 	uxth.w	r7, ip
 8000e06:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f507 	mul.w	r5, r0, r7
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	d90e      	bls.n	8000e3c <__udivmoddi4+0x270>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	bf2c      	ite	cs
 8000e28:	f04f 0901 	movcs.w	r9, #1
 8000e2c:	f04f 0900 	movcc.w	r9, #0
 8000e30:	428d      	cmp	r5, r1
 8000e32:	d902      	bls.n	8000e3a <__udivmoddi4+0x26e>
 8000e34:	f1b9 0f00 	cmp.w	r9, #0
 8000e38:	d031      	beq.n	8000e9e <__udivmoddi4+0x2d2>
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	1b49      	subs	r1, r1, r5
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e44:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	fb05 f107 	mul.w	r1, r5, r7
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x298>
 8000e54:	eb1c 0202 	adds.w	r2, ip, r2
 8000e58:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x296>
 8000e5e:	4291      	cmp	r1, r2
 8000e60:	d823      	bhi.n	8000eaa <__udivmoddi4+0x2de>
 8000e62:	4645      	mov	r5, r8
 8000e64:	1a52      	subs	r2, r2, r1
 8000e66:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6a:	e726      	b.n	8000cba <__udivmoddi4+0xee>
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e6f9      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000e72:	1a84      	subs	r4, r0, r2
 8000e74:	eb65 0203 	sbc.w	r2, r5, r3
 8000e78:	2001      	movs	r0, #1
 8000e7a:	4617      	mov	r7, r2
 8000e7c:	e70b      	b.n	8000c96 <__udivmoddi4+0xca>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14e>
 8000e84:	4464      	add	r4, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	e6e4      	b.n	8000c54 <__udivmoddi4+0x88>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	e72f      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e90:	3902      	subs	r1, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e6c9      	b.n	8000c2a <__udivmoddi4+0x5e>
 8000e96:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	e76f      	b.n	8000d7e <__udivmoddi4+0x1b2>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	e7cb      	b.n	8000e3c <__udivmoddi4+0x270>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	443d      	add	r5, r7
 8000ea8:	e77e      	b.n	8000da8 <__udivmoddi4+0x1dc>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	e7d9      	b.n	8000e64 <__udivmoddi4+0x298>
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e6d7      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4a08      	ldr	r2, [pc, #32]	; (8000eec <disk_status+0x30>)
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	4905      	ldr	r1, [pc, #20]	; (8000eec <disk_status+0x30>)
 8000ed6:	440a      	add	r2, r1
 8000ed8:	7a12      	ldrb	r2, [r2, #8]
 8000eda:	4610      	mov	r0, r2
 8000edc:	4798      	blx	r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000b8 	.word	0x200000b8

08000ef0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <disk_initialize+0x48>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <disk_initialize+0x48>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <disk_initialize+0x48>)
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	4906      	ldr	r1, [pc, #24]	; (8000f38 <disk_initialize+0x48>)
 8000f20:	440a      	add	r2, r1
 8000f22:	7a12      	ldrb	r2, [r2, #8]
 8000f24:	4610      	mov	r0, r2
 8000f26:	4798      	blx	r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000b8 	.word	0x200000b8

08000f3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <disk_read+0x3c>)
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	689c      	ldr	r4, [r3, #8]
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <disk_read+0x3c>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	7a18      	ldrb	r0, [r3, #8]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	47a0      	blx	r4
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000b8 	.word	0x200000b8

08000f7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <disk_write+0x3c>)
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	68dc      	ldr	r4, [r3, #12]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <disk_write+0x3c>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7a18      	ldrb	r0, [r3, #8]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	47a0      	blx	r4
 8000fa8:	4603      	mov	r3, r0
 8000faa:	75fb      	strb	r3, [r7, #23]
  return res;
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000b8 	.word	0x200000b8

08000fbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	603a      	str	r2, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <disk_ioctl+0x38>)
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <disk_ioctl+0x38>)
 8000fdc:	440a      	add	r2, r1
 8000fde:	7a10      	ldrb	r0, [r2, #8]
 8000fe0:	79b9      	ldrb	r1, [r7, #6]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4798      	blx	r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  return res;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200000b8 	.word	0x200000b8

08000ff8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <MX_FATFS_Init+0x18>)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_FATFS_Init+0x1c>)
 8001000:	f002 fc80 	bl	8003904 <FATFS_LinkDriver>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <MX_FATFS_Init+0x20>)
 800100a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000094 	.word	0x20000094
 8001014:	20000004 	.word	0x20000004
 8001018:	20000090 	.word	0x20000090

0800101c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001020:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8001040:	e007      	b.n	8001052 <mem_cpy+0x26>
		*d++ = *s++;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	1c53      	adds	r3, r2, #1
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	6179      	str	r1, [r7, #20]
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1e5a      	subs	r2, r3, #1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f2      	bne.n	8001042 <mem_cpy+0x16>
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800107a:	e005      	b.n	8001088 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	617a      	str	r2, [r7, #20]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f4      	bne.n	800107c <mem_set+0x12>
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80010b8:	bf00      	nop
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00d      	beq.n	80010e0 <mem_cmp+0x40>
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	61fa      	str	r2, [r7, #28]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	61ba      	str	r2, [r7, #24]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0ec      	beq.n	80010ba <mem_cmp+0x1a>
	return r;
 80010e0:	697b      	ldr	r3, [r7, #20]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80010f8:	e002      	b.n	8001100 <chk_chr+0x12>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <chk_chr+0x26>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4293      	cmp	r3, r2
 8001112:	d1f2      	bne.n	80010fa <chk_chr+0xc>
	return *str;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e038      	b.n	80011aa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8001138:	4930      	ldr	r1, [pc, #192]	; (80011fc <chk_lock+0xd8>)
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d029      	beq.n	80011a0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800114c:	492b      	ldr	r1, [pc, #172]	; (80011fc <chk_lock+0xd8>)
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001162:	429a      	cmp	r2, r3
 8001164:	d11e      	bne.n	80011a4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8001166:	4925      	ldr	r1, [pc, #148]	; (80011fc <chk_lock+0xd8>)
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3304      	adds	r3, #4
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800117e:	429a      	cmp	r2, r3
 8001180:	d110      	bne.n	80011a4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8001182:	491e      	ldr	r1, [pc, #120]	; (80011fc <chk_lock+0xd8>)
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800119a:	429a      	cmp	r2, r3
 800119c:	d102      	bne.n	80011a4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800119e:	e007      	b.n	80011b0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d9c3      	bls.n	8001138 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d109      	bne.n	80011ca <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <chk_lock+0x9e>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d101      	bne.n	80011c6 <chk_lock+0xa2>
 80011c2:	2300      	movs	r3, #0
 80011c4:	e013      	b.n	80011ee <chk_lock+0xca>
 80011c6:	2312      	movs	r3, #18
 80011c8:	e011      	b.n	80011ee <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10b      	bne.n	80011e8 <chk_lock+0xc4>
 80011d0:	490a      	ldr	r1, [pc, #40]	; (80011fc <chk_lock+0xd8>)
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	330a      	adds	r3, #10
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e6:	d101      	bne.n	80011ec <chk_lock+0xc8>
 80011e8:	2310      	movs	r3, #16
 80011ea:	e000      	b.n	80011ee <chk_lock+0xca>
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200000a0 	.word	0x200000a0

08001200 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	e002      	b.n	8001212 <enq_lock+0x12>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d809      	bhi.n	800122c <enq_lock+0x2c>
 8001218:	490a      	ldr	r1, [pc, #40]	; (8001244 <enq_lock+0x44>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ef      	bne.n	800120c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200000a0 	.word	0x200000a0

08001248 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e02b      	b.n	80012b0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8001258:	4956      	ldr	r1, [pc, #344]	; (80013b4 <inc_lock+0x16c>)
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800126e:	429a      	cmp	r2, r3
 8001270:	d11b      	bne.n	80012aa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8001272:	4950      	ldr	r1, [pc, #320]	; (80013b4 <inc_lock+0x16c>)
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800128a:	429a      	cmp	r2, r3
 800128c:	d10d      	bne.n	80012aa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800128e:	4949      	ldr	r1, [pc, #292]	; (80013b4 <inc_lock+0x16c>)
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3308      	adds	r3, #8
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d006      	beq.n	80012b8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d9d0      	bls.n	8001258 <inc_lock+0x10>
 80012b6:	e000      	b.n	80012ba <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80012b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d145      	bne.n	800134c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e002      	b.n	80012cc <inc_lock+0x84>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d809      	bhi.n	80012e6 <inc_lock+0x9e>
 80012d2:	4938      	ldr	r1, [pc, #224]	; (80013b4 <inc_lock+0x16c>)
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ef      	bne.n	80012c6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d101      	bne.n	80012f0 <inc_lock+0xa8>
 80012ec:	2300      	movs	r3, #0
 80012ee:	e05a      	b.n	80013a6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80012f6:	482f      	ldr	r0, [pc, #188]	; (80013b4 <inc_lock+0x16c>)
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4403      	add	r3, r0
 8001304:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800130c:	4829      	ldr	r0, [pc, #164]	; (80013b4 <inc_lock+0x16c>)
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4403      	add	r3, r0
 800131a:	3304      	adds	r3, #4
 800131c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8001324:	4923      	ldr	r1, [pc, #140]	; (80013b4 <inc_lock+0x16c>)
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3308      	adds	r3, #8
 8001334:	4602      	mov	r2, r0
 8001336:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8001338:	491e      	ldr	r1, [pc, #120]	; (80013b4 <inc_lock+0x16c>)
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	330a      	adds	r3, #10
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <inc_lock+0x124>
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <inc_lock+0x16c>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	330a      	adds	r3, #10
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <inc_lock+0x124>
 8001368:	2300      	movs	r3, #0
 800136a:	e01c      	b.n	80013a6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10b      	bne.n	800138a <inc_lock+0x142>
 8001372:	4910      	ldr	r1, [pc, #64]	; (80013b4 <inc_lock+0x16c>)
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	330a      	adds	r3, #10
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b299      	uxth	r1, r3
 8001388:	e001      	b.n	800138e <inc_lock+0x146>
 800138a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <inc_lock+0x16c>)
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4403      	add	r3, r0
 800139c:	330a      	adds	r3, #10
 800139e:	460a      	mov	r2, r1
 80013a0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3301      	adds	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200000a0 	.word	0x200000a0

080013b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d82e      	bhi.n	800142a <dec_lock+0x72>
		n = Files[i].ctr;
 80013cc:	491b      	ldr	r1, [pc, #108]	; (800143c <dec_lock+0x84>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	330a      	adds	r3, #10
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e6:	d101      	bne.n	80013ec <dec_lock+0x34>
 80013e8:	2300      	movs	r3, #0
 80013ea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <dec_lock+0x40>
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80013f8:	4910      	ldr	r1, [pc, #64]	; (800143c <dec_lock+0x84>)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	330a      	adds	r3, #10
 8001408:	89fa      	ldrh	r2, [r7, #14]
 800140a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <dec_lock+0x6c>
 8001412:	490a      	ldr	r1, [pc, #40]	; (800143c <dec_lock+0x84>)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	737b      	strb	r3, [r7, #13]
 8001428:	e001      	b.n	800142e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800142a:	2302      	movs	r3, #2
 800142c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800142e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200000a0 	.word	0x200000a0

08001440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e016      	b.n	800147c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800144e:	4910      	ldr	r1, [pc, #64]	; (8001490 <clear_lock+0x50>)
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d108      	bne.n	8001476 <clear_lock+0x36>
 8001464:	490a      	ldr	r1, [pc, #40]	; (8001490 <clear_lock+0x50>)
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d9e5      	bls.n	800144e <clear_lock+0xe>
	}
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	200000a0 	.word	0x200000a0

08001494 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d038      	beq.n	800151c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80014b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	2301      	movs	r3, #1
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	f7ff fd5d 	bl	8000f7c <disk_write>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <sync_window+0x3a>
			res = FR_DISK_ERR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e026      	b.n	800151c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d218      	bcs.n	800151c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e010      	b.n	8001516 <sync_window+0x82>
					wsect += fs->fsize;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	2301      	movs	r3, #1
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	f7ff fd36 	bl	8000f7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	3b01      	subs	r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d8eb      	bhi.n	80014f4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d01b      	beq.n	8001578 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffa7 	bl	8001494 <sync_window>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d113      	bne.n	8001578 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	2301      	movs	r3, #1
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	f7ff fcee 	bl	8000f3c <disk_read>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff82 	bl	8001494 <sync_window>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 809b 	bne.w	80016d2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	f040 8088 	bne.w	80016b8 <sync_fs+0x136>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	f040 8082 	bne.w	80016b8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fd54 	bl	800106a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2255      	movs	r2, #85	; 0x55
 80015c6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	22aa      	movs	r2, #170	; 0xaa
 80015ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2252      	movs	r2, #82	; 0x52
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2252      	movs	r2, #82	; 0x52
 80015dc:	705a      	strb	r2, [r3, #1]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2261      	movs	r2, #97	; 0x61
 80015e2:	709a      	strb	r2, [r3, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2241      	movs	r2, #65	; 0x41
 80015e8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2272      	movs	r2, #114	; 0x72
 80015ee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2272      	movs	r2, #114	; 0x72
 80015f6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2241      	movs	r2, #65	; 0x41
 80015fe:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2261      	movs	r2, #97	; 0x61
 8001606:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001610:	b2da      	uxtb	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800161e:	b29b      	uxth	r3, r3
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001660:	b29b      	uxth	r3, r3
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b2da      	uxtb	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001684:	0e1b      	lsrs	r3, r3, #24
 8001686:	b2da      	uxtb	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80016aa:	2301      	movs	r3, #1
 80016ac:	f7ff fc66 	bl	8000f7c <disk_write>
			fs->fsi_flag = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc7a 	bl	8000fbc <disk_ioctl>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3b02      	subs	r3, #2
 80016ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80016f2:	3b02      	subs	r3, #2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d301      	bcc.n	80016fe <clust2sect+0x22>
 80016fa:	2300      	movs	r3, #0
 80016fc:	e00a      	b.n	8001714 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001704:	461a      	mov	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	fb03 f202 	mul.w	r2, r3, r2
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8001712:	4413      	add	r3, r2
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d905      	bls.n	800173c <get_fat+0x1c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d302      	bcc.n	8001742 <get_fat+0x22>
		val = 1;	/* Internal error */
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e0a3      	b.n	800188a <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001746:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800174e:	2b03      	cmp	r3, #3
 8001750:	d068      	beq.n	8001824 <get_fat+0x104>
 8001752:	2b03      	cmp	r3, #3
 8001754:	f300 808f 	bgt.w	8001876 <get_fat+0x156>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <get_fat+0x42>
 800175c:	2b02      	cmp	r3, #2
 800175e:	d040      	beq.n	80017e2 <get_fat+0xc2>
 8001760:	e089      	b.n	8001876 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0a5b      	lsrs	r3, r3, #9
 800177a:	4413      	add	r3, r2
 800177c:	4619      	mov	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fed1 	bl	8001526 <move_window>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d178      	bne.n	800187c <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	0a5b      	lsrs	r3, r3, #9
 80017a4:	4413      	add	r3, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff febc 	bl	8001526 <move_window>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d165      	bne.n	8001880 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <get_fat+0xb8>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	e002      	b.n	80017de <get_fat+0xbe>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	617b      	str	r3, [r7, #20]
			break;
 80017e0:	e053      	b.n	800188a <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	4413      	add	r3, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe98 	bl	8001526 <move_window>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d143      	bne.n	8001884 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3301      	adds	r3, #1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	b29b      	uxth	r3, r3
 8001820:	617b      	str	r3, [r7, #20]
			break;
 8001822:	e032      	b.n	800188a <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	09db      	lsrs	r3, r3, #7
 800182e:	4413      	add	r3, r2
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe77 	bl	8001526 <move_window>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d124      	bne.n	8001888 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	3303      	adds	r3, #3
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	061a      	lsls	r2, r3, #24
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3302      	adds	r3, #2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	4313      	orrs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	3201      	adds	r2, #1
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	0212      	lsls	r2, r2, #8
 8001866:	4313      	orrs	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001872:	617b      	str	r3, [r7, #20]
			break;
 8001874:	e009      	b.n	800188a <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e006      	b.n	800188a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800187c:	bf00      	nop
 800187e:	e004      	b.n	800188a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001880:	bf00      	nop
 8001882:	e002      	b.n	800188a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001884:	bf00      	nop
 8001886:	e000      	b.n	800188a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001888:	bf00      	nop
		}
	}

	return val;
 800188a:	697b      	ldr	r3, [r7, #20]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d905      	bls.n	80018b2 <put_fat+0x1e>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <put_fat+0x24>
		res = FR_INT_ERR;
 80018b2:	2302      	movs	r3, #2
 80018b4:	77fb      	strb	r3, [r7, #31]
 80018b6:	e0f6      	b.n	8001aa6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018be:	2b03      	cmp	r3, #3
 80018c0:	f000 809e 	beq.w	8001a00 <put_fat+0x16c>
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	f300 80e4 	bgt.w	8001a92 <put_fat+0x1fe>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d002      	beq.n	80018d4 <put_fat+0x40>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d06f      	beq.n	80019b2 <put_fat+0x11e>
 80018d2:	e0de      	b.n	8001a92 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	0a5b      	lsrs	r3, r3, #9
 80018ec:	4413      	add	r3, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fe18 	bl	8001526 <move_window>
 80018f6:	4603      	mov	r3, r0
 80018f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 80cb 	bne.w	8001a98 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	617a      	str	r2, [r7, #20]
 8001908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <put_fat+0xa4>
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	b25a      	sxtb	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	b25b      	sxtb	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b25b      	sxtb	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e001      	b.n	800193c <put_fat+0xa8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	0a5b      	lsrs	r3, r3, #9
 8001952:	4413      	add	r3, r2
 8001954:	4619      	mov	r1, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff fde5 	bl	8001526 <move_window>
 800195c:	4603      	mov	r3, r0
 800195e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 809a 	bne.w	8001a9c <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <put_fat+0xf2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	b2db      	uxtb	r3, r3
 8001984:	e00e      	b.n	80019a4 <put_fat+0x110>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b25b      	sxtb	r3, r3
 800198c:	f023 030f 	bic.w	r3, r3, #15
 8001990:	b25a      	sxtb	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	b25b      	sxtb	r3, r3
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	b25b      	sxtb	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80019b0:	e079      	b.n	8001aa6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	4413      	add	r3, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fdb0 	bl	8001526 <move_window>
 80019c6:	4603      	mov	r3, r0
 80019c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d167      	bne.n	8001aa0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80019fe:	e052      	b.n	8001aa6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	09db      	lsrs	r3, r3, #7
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff fd89 	bl	8001526 <move_window>
 8001a14:	4603      	mov	r3, r0
 8001a16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d142      	bne.n	8001aa4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	3303      	adds	r3, #3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	061a      	lsls	r2, r3, #24
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	3302      	adds	r3, #2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	3201      	adds	r2, #1
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4313      	orrs	r3, r2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0c1a      	lsrs	r2, r3, #16
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3302      	adds	r3, #2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0e1a      	lsrs	r2, r3, #24
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	3303      	adds	r3, #3
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8001a90:	e009      	b.n	8001aa6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8001a92:	2302      	movs	r3, #2
 8001a94:	77fb      	strb	r3, [r7, #31]
 8001a96:	e006      	b.n	8001aa6 <put_fat+0x212>
			if (res != FR_OK) break;
 8001a98:	bf00      	nop
 8001a9a:	e004      	b.n	8001aa6 <put_fat+0x212>
			if (res != FR_OK) break;
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <put_fat+0x212>
			if (res != FR_OK) break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <put_fat+0x212>
			if (res != FR_OK) break;
 8001aa4:	bf00      	nop
		}
	}

	return res;
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d905      	bls.n	8001acc <remove_chain+0x1c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <remove_chain+0x22>
		res = FR_INT_ERR;
 8001acc:	2302      	movs	r3, #2
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e043      	b.n	8001b5a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001ad6:	e036      	b.n	8001b46 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe20 	bl	8001720 <get_fat>
 8001ae0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d035      	beq.n	8001b54 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <remove_chain+0x44>
 8001aee:	2302      	movs	r3, #2
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e032      	b.n	8001b5a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afa:	d102      	bne.n	8001b02 <remove_chain+0x52>
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e02b      	b.n	8001b5a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001b02:	2200      	movs	r2, #0
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fec4 	bl	8001894 <put_fat>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d120      	bne.n	8001b58 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d00f      	beq.n	8001b42 <remove_chain+0x92>
				fs->free_clust++;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3c2      	bcc.n	8001ad8 <remove_chain+0x28>
 8001b52:	e002      	b.n	8001b5a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8001b58:	bf00      	nop
		}
	}

	return res;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10f      	bne.n	8001b94 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b7a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <create_chain+0x2a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d31c      	bcc.n	8001bc8 <create_chain+0x64>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e019      	b.n	8001bc8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fdc2 	bl	8001720 <get_fat>
 8001b9c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d801      	bhi.n	8001ba8 <create_chain+0x44>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e076      	b.n	8001c96 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bae:	d101      	bne.n	8001bb4 <create_chain+0x50>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	e070      	b.n	8001c96 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d201      	bcs.n	8001bc4 <create_chain+0x60>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	e068      	b.n	8001c96 <create_chain+0x132>
		scl = clst;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d307      	bcc.n	8001bee <create_chain+0x8a>
			ncl = 2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d901      	bls.n	8001bee <create_chain+0x8a>
 8001bea:	2300      	movs	r3, #0
 8001bec:	e053      	b.n	8001c96 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8001bee:	6979      	ldr	r1, [r7, #20]
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fd95 	bl	8001720 <get_fat>
 8001bf6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00e      	beq.n	8001c1c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c04:	d002      	beq.n	8001c0c <create_chain+0xa8>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <create_chain+0xac>
			return cs;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	e042      	b.n	8001c96 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1d9      	bne.n	8001bcc <create_chain+0x68>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e03c      	b.n	8001c96 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8001c1c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8001c1e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fe35 	bl	8001894 <put_fat>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <create_chain+0xe4>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe28 	bl	8001894 <put_fat>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11a      	bne.n	8001c84 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c60:	d018      	beq.n	8001c94 <create_chain+0x130>
			fs->free_clust--;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001c82:	e007      	b.n	8001c94 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <create_chain+0x12c>
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8e:	e000      	b.n	8001c92 <create_chain+0x12e>
 8001c90:	2301      	movs	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8001c94:	697b      	ldr	r3, [r7, #20]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b087      	sub	sp, #28
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001cae:	3304      	adds	r3, #4
 8001cb0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	0a5b      	lsrs	r3, r3, #9
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001cbc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1d1a      	adds	r2, r3, #4
 8001cca:	613a      	str	r2, [r7, #16]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <clmt_clust+0x3c>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e010      	b.n	8001cfc <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d307      	bcc.n	8001cf2 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3304      	adds	r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001cf0:	e7e9      	b.n	8001cc6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8001cf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4413      	add	r3, r2
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001d22:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d007      	beq.n	8001d3a <dir_sdi+0x32>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d301      	bcc.n	8001d3e <dir_sdi+0x36>
		return FR_INT_ERR;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e074      	b.n	8001e28 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10c      	bne.n	8001d5e <dir_sdi+0x56>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d105      	bne.n	8001d5e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d58:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001d5c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d111      	bne.n	8001d88 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d6a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d301      	bcc.n	8001d7a <dir_sdi+0x72>
			return FR_INT_ERR;
 8001d76:	2302      	movs	r3, #2
 8001d78:	e056      	b.n	8001e28 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d80:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e032      	b.n	8001dee <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d8e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8001d96:	e01e      	b.n	8001dd6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d9e:	6979      	ldr	r1, [r7, #20]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fcbd 	bl	8001720 <get_fat>
 8001da6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dae:	d101      	bne.n	8001db4 <dir_sdi+0xac>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e039      	b.n	8001e28 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d907      	bls.n	8001dca <dir_sdi+0xc2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d301      	bcc.n	8001dce <dir_sdi+0xc6>
				return FR_INT_ERR;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e02c      	b.n	8001e28 <dir_sdi+0x120>
			idx -= ic;
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d2dc      	bcs.n	8001d98 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc78 	bl	80016dc <clust2sect>
 8001dec:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <dir_sdi+0xf8>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e013      	b.n	8001e28 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	091a      	lsrs	r2, r3, #4
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	441a      	add	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e14:	461a      	mov	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <dir_next+0x26>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <dir_next+0x2a>
		return FR_NO_FILE;
 8001e56:	2304      	movs	r3, #4
 8001e58:	e0dd      	b.n	8002016 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 80c6 	bne.w	8001ff2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e84:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	f0c0 80b0 	bcc.w	8001ff2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8001e92:	2304      	movs	r3, #4
 8001e94:	e0bf      	b.n	8002016 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001ea0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 80a2 	bne.w	8001ff2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7ff fc2f 	bl	8001720 <get_fat>
 8001ec2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d801      	bhi.n	8001ece <dir_next+0x9e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0a3      	b.n	8002016 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed4:	d101      	bne.n	8001eda <dir_next+0xaa>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e09d      	b.n	8002016 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d374      	bcc.n	8001fd4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <dir_next+0xc4>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e090      	b.n	8002016 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f7ff fe2e 	bl	8001b64 <create_chain>
 8001f08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <dir_next+0xe4>
 8001f10:	2307      	movs	r3, #7
 8001f12:	e080      	b.n	8002016 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <dir_next+0xee>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e07b      	b.n	8002016 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f24:	d101      	bne.n	8001f2a <dir_next+0xfa>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e075      	b.n	8002016 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff faaf 	bl	8001494 <sync_window>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <dir_next+0x110>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e06a      	b.n	8002016 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f88c 	bl	800106a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7ff fbbb 	bl	80016dc <clust2sect>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e01b      	b.n	8001faa <dir_next+0x17a>
						dp->fs->wflag = 1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fa85 	bl	8001494 <sync_window>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <dir_next+0x164>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e040      	b.n	8002016 <dir_next+0x1e6>
						dp->fs->winsect++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f9a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8001f9e:	3201      	adds	r2, #1
 8001fa0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d3da      	bcc.n	8001f72 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc2:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	1a8a      	subs	r2, r1, r2
 8001fd0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb79 	bl	80016dc <clust2sect>
 8001fea:	4602      	mov	r2, r0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	015b      	lsls	r3, r3, #5
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe6c 	bl	8001d08 <dir_sdi>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d131      	bne.n	800209e <dir_alloc+0x80>
		n = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7ff fa6a 	bl	8001526 <move_window>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11f      	bne.n	800209c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2be5      	cmp	r3, #229	; 0xe5
 8002066:	d005      	beq.n	8002074 <dir_alloc+0x56>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3301      	adds	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d102      	bne.n	8002088 <dir_alloc+0x6a>
 8002082:	e00c      	b.n	800209e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8002088:	2101      	movs	r1, #1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fed0 	bl	8001e30 <dir_next>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0d1      	beq.n	800203e <dir_alloc+0x20>
 800209a:	e000      	b.n	800209e <dir_alloc+0x80>
			if (res != FR_OK) break;
 800209c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d101      	bne.n	80020a8 <dir_alloc+0x8a>
 80020a4:	2307      	movs	r3, #7
 80020a6:	73fb      	strb	r3, [r7, #15]
	return res;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	331b      	adds	r3, #27
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	331a      	adds	r3, #26
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d10f      	bne.n	8002100 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	3315      	adds	r3, #21
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3314      	adds	r3, #20
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

	return cl;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	331a      	adds	r3, #26
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	331b      	adds	r3, #27
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	0c1a      	lsrs	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3314      	adds	r3, #20
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	b29b      	uxth	r3, r3
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3315      	adds	r3, #21
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fdce 	bl	8001d08 <dir_sdi>
 800216c:	4603      	mov	r3, r0
 800216e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <dir_find+0x1e>
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	e03b      	b.n	80021f2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7ff f9cc 	bl	8001526 <move_window>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d128      	bne.n	80021ea <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800219e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <dir_find+0x56>
 80021ac:	2304      	movs	r3, #4
 80021ae:	75fb      	strb	r3, [r7, #23]
 80021b0:	e01e      	b.n	80021f0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	330b      	adds	r3, #11
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <dir_find+0x7a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80021c6:	220b      	movs	r2, #11
 80021c8:	4619      	mov	r1, r3
 80021ca:	6938      	ldr	r0, [r7, #16]
 80021cc:	f7fe ff68 	bl	80010a0 <mem_cmp>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80021d6:	2100      	movs	r1, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fe29 	bl	8001e30 <dir_next>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0c8      	beq.n	800217a <dir_find+0x1e>
 80021e8:	e002      	b.n	80021f0 <dir_find+0x94>
		if (res != FR_OK) break;
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <dir_find+0x94>
			break;
 80021ee:	bf00      	nop

	return res;
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002202:	2101      	movs	r1, #1
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff0a 	bl	800201e <dir_alloc>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d126      	bne.n	8002262 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7ff f97f 	bl	8001526 <move_window>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d117      	bne.n	8002262 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002238:	2220      	movs	r2, #32
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe ff14 	bl	800106a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800224e:	220b      	movs	r2, #11
 8002250:	4619      	mov	r1, r3
 8002252:	f7fe feeb 	bl	800102c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e002      	b.n	8002284 <create_name+0x18>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b2f      	cmp	r3, #47	; 0x2f
 800228a:	d0f8      	beq.n	800227e <create_name+0x12>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b5c      	cmp	r3, #92	; 0x5c
 8002292:	d0f4      	beq.n	800227e <create_name+0x12>
	sfn = dp->fn;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800229a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800229c:	220b      	movs	r2, #11
 800229e:	2120      	movs	r1, #32
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe fee2 	bl	800106a <mem_set>
	si = i = b = 0; ni = 8;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	2308      	movs	r3, #8
 80022b4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	617a      	str	r2, [r7, #20]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80022c4:	7fbb      	ldrb	r3, [r7, #30]
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d953      	bls.n	8002372 <create_name+0x106>
 80022ca:	7fbb      	ldrb	r3, [r7, #30]
 80022cc:	2b2f      	cmp	r3, #47	; 0x2f
 80022ce:	d050      	beq.n	8002372 <create_name+0x106>
 80022d0:	7fbb      	ldrb	r3, [r7, #30]
 80022d2:	2b5c      	cmp	r3, #92	; 0x5c
 80022d4:	d04d      	beq.n	8002372 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80022d6:	7fbb      	ldrb	r3, [r7, #30]
 80022d8:	2b2e      	cmp	r3, #46	; 0x2e
 80022da:	d003      	beq.n	80022e4 <create_name+0x78>
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d30f      	bcc.n	8002304 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d102      	bne.n	80022f0 <create_name+0x84>
 80022ea:	7fbb      	ldrb	r3, [r7, #30]
 80022ec:	2b2e      	cmp	r3, #46	; 0x2e
 80022ee:	d001      	beq.n	80022f4 <create_name+0x88>
 80022f0:	2306      	movs	r3, #6
 80022f2:	e073      	b.n	80023dc <create_name+0x170>
			i = 8; ni = 11;
 80022f4:	2308      	movs	r3, #8
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	230b      	movs	r3, #11
 80022fa:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	77fb      	strb	r3, [r7, #31]
 8002302:	e035      	b.n	8002370 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8002304:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da08      	bge.n	800231e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800230c:	7ffb      	ldrb	r3, [r7, #31]
 800230e:	f043 0303 	orr.w	r3, r3, #3
 8002312:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002314:	7fbb      	ldrb	r3, [r7, #30]
 8002316:	3b80      	subs	r3, #128	; 0x80
 8002318:	4a32      	ldr	r2, [pc, #200]	; (80023e4 <create_name+0x178>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800231e:	7fbb      	ldrb	r3, [r7, #30]
 8002320:	4619      	mov	r1, r3
 8002322:	4831      	ldr	r0, [pc, #196]	; (80023e8 <create_name+0x17c>)
 8002324:	f7fe fee3 	bl	80010ee <chk_chr>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <create_name+0xc6>
				return FR_INVALID_NAME;
 800232e:	2306      	movs	r3, #6
 8002330:	e054      	b.n	80023dc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8002332:	7fbb      	ldrb	r3, [r7, #30]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d907      	bls.n	8002348 <create_name+0xdc>
 8002338:	7fbb      	ldrb	r3, [r7, #30]
 800233a:	2b5a      	cmp	r3, #90	; 0x5a
 800233c:	d804      	bhi.n	8002348 <create_name+0xdc>
				b |= 2;
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	e00c      	b.n	8002362 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8002348:	7fbb      	ldrb	r3, [r7, #30]
 800234a:	2b60      	cmp	r3, #96	; 0x60
 800234c:	d909      	bls.n	8002362 <create_name+0xf6>
 800234e:	7fbb      	ldrb	r3, [r7, #30]
 8002350:	2b7a      	cmp	r3, #122	; 0x7a
 8002352:	d806      	bhi.n	8002362 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	77fb      	strb	r3, [r7, #31]
 800235c:	7fbb      	ldrb	r3, [r7, #30]
 800235e:	3b20      	subs	r3, #32
 8002360:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	613a      	str	r2, [r7, #16]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	4413      	add	r3, r2
 800236c:	7fba      	ldrb	r2, [r7, #30]
 800236e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8002370:	e7a1      	b.n	80022b6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	441a      	add	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800237c:	7fbb      	ldrb	r3, [r7, #30]
 800237e:	2b20      	cmp	r3, #32
 8002380:	d801      	bhi.n	8002386 <create_name+0x11a>
 8002382:	2304      	movs	r3, #4
 8002384:	e000      	b.n	8002388 <create_name+0x11c>
 8002386:	2300      	movs	r3, #0
 8002388:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <create_name+0x128>
 8002390:	2306      	movs	r3, #6
 8002392:	e023      	b.n	80023dc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2be5      	cmp	r3, #229	; 0xe5
 800239a:	d102      	bne.n	80023a2 <create_name+0x136>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2205      	movs	r2, #5
 80023a0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d102      	bne.n	80023ae <create_name+0x142>
 80023a8:	7ffb      	ldrb	r3, [r7, #31]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d103      	bne.n	80023c0 <create_name+0x154>
 80023b8:	7fbb      	ldrb	r3, [r7, #30]
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80023c0:	7ffb      	ldrb	r3, [r7, #31]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d103      	bne.n	80023d2 <create_name+0x166>
 80023ca:	7fbb      	ldrb	r3, [r7, #30]
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	330b      	adds	r3, #11
 80023d6:	7fba      	ldrb	r2, [r7, #30]
 80023d8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80023da:	2300      	movs	r3, #0
#endif
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	080101bc 	.word	0x080101bc
 80023e8:	0800ff80 	.word	0x0800ff80

080023ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b2f      	cmp	r3, #47	; 0x2f
 80023fc:	d003      	beq.n	8002406 <follow_path+0x1a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b5c      	cmp	r3, #92	; 0x5c
 8002404:	d102      	bne.n	800240c <follow_path+0x20>
		path++;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b1f      	cmp	r3, #31
 800241a:	d80a      	bhi.n	8002432 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fc72 	bl	8001d08 <dir_sdi>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002430:	e045      	b.n	80024be <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff18 	bl	800226c <create_name>
 800243c:	4603      	mov	r3, r0
 800243e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d136      	bne.n	80024b4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fe88 	bl	800215c <dir_find>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002456:	7adb      	ldrb	r3, [r3, #11]
 8002458:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d128      	bne.n	80024b8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d123      	bne.n	80024b8 <follow_path+0xcc>
 8002470:	2305      	movs	r3, #5
 8002472:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8002474:	e020      	b.n	80024b8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002486:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	330b      	adds	r3, #11
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8002496:	2305      	movs	r3, #5
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e010      	b.n	80024be <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe04 	bl	80020b2 <ld_clust>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80024b2:	e7be      	b.n	8002432 <follow_path+0x46>
			if (res != FR_OK) break;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <follow_path+0xd2>
				break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80024bc:	bf00      	nop
		}
	}

	return res;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d031      	beq.n	8002542 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e002      	b.n	80024ec <get_ldnumber+0x24>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d903      	bls.n	80024fc <get_ldnumber+0x34>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b3a      	cmp	r3, #58	; 0x3a
 80024fa:	d1f4      	bne.n	80024e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b3a      	cmp	r3, #58	; 0x3a
 8002502:	d11c      	bne.n	800253e <get_ldnumber+0x76>
			tp = *path;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3b30      	subs	r3, #48	; 0x30
 8002514:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b09      	cmp	r3, #9
 800251a:	d80e      	bhi.n	800253a <get_ldnumber+0x72>
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d10a      	bne.n	800253a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <get_ldnumber+0x72>
					vol = (int)i;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	e002      	b.n	8002544 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002542:	693b      	ldr	r3, [r7, #16]
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002568:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ffd9 	bl	8001526 <move_window>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <check_fs+0x2e>
		return 3;
 800257a:	2303      	movs	r3, #3
 800257c:	e04a      	b.n	8002614 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002584:	3301      	adds	r3, #1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002592:	b21b      	sxth	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b21b      	sxth	r3, r3
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <check_fs+0xcc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d001      	beq.n	80025a2 <check_fs+0x52>
		return 2;
 800259e:	2302      	movs	r3, #2
 80025a0:	e038      	b.n	8002614 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3336      	adds	r3, #54	; 0x36
 80025a6:	3303      	adds	r3, #3
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	061a      	lsls	r2, r3, #24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3336      	adds	r3, #54	; 0x36
 80025b0:	3302      	adds	r3, #2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	4313      	orrs	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	3236      	adds	r2, #54	; 0x36
 80025bc:	3201      	adds	r2, #1
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	0212      	lsls	r2, r2, #8
 80025c2:	4313      	orrs	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <check_fs+0xd0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <check_fs+0x8a>
		return 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e01c      	b.n	8002614 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3352      	adds	r3, #82	; 0x52
 80025de:	3303      	adds	r3, #3
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	061a      	lsls	r2, r3, #24
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3352      	adds	r3, #82	; 0x52
 80025e8:	3302      	adds	r3, #2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4313      	orrs	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	3252      	adds	r2, #82	; 0x52
 80025f4:	3201      	adds	r2, #1
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	0212      	lsls	r2, r2, #8
 80025fa:	4313      	orrs	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8002602:	4313      	orrs	r3, r2
 8002604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <check_fs+0xd0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <check_fs+0xc2>
		return 0;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <check_fs+0xc4>

	return 1;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	ffffaa55 	.word	0xffffaa55
 8002620:	00544146 	.word	0x00544146

08002624 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b096      	sub	sp, #88	; 0x58
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	f7ff ff45 	bl	80024c8 <get_ldnumber>
 800263e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	2b00      	cmp	r3, #0
 8002644:	da01      	bge.n	800264a <find_volume+0x26>
 8002646:	230b      	movs	r3, #11
 8002648:	e2ac      	b.n	8002ba4 <find_volume+0x580>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800264a:	4a9e      	ldr	r2, [pc, #632]	; (80028c4 <find_volume+0x2a0>)
 800264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <find_volume+0x3a>
 800265a:	230c      	movs	r3, #12
 800265c:	e2a2      	b.n	8002ba4 <find_volume+0x580>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002662:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01e      	beq.n	80026ac <find_volume+0x88>
		myprintf("disk status started");/* If the volume has been mounted */
 800266e:	4896      	ldr	r0, [pc, #600]	; (80028c8 <find_volume+0x2a4>)
 8002670:	f001 f990 	bl	8003994 <myprintf>
		stat = disk_status(fs->drv);
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fc1e 	bl	8000ebc <disk_status>
 8002680:	4603      	mov	r3, r0
 8002682:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <find_volume+0x84>
 8002698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80026a4:	230a      	movs	r3, #10
 80026a6:	e27d      	b.n	8002ba4 <find_volume+0x580>
			return FR_OK;				/* The file system object is valid */
 80026a8:	2300      	movs	r3, #0
 80026aa:	e27b      	b.n	8002ba4 <find_volume+0x580>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fc13 	bl	8000ef0 <disk_initialize>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <find_volume+0xbc>
//		myprintf("checking init");/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80026dc:	2303      	movs	r3, #3
 80026de:	e261      	b.n	8002ba4 <find_volume+0x580>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <find_volume+0xd2>
 80026e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <find_volume+0xd2>
		return FR_WRITE_PROTECTED;
 80026f2:	230a      	movs	r3, #10
 80026f4:	e256      	b.n	8002ba4 <find_volume+0x580>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80026fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026fe:	f7ff ff27 	bl	8002550 <check_fs>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800270c:	2b01      	cmp	r3, #1
 800270e:	d153      	bne.n	80027b8 <find_volume+0x194>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002710:	2300      	movs	r3, #0
 8002712:	643b      	str	r3, [r7, #64]	; 0x40
 8002714:	e028      	b.n	8002768 <find_volume+0x144>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8002716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002720:	4413      	add	r3, r2
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	3304      	adds	r3, #4
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <find_volume+0x130>
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	330b      	adds	r3, #11
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	061a      	lsls	r2, r3, #24
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	330a      	adds	r3, #10
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	4313      	orrs	r3, r2
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	3209      	adds	r2, #9
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	0212      	lsls	r2, r2, #8
 8002748:	4313      	orrs	r3, r2
 800274a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274c:	3208      	adds	r2, #8
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	e000      	b.n	8002756 <find_volume+0x132>
 8002754:	2200      	movs	r2, #0
 8002756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	3358      	adds	r3, #88	; 0x58
 800275c:	443b      	add	r3, r7
 800275e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002764:	3301      	adds	r3, #1
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	2b03      	cmp	r3, #3
 800276c:	d9d3      	bls.n	8002716 <find_volume+0xf2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800276e:	2300      	movs	r3, #0
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <find_volume+0x15a>
 8002778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277a:	3b01      	subs	r3, #1
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800277e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	3358      	adds	r3, #88	; 0x58
 8002784:	443b      	add	r3, r7
 8002786:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800278a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <find_volume+0x17a>
 8002792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002796:	f7ff fedb 	bl	8002550 <check_fs>
 800279a:	4603      	mov	r3, r0
 800279c:	e000      	b.n	80027a0 <find_volume+0x17c>
 800279e:	2302      	movs	r3, #2
 80027a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80027a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <find_volume+0x194>
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	3301      	adds	r3, #1
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
 80027b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d9e2      	bls.n	800277e <find_volume+0x15a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80027b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d101      	bne.n	80027c4 <find_volume+0x1a0>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e1ef      	b.n	8002ba4 <find_volume+0x580>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80027c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <find_volume+0x1ac>
 80027cc:	230d      	movs	r3, #13
 80027ce:	e1e9      	b.n	8002ba4 <find_volume+0x580>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	7b1b      	ldrb	r3, [r3, #12]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027da:	7adb      	ldrb	r3, [r3, #11]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e6:	d001      	beq.n	80027ec <find_volume+0x1c8>
		return FR_NO_FILESYSTEM;
 80027e8:	230d      	movs	r3, #13
 80027ea:	e1db      	b.n	8002ba4 <find_volume+0x580>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	7ddb      	ldrb	r3, [r3, #23]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	b21a      	sxth	r2, r3
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	7d9b      	ldrb	r3, [r3, #22]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d112      	bne.n	800282e <find_volume+0x20a>
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800280e:	061a      	lsls	r2, r3, #24
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8002820:	0212      	lsls	r2, r2, #8
 8002822:	4313      	orrs	r3, r2
 8002824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002826:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800282a:	4313      	orrs	r3, r2
 800282c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002832:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	7c1a      	ldrb	r2, [r3, #16]
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002846:	2b01      	cmp	r3, #1
 8002848:	d006      	beq.n	8002858 <find_volume+0x234>
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002850:	2b02      	cmp	r3, #2
 8002852:	d001      	beq.n	8002858 <find_volume+0x234>
		return FR_NO_FILESYSTEM;
 8002854:	230d      	movs	r3, #13
 8002856:	e1a5      	b.n	8002ba4 <find_volume+0x580>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800285e:	461a      	mov	r2, r3
 8002860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	7b5a      	ldrb	r2, [r3, #13]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <find_volume+0x26e>
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002882:	461a      	mov	r2, r3
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800288a:	3b01      	subs	r3, #1
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <find_volume+0x272>
		return FR_NO_FILESYSTEM;
 8002892:	230d      	movs	r3, #13
 8002894:	e186      	b.n	8002ba4 <find_volume+0x580>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	7c9b      	ldrb	r3, [r3, #18]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	7c5b      	ldrb	r3, [r3, #17]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <find_volume+0x2a8>
		return FR_NO_FILESYSTEM;
 80028c0:	230d      	movs	r3, #13
 80028c2:	e16f      	b.n	8002ba4 <find_volume+0x580>
 80028c4:	20000098 	.word	0x20000098
 80028c8:	0800ff90 	.word	0x0800ff90

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	7d1b      	ldrb	r3, [r3, #20]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	7cdb      	ldrb	r3, [r3, #19]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21b      	sxth	r3, r3
 80028de:	b29b      	uxth	r3, r3
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <find_volume+0x2ea>
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80028ee:	061a      	lsls	r2, r3, #24
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	4313      	orrs	r3, r2
 8002904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002906:	f892 2020 	ldrb.w	r2, [r2, #32]
 800290a:	4313      	orrs	r3, r2
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	7bdb      	ldrb	r3, [r3, #15]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	b21a      	sxth	r2, r3
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002918:	7b9b      	ldrb	r3, [r3, #14]
 800291a:	b21b      	sxth	r3, r3
 800291c:	4313      	orrs	r3, r2
 800291e:	b21b      	sxth	r3, r3
 8002920:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <find_volume+0x308>
 8002928:	230d      	movs	r3, #13
 800292a:	e13b      	b.n	8002ba4 <find_volume+0x580>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800292c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	4413      	add	r3, r2
 8002932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002934:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8002938:	0912      	lsrs	r2, r2, #4
 800293a:	b292      	uxth	r2, r2
 800293c:	4413      	add	r3, r2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	429a      	cmp	r2, r3
 8002946:	d201      	bcs.n	800294c <find_volume+0x328>
 8002948:	230d      	movs	r3, #13
 800294a:	e12b      	b.n	8002ba4 <find_volume+0x580>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002954:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002958:	fbb3 f3f2 	udiv	r3, r3, r2
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <find_volume+0x344>
 8002964:	230d      	movs	r3, #13
 8002966:	e11d      	b.n	8002ba4 <find_volume+0x580>
	fmt = FS_FAT12;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002974:	4293      	cmp	r3, r2
 8002976:	d902      	bls.n	800297e <find_volume+0x35a>
 8002978:	2302      	movs	r3, #2
 800297a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002984:	4293      	cmp	r3, r2
 8002986:	d902      	bls.n	800298e <find_volume+0x36a>
 8002988:	2303      	movs	r3, #3
 800298a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800299c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80029a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80029a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a4:	441a      	add	r2, r3
 80029a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80029ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	441a      	add	r2, r3
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80029b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d121      	bne.n	8002a04 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <find_volume+0x3aa>
 80029ca:	230d      	movs	r3, #13
 80029cc:	e0ea      	b.n	8002ba4 <find_volume+0x580>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	4313      	orrs	r3, r2
 80029e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80029e6:	0212      	lsls	r2, r2, #8
 80029e8:	4313      	orrs	r3, r2
 80029ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80029f0:	431a      	orrs	r2, r3
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
 8002a02:	e025      	b.n	8002a50 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <find_volume+0x3ee>
 8002a0e:	230d      	movs	r3, #13
 8002a10:	e0c8      	b.n	8002ba4 <find_volume+0x580>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a1a:	441a      	add	r2, r3
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002a22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d104      	bne.n	8002a34 <find_volume+0x410>
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	e00c      	b.n	8002a4e <find_volume+0x42a>
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	085a      	lsrs	r2, r3, #1
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8002a4e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d201      	bcs.n	8002a66 <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8002a62:	230d      	movs	r3, #13
 8002a64:	e09e      	b.n	8002ba4 <find_volume+0x580>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d177      	bne.n	8002b7c <find_volume+0x558>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d16a      	bne.n	8002b7c <find_volume+0x558>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002aae:	f7fe fd3a 	bl	8001526 <move_window>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d161      	bne.n	8002b7c <find_volume+0x558>
	{
		fs->fsi_flag = 0;
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	4a35      	ldr	r2, [pc, #212]	; (8002bac <find_volume+0x588>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d14f      	bne.n	8002b7c <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	78db      	ldrb	r3, [r3, #3]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aec:	7852      	ldrb	r2, [r2, #1]
 8002aee:	0212      	lsls	r2, r2, #8
 8002af0:	4313      	orrs	r3, r2
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <find_volume+0x58c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d13e      	bne.n	8002b7c <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8002b04:	061a      	lsls	r2, r3, #24
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b12:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8002b16:	0212      	lsls	r2, r2, #8
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b1c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8002b20:	4313      	orrs	r3, r2
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <find_volume+0x590>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d129      	bne.n	8002b7c <find_volume+0x558>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8002b2e:	061a      	lsls	r2, r3, #24
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8002b40:	0212      	lsls	r2, r2, #8
 8002b42:	4313      	orrs	r3, r2
 8002b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b46:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b54:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8002b58:	061a      	lsls	r2, r3, #24
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	4313      	orrs	r3, r2
 8002b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b66:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8002b6a:	0212      	lsls	r2, r2, #8
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b70:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8002b74:	431a      	orrs	r2, r3
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <find_volume+0x594>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <find_volume+0x594>)
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <find_volume+0x594>)
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8002b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b9e:	f7fe fc4f 	bl	8001440 <clear_lock>
#endif

	return FR_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3758      	adds	r7, #88	; 0x58
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffffaa55 	.word	0xffffaa55
 8002bb0:	41615252 	.word	0x41615252
 8002bb4:	61417272 	.word	0x61417272
 8002bb8:	2000009c 	.word	0x2000009c

08002bbc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d022      	beq.n	8002c14 <validate+0x58>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01d      	beq.n	8002c14 <validate+0x58>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <validate+0x58>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bec:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10c      	bne.n	8002c14 <validate+0x58>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c00:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe f959 	bl	8000ebc <disk_status>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8002c14:	2309      	movs	r3, #9
 8002c16:	e000      	b.n	8002c1a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fc44 	bl	80024c8 <get_ldnumber>
 8002c40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da01      	bge.n	8002c4c <f_mount+0x28>
 8002c48:	230b      	movs	r3, #11
 8002c4a:	e031      	b.n	8002cb0 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002c4c:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <f_mount+0x94>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	61bb      	str	r3, [r7, #24]
	myprintf("inside cfs (%i)", cfs);
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	4818      	ldr	r0, [pc, #96]	; (8002cbc <f_mount+0x98>)
 8002c5a:	f000 fe9b 	bl	8003994 <myprintf>
	if (cfs) {
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <f_mount+0x4e>

#if _FS_LOCK
		clear_lock(cfs);
 8002c64:	69b8      	ldr	r0, [r7, #24]
 8002c66:	f7fe fbeb 	bl	8001440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <f_mount+0x94>)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <f_mount+0x72>
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <f_mount+0x76>
 8002c96:	2300      	movs	r3, #0
 8002c98:	e00a      	b.n	8002cb0 <f_mount+0x8c>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8002c9a:	f107 0108 	add.w	r1, r7, #8
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fcbd 	bl	8002624 <find_volume>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000098 	.word	0x20000098
 8002cbc:	0800ffa4 	.word	0x0800ffa4

08002cc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002ccc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002cd6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002cda:	6019      	str	r1, [r3, #0]
 8002cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002ce0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002ce4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8002ce6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002cea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <f_open+0x38>
 8002cf4:	2309      	movs	r3, #9
 8002cf6:	e257      	b.n	80031a8 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8002cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002cfc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8002d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002d0c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002d10:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002d14:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8002d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002d24:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	f107 0108 	add.w	r1, r7, #8
 8002d34:	f107 0320 	add.w	r3, r7, #32
 8002d38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fc71 	bl	8002624 <find_volume>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8002d48:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 8229 	bne.w	80031a4 <f_open+0x4e4>
		INIT_BUF(dj);
 8002d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002d56:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002d5a:	f107 0214 	add.w	r2, r7, #20
 8002d5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8002d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002d66:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fb3a 	bl	80023ec <follow_path>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8002d7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002d82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002d86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d8a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002d8e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11d      	bne.n	8002dd2 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8002d96:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8002d9e:	2306      	movs	r3, #6
 8002da0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002da4:	e015      	b.n	8002dd2 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002daa:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f107 0320 	add.w	r3, r7, #32
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f9ac 	bl	8001124 <chk_lock>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002dd6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f003 031c 	and.w	r3, r3, #28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80e6 	beq.w	8002fb2 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8002de6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d027      	beq.n	8002e3e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8002dee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d10e      	bne.n	8002e14 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002df6:	f7fe fa03 	bl	8001200 <enq_lock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <f_open+0x14e>
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f9f8 	bl	80021fa <dir_register>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	e000      	b.n	8002e10 <f_open+0x150>
 8002e0e:	2312      	movs	r3, #18
 8002e10:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002e18:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002e1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002e20:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	f042 0208 	orr.w	r2, r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8002e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002e30:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002e34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002e38:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002e3c:	e017      	b.n	8002e6e <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002e3e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e42:	330b      	adds	r3, #11
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f003 0311 	and.w	r3, r3, #17
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <f_open+0x196>
					res = FR_DENIED;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002e54:	e00b      	b.n	8002e6e <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8002e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002e5a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <f_open+0x1ae>
						res = FR_EXIST;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002e6e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 80c1 	bne.w	8002ffa <f_open+0x33a>
 8002e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002e7c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80b7 	beq.w	8002ffa <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8002e8c:	f7fe f8c6 	bl	800101c <get_fattime>
 8002e90:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8002e94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e98:	330e      	adds	r3, #14
 8002e9a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002eb0:	330f      	adds	r3, #15
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002eba:	0c1a      	lsrs	r2, r3, #16
 8002ebc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002eca:	0e1a      	lsrs	r2, r3, #24
 8002ecc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002ed0:	3311      	adds	r3, #17
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8002ed6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002eda:	330b      	adds	r3, #11
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8002ee0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002ee4:	331c      	adds	r3, #28
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002eee:	331d      	adds	r3, #29
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002ef8:	331e      	adds	r3, #30
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002f02:	331f      	adds	r3, #31
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8002f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f0c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f14:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f8ca 	bl	80020b2 <ld_clust>
 8002f1e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8002f22:	2100      	movs	r1, #0
 8002f24:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8002f28:	f7ff f8f1 	bl	800210e <st_clust>
				dj.fs->wflag = 1;
 8002f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f30:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8002f3e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d059      	beq.n	8002ffa <f_open+0x33a>
					dw = dj.fs->winsect;
 8002f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f52:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002f56:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8002f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f66:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fda0 	bl	8001ab0 <remove_chain>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8002f76:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d13d      	bne.n	8002ffa <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8002f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f8a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8002f8e:	3a01      	subs	r2, #1
 8002f90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8002f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002f98:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fa0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fabe 	bl	8001526 <move_window>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002fb0:	e023      	b.n	8002ffa <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8002fb2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11f      	bne.n	8002ffa <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8002fba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002fbe:	330b      	adds	r3, #11
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <f_open+0x312>
					res = FR_NO_FILE;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002fd0:	e013      	b.n	8002ffa <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8002fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002fd6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <f_open+0x33a>
 8002fe4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002fe8:	330b      	adds	r3, #11
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <f_open+0x33a>
						res = FR_DENIED;
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8002ffa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d153      	bne.n	80030aa <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003006:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8003014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003018:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800301c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003020:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800302c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003030:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8003034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003038:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800303c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003040:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800304a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800304e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003058:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800305c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003060:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	f107 0320 	add.w	r3, r7, #32
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe f8e3 	bl	8001248 <inc_lock>
 8003082:	4602      	mov	r2, r0
 8003084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003088:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8003092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003096:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <f_open+0x3ea>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80030aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d178      	bne.n	80031a4 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80030b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80030b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80030c0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80030ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80030ce:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80030da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80030de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80030e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030e6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ffe1 	bl	80020b2 <ld_clust>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80030f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003100:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003104:	331f      	adds	r3, #31
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800310e:	331e      	adds	r3, #30
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	041b      	lsls	r3, r3, #16
 8003114:	4313      	orrs	r3, r2
 8003116:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800311a:	321d      	adds	r2, #29
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	4313      	orrs	r3, r2
 8003122:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003126:	321c      	adds	r2, #28
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	431a      	orrs	r2, r3
 800312c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003130:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800313a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800313e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800314a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800314e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800315a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800315e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800316a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800316e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8003172:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800317a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8003184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003188:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003192:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800319a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80031a4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b08a      	sub	sp, #40	; 0x28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fcf6 	bl	8002bbc <validate>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <f_write+0x2c>
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	e192      	b.n	8003504 <f_write+0x352>
	if (fp->err)							/* Check error */
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80031ee:	e189      	b.n	8003504 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80031fe:	2307      	movs	r3, #7
 8003200:	e180      	b.n	8003504 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003212:	429a      	cmp	r2, r3
 8003214:	f080 8158 	bcs.w	80034c8 <f_write+0x316>
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800321c:	e154      	b.n	80034c8 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 8114 	bne.w	8003456 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800323e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003242:	3b01      	subs	r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	4013      	ands	r3, r2
 8003248:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800324a:	7dbb      	ldrb	r3, [r7, #22]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d151      	bne.n	80032f4 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d121      	bne.n	80032ac <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fc77 	bl	8001b64 <create_chain>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24
 8003278:	e018      	b.n	80032ac <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7fe fd06 	bl	8001c9e <clmt_clust>
 8003292:	6278      	str	r0, [r7, #36]	; 0x24
 8003294:	e00a      	b.n	80032ac <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7fe fc5d 	bl	8001b64 <create_chain>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 810f 	beq.w	80034d2 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <f_write+0x114>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80032c2:	2302      	movs	r3, #2
 80032c4:	e11e      	b.n	8003504 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032cc:	d105      	bne.n	80032da <f_write+0x128>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80032d6:	2301      	movs	r3, #1
 80032d8:	e114      	b.n	8003504 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <f_write+0x142>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01d      	beq.n	800333e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003308:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003314:	2301      	movs	r3, #1
 8003316:	f7fd fe31 	bl	8000f7c <disk_write>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003328:	2301      	movs	r3, #1
 800332a:	e0eb      	b.n	8003504 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7fe f9c5 	bl	80016dc <clust2sect>
 8003352:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <f_write+0x1b4>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003362:	2302      	movs	r3, #2
 8003364:	e0ce      	b.n	8003504 <f_write+0x352>
			sect += csect;
 8003366:	7dbb      	ldrb	r3, [r7, #22]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d048      	beq.n	800340c <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800337a:	7dba      	ldrb	r2, [r7, #22]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003386:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800338a:	4293      	cmp	r3, r2
 800338c:	d908      	bls.n	80033a0 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003394:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003398:	461a      	mov	r2, r3
 800339a:	7dbb      	ldrb	r3, [r7, #22]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033a6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	f7fd fde4 	bl	8000f7c <disk_write>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80033c2:	2301      	movs	r3, #1
 80033c4:	e09e      	b.n	8003504 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d916      	bls.n	8003404 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4413      	add	r3, r2
 80033e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fe1d 	bl	800102c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	025b      	lsls	r3, r3, #9
 8003408:	623b      	str	r3, [r7, #32]
				continue;
 800340a:	e047      	b.n	800349c <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d01a      	beq.n	800344e <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003424:	429a      	cmp	r2, r3
 8003426:	d212      	bcs.n	800344e <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800342e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	2301      	movs	r3, #1
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	f7fd fd80 	bl	8000f3c <disk_read>
 800343c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800344a:	2301      	movs	r3, #1
 800344c:	e05a      	b.n	8003504 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800345c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003460:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003464:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d901      	bls.n	8003472 <f_write+0x2c0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fdd1 	bl	800102c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	4413      	add	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	441a      	add	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f aea7 	bne.w	800321e <f_write+0x6c>
 80034d0:	e000      	b.n	80034d4 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80034d2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d905      	bls.n	80034f0 <f_write+0x33e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fb51 	bl	8002bbc <validate>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 80a8 	bne.w	8003676 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80a0 	beq.w	8003676 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d019      	beq.n	8003578 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800354a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003556:	2301      	movs	r3, #1
 8003558:	f7fd fd10 	bl	8000f7c <disk_write>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8003562:	2301      	movs	r3, #1
 8003564:	e088      	b.n	8003678 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800356c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003570:	b2da      	uxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7fd ffcd 	bl	8001526 <move_window>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d16f      	bne.n	8003676 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800359c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	330b      	adds	r3, #11
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	330b      	adds	r3, #11
 80035a8:	f042 0220 	orr.w	r2, r2, #32
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	331c      	adds	r3, #28
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	331d      	adds	r3, #29
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80035d8:	0c1a      	lsrs	r2, r3, #16
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	331e      	adds	r3, #30
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80035e8:	0e1a      	lsrs	r2, r3, #24
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	331f      	adds	r3, #31
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80035f8:	4619      	mov	r1, r3
 80035fa:	6938      	ldr	r0, [r7, #16]
 80035fc:	f7fe fd87 	bl	800210e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8003600:	f7fd fd0c 	bl	800101c <get_fattime>
 8003604:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3316      	adds	r3, #22
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	b29b      	uxth	r3, r3
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	b29a      	uxth	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3317      	adds	r3, #23
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0c1a      	lsrs	r2, r3, #16
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	3318      	adds	r3, #24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	0e1a      	lsrs	r2, r3, #24
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	3319      	adds	r3, #25
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3312      	adds	r3, #18
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3313      	adds	r3, #19
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd ff88 	bl	8001582 <sync_fs>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff3f 	bl	800350c <f_sync>
 800368e:	4603      	mov	r3, r0
 8003690:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d116      	bne.n	80036c6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fa8f 	bl	8002bbc <validate>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fe82 	bl	80013b8 <dec_lock>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	2200      	movs	r2, #0
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fe ff9d 	bl	8002624 <find_volume>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80036f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 80af 	bne.w	800385e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800370c:	3b02      	subs	r3, #2
 800370e:	429a      	cmp	r2, r3
 8003710:	d805      	bhi.n	800371e <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e09f      	b.n	800385e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003724:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800372a:	7efb      	ldrb	r3, [r7, #27]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d125      	bne.n	800377c <f_getfree+0xac>
				clst = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8003734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003736:	69f8      	ldr	r0, [r7, #28]
 8003738:	f7fd fff2 	bl	8001720 <get_fat>
 800373c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003744:	d103      	bne.n	800374e <f_getfree+0x7e>
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800374c:	e077      	b.n	800383e <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d103      	bne.n	800375c <f_getfree+0x8c>
 8003754:	2302      	movs	r3, #2
 8003756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800375a:	e070      	b.n	800383e <f_getfree+0x16e>
					if (stat == 0) n++;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <f_getfree+0x98>
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	3301      	adds	r3, #1
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	3301      	adds	r3, #1
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	d3dc      	bcc.n	8003734 <f_getfree+0x64>
 800377a:	e060      	b.n	800383e <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	2300      	movs	r3, #0
 8003792:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d112      	bne.n	80037c0 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	62ba      	str	r2, [r7, #40]	; 0x28
 80037a0:	4619      	mov	r1, r3
 80037a2:	69f8      	ldr	r0, [r7, #28]
 80037a4:	f7fd febf 	bl	8001526 <move_window>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80037ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d142      	bne.n	800383c <f_getfree+0x16c>
						p = fs->win.d8;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80037ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80037c0:	7efb      	ldrb	r3, [r7, #27]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d115      	bne.n	80037f2 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	3301      	adds	r3, #1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	b21b      	sxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <f_getfree+0x114>
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	3301      	adds	r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	3302      	adds	r3, #2
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	3b02      	subs	r3, #2
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	e01d      	b.n	800382e <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	3303      	adds	r3, #3
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	061a      	lsls	r2, r3, #24
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	3302      	adds	r3, #2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	4313      	orrs	r3, r2
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	3201      	adds	r2, #1
 8003808:	7812      	ldrb	r2, [r2, #0]
 800380a:	0212      	lsls	r2, r2, #8
 800380c:	4313      	orrs	r3, r2
 800380e:	6a3a      	ldr	r2, [r7, #32]
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <f_getfree+0x152>
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3301      	adds	r3, #1
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	3304      	adds	r3, #4
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	3b04      	subs	r3, #4
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	3b01      	subs	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ac      	bne.n	8003794 <f_getfree+0xc4>
 800383a:	e000      	b.n	800383e <f_getfree+0x16e>
						if (res != FR_OK) break;
 800383c:	bf00      	nop
			}
			fs->free_clust = n;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	b2da      	uxtb	r2, r3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800385e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003862:	4618      	mov	r0, r3
 8003864:	3738      	adds	r7, #56	; 0x38
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 8003884:	7a5b      	ldrb	r3, [r3, #9]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d831      	bhi.n	80038f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 800388e:	7a5b      	ldrb	r3, [r3, #9]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 800389c:	7a5b      	ldrb	r3, [r3, #9]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 80038ac:	7a5b      	ldrb	r3, [r3, #9]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 80038b4:	4413      	add	r3, r2
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 80038bc:	7a5b      	ldrb	r3, [r3, #9]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	b2d1      	uxtb	r1, r2
 80038c4:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <FATFS_LinkDriverEx+0x94>)
 80038c6:	7251      	strb	r1, [r2, #9]
 80038c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80038ca:	7dbb      	ldrb	r3, [r7, #22]
 80038cc:	3330      	adds	r3, #48	; 0x30
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3301      	adds	r3, #1
 80038d8:	223a      	movs	r2, #58	; 0x3a
 80038da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3302      	adds	r3, #2
 80038e0:	222f      	movs	r2, #47	; 0x2f
 80038e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3303      	adds	r3, #3
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	200000b8 	.word	0x200000b8

08003904 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffaa 	bl	800386c <FATFS_LinkDriverEx>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <LL_AHB2_GRP1_EnableClock+0x34>)
 800392e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003932:	4909      	ldr	r1, [pc, #36]	; (8003958 <LL_AHB2_GRP1_EnableClock+0x34>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <LL_AHB2_GRP1_EnableClock+0x34>)
 800393e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003948:	68fb      	ldr	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	46020c00 	.word	0x46020c00

0800395c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <LL_APB1_GRP2_EnableClock+0x34>)
 8003966:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800396a:	4909      	ldr	r1, [pc, #36]	; (8003990 <LL_APB1_GRP2_EnableClock+0x34>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <LL_APB1_GRP2_EnableClock+0x34>)
 8003976:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	46020c00 	.word	0x46020c00

08003994 <myprintf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define FILTER true

void myprintf(const char *fmt, ...){
 8003994:	b40f      	push	{r0, r1, r2, r3}
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;

	va_start(args, fmt);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039aa:	480b      	ldr	r0, [pc, #44]	; (80039d8 <myprintf+0x44>)
 80039ac:	f00a fd94 	bl	800e4d8 <vsniprintf>
	va_end(args);

	int len= strlen(buffer);
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <myprintf+0x44>)
 80039b2:	f7fc fc6d 	bl	8000290 <strlen>
 80039b6:	4603      	mov	r3, r0
 80039b8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c2:	4905      	ldr	r1, [pc, #20]	; (80039d8 <myprintf+0x44>)
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <myprintf+0x48>)
 80039c6:	f009 fc1d 	bl	800d204 <HAL_UART_Transmit>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039d4:	b004      	add	sp, #16
 80039d6:	4770      	bx	lr
 80039d8:	20000678 	.word	0x20000678
 80039dc:	200001e0 	.word	0x200001e0

080039e0 <header_to_sd>:

void header_to_sd(wav_header* header, FIL* fil, UINT* bw){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
	myprintf("start writing header");
 80039ec:	4838      	ldr	r0, [pc, #224]	; (8003ad0 <header_to_sd+0xf0>)
 80039ee:	f7ff ffd1 	bl	8003994 <myprintf>
	f_write(fil, &header->riff_header, 4, bw);
 80039f2:	68f9      	ldr	r1, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2204      	movs	r2, #4
 80039f8:	68b8      	ldr	r0, [r7, #8]
 80039fa:	f7ff fbda 	bl	80031b2 <f_write>
	f_write(fil, &header->wav_size, 4 , bw);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1d19      	adds	r1, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f7ff fbd3 	bl	80031b2 <f_write>
	f_write(fil, &header->wave_header, 4, bw);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f103 0108 	add.w	r1, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	68b8      	ldr	r0, [r7, #8]
 8003a18:	f7ff fbcb 	bl	80031b2 <f_write>
	myprintf("finished RIFF header");
 8003a1c:	482d      	ldr	r0, [pc, #180]	; (8003ad4 <header_to_sd+0xf4>)
 8003a1e:	f7ff ffb9 	bl	8003994 <myprintf>
	f_write(fil, &header->fmt_header, 4, bw);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f103 010c 	add.w	r1, r3, #12
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	68b8      	ldr	r0, [r7, #8]
 8003a2e:	f7ff fbc0 	bl	80031b2 <f_write>
	f_write(fil, &header->fmt_chunk_size, 4 , bw);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f103 0110 	add.w	r1, r3, #16
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f7ff fbb8 	bl	80031b2 <f_write>
	f_write(fil, &header->audio_format, 2 , bw);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f103 0114 	add.w	r1, r3, #20
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	68b8      	ldr	r0, [r7, #8]
 8003a4e:	f7ff fbb0 	bl	80031b2 <f_write>
	f_write(fil, &header->num_channels, 2 , bw);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f103 0116 	add.w	r1, r3, #22
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f7ff fba8 	bl	80031b2 <f_write>
	f_write(fil, &header->sample_rate, 4 , bw);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f103 0118 	add.w	r1, r3, #24
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f7ff fba0 	bl	80031b2 <f_write>
	f_write(fil, &header->byte_rate, 4 , bw);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f103 011c 	add.w	r1, r3, #28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f7ff fb98 	bl	80031b2 <f_write>
	f_write(fil, &header->sample_alignment, 2 , bw);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f103 0120 	add.w	r1, r3, #32
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	68b8      	ldr	r0, [r7, #8]
 8003a8e:	f7ff fb90 	bl	80031b2 <f_write>
	f_write(fil, &header->bit_depth, 2 , bw);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	68b8      	ldr	r0, [r7, #8]
 8003a9e:	f7ff fb88 	bl	80031b2 <f_write>
	f_write(fil, header->data_header, 4, bw);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	68b8      	ldr	r0, [r7, #8]
 8003aae:	f7ff fb80 	bl	80031b2 <f_write>
	f_write(fil, &header->data_bytes, 4 , bw);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2204      	movs	r2, #4
 8003abc:	68b8      	ldr	r0, [r7, #8]
 8003abe:	f7ff fb78 	bl	80031b2 <f_write>
	myprintf("Finished writing header");
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <header_to_sd+0xf8>)
 8003ac4:	f7ff ff66 	bl	8003994 <myprintf>
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	0800ffe8 	.word	0x0800ffe8
 8003ad4:	08010000 	.word	0x08010000
 8003ad8:	08010018 	.word	0x08010018
 8003adc:	00000000 	.word	0x00000000

08003ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	f5ad 2dab 	sub.w	sp, sp, #350208	; 0x55800
 8003ae6:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint16_t count=0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003af2:	f202 5236 	addw	r2, r2, #1334	; 0x536
 8003af6:	8013      	strh	r3, [r2, #0]
	  uint8_t readBuf_8b[50000];
	  uint16_t readBuf_16b[50000];
	  char filename[256];
	  uint16_t raw;
    char msg[10];
    uint8_t header_size=8;
 8003af8:	2308      	movs	r3, #8
 8003afa:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003afe:	f202 522f 	addw	r2, r2, #1327	; 0x52f
 8003b02:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b04:	f001 fe10 	bl	8005728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b08:	f000 f9f4 	bl	8003ef4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8003b0c:	f000 fa53 	bl	8003fb6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b10:	f000 fc02 	bl	8004318 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003b14:	f000 fa5e 	bl	8003fd4 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8003b18:	f000 facc 	bl	80040b4 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8003b1c:	f000 fb52 	bl	80041c4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003b20:	f000 fb86 	bl	8004230 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8003b24:	f000 fbd0 	bl	80042c8 <MX_USB_OTG_HS_HCD_Init>
  MX_MEMORYMAP_Init();
 8003b28:	f000 fad7 	bl	80040da <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 8003b2c:	f000 fadc 	bl	80040e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_FATFS_Init();
 8003b30:	f7fd fa62 	bl	8000ff8 <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo ~\r \n\r\n");
 8003b34:	48d4      	ldr	r0, [pc, #848]	; (8003e88 <main+0x3a8>)
 8003b36:	f7ff ff2d 	bl	8003994 <myprintf>
  HAL_Delay(1000);
 8003b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b3e:	f001 fe77 	bl	8005830 <HAL_Delay>

  FATFS FatFs;
  FIL fil;
  FRESULT fres;

  fres= f_mount(&FatFs, "/", 1);
 8003b42:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003b46:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	49cf      	ldr	r1, [pc, #828]	; (8003e8c <main+0x3ac>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f868 	bl	8002c24 <f_mount>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003b5a:	f202 522e 	addw	r2, r2, #1326	; 0x52e
 8003b5e:	7013      	strb	r3, [r2, #0]
  if(fres!= FR_OK)
 8003b60:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003b64:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <main+0xa2>
  {
	  myprintf("f_mount error (%i) \r\n", fres);
 8003b6e:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003b72:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	48c5      	ldr	r0, [pc, #788]	; (8003e90 <main+0x3b0>)
 8003b7c:	f7ff ff0a 	bl	8003994 <myprintf>
	  while(1);
 8003b80:	e7fe      	b.n	8003b80 <main+0xa0>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres= f_getfree("", &free_clusters, &getFreeFs);
 8003b82:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003b86:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8003b8a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003b8e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8003b92:	4619      	mov	r1, r3
 8003b94:	48bf      	ldr	r0, [pc, #764]	; (8003e94 <main+0x3b4>)
 8003b96:	f7ff fd9b 	bl	80036d0 <f_getfree>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003ba0:	f202 522e 	addw	r2, r2, #1326	; 0x52e
 8003ba4:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK) {
 8003ba6:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003baa:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <main+0xe8>
	  myprintf("f_getfree error (%i)\r\n",fres);
 8003bb4:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003bb8:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	48b5      	ldr	r0, [pc, #724]	; (8003e98 <main+0x3b8>)
 8003bc2:	f7ff fee7 	bl	8003994 <myprintf>
	  while(1);
 8003bc6:	e7fe      	b.n	8003bc6 <main+0xe6>
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8003bc8:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003bcc:	f6a3 43bc 	subw	r3, r3, #3260	; 0xcbc
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003bd6:	3b02      	subs	r3, #2
 8003bd8:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 8003bdc:	f6a2 42bc 	subw	r2, r2, #3260	; 0xcbc
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003bee:	f502 62a5 	add.w	r2, r2, #1320	; 0x528
 8003bf2:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 8003bf4:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003bf8:	f6a3 43bc 	subw	r3, r3, #3260	; 0xcbc
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003c02:	461a      	mov	r2, r3
 8003c04:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003c08:	f6a3 43b8 	subw	r3, r3, #3256	; 0xcb8
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003c16:	f202 5224 	addw	r2, r2, #1316	; 0x524
 8003c1a:	6013      	str	r3, [r2, #0]

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8003c1c:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003c20:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0859      	lsrs	r1, r3, #1
 8003c28:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003c2c:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	461a      	mov	r2, r3
 8003c36:	4899      	ldr	r0, [pc, #612]	; (8003e9c <main+0x3bc>)
 8003c38:	f7ff feac 	bl	8003994 <myprintf>

  bw_filter filt = create_filter(1000, 27027);
 8003c3c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003c40:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8003c44:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8003e78 <main+0x398>
 8003c48:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8003e80 <main+0x3a0>
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 fc67 	bl	8005520 <create_filter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003c52:	2200      	movs	r2, #0
 8003c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c58:	4891      	ldr	r0, [pc, #580]	; (8003ea0 <main+0x3c0>)
 8003c5a:	f004 f801 	bl	8007c60 <HAL_GPIO_WritePin>
//	  sprintf(msg, "%hu\r\n", raw);
//	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  HAL_Delay(1);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f001 fde6 	bl	8005830 <HAL_Delay>
    
    if (count<5) {
 8003c64:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003c68:	f203 5336 	addw	r3, r3, #1334	; 0x536
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d8ef      	bhi.n	8003c52 <main+0x172>
	  sprintf(filename, "r_%05d.wav",  count++);
 8003c72:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003c76:	f203 5336 	addw	r3, r3, #1334	; 0x536
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	f507 21ab 	add.w	r1, r7, #350208	; 0x55800
 8003c82:	f201 5136 	addw	r1, r1, #1334	; 0x536
 8003c86:	800a      	strh	r2, [r1, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003c8e:	3b4c      	subs	r3, #76	; 0x4c
 8003c90:	4984      	ldr	r1, [pc, #528]	; (8003ea4 <main+0x3c4>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00a fbd4 	bl	800e440 <siprintf>
	  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003c98:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8003c9c:	394c      	subs	r1, #76	; 0x4c
 8003c9e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003ca2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8003ca6:	221a      	movs	r2, #26
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f809 	bl	8002cc0 <f_open>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003cb4:	f202 522e 	addw	r2, r2, #1326	; 0x52e
 8003cb8:	7013      	strb	r3, [r2, #0]

	  if (fres == FR_OK) {
 8003cba:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003cbe:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <main+0x1f8>
		  myprintf("I was able to open %s for writing\r\n",filename);
 8003cc8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003ccc:	3b4c      	subs	r3, #76	; 0x4c
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4875      	ldr	r0, [pc, #468]	; (8003ea8 <main+0x3c8>)
 8003cd2:	f7ff fe5f 	bl	8003994 <myprintf>
 8003cd6:	e008      	b.n	8003cea <main+0x20a>
	  } else {
		  myprintf("f_open error (%i)\r\n", fres);
 8003cd8:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003cdc:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4871      	ldr	r0, [pc, #452]	; (8003eac <main+0x3cc>)
 8003ce6:	f7ff fe55 	bl	8003994 <myprintf>
	  }

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	4870      	ldr	r0, [pc, #448]	; (8003eb0 <main+0x3d0>)
 8003cee:	f003 ffcf 	bl	8007c90 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cf6:	f001 fd9b 	bl	8005830 <HAL_Delay>

//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, 1);

	  wav_header header = create_PCM_SC_header_correct(50000);
 8003cfa:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003cfe:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 8003d02:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fbe5 	bl	80054d6 <create_PCM_SC_header_correct>
//	  myprintf("swapped manual: \r\n%x\r\n", ((header.data_bytes<<24) & 0xff000000) |
//			  ((header.data_bytes<<8) & 0x00ff0000) |
//			  ((header.data_bytes>>8) & 0x0000ff00) |
//			((header.data_bytes>>24) & 0x000000ff) );
//	  uint32_t swapped = endian_swap_32_ret(header.data_bytes);
	  myprintf("fmt_chunk_size: %d\r\n", header.fmt_chunk_size);
 8003d0c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003d10:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	4619      	mov	r1, r3
 8003d18:	4866      	ldr	r0, [pc, #408]	; (8003eb4 <main+0x3d4>)
 8003d1a:	f7ff fe3b 	bl	8003994 <myprintf>
	  myprintf("fmt_chunk_size: %x\r\n", header.fmt_chunk_size);
 8003d1e:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003d22:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4863      	ldr	r0, [pc, #396]	; (8003eb8 <main+0x3d8>)
 8003d2c:	f7ff fe32 	bl	8003994 <myprintf>


//	  endian_swap(&swapped, header.data_bytes);
//	  myprintf("data_size swapped: %d\r\n", swapped);
//	  myprintf("data_size swapped hex: %x\r\n", swapped);
	  header_to_sd(&header, &fil, &bw);
 8003d30:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d34:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 8003d38:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8003d3c:	f2a1 41b4 	subw	r1, r1, #1204	; 0x4b4
 8003d40:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d44:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fe49 	bl	80039e0 <header_to_sd>
//	  char h[37];
//	  sprintf(h, ((char*) &header), sizeof(header));
//	  h[37] = 0x00;
//	  myprintf("Header, size: %d, cont: %s\r\n", h);

	  uint32_t start = HAL_GetTick();
 8003d4e:	f001 fd63 	bl	8005818 <HAL_GetTick>
 8003d52:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003d56:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003d5a:	6018      	str	r0, [r3, #0]
	  myprintf("Clock at start: %d \r\n", start);
 8003d5c:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003d60:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	4855      	ldr	r0, [pc, #340]	; (8003ebc <main+0x3dc>)
 8003d68:	f7ff fe14 	bl	8003994 <myprintf>
	  for (int i=0; i<50000; i++) { // Used to be i+=2. Changed it to i+=1. Also increased size from 5 to 25000, changed buffer to 32 bit
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003d72:	f502 62a6 	add.w	r2, r2, #1328	; 0x530
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e022      	b.n	8003dc0 <main+0x2e0>
//		endian_swap(&(readBuf[i]), HAL_ADC_GetValue(&hadc1));
		HAL_ADC_Start(&hadc1);
 8003d7a:	4851      	ldr	r0, [pc, #324]	; (8003ec0 <main+0x3e0>)
 8003d7c:	f002 fbbe 	bl	80064fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d84:	484e      	ldr	r0, [pc, #312]	; (8003ec0 <main+0x3e0>)
 8003d86:	f002 fc97 	bl	80066b8 <HAL_ADC_PollForConversion>
#if FILTER
		readBuf_16b[i] = filter(filt, (HAL_ADC_GetValue(&hadc1) & 0x0000ffff));
#else
		readBuf_16b[i] = (HAL_ADC_GetValue(&hadc1) & 0x0000ffff);
 8003d8a:	484d      	ldr	r0, [pc, #308]	; (8003ec0 <main+0x3e0>)
 8003d8c:	f002 fde6 	bl	800695c <HAL_ADC_GetValue>
 8003d90:	4603      	mov	r3, r0
 8003d92:	b299      	uxth	r1, r3
 8003d94:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003d98:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8003d9c:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003da0:	f502 62a6 	add.w	r2, r2, #1328	; 0x530
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for (int i=0; i<50000; i++) { // Used to be i+=2. Changed it to i+=1. Also increased size from 5 to 25000, changed buffer to 32 bit
 8003daa:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003dae:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003dba:	f502 62a6 	add.w	r2, r2, #1328	; 0x530
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003dc4:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	ddd3      	ble.n	8003d7a <main+0x29a>
#endif
//		for (int i = 1; i < 22; i++) {
//			HAL_ADC_GetValue(&hadc1);
//		}
	  }
	  uint32_t end = HAL_GetTick();
 8003dd2:	f001 fd21 	bl	8005818 <HAL_GetTick>
 8003dd6:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003dda:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003dde:	6018      	str	r0, [r3, #0]

	  myprintf("Clock at end: %d\r\n", end);
 8003de0:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003de4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <main+0x3e4>)
 8003dec:	f7ff fdd2 	bl	8003994 <myprintf>
	  myprintf("Record time: %d ms\r\n", (end - start));
 8003df0:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003df4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003dfe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	482f      	ldr	r0, [pc, #188]	; (8003ec8 <main+0x3e8>)
 8003e0a:	f7ff fdc3 	bl	8003994 <myprintf>

	  myprintf("First value: %x", readBuf_16b[0]);
 8003e0e:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 8003e12:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	482c      	ldr	r0, [pc, #176]	; (8003ecc <main+0x3ec>)
 8003e1c:	f7ff fdba 	bl	8003994 <myprintf>

	  fres = f_write(&fil,&readBuf_16b, 50000 * 2, &bytesWrote);
 8003e20:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e24:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8003e28:	f607 5138 	addw	r1, r7, #3384	; 0xd38
 8003e2c:	f2a1 714c 	subw	r1, r1, #1868	; 0x74c
 8003e30:	f507 60a7 	add.w	r0, r7, #1336	; 0x538
 8003e34:	f2a0 40b4 	subw	r0, r0, #1204	; 0x4b4
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <main+0x3f0>)
 8003e3a:	f7ff f9ba 	bl	80031b2 <f_write>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003e44:	f202 522e 	addw	r2, r2, #1326	; 0x52e
 8003e48:	7013      	strb	r3, [r2, #0]
	  count++;
 8003e4a:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003e4e:	f203 5336 	addw	r3, r3, #1334	; 0x536
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	f507 22ab 	add.w	r2, r7, #350208	; 0x55800
 8003e5a:	f202 5236 	addw	r2, r2, #1334	; 0x536
 8003e5e:	8013      	strh	r3, [r2, #0]

	  if(fres == FR_OK) {
 8003e60:	f507 23ab 	add.w	r3, r7, #350208	; 0x55800
 8003e64:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d134      	bne.n	8003ed8 <main+0x3f8>
			myprintf("written to file\r\n");
 8003e6e:	4819      	ldr	r0, [pc, #100]	; (8003ed4 <main+0x3f4>)
 8003e70:	f7ff fd90 	bl	8003994 <myprintf>
 8003e74:	e033      	b.n	8003ede <main+0x3fe>
 8003e76:	bf00      	nop
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	40da64c0 	.word	0x40da64c0
 8003e80:	00000000 	.word	0x00000000
 8003e84:	408f4000 	.word	0x408f4000
 8003e88:	08010030 	.word	0x08010030
 8003e8c:	08010048 	.word	0x08010048
 8003e90:	0801004c 	.word	0x0801004c
 8003e94:	08010064 	.word	0x08010064
 8003e98:	08010068 	.word	0x08010068
 8003e9c:	08010080 	.word	0x08010080
 8003ea0:	42020000 	.word	0x42020000
 8003ea4:	080100c8 	.word	0x080100c8
 8003ea8:	080100d4 	.word	0x080100d4
 8003eac:	080100f8 	.word	0x080100f8
 8003eb0:	42020400 	.word	0x42020400
 8003eb4:	0801010c 	.word	0x0801010c
 8003eb8:	08010124 	.word	0x08010124
 8003ebc:	0801013c 	.word	0x0801013c
 8003ec0:	200000c4 	.word	0x200000c4
 8003ec4:	08010154 	.word	0x08010154
 8003ec8:	08010168 	.word	0x08010168
 8003ecc:	08010180 	.word	0x08010180
 8003ed0:	000186a0 	.word	0x000186a0
 8003ed4:	08010190 	.word	0x08010190
	  } else {
			myprintf("f_write error (%i)\r\n");
 8003ed8:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <main+0x410>)
 8003eda:	f7ff fd5b 	bl	8003994 <myprintf>
	  }

	  f_close(&fil);
 8003ede:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003ee2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fbca 	bl	8003680 <f_close>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003eec:	e6b1      	b.n	8003c52 <main+0x172>
 8003eee:	bf00      	nop
 8003ef0:	080101a4 	.word	0x080101a4

08003ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b09e      	sub	sp, #120	; 0x78
 8003ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efa:	f107 0318 	add.w	r3, r7, #24
 8003efe:	2260      	movs	r2, #96	; 0x60
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f00a faf6 	bl	800e4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f08:	463b      	mov	r3, r7
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8003f18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003f1c:	f003 ff58 	bl	8007dd0 <HAL_PWREx_ControlVoltageScaling>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003f26:	f000 fad5 	bl	80044d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8003f2a:	2312      	movs	r3, #18
 8003f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f34:	2310      	movs	r3, #16
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f44:	2302      	movs	r3, #2
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8003f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003f52:	2303      	movs	r3, #3
 8003f54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003f56:	2308      	movs	r3, #8
 8003f58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f62:	2302      	movs	r3, #2
 8003f64:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8003f66:	230c      	movs	r3, #12
 8003f68:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f6e:	f107 0318 	add.w	r3, r7, #24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f004 f856 	bl	8008024 <HAL_RCC_OscConfig>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003f7e:	f000 faa9 	bl	80044d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f82:	231f      	movs	r3, #31
 8003f84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003f9a:	463b      	mov	r3, r7
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 ff1c 	bl	8008ddc <HAL_RCC_ClockConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003faa:	f000 fa93 	bl	80044d4 <Error_Handler>
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3778      	adds	r7, #120	; 0x78
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8003fba:	f003 fff5 	bl	8007fa8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	f003 ff92 	bl	8007ee8 <HAL_PWREx_ConfigSupply>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <SystemPower_Config+0x18>
  {
    Error_Handler();
 8003fca:	f000 fa83 	bl	80044d4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fda:	463b      	mov	r3, r7
 8003fdc:	2220      	movs	r2, #32
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f00a fa87 	bl	800e4f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8003fe8:	4a30      	ldr	r2, [pc, #192]	; (80040ac <MX_ADC1_Init+0xd8>)
 8003fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004000:	2200      	movs	r2, #0
 8004002:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <MX_ADC1_Init+0xd4>)
 800400c:	2204      	movs	r2, #4
 800400e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004012:	2200      	movs	r2, #0
 8004014:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004020:	2201      	movs	r2, #1
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004026:	2200      	movs	r2, #0
 8004028:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <MX_ADC1_Init+0xd4>)
 800402e:	2200      	movs	r2, #0
 8004030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004034:	2200      	movs	r2, #0
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <MX_ADC1_Init+0xd4>)
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004042:	2200      	movs	r2, #0
 8004044:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <MX_ADC1_Init+0xd4>)
 800404e:	2200      	movs	r2, #0
 8004050:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004054:	2200      	movs	r2, #0
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <MX_ADC1_Init+0xd4>)
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004060:	4811      	ldr	r0, [pc, #68]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004062:	f001 ff63 	bl	8005f2c <HAL_ADC_Init>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800406c:	f000 fa32 	bl	80044d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <MX_ADC1_Init+0xdc>)
 8004072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004074:	2306      	movs	r3, #6
 8004076:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8004078:	2306      	movs	r3, #6
 800407a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800407c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004080:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004082:	2304      	movs	r3, #4
 8004084:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800408a:	463b      	mov	r3, r7
 800408c:	4619      	mov	r1, r3
 800408e:	4806      	ldr	r0, [pc, #24]	; (80040a8 <MX_ADC1_Init+0xd4>)
 8004090:	f002 fc72 	bl	8006978 <HAL_ADC_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800409a:	f000 fa1b 	bl	80044d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800409e:	bf00      	nop
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200000c4 	.word	0x200000c4
 80040ac:	42028000 	.word	0x42028000
 80040b0:	0c000008 	.word	0x0c000008

080040b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80040b8:	2000      	movs	r0, #0
 80040ba:	f003 fe59 	bl	8007d70 <HAL_ICACHE_ConfigAssociativityMode>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80040c4:	f000 fa06 	bl	80044d4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80040c8:	f003 fe72 	bl	8007db0 <HAL_ICACHE_Enable>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80040d2:	f000 f9ff 	bl	80044d4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}

080040da <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80040f8:	4b30      	ldr	r3, [pc, #192]	; (80041bc <MX_SPI1_Init+0xd4>)
 80040fa:	4a31      	ldr	r2, [pc, #196]	; (80041c0 <MX_SPI1_Init+0xd8>)
 80040fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004100:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004106:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <MX_SPI1_Init+0xd4>)
 800410e:	2207      	movs	r2, #7
 8004110:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <MX_SPI1_Init+0xd4>)
 800411a:	2200      	movs	r2, #0
 800411c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004120:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004124:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004128:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800412c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004130:	2200      	movs	r2, #0
 8004132:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004136:	2200      	movs	r2, #0
 8004138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <MX_SPI1_Init+0xd4>)
 800413c:	2200      	movs	r2, #0
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004142:	2207      	movs	r2, #7
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004148:	2200      	movs	r2, #0
 800414a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <MX_SPI1_Init+0xd4>)
 800414e:	2200      	movs	r2, #0
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004154:	2200      	movs	r2, #0
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <MX_SPI1_Init+0xd4>)
 800415a:	2200      	movs	r2, #0
 800415c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004160:	2200      	movs	r2, #0
 8004162:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004166:	2200      	movs	r2, #0
 8004168:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <MX_SPI1_Init+0xd4>)
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004172:	2200      	movs	r2, #0
 8004174:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004178:	2200      	movs	r2, #0
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <MX_SPI1_Init+0xd4>)
 800417e:	2200      	movs	r2, #0
 8004180:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004182:	480e      	ldr	r0, [pc, #56]	; (80041bc <MX_SPI1_Init+0xd4>)
 8004184:	f008 f952 	bl	800c42c <HAL_SPI_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800418e:	f000 f9a1 	bl	80044d4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8004196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800419a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <MX_SPI1_Init+0xd4>)
 80041a6:	f008 ff9c 	bl	800d0e2 <HAL_SPIEx_SetConfigAutonomousMode>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80041b0:	f000 f990 	bl	80044d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000150 	.word	0x20000150
 80041c0:	40013000 	.word	0x40013000

080041c4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ca:	463b      	mov	r3, r7
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
 80041d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80041da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041de:	f7ff fbbd 	bl	800395c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80041e2:	2002      	movs	r0, #2
 80041e4:	f7ff fb9e 	bl	8003924 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80041e8:	2001      	movs	r0, #1
 80041ea:	f7ff fb9b 	bl	8003924 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80041ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80041f4:	2303      	movs	r3, #3
 80041f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041fc:	463b      	mov	r3, r7
 80041fe:	4619      	mov	r1, r3
 8004200:	4809      	ldr	r0, [pc, #36]	; (8004228 <MX_UCPD1_Init+0x64>)
 8004202:	f009 fea2 	bl	800df4a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800420c:	2303      	movs	r3, #3
 800420e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004214:	463b      	mov	r3, r7
 8004216:	4619      	mov	r1, r3
 8004218:	4804      	ldr	r0, [pc, #16]	; (800422c <MX_UCPD1_Init+0x68>)
 800421a:	f009 fe96 	bl	800df4a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	42020400 	.word	0x42020400
 800422c:	42020000 	.word	0x42020000

08004230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <MX_USART1_UART_Init+0x94>)
 8004238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800423c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004256:	220c      	movs	r2, #12
 8004258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425a:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004268:	2200      	movs	r2, #0
 800426a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800426e:	2200      	movs	r2, #0
 8004270:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 8004274:	2200      	movs	r2, #0
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004278:	4811      	ldr	r0, [pc, #68]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800427a:	f008 ff73 	bl	800d164 <HAL_UART_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004284:	f000 f926 	bl	80044d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004288:	2100      	movs	r1, #0
 800428a:	480d      	ldr	r0, [pc, #52]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800428c:	f009 fc48 	bl	800db20 <HAL_UARTEx_SetTxFifoThreshold>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004296:	f000 f91d 	bl	80044d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800429a:	2100      	movs	r1, #0
 800429c:	4808      	ldr	r0, [pc, #32]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 800429e:	f009 fc7d 	bl	800db9c <HAL_UARTEx_SetRxFifoThreshold>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042a8:	f000 f914 	bl	80044d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042ac:	4804      	ldr	r0, [pc, #16]	; (80042c0 <MX_USART1_UART_Init+0x90>)
 80042ae:	f009 fbfe 	bl	800daae <HAL_UARTEx_DisableFifoMode>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042b8:	f000 f90c 	bl	80044d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200001e0 	.word	0x200001e0
 80042c4:	40013800 	.word	0x40013800

080042c8 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042ce:	4a11      	ldr	r2, [pc, #68]	; (8004314 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 80042d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042d4:	2210      	movs	r2, #16
 80042d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042e6:	2203      	movs	r2, #3
 80042e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80042fe:	f003 fce1 	bl	8007cc4 <HAL_HCD_Init>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8004308:	f000 f8e4 	bl	80044d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000274 	.word	0x20000274
 8004314:	42040000 	.word	0x42040000

08004318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	60da      	str	r2, [r3, #12]
 800432c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800432e:	4b63      	ldr	r3, [pc, #396]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800433e:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800434c:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800434e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004352:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004358:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800435c:	4b57      	ldr	r3, [pc, #348]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800436a:	4b54      	ldr	r3, [pc, #336]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800436c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004370:	4a52      	ldr	r2, [pc, #328]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800437a:	4b50      	ldr	r3, [pc, #320]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004388:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	4a4b      	ldr	r2, [pc, #300]	; (80044bc <MX_GPIO_Init+0x1a4>)
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004398:	4b48      	ldr	r3, [pc, #288]	; (80044bc <MX_GPIO_Init+0x1a4>)
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043a6:	4b45      	ldr	r3, [pc, #276]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ac:	4a43      	ldr	r2, [pc, #268]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043ae:	f043 0308 	orr.w	r3, r3, #8
 80043b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <MX_GPIO_Init+0x1a4>)
 80043d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80043e2:	2201      	movs	r2, #1
 80043e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043e8:	4835      	ldr	r0, [pc, #212]	; (80044c0 <MX_GPIO_Init+0x1a8>)
 80043ea:	f003 fc39 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2104      	movs	r1, #4
 80043f2:	4834      	ldr	r0, [pc, #208]	; (80044c4 <MX_GPIO_Init+0x1ac>)
 80043f4:	f003 fc34 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	4832      	ldr	r0, [pc, #200]	; (80044c8 <MX_GPIO_Init+0x1b0>)
 80043fe:	f003 fc2f 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8004402:	2200      	movs	r2, #0
 8004404:	21a0      	movs	r1, #160	; 0xa0
 8004406:	4831      	ldr	r0, [pc, #196]	; (80044cc <MX_GPIO_Init+0x1b4>)
 8004408:	f003 fc2a 	bl	8007c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800440c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <MX_GPIO_Init+0x1b8>)
 8004414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4619      	mov	r1, r3
 8004420:	4829      	ldr	r0, [pc, #164]	; (80044c8 <MX_GPIO_Init+0x1b0>)
 8004422:	f003 fa45 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8004426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800442a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	4619      	mov	r1, r3
 800443a:	4824      	ldr	r0, [pc, #144]	; (80044cc <MX_GPIO_Init+0x1b4>)
 800443c:	f003 fa38 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8004440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004446:	2301      	movs	r3, #1
 8004448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8004452:	f107 031c 	add.w	r3, r7, #28
 8004456:	4619      	mov	r1, r3
 8004458:	4819      	ldr	r0, [pc, #100]	; (80044c0 <MX_GPIO_Init+0x1a8>)
 800445a:	f003 fa29 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800445e:	2304      	movs	r3, #4
 8004460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004462:	2301      	movs	r3, #1
 8004464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446a:	2300      	movs	r3, #0
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	4619      	mov	r1, r3
 8004474:	4813      	ldr	r0, [pc, #76]	; (80044c4 <MX_GPIO_Init+0x1ac>)
 8004476:	f003 fa1b 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800447e:	2301      	movs	r3, #1
 8004480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	2300      	movs	r3, #0
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	4619      	mov	r1, r3
 8004490:	480d      	ldr	r0, [pc, #52]	; (80044c8 <MX_GPIO_Init+0x1b0>)
 8004492:	f003 fa0d 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8004496:	23a0      	movs	r3, #160	; 0xa0
 8004498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449a:	2301      	movs	r3, #1
 800449c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a2:	2300      	movs	r3, #0
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a6:	f107 031c 	add.w	r3, r7, #28
 80044aa:	4619      	mov	r1, r3
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <MX_GPIO_Init+0x1b4>)
 80044ae:	f003 f9ff 	bl	80078b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80044b2:	bf00      	nop
 80044b4:	3730      	adds	r7, #48	; 0x30
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	46020c00 	.word	0x46020c00
 80044c0:	42020c00 	.word	0x42020c00
 80044c4:	42021800 	.word	0x42021800
 80044c8:	42020800 	.word	0x42020800
 80044cc:	42020400 	.word	0x42020400
 80044d0:	10110000 	.word	0x10110000

080044d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044d8:	b672      	cpsid	i
}
 80044da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044dc:	e7fe      	b.n	80044dc <Error_Handler+0x8>
	...

080044e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_MspInit+0x30>)
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <HAL_MspInit+0x30>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_MspInit+0x30>)
 80044f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8004504:	f003 fd60 	bl	8007fc8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	46020c00 	.word	0x46020c00

08004514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b0c0      	sub	sp, #256	; 0x100
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	22d8      	movs	r2, #216	; 0xd8
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f009 ffdd 	bl	800e4f4 <memset>
  if(hadc->Instance==ADC1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <HAL_ADC_MspInit+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d140      	bne.n	80045c6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8004544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8004550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	4618      	mov	r0, r3
 800455e:	f005 f80d 	bl	800957c <HAL_RCCEx_PeriphCLKConfig>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8004568:	f7ff ffb4 	bl	80044d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 800456e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 8004574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004578:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800457c:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 800457e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004590:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <HAL_ADC_MspInit+0xc0>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80045a8:	2304      	movs	r3, #4
 80045aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045ae:	2303      	movs	r3, #3
 80045b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80045ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80045be:	4619      	mov	r1, r3
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <HAL_ADC_MspInit+0xc4>)
 80045c2:	f003 f975 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045c6:	bf00      	nop
 80045c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	42028000 	.word	0x42028000
 80045d4:	46020c00 	.word	0x46020c00
 80045d8:	42020800 	.word	0x42020800

080045dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0c0      	sub	sp, #256	; 0x100
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	22d8      	movs	r2, #216	; 0xd8
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f009 ff79 	bl	800e4f4 <memset>
  if(hspi->Instance==SPI1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <HAL_SPI_MspInit+0xc8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d146      	bne.n	800469a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800460c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8004618:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800461c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f004 ffa9 	bl	800957c <HAL_RCCEx_PeriphCLKConfig>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8004630:	f7ff ff50 	bl	80044d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 8004636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463a:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 800463c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004640:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 8004646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800464a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_SPI_MspInit+0xcc>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004670:	23e0      	movs	r3, #224	; 0xe0
 8004672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004676:	2302      	movs	r3, #2
 8004678:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004688:	2305      	movs	r3, #5
 800468a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004692:	4619      	mov	r1, r3
 8004694:	4805      	ldr	r0, [pc, #20]	; (80046ac <HAL_SPI_MspInit+0xd0>)
 8004696:	f003 f90b 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800469a:	bf00      	nop
 800469c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40013000 	.word	0x40013000
 80046a8:	46020c00 	.word	0x46020c00
 80046ac:	42020000 	.word	0x42020000

080046b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0c0      	sub	sp, #256	; 0x100
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	22d8      	movs	r2, #216	; 0xd8
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f009 ff0f 	bl	800e4f4 <memset>
  if(huart->Instance==USART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_UART_MspInit+0xc8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d145      	bne.n	800476c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046e0:	f04f 0201 	mov.w	r2, #1
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046ec:	2300      	movs	r3, #0
 80046ee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f004 ff41 	bl	800957c <HAL_RCCEx_PeriphCLKConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8004700:	f7ff fee8 	bl	80044d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_UART_MspInit+0xcc>)
 8004706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <HAL_UART_MspInit+0xcc>)
 800470c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004710:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_UART_MspInit+0xcc>)
 8004716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800471a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_UART_MspInit+0xcc>)
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_UART_MspInit+0xcc>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_UART_MspInit+0xcc>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004740:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800475a:	2307      	movs	r3, #7
 800475c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004760:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004764:	4619      	mov	r1, r3
 8004766:	4806      	ldr	r0, [pc, #24]	; (8004780 <HAL_UART_MspInit+0xd0>)
 8004768:	f003 f8a2 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800476c:	bf00      	nop
 800476e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40013800 	.word	0x40013800
 800477c:	46020c00 	.word	0x46020c00
 8004780:	42020000 	.word	0x42020000

08004784 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0bc      	sub	sp, #240	; 0xf0
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800478c:	f107 0318 	add.w	r3, r7, #24
 8004790:	22d8      	movs	r2, #216	; 0xd8
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f009 fead 	bl	800e4f4 <memset>
  if(hhcd->Instance==USB_OTG_HS)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a33      	ldr	r2, [pc, #204]	; (800486c <HAL_HCD_MspInit+0xe8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d15e      	bne.n	8004862 <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0308 	mov.w	r3, #8
 80047ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80047b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047b8:	f107 0318 	add.w	r3, r7, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fedd 	bl	800957c <HAL_RCCEx_PeriphCLKConfig>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 80047c8:	f7ff fe84 	bl	80044d4 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80047cc:	200c      	movs	r0, #12
 80047ce:	f001 f867 	bl	80058a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80047d2:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_HCD_MspInit+0xec>)
 80047d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d8:	4a25      	ldr	r2, [pc, #148]	; (8004870 <HAL_HCD_MspInit+0xec>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <HAL_HCD_MspInit+0xec>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_HCD_MspInit+0xec>)
 80047f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_HCD_MspInit+0xec>)
 80047f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_HCD_MspInit+0xec>)
 8004802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_HCD_MspInit+0xec>)
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11b      	bne.n	8004854 <HAL_HCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_HCD_MspInit+0xec>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <HAL_HCD_MspInit+0xec>)
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_HCD_MspInit+0xec>)
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800483a:	f003 fba5 	bl	8007f88 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800483e:	f003 fbd3 	bl	8007fe8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_HCD_MspInit+0xec>)
 8004844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_HCD_MspInit+0xec>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004852:	e003      	b.n	800485c <HAL_HCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8004854:	f003 fb98 	bl	8007f88 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8004858:	f003 fbc6 	bl	8007fe8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800485c:	2001      	movs	r0, #1
 800485e:	f001 f80b 	bl	8005878 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8004862:	bf00      	nop
 8004864:	37f0      	adds	r7, #240	; 0xf0
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	42040000 	.word	0x42040000
 8004870:	46020c00 	.word	0x46020c00

08004874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <NMI_Handler+0x4>

0800487a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <HardFault_Handler+0x4>

08004880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <MemManage_Handler+0x4>

08004886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler+0x4>

08004892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048c0:	f000 ff96 	bl	80057f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048c4:	bf00      	nop
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <_sbrk+0x5c>)
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <_sbrk+0x60>)
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048dc:	4b13      	ldr	r3, [pc, #76]	; (800492c <_sbrk+0x64>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <_sbrk+0x64>)
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <_sbrk+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <_sbrk+0x64>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d207      	bcs.n	8004908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048f8:	f009 fe04 	bl	800e504 <__errno>
 80048fc:	4603      	mov	r3, r0
 80048fe:	220c      	movs	r2, #12
 8004900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004906:	e009      	b.n	800491c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <_sbrk+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <_sbrk+0x64>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	4a05      	ldr	r2, [pc, #20]	; (800492c <_sbrk+0x64>)
 8004918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20270000 	.word	0x20270000
 8004928:	00000400 	.word	0x00000400
 800492c:	20000778 	.word	0x20000778
 8004930:	200008d8 	.word	0x200008d8

08004934 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004938:	4b18      	ldr	r3, [pc, #96]	; (800499c <SystemInit+0x68>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	4a17      	ldr	r2, [pc, #92]	; (800499c <SystemInit+0x68>)
 8004940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <SystemInit+0x6c>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <SystemInit+0x6c>)
 8004950:	2200      	movs	r2, #0
 8004952:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <SystemInit+0x6c>)
 8004956:	2200      	movs	r2, #0
 8004958:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <SystemInit+0x6c>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <SystemInit+0x6c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <SystemInit+0x6c>)
 8004966:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800496a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800496e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <SystemInit+0x6c>)
 8004972:	2200      	movs	r2, #0
 8004974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <SystemInit+0x6c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <SystemInit+0x6c>)
 800497c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <SystemInit+0x6c>)
 8004984:	2200      	movs	r2, #0
 8004986:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <SystemInit+0x68>)
 800498a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800498e:	609a      	str	r2, [r3, #8]
  #endif
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000ed00 	.word	0xe000ed00
 80049a0:	46020c00 	.word	0x46020c00

080049a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f9d7 	bl	8004d64 <USER_SPI_initialize>
 80049b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fab5 	bl	8004f3c <USER_SPI_status>
 80049d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 80049ec:	7bf8      	ldrb	r0, [r7, #15]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	f000 fab8 	bl	8004f68 <USER_SPI_read>
 80049f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004a12:	7bf8      	ldrb	r0, [r7, #15]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	f000 fb0b 	bl	8005034 <USER_SPI_write>
 8004a1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	603a      	str	r2, [r7, #0]
 8004a32:	71fb      	strb	r3, [r7, #7]
 8004a34:	460b      	mov	r3, r1
 8004a36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004a38:	79b9      	ldrb	r1, [r7, #6]
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fb74 	bl	800512c <USER_SPI_ioctl>
 8004a44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004a58:	f000 fede 	bl	8005818 <HAL_GetTick>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <SPI_Timer_On+0x20>)
 8004a60:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004a62:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <SPI_Timer_On+0x24>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000780 	.word	0x20000780
 8004a74:	20000784 	.word	0x20000784

08004a78 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004a7c:	f000 fecc 	bl	8005818 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <SPI_Timer_Status+0x24>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <SPI_Timer_Status+0x28>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	bf34      	ite	cc
 8004a90:	2301      	movcc	r3, #1
 8004a92:	2300      	movcs	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000780 	.word	0x20000780
 8004aa0:	20000784 	.word	0x20000784

08004aa4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004aae:	f107 020f 	add.w	r2, r7, #15
 8004ab2:	1df9      	adds	r1, r7, #7
 8004ab4:	2332      	movs	r3, #50	; 0x32
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4804      	ldr	r0, [pc, #16]	; (8004acc <xchg_spi+0x28>)
 8004abc:	f007 ffea 	bl	800ca94 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000150 	.word	0x20000150

08004ad0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e00a      	b.n	8004af6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	18d4      	adds	r4, r2, r3
 8004ae6:	20ff      	movs	r0, #255	; 0xff
 8004ae8:	f7ff ffdc 	bl	8004aa4 <xchg_spi>
 8004aec:	4603      	mov	r3, r0
 8004aee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d3f0      	bcc.n	8004ae0 <rcvr_spi_multi+0x10>
	}
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4803      	ldr	r0, [pc, #12]	; (8004b2c <xmit_spi_multi+0x24>)
 8004b1e:	f007 fd9b 	bl	800c658 <HAL_SPI_Transmit>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000150 	.word	0x20000150

08004b30 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004b38:	f000 fe6e 	bl	8005818 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004b42:	20ff      	movs	r0, #255	; 0xff
 8004b44:	f7ff ffae 	bl	8004aa4 <xchg_spi>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2bff      	cmp	r3, #255	; 0xff
 8004b50:	d007      	beq.n	8004b62 <wait_ready+0x32>
 8004b52:	f000 fe61 	bl	8005818 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d8ef      	bhi.n	8004b42 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2bff      	cmp	r3, #255	; 0xff
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b82:	4804      	ldr	r0, [pc, #16]	; (8004b94 <despiselect+0x1c>)
 8004b84:	f003 f86c 	bl	8007c60 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004b88:	20ff      	movs	r0, #255	; 0xff
 8004b8a:	f7ff ff8b 	bl	8004aa4 <xchg_spi>

}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	42020c00 	.word	0x42020c00

08004b98 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ba2:	480a      	ldr	r0, [pc, #40]	; (8004bcc <spiselect+0x34>)
 8004ba4:	f003 f85c 	bl	8007c60 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004ba8:	20ff      	movs	r0, #255	; 0xff
 8004baa:	f7ff ff7b 	bl	8004aa4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004bae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bb2:	f7ff ffbd 	bl	8004b30 <wait_ready>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <spiselect+0x28>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e002      	b.n	8004bc6 <spiselect+0x2e>

	despiselect();
 8004bc0:	f7ff ffda 	bl	8004b78 <despiselect>
	return 0;	/* Timeout */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	42020c00 	.word	0x42020c00

08004bd0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004bda:	20c8      	movs	r0, #200	; 0xc8
 8004bdc:	f7ff ff38 	bl	8004a50 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004be0:	20ff      	movs	r0, #255	; 0xff
 8004be2:	f7ff ff5f 	bl	8004aa4 <xchg_spi>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2bff      	cmp	r3, #255	; 0xff
 8004bee:	d104      	bne.n	8004bfa <rcvr_datablock+0x2a>
 8004bf0:	f7ff ff42 	bl	8004a78 <SPI_Timer_Status>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f2      	bne.n	8004be0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8004bfe:	d001      	beq.n	8004c04 <rcvr_datablock+0x34>
 8004c00:	2300      	movs	r3, #0
 8004c02:	e00a      	b.n	8004c1a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004c04:	6839      	ldr	r1, [r7, #0]
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff62 	bl	8004ad0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004c0c:	20ff      	movs	r0, #255	; 0xff
 8004c0e:	f7ff ff49 	bl	8004aa4 <xchg_spi>
 8004c12:	20ff      	movs	r0, #255	; 0xff
 8004c14:	f7ff ff46 	bl	8004aa4 <xchg_spi>

	return 1;						/* Function succeeded */
 8004c18:	2301      	movs	r3, #1
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c32:	f7ff ff7d 	bl	8004b30 <wait_ready>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <xmit_datablock+0x1e>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e01e      	b.n	8004c7e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ff2e 	bl	8004aa4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	2bfd      	cmp	r3, #253	; 0xfd
 8004c4c:	d016      	beq.n	8004c7c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff58 	bl	8004b08 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004c58:	20ff      	movs	r0, #255	; 0xff
 8004c5a:	f7ff ff23 	bl	8004aa4 <xchg_spi>
 8004c5e:	20ff      	movs	r0, #255	; 0xff
 8004c60:	f7ff ff20 	bl	8004aa4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004c64:	20ff      	movs	r0, #255	; 0xff
 8004c66:	f7ff ff1d 	bl	8004aa4 <xchg_spi>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2b05      	cmp	r3, #5
 8004c76:	d001      	beq.n	8004c7c <xmit_datablock+0x5a>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <xmit_datablock+0x5c>
	}
	return 1;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	6039      	str	r1, [r7, #0]
 8004c90:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da0e      	bge.n	8004cb8 <send_cmd+0x32>
		cmd &= 0x7F;
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2037      	movs	r0, #55	; 0x37
 8004ca6:	f7ff ffee 	bl	8004c86 <send_cmd>
 8004caa:	4603      	mov	r3, r0
 8004cac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d901      	bls.n	8004cb8 <send_cmd+0x32>
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	e051      	b.n	8004d5c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d008      	beq.n	8004cd0 <send_cmd+0x4a>
		despiselect();
 8004cbe:	f7ff ff5b 	bl	8004b78 <despiselect>
		if (!spiselect()) return 0xFF;
 8004cc2:	f7ff ff69 	bl	8004b98 <spiselect>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <send_cmd+0x4a>
 8004ccc:	23ff      	movs	r3, #255	; 0xff
 8004cce:	e045      	b.n	8004d5c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fee3 	bl	8004aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	0e1b      	lsrs	r3, r3, #24
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fedd 	bl	8004aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fed7 	bl	8004aa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fed1 	bl	8004aa4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fecc 	bl	8004aa4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <send_cmd+0x94>
 8004d16:	2395      	movs	r3, #149	; 0x95
 8004d18:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d101      	bne.n	8004d24 <send_cmd+0x9e>
 8004d20:	2387      	movs	r3, #135	; 0x87
 8004d22:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff febc 	bl	8004aa4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d102      	bne.n	8004d38 <send_cmd+0xb2>
 8004d32:	20ff      	movs	r0, #255	; 0xff
 8004d34:	f7ff feb6 	bl	8004aa4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004d38:	230a      	movs	r3, #10
 8004d3a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004d3c:	20ff      	movs	r0, #255	; 0xff
 8004d3e:	f7ff feb1 	bl	8004aa4 <xchg_spi>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da05      	bge.n	8004d5a <send_cmd+0xd4>
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <send_cmd+0xb6>

	return res;							/* Return received response */
 8004d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <USER_SPI_initialize+0x14>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0d6      	b.n	8004f26 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004d78:	4b6d      	ldr	r3, [pc, #436]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <USER_SPI_initialize+0x2a>
 8004d86:	4b6a      	ldr	r3, [pc, #424]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	e0cb      	b.n	8004f26 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004d8e:	4b69      	ldr	r3, [pc, #420]	; (8004f34 <USER_SPI_initialize+0x1d0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d98:	4b66      	ldr	r3, [pc, #408]	; (8004f34 <USER_SPI_initialize+0x1d0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8004da0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004da2:	230a      	movs	r3, #10
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e005      	b.n	8004db4 <USER_SPI_initialize+0x50>
 8004da8:	20ff      	movs	r0, #255	; 0xff
 8004daa:	f7ff fe7b 	bl	8004aa4 <xchg_spi>
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f6      	bne.n	8004da8 <USER_SPI_initialize+0x44>

	ty = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f7ff ff60 	bl	8004c86 <send_cmd>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 808b 	bne.w	8004ee4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dd2:	f7ff fe3d 	bl	8004a50 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004dd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004dda:	2008      	movs	r0, #8
 8004ddc:	f7ff ff53 	bl	8004c86 <send_cmd>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d151      	bne.n	8004e8a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	e00d      	b.n	8004e08 <USER_SPI_initialize+0xa4>
 8004dec:	7bfc      	ldrb	r4, [r7, #15]
 8004dee:	20ff      	movs	r0, #255	; 0xff
 8004df0:	f7ff fe58 	bl	8004aa4 <xchg_spi>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	f104 0310 	add.w	r3, r4, #16
 8004dfc:	443b      	add	r3, r7
 8004dfe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	3301      	adds	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d9ee      	bls.n	8004dec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004e0e:	7abb      	ldrb	r3, [r7, #10]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d167      	bne.n	8004ee4 <USER_SPI_initialize+0x180>
 8004e14:	7afb      	ldrb	r3, [r7, #11]
 8004e16:	2baa      	cmp	r3, #170	; 0xaa
 8004e18:	d164      	bne.n	8004ee4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004e1a:	bf00      	nop
 8004e1c:	f7ff fe2c 	bl	8004a78 <SPI_Timer_Status>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <USER_SPI_initialize+0xd2>
 8004e26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e2a:	20a9      	movs	r0, #169	; 0xa9
 8004e2c:	f7ff ff2b 	bl	8004c86 <send_cmd>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f2      	bne.n	8004e1c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004e36:	f7ff fe1f 	bl	8004a78 <SPI_Timer_Status>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d051      	beq.n	8004ee4 <USER_SPI_initialize+0x180>
 8004e40:	2100      	movs	r1, #0
 8004e42:	203a      	movs	r0, #58	; 0x3a
 8004e44:	f7ff ff1f 	bl	8004c86 <send_cmd>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d14a      	bne.n	8004ee4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	e00d      	b.n	8004e70 <USER_SPI_initialize+0x10c>
 8004e54:	7bfc      	ldrb	r4, [r7, #15]
 8004e56:	20ff      	movs	r0, #255	; 0xff
 8004e58:	f7ff fe24 	bl	8004aa4 <xchg_spi>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f104 0310 	add.w	r3, r4, #16
 8004e64:	443b      	add	r3, r7
 8004e66:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d9ee      	bls.n	8004e54 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004e76:	7a3b      	ldrb	r3, [r7, #8]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <USER_SPI_initialize+0x120>
 8004e80:	230c      	movs	r3, #12
 8004e82:	e000      	b.n	8004e86 <USER_SPI_initialize+0x122>
 8004e84:	2304      	movs	r3, #4
 8004e86:	737b      	strb	r3, [r7, #13]
 8004e88:	e02c      	b.n	8004ee4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	20a9      	movs	r0, #169	; 0xa9
 8004e8e:	f7ff fefa 	bl	8004c86 <send_cmd>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d804      	bhi.n	8004ea2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004e98:	2302      	movs	r3, #2
 8004e9a:	737b      	strb	r3, [r7, #13]
 8004e9c:	23a9      	movs	r3, #169	; 0xa9
 8004e9e:	73bb      	strb	r3, [r7, #14]
 8004ea0:	e003      	b.n	8004eaa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	737b      	strb	r3, [r7, #13]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004eaa:	bf00      	nop
 8004eac:	f7ff fde4 	bl	8004a78 <SPI_Timer_Status>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <USER_SPI_initialize+0x162>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fee3 	bl	8004c86 <send_cmd>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f2      	bne.n	8004eac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004ec6:	f7ff fdd7 	bl	8004a78 <SPI_Timer_Status>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <USER_SPI_initialize+0x17c>
 8004ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed4:	2010      	movs	r0, #16
 8004ed6:	f7ff fed6 	bl	8004c86 <send_cmd>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <USER_SPI_initialize+0x180>
				ty = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <USER_SPI_initialize+0x1d4>)
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004eea:	f7ff fe45 	bl	8004b78 <despiselect>

	if (ty) {			/* OK */
 8004eee:	7b7b      	ldrb	r3, [r7, #13]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <USER_SPI_initialize+0x1d0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <USER_SPI_initialize+0x1d0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004f06:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e002      	b.n	8004f20 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <USER_SPI_initialize+0x1cc>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd90      	pop	{r4, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000018 	.word	0x20000018
 8004f34:	20000150 	.word	0x20000150
 8004f38:	2000077c 	.word	0x2000077c

08004f3c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <USER_SPI_status+0x14>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e002      	b.n	8004f56 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <USER_SPI_status+0x28>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000018 	.word	0x20000018

08004f68 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <USER_SPI_read+0x1c>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <USER_SPI_read+0x20>
 8004f84:	2304      	movs	r3, #4
 8004f86:	e04d      	b.n	8005024 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004f88:	4b28      	ldr	r3, [pc, #160]	; (800502c <USER_SPI_read+0xc4>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <USER_SPI_read+0x32>
 8004f96:	2303      	movs	r3, #3
 8004f98:	e044      	b.n	8005024 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004f9a:	4b25      	ldr	r3, [pc, #148]	; (8005030 <USER_SPI_read+0xc8>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <USER_SPI_read+0x44>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d111      	bne.n	8004fd6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	2011      	movs	r0, #17
 8004fb6:	f7ff fe66 	bl	8004c86 <send_cmd>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d129      	bne.n	8005014 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7ff fe03 	bl	8004bd0 <rcvr_datablock>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d021      	beq.n	8005014 <USER_SPI_read+0xac>
			count = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	e01e      	b.n	8005014 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	2012      	movs	r0, #18
 8004fda:	f7ff fe54 	bl	8004c86 <send_cmd>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d117      	bne.n	8005014 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fe8:	68b8      	ldr	r0, [r7, #8]
 8004fea:	f7ff fdf1 	bl	8004bd0 <rcvr_datablock>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <USER_SPI_read+0xa2>
				buff += 512;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ffa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ed      	bne.n	8004fe4 <USER_SPI_read+0x7c>
 8005008:	e000      	b.n	800500c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800500a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800500c:	2100      	movs	r1, #0
 800500e:	200c      	movs	r0, #12
 8005010:	f7ff fe39 	bl	8004c86 <send_cmd>
		}
	}
	despiselect();
 8005014:	f7ff fdb0 	bl	8004b78 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	bf14      	ite	ne
 800501e:	2301      	movne	r3, #1
 8005020:	2300      	moveq	r3, #0
 8005022:	b2db      	uxtb	r3, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000018 	.word	0x20000018
 8005030:	2000077c 	.word	0x2000077c

08005034 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <USER_SPI_write+0x1c>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <USER_SPI_write+0x20>
 8005050:	2304      	movs	r3, #4
 8005052:	e063      	b.n	800511c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005054:	4b33      	ldr	r3, [pc, #204]	; (8005124 <USER_SPI_write+0xf0>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <USER_SPI_write+0x32>
 8005062:	2303      	movs	r3, #3
 8005064:	e05a      	b.n	800511c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <USER_SPI_write+0xf0>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <USER_SPI_write+0x44>
 8005074:	2302      	movs	r3, #2
 8005076:	e051      	b.n	800511c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <USER_SPI_write+0xf4>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <USER_SPI_write+0x56>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	025b      	lsls	r3, r3, #9
 8005088:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d110      	bne.n	80050b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	2018      	movs	r0, #24
 8005094:	f7ff fdf7 	bl	8004c86 <send_cmd>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d136      	bne.n	800510c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800509e:	21fe      	movs	r1, #254	; 0xfe
 80050a0:	68b8      	ldr	r0, [r7, #8]
 80050a2:	f7ff fdbe 	bl	8004c22 <xmit_datablock>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02f      	beq.n	800510c <USER_SPI_write+0xd8>
			count = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	e02c      	b.n	800510c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <USER_SPI_write+0xf4>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	f003 0306 	and.w	r3, r3, #6
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <USER_SPI_write+0x92>
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	2097      	movs	r0, #151	; 0x97
 80050c2:	f7ff fde0 	bl	8004c86 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	2019      	movs	r0, #25
 80050ca:	f7ff fddc 	bl	8004c86 <send_cmd>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11b      	bne.n	800510c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80050d4:	21fc      	movs	r1, #252	; 0xfc
 80050d6:	68b8      	ldr	r0, [r7, #8]
 80050d8:	f7ff fda3 	bl	8004c22 <xmit_datablock>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <USER_SPI_write+0xc4>
				buff += 512;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80050e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ee      	bne.n	80050d4 <USER_SPI_write+0xa0>
 80050f6:	e000      	b.n	80050fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80050f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80050fa:	21fd      	movs	r1, #253	; 0xfd
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7ff fd90 	bl	8004c22 <xmit_datablock>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <USER_SPI_write+0xd8>
 8005108:	2301      	movs	r3, #1
 800510a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800510c:	f7ff fd34 	bl	8004b78 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000018 	.word	0x20000018
 8005128:	2000077c 	.word	0x2000077c

0800512c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	603a      	str	r2, [r7, #0]
 8005136:	71fb      	strb	r3, [r7, #7]
 8005138:	460b      	mov	r3, r1
 800513a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <USER_SPI_ioctl+0x1a>
 8005142:	2304      	movs	r3, #4
 8005144:	e15a      	b.n	80053fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005146:	4baf      	ldr	r3, [pc, #700]	; (8005404 <USER_SPI_ioctl+0x2d8>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <USER_SPI_ioctl+0x2c>
 8005154:	2303      	movs	r3, #3
 8005156:	e151      	b.n	80053fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800515e:	79bb      	ldrb	r3, [r7, #6]
 8005160:	2b04      	cmp	r3, #4
 8005162:	f200 8136 	bhi.w	80053d2 <USER_SPI_ioctl+0x2a6>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <USER_SPI_ioctl+0x40>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005181 	.word	0x08005181
 8005170:	08005195 	.word	0x08005195
 8005174:	080053d3 	.word	0x080053d3
 8005178:	08005241 	.word	0x08005241
 800517c:	08005337 	.word	0x08005337
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005180:	f7ff fd0a 	bl	8004b98 <spiselect>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8127 	beq.w	80053da <USER_SPI_ioctl+0x2ae>
 800518c:	2300      	movs	r3, #0
 800518e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005192:	e122      	b.n	80053da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005194:	2100      	movs	r1, #0
 8005196:	2009      	movs	r0, #9
 8005198:	f7ff fd75 	bl	8004c86 <send_cmd>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 811d 	bne.w	80053de <USER_SPI_ioctl+0x2b2>
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	2110      	movs	r1, #16
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fd10 	bl	8004bd0 <rcvr_datablock>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8113 	beq.w	80053de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80051b8:	7b3b      	ldrb	r3, [r7, #12]
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d111      	bne.n	80051e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80051c2:	7d7b      	ldrb	r3, [r7, #21]
 80051c4:	461a      	mov	r2, r3
 80051c6:	7d3b      	ldrb	r3, [r7, #20]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	4413      	add	r3, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80051d6:	4413      	add	r3, r2
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	029a      	lsls	r2, r3, #10
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e028      	b.n	8005238 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80051e6:	7c7b      	ldrb	r3, [r7, #17]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	7dbb      	ldrb	r3, [r7, #22]
 80051f0:	09db      	lsrs	r3, r3, #7
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	7d7b      	ldrb	r3, [r7, #21]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4413      	add	r3, r2
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3302      	adds	r3, #2
 800520a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800520e:	7d3b      	ldrb	r3, [r7, #20]
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	7cbb      	ldrb	r3, [r7, #18]
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005224:	4413      	add	r3, r2
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800522a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800522e:	3b09      	subs	r3, #9
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	409a      	lsls	r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800523e:	e0ce      	b.n	80053de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <USER_SPI_ioctl+0x2dc>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d031      	beq.n	80052b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800524c:	2100      	movs	r1, #0
 800524e:	208d      	movs	r0, #141	; 0x8d
 8005250:	f7ff fd19 	bl	8004c86 <send_cmd>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 80c3 	bne.w	80053e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800525c:	20ff      	movs	r0, #255	; 0xff
 800525e:	f7ff fc21 	bl	8004aa4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005262:	f107 030c 	add.w	r3, r7, #12
 8005266:	2110      	movs	r1, #16
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fcb1 	bl	8004bd0 <rcvr_datablock>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80b6 	beq.w	80053e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005276:	2330      	movs	r3, #48	; 0x30
 8005278:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800527c:	e007      	b.n	800528e <USER_SPI_ioctl+0x162>
 800527e:	20ff      	movs	r0, #255	; 0xff
 8005280:	f7ff fc10 	bl	8004aa4 <xchg_spi>
 8005284:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005288:	3b01      	subs	r3, #1
 800528a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800528e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f3      	bne.n	800527e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005296:	7dbb      	ldrb	r3, [r7, #22]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	2310      	movs	r3, #16
 80052a0:	fa03 f202 	lsl.w	r2, r3, r2
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80052ae:	e098      	b.n	80053e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80052b0:	2100      	movs	r1, #0
 80052b2:	2009      	movs	r0, #9
 80052b4:	f7ff fce7 	bl	8004c86 <send_cmd>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8091 	bne.w	80053e2 <USER_SPI_ioctl+0x2b6>
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	2110      	movs	r1, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fc82 	bl	8004bd0 <rcvr_datablock>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8087 	beq.w	80053e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80052d4:	4b4c      	ldr	r3, [pc, #304]	; (8005408 <USER_SPI_ioctl+0x2dc>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80052e0:	7dbb      	ldrb	r3, [r7, #22]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80052e8:	7dfa      	ldrb	r2, [r7, #23]
 80052ea:	09d2      	lsrs	r2, r2, #7
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	4413      	add	r3, r2
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	7e7b      	ldrb	r3, [r7, #25]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e013      	b.n	800532e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005306:	7dbb      	ldrb	r3, [r7, #22]
 8005308:	109b      	asrs	r3, r3, #2
 800530a:	b29b      	uxth	r3, r3
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	3301      	adds	r3, #1
 8005312:	7dfa      	ldrb	r2, [r7, #23]
 8005314:	00d2      	lsls	r2, r2, #3
 8005316:	f002 0218 	and.w	r2, r2, #24
 800531a:	7df9      	ldrb	r1, [r7, #23]
 800531c:	0949      	lsrs	r1, r1, #5
 800531e:	b2c9      	uxtb	r1, r1
 8005320:	440a      	add	r2, r1
 8005322:	3201      	adds	r2, #1
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	461a      	mov	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005334:	e055      	b.n	80053e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005336:	4b34      	ldr	r3, [pc, #208]	; (8005408 <USER_SPI_ioctl+0x2dc>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 0306 	and.w	r3, r3, #6
 800533e:	2b00      	cmp	r3, #0
 8005340:	d051      	beq.n	80053e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005342:	f107 020c 	add.w	r2, r7, #12
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	210b      	movs	r1, #11
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff feee 	bl	800512c <USER_SPI_ioctl>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d149      	bne.n	80053ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005356:	7b3b      	ldrb	r3, [r7, #12]
 8005358:	099b      	lsrs	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <USER_SPI_ioctl+0x23e>
 8005360:	7dbb      	ldrb	r3, [r7, #22]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d041      	beq.n	80053ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <USER_SPI_ioctl+0x2dc>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005394:	2020      	movs	r0, #32
 8005396:	f7ff fc76 	bl	8004c86 <send_cmd>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d128      	bne.n	80053f2 <USER_SPI_ioctl+0x2c6>
 80053a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a2:	2021      	movs	r0, #33	; 0x21
 80053a4:	f7ff fc6f 	bl	8004c86 <send_cmd>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d121      	bne.n	80053f2 <USER_SPI_ioctl+0x2c6>
 80053ae:	2100      	movs	r1, #0
 80053b0:	2026      	movs	r0, #38	; 0x26
 80053b2:	f7ff fc68 	bl	8004c86 <send_cmd>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11a      	bne.n	80053f2 <USER_SPI_ioctl+0x2c6>
 80053bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80053c0:	f7ff fbb6 	bl	8004b30 <wait_ready>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d013      	beq.n	80053f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80053d0:	e00f      	b.n	80053f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80053d2:	2304      	movs	r3, #4
 80053d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053d8:	e00c      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		break;
 80053da:	bf00      	nop
 80053dc:	e00a      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		break;
 80053de:	bf00      	nop
 80053e0:	e008      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		break;
 80053e2:	bf00      	nop
 80053e4:	e006      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80053e6:	bf00      	nop
 80053e8:	e004      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <USER_SPI_ioctl+0x2c8>
		break;
 80053f2:	bf00      	nop
	}

	despiselect();
 80053f4:	f7ff fbc0 	bl	8004b78 <despiselect>

	return res;
 80053f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	; 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000018 	.word	0x20000018
 8005408:	2000077c 	.word	0x2000077c

0800540c <create_header>:

#include "wav_header.h"
#include <string.h>
#include <math.h>

wav_header create_header(uint32_t wav_size, uint32_t sample_rate, uint32_t bytes_per_sample, uint16_t bit_depth, uint32_t fmt_chunk_size, uint16_t audio_fmt, uint16_t num_channels, uint32_t data_bytes) {
 800540c:	b4b0      	push	{r4, r5, r7}
 800540e:	b091      	sub	sp, #68	; 0x44
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
//
//	strncpy(head.data_header, "data", 4);
////    endian_swap(&(head.data_bytes), data_bytes);
//	head.data_bytes = endian_swap_32_ret(data_bytes);

	strncpy(head.riff_header, "RIFF", 4);
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <create_header+0x84>)
 800541c:	617b      	str	r3, [r7, #20]
    head.wav_size =  wav_size;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
    strncpy(head.wave_header, "WAVE", 4);
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <create_header+0x88>)
 8005424:	61fb      	str	r3, [r7, #28]

    strncpy(head.fmt_header, "fmt ", 4);
 8005426:	4b1c      	ldr	r3, [pc, #112]	; (8005498 <create_header+0x8c>)
 8005428:	623b      	str	r3, [r7, #32]
    head.fmt_chunk_size = fmt_chunk_size;
 800542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
    head.audio_format =  audio_fmt;
 800542e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005432:	853b      	strh	r3, [r7, #40]	; 0x28
    head.num_channels =  num_channels;
 8005434:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005438:	857b      	strh	r3, [r7, #42]	; 0x2a
    head.sample_rate = sample_rate;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
    head.byte_rate = (sample_rate * num_channels * bytes_per_sample);
 800543e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	fb02 f303 	mul.w	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
    head.sample_alignment = (num_channels * bytes_per_sample);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8005458:	fb12 f303 	smulbb	r3, r2, r3
 800545c:	b29b      	uxth	r3, r3
 800545e:	86bb      	strh	r3, [r7, #52]	; 0x34
    head.bit_depth =  bit_depth;
 8005460:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005464:	86fb      	strh	r3, [r7, #54]	; 0x36

	strncpy(head.data_header, "data", 4);
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <create_header+0x90>)
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
//    endian_swap(&(head.data_bytes), data_bytes);
	head.data_bytes = data_bytes;
 800546a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c

    return head;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	461d      	mov	r5, r3
 8005472:	f107 0414 	add.w	r4, r7, #20
 8005476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005482:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	3744      	adds	r7, #68	; 0x44
 800548a:	46bd      	mov	sp, r7
 800548c:	bcb0      	pop	{r4, r5, r7}
 800548e:	4770      	bx	lr
 8005490:	46464952 	.word	0x46464952
 8005494:	45564157 	.word	0x45564157
 8005498:	20746d66 	.word	0x20746d66
 800549c:	61746164 	.word	0x61746164

080054a0 <create_PCM_SC_header>:

wav_header create_PCM_SC_header(uint32_t wav_size, uint32_t sample_rate, uint32_t bytes_per_sample, uint16_t bit_depth, uint32_t data_bytes) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af06      	add	r7, sp, #24
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
    return create_header(wav_size, sample_rate, bytes_per_sample, bit_depth, 16, 1, 1, data_bytes);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	2301      	movs	r3, #1
 80054b6:	9303      	str	r3, [sp, #12]
 80054b8:	2301      	movs	r3, #1
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	2310      	movs	r3, #16
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	8b3b      	ldrh	r3, [r7, #24]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	f7ff ff9f 	bl	800540c <create_header>
}
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <create_PCM_SC_header_correct>:

wav_header create_PCM_SC_header_correct(uint32_t num_samples) {
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08a      	sub	sp, #40	; 0x28
 80054da:	af02      	add	r7, sp, #8
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
    uint32_t sample_rate = 27027;
 80054e0:	f646 1393 	movw	r3, #27027	; 0x6993
 80054e4:	61fb      	str	r3, [r7, #28]
    uint32_t bytes_per_sample = 2;
 80054e6:	2302      	movs	r3, #2
 80054e8:	61bb      	str	r3, [r7, #24]
    uint16_t bit_depth = 14;
 80054ea:	230e      	movs	r3, #14
 80054ec:	82fb      	strh	r3, [r7, #22]
    uint32_t data_bytes = 1 * num_samples * bytes_per_sample; // Number of bytes in data. Number of samples * num_channels * sample byte size
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	613b      	str	r3, [r7, #16]
    uint32_t wav_size = data_bytes + 36; // Amount of data bytes + 36 header bytes.
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3324      	adds	r3, #36	; 0x24
 80054fc:	60fb      	str	r3, [r7, #12]

    return create_PCM_SC_header(wav_size, sample_rate, bytes_per_sample, bit_depth, data_bytes);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	8afb      	ldrh	r3, [r7, #22]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	f7ff ffc7 	bl	80054a0 <create_PCM_SC_header>
}
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	0000      	movs	r0, r0
 800551c:	0000      	movs	r0, r0
	...

08005520 <create_filter>:
	memcpy( out[40], &header.data_bytes, 4 );

	return out;
}

bw_filter create_filter(double cutoff, double sample) {
 8005520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005524:	b09a      	sub	sp, #104	; 0x68
 8005526:	af00      	add	r7, sp, #0
 8005528:	6178      	str	r0, [r7, #20]
 800552a:	ed87 0b02 	vstr	d0, [r7, #8]
 800552e:	ed87 1b00 	vstr	d1, [r7]
	bw_filter f;
	double ita = 1.0 / tan(M_PI * (cutoff / sample));
 8005532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800553a:	f7fb f997 	bl	800086c <__aeabi_ddiv>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	a361      	add	r3, pc, #388	; (adr r3, 80056cc <create_filter+0x1ac>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fb f864 	bl	8000618 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	ec43 2b17 	vmov	d7, r2, r3
 8005558:	eeb0 0a47 	vmov.f32	s0, s14
 800555c:	eef0 0a67 	vmov.f32	s1, s15
 8005560:	f009 fc5e 	bl	800ee20 <tan>
 8005564:	ec53 2b10 	vmov	r2, r3, d0
 8005568:	f04f 0000 	mov.w	r0, #0
 800556c:	4956      	ldr	r1, [pc, #344]	; (80056c8 <create_filter+0x1a8>)
 800556e:	f7fb f97d 	bl	800086c <__aeabi_ddiv>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double q = sqrt(2.0);
 800557a:	a351      	add	r3, pc, #324	; (adr r3, 80056c0 <create_filter+0x1a0>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	f.b0 = 1.0 / (1.0 + q * ita + ita * ita);
 8005584:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005588:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800558c:	f7fb f844 	bl	8000618 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <create_filter+0x1a8>)
 800559e:	f7fa fe85 	bl	80002ac <__adddf3>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4690      	mov	r8, r2
 80055a8:	4699      	mov	r9, r3
 80055aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80055ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055b2:	f7fb f831 	bl	8000618 <__aeabi_dmul>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fa fe75 	bl	80002ac <__adddf3>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	f04f 0000 	mov.w	r0, #0
 80055ca:	493f      	ldr	r1, [pc, #252]	; (80056c8 <create_filter+0x1a8>)
 80055cc:	f7fb f94e 	bl	800086c <__aeabi_ddiv>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	f.b1 = 2 * f.b0;
 80055d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	f7fa fe64 	bl	80002ac <__adddf3>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	f.b2 = f.b0;
 80055ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	f.a1 = 2.0 * (ita * ita - 1.0) * f.b0;
 80055f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80055f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055fc:	f7fb f80c 	bl	8000618 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <create_filter+0x1a8>)
 800560e:	f7fa fe4b 	bl	80002a8 <__aeabi_dsub>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	f7fa fe45 	bl	80002ac <__adddf3>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562e:	f7fa fff3 	bl	8000618 <__aeabi_dmul>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	f.a2 = - (1.0 - q * ita + ita * ita) * f.b0;
 800563a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800563e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005642:	f7fa ffe9 	bl	8000618 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	f04f 0000 	mov.w	r0, #0
 800564e:	491e      	ldr	r1, [pc, #120]	; (80056c8 <create_filter+0x1a8>)
 8005650:	f7fa fe2a 	bl	80002a8 <__aeabi_dsub>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4690      	mov	r8, r2
 800565a:	4699      	mov	r9, r3
 800565c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005660:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005664:	f7fa ffd8 	bl	8000618 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fe1c 	bl	80002ac <__adddf3>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4614      	mov	r4, r2
 800567a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800567e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005682:	4620      	mov	r0, r4
 8005684:	4629      	mov	r1, r5
 8005686:	f7fa ffc7 	bl	8000618 <__aeabi_dmul>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	f.a0 = f.a2;
 8005692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005696:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

//	f.x = { 0, 0, 0 };
//	f.y = { 0, 0, 0 };

	return f;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	461d      	mov	r5, r3
 800569e:	f107 0418 	add.w	r4, r7, #24
 80056a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80056b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	3768      	adds	r7, #104	; 0x68
 80056ba:	46bd      	mov	sp, r7
 80056bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c0:	667f3bcd 	.word	0x667f3bcd
 80056c4:	3ff6a09e 	.word	0x3ff6a09e
 80056c8:	3ff00000 	.word	0x3ff00000
 80056cc:	54442d18 	.word	0x54442d18
 80056d0:	400921fb 	.word	0x400921fb

080056d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80056d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800570c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80056d8:	f7ff f92c 	bl	8004934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80056dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80056de:	e003      	b.n	80056e8 <LoopCopyDataInit>

080056e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80056e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80056e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80056e6:	3104      	adds	r1, #4

080056e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80056e8:	480a      	ldr	r0, [pc, #40]	; (8005714 <LoopForever+0xa>)
	ldr	r3, =_edata
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <LoopForever+0xe>)
	adds	r2, r0, r1
 80056ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80056ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80056f0:	d3f6      	bcc.n	80056e0 <CopyDataInit>
	ldr	r2, =_sbss
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <LoopForever+0x12>)
	b	LoopFillZerobss
 80056f4:	e002      	b.n	80056fc <LoopFillZerobss>

080056f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80056f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80056f8:	f842 3b04 	str.w	r3, [r2], #4

080056fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <LoopForever+0x16>)
	cmp	r2, r3
 80056fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005700:	d3f9      	bcc.n	80056f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005702:	f008 ff05 	bl	800e510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005706:	f7fe f9eb 	bl	8003ae0 <main>

0800570a <LoopForever>:

LoopForever:
    b LoopForever
 800570a:	e7fe      	b.n	800570a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800570c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8005710:	08010558 	.word	0x08010558
	ldr	r0, =_sdata
 8005714:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005718:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800571c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8005720:	200008d4 	.word	0x200008d4

08005724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005724:	e7fe      	b.n	8005724 <ADC1_2_IRQHandler>
	...

08005728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800572c:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_Init+0x4c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a10      	ldr	r2, [pc, #64]	; (8005774 <HAL_Init+0x4c>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005738:	2003      	movs	r0, #3
 800573a:	f002 f887 	bl	800784c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800573e:	f003 fd3f 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 8005742:	4602      	mov	r2, r0
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <HAL_Init+0x50>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	490b      	ldr	r1, [pc, #44]	; (800577c <HAL_Init+0x54>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
 8005754:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <HAL_Init+0x58>)
 8005756:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005758:	200f      	movs	r0, #15
 800575a:	f000 f813 	bl	8005784 <HAL_InitTick>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e002      	b.n	800576e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005768:	f7fe feba 	bl	80044e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40022000 	.word	0x40022000
 8005778:	46020c00 	.word	0x46020c00
 800577c:	0801023c 	.word	0x0801023c
 8005780:	20000000 	.word	0x20000000

08005784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_InitTick+0x60>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e021      	b.n	80057dc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <HAL_InitTick+0x64>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <HAL_InitTick+0x60>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
 80057a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 f871 	bl	8007896 <HAL_SYSTICK_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00e      	b.n	80057dc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0f      	cmp	r3, #15
 80057c2:	d80a      	bhi.n	80057da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057c4:	2200      	movs	r2, #0
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057cc:	f002 f849 	bl	8007862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057d0:	4a06      	ldr	r2, [pc, #24]	; (80057ec <HAL_InitTick+0x68>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000020 	.word	0x20000020
 80057e8:	20000000 	.word	0x20000000
 80057ec:	2000001c 	.word	0x2000001c

080057f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_IncTick+0x20>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_IncTick+0x24>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	4a04      	ldr	r2, [pc, #16]	; (8005814 <HAL_IncTick+0x24>)
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000020 	.word	0x20000020
 8005814:	20000788 	.word	0x20000788

08005818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return uwTick;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <HAL_GetTick+0x14>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000788 	.word	0x20000788

08005830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005838:	f7ff ffee 	bl	8005818 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005848:	d005      	beq.n	8005856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_Delay+0x44>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005856:	bf00      	nop
 8005858:	f7ff ffde 	bl	8005818 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d8f7      	bhi.n	8005858 <HAL_Delay+0x28>
  {
  }
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000020 	.word	0x20000020

08005878 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8005882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005884:	f023 0201 	bic.w	r2, r3, #1
 8005888:	4904      	ldr	r1, [pc, #16]	; (800589c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4313      	orrs	r3, r2
 800588e:	674b      	str	r3, [r1, #116]	; 0x74
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	46000400 	.word	0x46000400

080058a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80058aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ac:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 80058b0:	4904      	ldr	r1, [pc, #16]	; (80058c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	674b      	str	r3, [r1, #116]	; 0x74
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	46000400 	.word	0x46000400

080058c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a0a      	ldr	r2, [pc, #40]	; (800596c <LL_ADC_SetResolution+0x3c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d104      	bne.n	8005950 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3b01      	subs	r3, #1
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f023 020c 	bic.w	r2, r3, #12
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	46021000 	.word	0x46021000

08005970 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3360      	adds	r3, #96	; 0x60
 8005982:	461a      	mov	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	430b      	orrs	r3, r1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3360      	adds	r3, #96	; 0x60
 80059c0:	461a      	mov	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80059de:	b480      	push	{r7}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3360      	adds	r3, #96	; 0x60
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3360      	adds	r3, #96	; 0x60
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b087      	sub	sp, #28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3360      	adds	r3, #96	; 0x60
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d002      	beq.n	8005ab2 <LL_ADC_SetGainCompensation+0x32>
 8005aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab0:	e000      	b.n	8005ab4 <LL_ADC_SetGainCompensation+0x34>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2107      	movs	r1, #7
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	431a      	orrs	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b089      	sub	sp, #36	; 0x24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d020      	beq.n	8005b82 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3330      	adds	r3, #48	; 0x30
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	4413      	add	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	211f      	movs	r1, #31
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	0e9b      	lsrs	r3, r3, #26
 8005b6c:	f003 011f 	and.w	r1, r3, #31
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 031f 	and.w	r3, r3, #31
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8005b80:	e02b      	b.n	8005bda <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	210f      	movs	r1, #15
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	401a      	ands	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <LL_ADC_REG_SetSequencerRanks+0x7e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	0e9b      	lsrs	r3, r3, #26
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	e010      	b.n	8005bcc <LL_ADC_REG_SetSequencerRanks+0xa0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	fa93 f3a3 	rbit	r3, r3
 8005bb4:	613b      	str	r3, [r7, #16]
  return result;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e003      	b.n	8005bcc <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	fab3 f383 	clz	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	f001 011f 	and.w	r1, r1, #31
 8005bd2:	408b      	lsls	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bda:	bf00      	nop
 8005bdc:	3724      	adds	r7, #36	; 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	46021000 	.word	0x46021000

08005bec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	0e9b      	lsrs	r3, r3, #26
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2201      	movs	r2, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	e015      	b.n	8005c3c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	fa93 f3a3 	rbit	r3, r3
 8005c1a:	60fb      	str	r3, [r7, #12]
  return result;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8005c26:	2320      	movs	r3, #32
 8005c28:	e003      	b.n	8005c32 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	fab3 f383 	clz	r3, r3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	0e9b      	lsrs	r3, r3, #26
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	401a      	ands	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a2d      	ldr	r2, [pc, #180]	; (8005d48 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d042      	beq.n	8005d1e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <LL_ADC_SetChannelSamplingTime+0x28>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0e9b      	lsrs	r3, r3, #26
 8005ca6:	f003 021f 	and.w	r2, r3, #31
 8005caa:	e011      	b.n	8005cd0 <LL_ADC_SetChannelSamplingTime+0x4c>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	fa93 f3a3 	rbit	r3, r3
 8005cb6:	617b      	str	r3, [r7, #20]
  return result;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8005cc2:	2320      	movs	r3, #32
 8005cc4:	e003      	b.n	8005cce <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fab3 f383 	clz	r3, r3
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	0e5b      	lsrs	r3, r3, #25
 8005cd4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8005cd8:	460b      	mov	r3, r1
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3314      	adds	r3, #20
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	0e5b      	lsrs	r3, r3, #25
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	4413      	add	r3, r2
 8005cfc:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	2107      	movs	r1, #7
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	401a      	ands	r2, r3
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	fa01 f303 	lsl.w	r3, r1, r3
 8005d16:	431a      	orrs	r2, r3
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8005d1c:	e00e      	b.n	8005d3c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	43db      	mvns	r3, r3
 8005d28:	401a      	ands	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0219      	lsls	r1, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	400b      	ands	r3, r1
 8005d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	615a      	str	r2, [r3, #20]
}
 8005d3c:	bf00      	nop
 8005d3e:	372c      	adds	r7, #44	; 0x2c
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	46021000 	.word	0x46021000

08005d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0318 	and.w	r3, r3, #24
 8005d6e:	4908      	ldr	r1, [pc, #32]	; (8005d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d70:	40d9      	lsrs	r1, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	400b      	ands	r3, r1
 8005d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	000fffff 	.word	0x000fffff

08005d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 031f 	and.w	r3, r3, #31
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6093      	str	r3, [r2, #8]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e04:	d101      	bne.n	8005e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e54:	d101      	bne.n	8005e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <LL_ADC_IsEnabled+0x18>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <LL_ADC_IsEnabled+0x1a>
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005eca:	f043 0204 	orr.w	r2, r3, #4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	609a      	str	r2, [r3, #8]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d101      	bne.n	8005ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d101      	bne.n	8005f1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b08b      	sub	sp, #44	; 0x2c
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e2ce      	b.n	80064ea <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a95      	ldr	r2, [pc, #596]	; (80061b0 <HAL_ADC_Init+0x284>)
 8005f5a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fe fad5 	bl	8004514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff37 	bl	8005df0 <LL_ADC_IsDeepPowerDownEnabled>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff ff1d 	bl	8005dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff52 	bl	8005e40 <LL_ADC_IsInternalRegulatorEnabled>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d115      	bne.n	8005fce <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff36 	bl	8005e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fac:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_ADC_Init+0x288>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	4a81      	ldr	r2, [pc, #516]	; (80061b8 <HAL_ADC_Init+0x28c>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	099b      	lsrs	r3, r3, #6
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fc0:	e002      	b.n	8005fc8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f9      	bne.n	8005fc2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff ff34 	bl	8005e40 <LL_ADC_IsInternalRegulatorEnabled>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10e      	bne.n	8005ffc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe2:	f043 0210 	orr.w	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff ff6c 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 8006006:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 825f 	bne.w	80064d4 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 825b 	bne.w	80064d4 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006022:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006026:	f043 0202 	orr.w	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff ff2c 	bl	8005e90 <LL_ADC_IsEnabled>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d14f      	bne.n	80060de <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5b      	ldr	r2, [pc, #364]	; (80061b0 <HAL_ADC_Init+0x284>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d037      	beq.n	80060b8 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5b      	ldr	r2, [pc, #364]	; (80061bc <HAL_ADC_Init+0x290>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_ADC_Init+0x130>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a5a      	ldr	r2, [pc, #360]	; (80061c0 <HAL_ADC_Init+0x294>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d10e      	bne.n	800607a <HAL_ADC_Init+0x14e>
 800605c:	4857      	ldr	r0, [pc, #348]	; (80061bc <HAL_ADC_Init+0x290>)
 800605e:	f7ff ff17 	bl	8005e90 <LL_ADC_IsEnabled>
 8006062:	4604      	mov	r4, r0
 8006064:	4856      	ldr	r0, [pc, #344]	; (80061c0 <HAL_ADC_Init+0x294>)
 8006066:	f7ff ff13 	bl	8005e90 <LL_ADC_IsEnabled>
 800606a:	4603      	mov	r3, r0
 800606c:	4323      	orrs	r3, r4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e008      	b.n	800608c <HAL_ADC_Init+0x160>
 800607a:	484d      	ldr	r0, [pc, #308]	; (80061b0 <HAL_ADC_Init+0x284>)
 800607c:	f7ff ff08 	bl	8005e90 <LL_ADC_IsEnabled>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d026      	beq.n	80060de <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a49      	ldr	r2, [pc, #292]	; (80061bc <HAL_ADC_Init+0x290>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_ADC_Init+0x178>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a48      	ldr	r2, [pc, #288]	; (80061c0 <HAL_ADC_Init+0x294>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_ADC_Init+0x17c>
 80060a4:	4a47      	ldr	r2, [pc, #284]	; (80061c4 <HAL_ADC_Init+0x298>)
 80060a6:	e000      	b.n	80060aa <HAL_ADC_Init+0x17e>
 80060a8:	4a47      	ldr	r2, [pc, #284]	; (80061c8 <HAL_ADC_Init+0x29c>)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7ff fc09 	bl	80058c8 <LL_ADC_SetCommonClock>
 80060b6:	e012      	b.n	80060de <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7ff fc34 	bl	8005930 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80060c8:	4b3f      	ldr	r3, [pc, #252]	; (80061c8 <HAL_ADC_Init+0x29c>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80060d8:	493b      	ldr	r1, [pc, #236]	; (80061c8 <HAL_ADC_Init+0x29c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a33      	ldr	r2, [pc, #204]	; (80061b0 <HAL_ADC_Init+0x284>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d010      	beq.n	800610a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060ee:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80060f4:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80060fa:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006102:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8006104:	4313      	orrs	r3, r2
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	e035      	b.n	8006176 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7f1b      	ldrb	r3, [r3, #28]
 800610e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006116:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006118:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800611e:	2a00      	cmp	r2, #0
 8006120:	d002      	beq.n	8006128 <HAL_ADC_Init+0x1fc>
 8006122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006126:	e000      	b.n	800612a <HAL_ADC_Init+0x1fe>
 8006128:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800612a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8006130:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	da04      	bge.n	8006144 <HAL_ADC_Init+0x218>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006142:	e001      	b.n	8006148 <HAL_ADC_Init+0x21c>
 8006144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8006148:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	491b      	ldr	r1, [pc, #108]	; (80061bc <HAL_ADC_Init+0x290>)
 8006150:	428b      	cmp	r3, r1
 8006152:	d004      	beq.n	800615e <HAL_ADC_Init+0x232>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4919      	ldr	r1, [pc, #100]	; (80061c0 <HAL_ADC_Init+0x294>)
 800615a:	428b      	cmp	r3, r1
 800615c:	d103      	bne.n	8006166 <HAL_ADC_Init+0x23a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006164:	e003      	b.n	800616e <HAL_ADC_Init+0x242>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800616c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800616e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	4313      	orrs	r3, r2
 8006174:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d131      	bne.n	80061e4 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_ADC_Init+0x284>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	3b01      	subs	r3, #1
 8006190:	045b      	lsls	r3, r3, #17
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	4313      	orrs	r3, r2
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	e024      	b.n	80061e4 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e01a      	b.n	80061e4 <HAL_ADC_Init+0x2b8>
 80061ae:	bf00      	nop
 80061b0:	46021000 	.word	0x46021000
 80061b4:	20000000 	.word	0x20000000
 80061b8:	053e2d63 	.word	0x053e2d63
 80061bc:	42028000 	.word	0x42028000
 80061c0:	42028100 	.word	0x42028100
 80061c4:	42028300 	.word	0x42028300
 80061c8:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d0:	f043 0220 	orr.w	r2, r3, #32
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a75      	ldr	r2, [pc, #468]	; (80063c0 <HAL_ADC_Init+0x494>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d018      	beq.n	8006220 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	4313      	orrs	r3, r2
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	4313      	orrs	r3, r2
 8006208:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	4b6c      	ldr	r3, [pc, #432]	; (80063c4 <HAL_ADC_Init+0x498>)
 8006212:	4013      	ands	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	6a39      	ldr	r1, [r7, #32]
 800621a:	430b      	orrs	r3, r1
 800621c:	60d3      	str	r3, [r2, #12]
 800621e:	e031      	b.n	8006284 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	4313      	orrs	r3, r2
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	4313      	orrs	r3, r2
 800623a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <HAL_ADC_Init+0x49c>)
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6a39      	ldr	r1, [r7, #32]
 800624c:	430b      	orrs	r3, r1
 800624e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <HAL_ADC_Init+0x494>)
 800628a:	4293      	cmp	r3, r2
 800628c:	f000 80a4 	beq.w	80063d8 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fe22 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 800629a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fe2f 	bl	8005f04 <LL_ADC_INJ_IsConversionOngoing>
 80062a6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d166      	bne.n	800637c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d163      	bne.n	800637c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7f1b      	ldrb	r3, [r3, #28]
 80062b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4943      	ldr	r1, [pc, #268]	; (80063cc <HAL_ADC_Init+0x4a0>)
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d004      	beq.n	80062ce <HAL_ADC_Init+0x3a2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4941      	ldr	r1, [pc, #260]	; (80063d0 <HAL_ADC_Init+0x4a4>)
 80062ca:	428b      	cmp	r3, r1
 80062cc:	d102      	bne.n	80062d4 <HAL_ADC_Init+0x3a8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	e002      	b.n	80062da <HAL_ADC_Init+0x3ae>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062da:	4313      	orrs	r3, r2
 80062dc:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	6a39      	ldr	r1, [r7, #32]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7ff fbb9 	bl	8005a80 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006314:	2b01      	cmp	r3, #1
 8006316:	d11e      	bne.n	8006356 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <HAL_ADC_Init+0x4a8>)
 8006326:	4013      	ands	r3, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800632c:	0411      	lsls	r1, r2, #16
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006332:	4311      	orrs	r1, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006338:	4311      	orrs	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800633e:	4311      	orrs	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006344:	0892      	lsrs	r2, r2, #2
 8006346:	430a      	orrs	r2, r1
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	611a      	str	r2, [r3, #16]
 8006354:	e007      	b.n	8006366 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d10c      	bne.n	800639e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f023 010f 	bic.w	r1, r3, #15
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
 800639c:	e007      	b.n	80063ae <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 020f 	bic.w	r2, r2, #15
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80063be:	e092      	b.n	80064e6 <HAL_ADC_Init+0x5ba>
 80063c0:	46021000 	.word	0x46021000
 80063c4:	fff0c013 	.word	0xfff0c013
 80063c8:	ffde800d 	.word	0xffde800d
 80063cc:	42028000 	.word	0x42028000
 80063d0:	42028100 	.word	0x42028100
 80063d4:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d111      	bne.n	8006406 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80063ea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80063f0:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80063f6:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <HAL_ADC_Init+0x5c8>)
 800640e:	4013      	ands	r3, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	69f9      	ldr	r1, [r7, #28]
 8006416:	430b      	orrs	r3, r1
 8006418:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	461a      	mov	r2, r3
 8006424:	2100      	movs	r1, #0
 8006426:	f7ff fb4e 	bl	8005ac6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	461a      	mov	r2, r3
 8006434:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8006438:	f7ff fb45 	bl	8005ac6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f062 020f 	orn	r2, r2, #15
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
 8006454:	e018      	b.n	8006488 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800645e:	d113      	bne.n	8006488 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	3b01      	subs	r3, #1
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	f003 031c 	and.w	r3, r3, #28
 8006472:	f06f 020f 	mvn.w	r2, #15
 8006476:	fa02 f103 	lsl.w	r1, r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <HAL_ADC_Init+0x5cc>)
 8006490:	4013      	ands	r3, r2
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	429a      	cmp	r2, r3
 8006496:	d10b      	bne.n	80064b0 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80064ae:	e01a      	b.n	80064e6 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b4:	f023 0312 	bic.w	r3, r3, #18
 80064b8:	f043 0210 	orr.w	r2, r3, #16
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c4:	f043 0201 	orr.w	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80064d2:	e008      	b.n	80064e6 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80064e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	372c      	adds	r7, #44	; 0x2c
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd90      	pop	{r4, r7, pc}
 80064f2:	bf00      	nop
 80064f4:	f7fffc02 	.word	0xf7fffc02
 80064f8:	833ffff3 	.word	0x833ffff3

080064fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef       *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a66      	ldr	r2, [pc, #408]	; (80066a4 <HAL_ADC_Start+0x1a8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_ADC_Start+0x1c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a65      	ldr	r2, [pc, #404]	; (80066a8 <HAL_ADC_Start+0x1ac>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_ADC_Start+0x20>
 8006518:	4b64      	ldr	r3, [pc, #400]	; (80066ac <HAL_ADC_Start+0x1b0>)
 800651a:	e000      	b.n	800651e <HAL_ADC_Start+0x22>
 800651c:	4b64      	ldr	r3, [pc, #400]	; (80066b0 <HAL_ADC_Start+0x1b4>)
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fc38 	bl	8005d94 <LL_ADC_GetMultimode>
 8006524:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fcd7 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80af 	bne.w	8006696 <HAL_ADC_Start+0x19a>
  {
    __HAL_LOCK(hadc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_ADC_Start+0x4a>
 8006542:	2302      	movs	r3, #2
 8006544:	e0aa      	b.n	800669c <HAL_ADC_Start+0x1a0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f830 	bl	80075b4 <ADC_Enable>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f040 8096 	bne.w	800668c <HAL_ADC_Start+0x190>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a4e      	ldr	r2, [pc, #312]	; (80066b4 <HAL_ADC_Start+0x1b8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_ADC_Start+0xd2>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - by default if ADC is Master or Independent or if multimode feature is not available
          - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a49      	ldr	r2, [pc, #292]	; (80066a8 <HAL_ADC_Start+0x1ac>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d002      	beq.n	800658e <HAL_ADC_Start+0x92>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	e000      	b.n	8006590 <HAL_ADC_Start+0x94>
 800658e:	4b45      	ldr	r3, [pc, #276]	; (80066a4 <HAL_ADC_Start+0x1a8>)
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	4293      	cmp	r3, r2
 8006596:	d002      	beq.n	800659e <HAL_ADC_Start+0xa2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d105      	bne.n	80065aa <HAL_ADC_Start+0xae>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	d106      	bne.n	80065c6 <HAL_ADC_Start+0xca>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065bc:	f023 0206 	bic.w	r2, r3, #6
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80065c4:	e006      	b.n	80065d4 <HAL_ADC_Start+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80065cc:	e002      	b.n	80065d4 <HAL_ADC_Start+0xd8>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	221c      	movs	r2, #28
 80065da:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a32      	ldr	r2, [pc, #200]	; (80066b4 <HAL_ADC_Start+0x1b8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d048      	beq.n	8006680 <HAL_ADC_Start+0x184>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a2d      	ldr	r2, [pc, #180]	; (80066a8 <HAL_ADC_Start+0x1ac>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d002      	beq.n	80065fe <HAL_ADC_Start+0x102>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	e000      	b.n	8006600 <HAL_ADC_Start+0x104>
 80065fe:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <HAL_ADC_Start+0x1a8>)
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	4293      	cmp	r3, r2
 8006606:	d008      	beq.n	800661a <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b05      	cmp	r3, #5
 8006612:	d002      	beq.n	800661a <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b09      	cmp	r3, #9
 8006618:	d114      	bne.n	8006644 <HAL_ADC_Start+0x148>
           )
        {
          /* Multimode feature is not available or ADC Instance is Independent or Master,
             or is not Slave ADC with dual regular conversions enabled.
             Then, set HAL_ADC_STATE_INJ_BUSY bit and reset HAL_ADC_STATE_INJ_EOC bit if JAUTO is set. */
          if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <HAL_ADC_Start+0x13c>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006630:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	679a      	str	r2, [r3, #120]	; 0x78
          }

          /* Start ADC group regular conversion */
          LL_ADC_REG_StartConversion(hadc->Instance);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fc3a 	bl	8005eb6 <LL_ADC_REG_StartConversion>
 8006642:	e01d      	b.n	8006680 <HAL_ADC_Start+0x184>
        }
        else
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006648:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	679a      	str	r2, [r3, #120]	; 0x78
          /* if Master ADC JAUTO bit is set, update Slave State in setting
             HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <HAL_ADC_Start+0x1ac>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d002      	beq.n	8006660 <HAL_ADC_Start+0x164>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	e000      	b.n	8006662 <HAL_ADC_Start+0x166>
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <HAL_ADC_Start+0x1a8>)
 8006662:	60fb      	str	r3, [r7, #12]
          if (READ_BIT(tmp_adc_master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_ADC_Start+0x184>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006674:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006678:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fc16 	bl	8005eb6 <LL_ADC_REG_StartConversion>
 800668a:	e006      	b.n	800669a <HAL_ADC_Start+0x19e>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8006694:	e001      	b.n	800669a <HAL_ADC_Start+0x19e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006696:	2302      	movs	r3, #2
 8006698:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	42028000 	.word	0x42028000
 80066a8:	42028100 	.word	0x42028100
 80066ac:	42028300 	.word	0x42028300
 80066b0:	46021300 	.word	0x46021300
 80066b4:	46021000 	.word	0x46021000

080066b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a82      	ldr	r2, [pc, #520]	; (80068d0 <HAL_ADC_PollForConversion+0x218>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_ADC_PollForConversion+0x1e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a80      	ldr	r2, [pc, #512]	; (80068d4 <HAL_ADC_PollForConversion+0x21c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <HAL_ADC_PollForConversion+0x22>
 80066d6:	4b80      	ldr	r3, [pc, #512]	; (80068d8 <HAL_ADC_PollForConversion+0x220>)
 80066d8:	e000      	b.n	80066dc <HAL_ADC_PollForConversion+0x24>
 80066da:	4b80      	ldr	r3, [pc, #512]	; (80068dc <HAL_ADC_PollForConversion+0x224>)
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fb59 	bl	8005d94 <LL_ADC_GetMultimode>
 80066e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d102      	bne.n	80066f2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80066ec:	2308      	movs	r3, #8
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e04e      	b.n	8006790 <HAL_ADC_PollForConversion+0xd8>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a7a      	ldr	r2, [pc, #488]	; (80068e0 <HAL_ADC_PollForConversion+0x228>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d038      	beq.n	800676e <HAL_ADC_PollForConversion+0xb6>
    {
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d002      	beq.n	800670e <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b09      	cmp	r3, #9
 800670c:	d111      	bne.n	8006732 <HAL_ADC_PollForConversion+0x7a>
         )
      {
        /* Check ADC DMA mode */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_ADC_PollForConversion+0x74>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e112      	b.n	8006952 <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 800672c:	2304      	movs	r3, #4
 800672e:	61fb      	str	r3, [r7, #28]
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8006730:	e02e      	b.n	8006790 <HAL_ADC_PollForConversion+0xd8>
        }
      }
      else
      {
        /* Check ADC DMA mode in multimode */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a66      	ldr	r2, [pc, #408]	; (80068d0 <HAL_ADC_PollForConversion+0x218>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_ADC_PollForConversion+0x8e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a64      	ldr	r2, [pc, #400]	; (80068d4 <HAL_ADC_PollForConversion+0x21c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d101      	bne.n	800674a <HAL_ADC_PollForConversion+0x92>
 8006746:	4b64      	ldr	r3, [pc, #400]	; (80068d8 <HAL_ADC_PollForConversion+0x220>)
 8006748:	e000      	b.n	800674c <HAL_ADC_PollForConversion+0x94>
 800674a:	4b64      	ldr	r3, [pc, #400]	; (80068dc <HAL_ADC_PollForConversion+0x224>)
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fb2f 	bl	8005db0 <LL_ADC_GetMultiDMATransfer>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_ADC_PollForConversion+0xb0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0f4      	b.n	8006952 <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8006768:	2304      	movs	r3, #4
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e010      	b.n	8006790 <HAL_ADC_PollForConversion+0xd8>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_ADC_PollForConversion+0xd4>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0e2      	b.n	8006952 <HAL_ADC_PollForConversion+0x29a>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 800678c:	2304      	movs	r3, #4
 800678e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006790:	f7ff f842 	bl	8005818 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006796:	e021      	b.n	80067dc <HAL_ADC_PollForConversion+0x124>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679e:	d01d      	beq.n	80067dc <HAL_ADC_PollForConversion+0x124>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80067a0:	f7ff f83a 	bl	8005818 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d302      	bcc.n	80067b6 <HAL_ADC_PollForConversion+0xfe>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d112      	bne.n	80067dc <HAL_ADC_PollForConversion+0x124>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_ADC_PollForConversion+0x124>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c8:	f043 0204 	orr.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e0ba      	b.n	8006952 <HAL_ADC_PollForConversion+0x29a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0d6      	beq.n	8006798 <HAL_ADC_PollForConversion+0xe0>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff f982 	bl	8005b04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a4 	beq.w	8006950 <HAL_ADC_PollForConversion+0x298>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 809e 	bne.w	8006950 <HAL_ADC_PollForConversion+0x298>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a31      	ldr	r2, [pc, #196]	; (80068e0 <HAL_ADC_PollForConversion+0x228>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d062      	beq.n	80068e4 <HAL_ADC_PollForConversion+0x22c>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d111      	bne.n	8006850 <HAL_ADC_PollForConversion+0x198>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_ADC_PollForConversion+0x198>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006848:	f043 0201 	orr.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Get relevant register CFGR in ADC instance of ADC master or slave        */
      /* in function of multimode state (for devices with multimode               */
      /* available).                                                              */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <HAL_ADC_PollForConversion+0x21c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d002      	beq.n	8006860 <HAL_ADC_PollForConversion+0x1a8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	e000      	b.n	8006862 <HAL_ADC_PollForConversion+0x1aa>
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_ADC_PollForConversion+0x218>)
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	4293      	cmp	r3, r2
 8006868:	d008      	beq.n	800687c <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b05      	cmp	r3, #5
 8006874:	d002      	beq.n	800687c <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b09      	cmp	r3, #9
 800687a:	d104      	bne.n	8006886 <HAL_ADC_PollForConversion+0x1ce>
         )
      {
        /* Retrieve handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e011      	b.n	80068aa <HAL_ADC_PollForConversion+0x1f2>
      }
      else
      {
        /* Retrieve Master ADC CFGR register */
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a11      	ldr	r2, [pc, #68]	; (80068d0 <HAL_ADC_PollForConversion+0x218>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_ADC_PollForConversion+0x1e2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <HAL_ADC_PollForConversion+0x228>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d102      	bne.n	80068a0 <HAL_ADC_PollForConversion+0x1e8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	e000      	b.n	80068a2 <HAL_ADC_PollForConversion+0x1ea>
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <HAL_ADC_PollForConversion+0x218>)
 80068a2:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	61bb      	str	r3, [r7, #24]
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d104      	bne.n	80068ba <HAL_ADC_PollForConversion+0x202>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e04a      	b.n	8006950 <HAL_ADC_PollForConversion+0x298>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d145      	bne.n	8006950 <HAL_ADC_PollForConversion+0x298>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	220c      	movs	r2, #12
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e040      	b.n	8006950 <HAL_ADC_PollForConversion+0x298>
 80068ce:	bf00      	nop
 80068d0:	42028000 	.word	0x42028000
 80068d4:	42028100 	.word	0x42028100
 80068d8:	42028300 	.word	0x42028300
 80068dc:	46021300 	.word	0x46021300
 80068e0:	46021000 	.word	0x46021000
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d126      	bne.n	8006940 <HAL_ADC_PollForConversion+0x288>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff faf1 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d112      	bne.n	8006928 <HAL_ADC_PollForConversion+0x270>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 020c 	bic.w	r2, r2, #12
 8006910:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	679a      	str	r2, [r3, #120]	; 0x78
 8006926:	e00b      	b.n	8006940 <HAL_ADC_PollForConversion+0x288>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006938:	f043 0201 	orr.w	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7f1b      	ldrb	r3, [r3, #28]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <HAL_ADC_PollForConversion+0x298>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	220c      	movs	r2, #12
 800694e:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b0b7      	sub	sp, #220	; 0xdc
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4aa8      	ldr	r2, [pc, #672]	; (8006c34 <HAL_ADC_ConfigChannel+0x2bc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d103      	bne.n	800699e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d102      	bne.n	80069ae <HAL_ADC_ConfigChannel+0x36>
 80069a8:	2302      	movs	r3, #2
 80069aa:	f000 bdfe 	b.w	80075aa <HAL_ADC_ConfigChannel+0xc32>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fa8f 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 85c1 	bne.w	800754a <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a99      	ldr	r2, [pc, #612]	; (8006c34 <HAL_ADC_ConfigChannel+0x2bc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	f000 8409 	beq.w	80071e6 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x7a>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	0e9b      	lsrs	r3, r3, #26
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2201      	movs	r2, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	e01d      	b.n	8006a2e <HAL_ADC_ConfigChannel+0xb6>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069fe:	fa93 f3a3 	rbit	r3, r3
 8006a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8006a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8006a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8006a16:	2320      	movs	r3, #32
 8006a18:	e004      	b.n	8006a24 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8006a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a1e:	fab3 f383 	clz	r3, r3
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2201      	movs	r2, #1
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	69d1      	ldr	r1, [r2, #28]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6859      	ldr	r1, [r3, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f7ff f86f 	bl	8005b2c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fa43 	bl	8005ede <LL_ADC_REG_IsConversionOngoing>
 8006a58:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fa4f 	bl	8005f04 <LL_ADC_INJ_IsConversionOngoing>
 8006a66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 81df 	bne.w	8006e32 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 81da 	bne.w	8006e32 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f7ff f8fa 	bl	8005c84 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d046      	beq.n	8006b40 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6919      	ldr	r1, [r3, #16]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ac2:	f7fe ff55 	bl	8005970 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6919      	ldr	r1, [r3, #16]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fe ff83 	bl	80059de <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	7e9b      	ldrb	r3, [r3, #26]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d11e      	bne.n	8006b1e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x17e>
 8006af0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006af4:	e000      	b.n	8006af8 <HAL_ADC_ConfigChannel+0x180>
 8006af6:	2300      	movs	r3, #0
 8006af8:	461a      	mov	r2, r3
 8006afa:	f7fe ffa6 	bl	8005a4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d102      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x19c>
 8006b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b12:	e000      	b.n	8006b16 <HAL_ADC_ConfigChannel+0x19e>
 8006b14:	2300      	movs	r3, #0
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fe ff7c 	bl	8005a14 <LL_ADC_SetOffsetSignedSaturation>
 8006b1c:	e189      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2200      	movs	r2, #0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f7fe ff8e 	bl	8005a4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2200      	movs	r2, #0
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f7fe ff6b 	bl	8005a14 <LL_ADC_SetOffsetSignedSaturation>
 8006b3e:	e178      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe ff33 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x1f4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe ff28 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006b62:	4603      	mov	r3, r0
 8006b64:	0e9b      	lsrs	r3, r3, #26
 8006b66:	f003 021f 	and.w	r2, r3, #31
 8006b6a:	e01e      	b.n	8006baa <HAL_ADC_ConfigChannel+0x232>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe ff1d 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b82:	fa93 f3a3 	rbit	r3, r3
 8006b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8006b9a:	2320      	movs	r3, #32
 8006b9c:	e004      	b.n	8006ba8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8006b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ba2:	fab3 f383 	clz	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x24a>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	0e9b      	lsrs	r3, r3, #26
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	e018      	b.n	8006bf4 <HAL_ADC_ConfigChannel+0x27c>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bce:	fa93 f3a3 	rbit	r3, r3
 8006bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8006be6:	2320      	movs	r3, #32
 8006be8:	e004      	b.n	8006bf4 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8006bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d107      	bne.n	8006c08 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	f7fe feb4 	bl	8005970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe fecf 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x2c0>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2101      	movs	r1, #1
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fec4 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	0e9b      	lsrs	r3, r3, #26
 8006c2e:	f003 021f 	and.w	r2, r3, #31
 8006c32:	e020      	b.n	8006c76 <HAL_ADC_ConfigChannel+0x2fe>
 8006c34:	46021000 	.word	0x46021000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe feb7 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8006c66:	2320      	movs	r3, #32
 8006c68:	e004      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8006c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6e:	fab3 f383 	clz	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <HAL_ADC_ConfigChannel+0x316>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	0e9b      	lsrs	r3, r3, #26
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	e018      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x348>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	e004      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8006cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2101      	movs	r1, #1
 8006cd0:	f7fe fe4e 	bl	8005970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fe69 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <HAL_ADC_ConfigChannel+0x388>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2102      	movs	r1, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fe5e 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	0e9b      	lsrs	r3, r3, #26
 8006cfa:	f003 021f 	and.w	r2, r3, #31
 8006cfe:	e01a      	b.n	8006d36 <HAL_ADC_ConfigChannel+0x3be>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fe53 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d12:	fa93 f3a3 	rbit	r3, r3
 8006d16:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006d26:	2320      	movs	r3, #32
 8006d28:	e004      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8006d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d2e:	fab3 f383 	clz	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x3d6>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	0e9b      	lsrs	r3, r3, #26
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	e011      	b.n	8006d72 <HAL_ADC_ConfigChannel+0x3fa>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d56:	fa93 f3a3 	rbit	r3, r3
 8006d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8006d66:	2320      	movs	r3, #32
 8006d68:	e003      	b.n	8006d72 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6c:	fab3 f383 	clz	r3, r3
 8006d70:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d107      	bne.n	8006d86 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2102      	movs	r1, #2
 8006d82:	f7fe fdf5 	bl	8005970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2103      	movs	r1, #3
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fe10 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x43a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2103      	movs	r1, #3
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fe05 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006da8:	4603      	mov	r3, r0
 8006daa:	0e9b      	lsrs	r3, r3, #26
 8006dac:	f003 021f 	and.w	r2, r3, #31
 8006db0:	e017      	b.n	8006de2 <HAL_ADC_ConfigChannel+0x46a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2103      	movs	r1, #3
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe fdfa 	bl	80059b2 <LL_ADC_GetOffsetChannel>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc4:	fa93 f3a3 	rbit	r3, r3
 8006dc8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dcc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	e003      	b.n	8006de0 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8006dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dda:	fab3 f383 	clz	r3, r3
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x482>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	0e9b      	lsrs	r3, r3, #26
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	e011      	b.n	8006e1e <HAL_ADC_ConfigChannel+0x4a6>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e02:	fa93 f3a3 	rbit	r3, r3
 8006e06:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8006e12:	2320      	movs	r3, #32
 8006e14:	e003      	b.n	8006e1e <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8006e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e18:	fab3 f383 	clz	r3, r3
 8006e1c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d107      	bne.n	8006e32 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	f7fe fd9f 	bl	8005970 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff f82a 	bl	8005e90 <LL_ADC_IsEnabled>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 83ad 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6819      	ldr	r1, [r3, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	461a      	mov	r2, r3
 8006e52:	f7fe ff7b 	bl	8005d4c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e5e:	f040 80d6 	bne.w	800700e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <HAL_ADC_ConfigChannel+0x50e>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	0e9b      	lsrs	r3, r3, #26
 8006e74:	3301      	adds	r3, #1
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	bf94      	ite	ls
 8006e7e:	2301      	movls	r3, #1
 8006e80:	2300      	movhi	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	e019      	b.n	8006eba <HAL_ADC_ConfigChannel+0x542>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8e:	fa93 f3a3 	rbit	r3, r3
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	e003      	b.n	8006eaa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea4:	fab3 f383 	clz	r3, r3
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	bf94      	ite	ls
 8006eb4:	2301      	movls	r3, #1
 8006eb6:	2300      	movhi	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d04d      	beq.n	8006f5a <HAL_ADC_ConfigChannel+0x5e2>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x562>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	0e9b      	lsrs	r3, r3, #26
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	069b      	lsls	r3, r3, #26
 8006ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ed8:	e015      	b.n	8006f06 <HAL_ADC_ConfigChannel+0x58e>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	fa93 f3a3 	rbit	r3, r3
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	e003      	b.n	8006efe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef8:	fab3 f383 	clz	r3, r3
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	3301      	adds	r3, #1
 8006f00:	069b      	lsls	r3, r3, #26
 8006f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x5ae>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	0e9b      	lsrs	r3, r3, #26
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2101      	movs	r1, #1
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	e017      	b.n	8006f56 <HAL_ADC_ConfigChannel+0x5de>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	fa93 f3a3 	rbit	r3, r3
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8006f3e:	2320      	movs	r3, #32
 8006f40:	e003      	b.n	8006f4a <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	fab3 f383 	clz	r3, r3
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	e04e      	b.n	8006ff8 <HAL_ADC_ConfigChannel+0x680>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d107      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x5fe>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	0e9b      	lsrs	r3, r3, #26
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	069b      	lsls	r3, r3, #26
 8006f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f74:	e015      	b.n	8006fa2 <HAL_ADC_ConfigChannel+0x62a>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	fa93 f3a3 	rbit	r3, r3
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8006f8e:	2320      	movs	r3, #32
 8006f90:	e003      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	fab3 f383 	clz	r3, r3
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	069b      	lsls	r3, r3, #26
 8006f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_ADC_ConfigChannel+0x64a>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	0e9b      	lsrs	r3, r3, #26
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2101      	movs	r1, #1
 8006fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc0:	e017      	b.n	8006ff2 <HAL_ADC_ConfigChannel+0x67a>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	fa93 f3a3 	rbit	r3, r3
 8006fce:	61bb      	str	r3, [r7, #24]
  return result;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8006fda:	2320      	movs	r3, #32
 8006fdc:	e003      	b.n	8006fe6 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2101      	movs	r1, #1
 8006fee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800700a:	f7fe fe3b 	bl	8005c84 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f280 82c3 	bge.w	800759e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a92      	ldr	r2, [pc, #584]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_ADC_ConfigChannel+0x6b4>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a91      	ldr	r2, [pc, #580]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d101      	bne.n	8007030 <HAL_ADC_ConfigChannel+0x6b8>
 800702c:	4b90      	ldr	r3, [pc, #576]	; (8007270 <HAL_ADC_ConfigChannel+0x8f8>)
 800702e:	e000      	b.n	8007032 <HAL_ADC_ConfigChannel+0x6ba>
 8007030:	4b90      	ldr	r3, [pc, #576]	; (8007274 <HAL_ADC_ConfigChannel+0x8fc>)
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fc6e 	bl	8005914 <LL_ADC_GetCommonPathInternalCh>
 8007038:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a89      	ldr	r2, [pc, #548]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_ADC_ConfigChannel+0x6d8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a88      	ldr	r2, [pc, #544]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10e      	bne.n	800706e <HAL_ADC_ConfigChannel+0x6f6>
 8007050:	4885      	ldr	r0, [pc, #532]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 8007052:	f7fe ff1d 	bl	8005e90 <LL_ADC_IsEnabled>
 8007056:	4604      	mov	r4, r0
 8007058:	4884      	ldr	r0, [pc, #528]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 800705a:	f7fe ff19 	bl	8005e90 <LL_ADC_IsEnabled>
 800705e:	4603      	mov	r3, r0
 8007060:	4323      	orrs	r3, r4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf0c      	ite	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	2300      	movne	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	e008      	b.n	8007080 <HAL_ADC_ConfigChannel+0x708>
 800706e:	4882      	ldr	r0, [pc, #520]	; (8007278 <HAL_ADC_ConfigChannel+0x900>)
 8007070:	f7fe ff0e 	bl	8005e90 <LL_ADC_IsEnabled>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	bf0c      	ite	eq
 800707a:	2301      	moveq	r3, #1
 800707c:	2300      	movne	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a6 	beq.w	80071d2 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a7c      	ldr	r2, [pc, #496]	; (800727c <HAL_ADC_ConfigChannel+0x904>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d13c      	bne.n	800710a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d136      	bne.n	800710a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a71      	ldr	r2, [pc, #452]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00a      	beq.n	80070bc <HAL_ADC_ConfigChannel+0x744>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a70      	ldr	r2, [pc, #448]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d005      	beq.n	80070bc <HAL_ADC_ConfigChannel+0x744>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a70      	ldr	r2, [pc, #448]	; (8007278 <HAL_ADC_ConfigChannel+0x900>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f040 826e 	bne.w	8007598 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a69      	ldr	r2, [pc, #420]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_ADC_ConfigChannel+0x758>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a68      	ldr	r2, [pc, #416]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x75c>
 80070d0:	4a67      	ldr	r2, [pc, #412]	; (8007270 <HAL_ADC_ConfigChannel+0x8f8>)
 80070d2:	e000      	b.n	80070d6 <HAL_ADC_ConfigChannel+0x75e>
 80070d4:	4a67      	ldr	r2, [pc, #412]	; (8007274 <HAL_ADC_ConfigChannel+0x8fc>)
 80070d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fe fc04 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070e6:	4b66      	ldr	r3, [pc, #408]	; (8007280 <HAL_ADC_ConfigChannel+0x908>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	099b      	lsrs	r3, r3, #6
 80070ec:	4a65      	ldr	r2, [pc, #404]	; (8007284 <HAL_ADC_ConfigChannel+0x90c>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	099b      	lsrs	r3, r3, #6
 80070f4:	3301      	adds	r3, #1
 80070f6:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80070f8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80070fa:	e002      	b.n	8007102 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f9      	bne.n	80070fc <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007108:	e246      	b.n	8007598 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a5e      	ldr	r2, [pc, #376]	; (8007288 <HAL_ADC_ConfigChannel+0x910>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d12b      	bne.n	800716c <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800711c:	2b00      	cmp	r3, #0
 800711e:	d125      	bne.n	800716c <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a50      	ldr	r2, [pc, #320]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00a      	beq.n	8007140 <HAL_ADC_ConfigChannel+0x7c8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a4f      	ldr	r2, [pc, #316]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d005      	beq.n	8007140 <HAL_ADC_ConfigChannel+0x7c8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a4f      	ldr	r2, [pc, #316]	; (8007278 <HAL_ADC_ConfigChannel+0x900>)
 800713a:	4293      	cmp	r3, r2
 800713c:	f040 822e 	bne.w	800759c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a48      	ldr	r2, [pc, #288]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_ADC_ConfigChannel+0x7dc>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a47      	ldr	r2, [pc, #284]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d101      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x7e0>
 8007154:	4a46      	ldr	r2, [pc, #280]	; (8007270 <HAL_ADC_ConfigChannel+0x8f8>)
 8007156:	e000      	b.n	800715a <HAL_ADC_ConfigChannel+0x7e2>
 8007158:	4a46      	ldr	r2, [pc, #280]	; (8007274 <HAL_ADC_ConfigChannel+0x8fc>)
 800715a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800715e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fe fbc2 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800716a:	e217      	b.n	800759c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a46      	ldr	r2, [pc, #280]	; (800728c <HAL_ADC_ConfigChannel+0x914>)
 8007172:	4293      	cmp	r3, r2
 8007174:	f040 8213 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800717c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 820c 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a37      	ldr	r2, [pc, #220]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00a      	beq.n	80071a6 <HAL_ADC_ConfigChannel+0x82e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a35      	ldr	r2, [pc, #212]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d005      	beq.n	80071a6 <HAL_ADC_ConfigChannel+0x82e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a36      	ldr	r2, [pc, #216]	; (8007278 <HAL_ADC_ConfigChannel+0x900>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	f040 81fc 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <HAL_ADC_ConfigChannel+0x8f0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_ADC_ConfigChannel+0x842>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2d      	ldr	r2, [pc, #180]	; (800726c <HAL_ADC_ConfigChannel+0x8f4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d101      	bne.n	80071be <HAL_ADC_ConfigChannel+0x846>
 80071ba:	4a2d      	ldr	r2, [pc, #180]	; (8007270 <HAL_ADC_ConfigChannel+0x8f8>)
 80071bc:	e000      	b.n	80071c0 <HAL_ADC_ConfigChannel+0x848>
 80071be:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <HAL_ADC_ConfigChannel+0x8fc>)
 80071c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe fb8f 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
 80071d0:	e1e5      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80071e4:	e1db      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	f000 811b 	beq.w	800742e <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007200:	d004      	beq.n	800720c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8007206:	4a22      	ldr	r2, [pc, #136]	; (8007290 <HAL_ADC_ConfigChannel+0x918>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d107      	bne.n	800721c <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fce9 	bl	8005bec <LL_ADC_REG_SetSequencerChAdd>
 800721a:	e059      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	210f      	movs	r1, #15
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	401a      	ands	r2, r3
 8007234:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <HAL_ADC_ConfigChannel+0x8d4>
 8007240:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007244:	0e9b      	lsrs	r3, r3, #26
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	e027      	b.n	800729c <HAL_ADC_ConfigChannel+0x924>
 800724c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007250:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	fa93 f3a3 	rbit	r3, r3
 8007258:	60fb      	str	r3, [r7, #12]
  return result;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d117      	bne.n	8007294 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8007264:	2320      	movs	r3, #32
 8007266:	e019      	b.n	800729c <HAL_ADC_ConfigChannel+0x924>
 8007268:	42028000 	.word	0x42028000
 800726c:	42028100 	.word	0x42028100
 8007270:	42028300 	.word	0x42028300
 8007274:	46021300 	.word	0x46021300
 8007278:	46021000 	.word	0x46021000
 800727c:	ce080000 	.word	0xce080000
 8007280:	20000000 	.word	0x20000000
 8007284:	053e2d63 	.word	0x053e2d63
 8007288:	ca040000 	.word	0xca040000
 800728c:	80000001 	.word	0x80000001
 8007290:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	fab3 f383 	clz	r3, r3
 800729a:	b2db      	uxtb	r3, r3
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	f001 011f 	and.w	r1, r1, #31
 80072a4:	408b      	lsls	r3, r1
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d808      	bhi.n	80072d0 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ca:	4619      	mov	r1, r3
 80072cc:	f7fe fc2e 	bl	8005b2c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	461a      	mov	r2, r3
 80072da:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80072de:	f7fe fcd1 	bl	8005c84 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f280 8159 	bge.w	800759e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a9b      	ldr	r2, [pc, #620]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_ADC_ConfigChannel+0x988>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a9a      	ldr	r2, [pc, #616]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <HAL_ADC_ConfigChannel+0x98c>
 8007300:	4b99      	ldr	r3, [pc, #612]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 8007302:	e000      	b.n	8007306 <HAL_ADC_ConfigChannel+0x98e>
 8007304:	4b99      	ldr	r3, [pc, #612]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fb04 	bl	8005914 <LL_ADC_GetCommonPathInternalCh>
 800730c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a96      	ldr	r2, [pc, #600]	; (8007570 <HAL_ADC_ConfigChannel+0xbf8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d12b      	bne.n	8007372 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800731a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800731e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d125      	bne.n	8007372 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a8d      	ldr	r2, [pc, #564]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_ADC_ConfigChannel+0x9c2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a8b      	ldr	r2, [pc, #556]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <HAL_ADC_ConfigChannel+0x9c6>
 800733a:	4a8b      	ldr	r2, [pc, #556]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 800733c:	e000      	b.n	8007340 <HAL_ADC_ConfigChannel+0x9c8>
 800733e:	4a8b      	ldr	r2, [pc, #556]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 8007340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7fe facf 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007350:	4b88      	ldr	r3, [pc, #544]	; (8007574 <HAL_ADC_ConfigChannel+0xbfc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	099b      	lsrs	r3, r3, #6
 8007356:	4a88      	ldr	r2, [pc, #544]	; (8007578 <HAL_ADC_ConfigChannel+0xc00>)
 8007358:	fba2 2303 	umull	r2, r3, r2, r3
 800735c:	099b      	lsrs	r3, r3, #6
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8007362:	e002      	b.n	800736a <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	3b01      	subs	r3, #1
 8007368:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1f9      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8007370:	e045      	b.n	80073fe <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a81      	ldr	r2, [pc, #516]	; (800757c <HAL_ADC_ConfigChannel+0xc04>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d11b      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800737c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8007384:	2b00      	cmp	r3, #0
 8007386:	d115      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a74      	ldr	r2, [pc, #464]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_ADC_ConfigChannel+0xa24>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a73      	ldr	r2, [pc, #460]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d101      	bne.n	80073a0 <HAL_ADC_ConfigChannel+0xa28>
 800739c:	4a72      	ldr	r2, [pc, #456]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 800739e:	e000      	b.n	80073a2 <HAL_ADC_ConfigChannel+0xa2a>
 80073a0:	4a72      	ldr	r2, [pc, #456]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 80073a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7fe fa9e 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
 80073b2:	e024      	b.n	80073fe <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a71      	ldr	r2, [pc, #452]	; (8007580 <HAL_ADC_ConfigChannel+0xc08>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d11f      	bne.n	80073fe <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d115      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a64      	ldr	r2, [pc, #400]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_ADC_ConfigChannel+0xa66>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a62      	ldr	r2, [pc, #392]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d101      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0xa6a>
 80073de:	4a62      	ldr	r2, [pc, #392]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 80073e0:	e000      	b.n	80073e4 <HAL_ADC_ConfigChannel+0xa6c>
 80073e2:	4a62      	ldr	r2, [pc, #392]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 80073e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fa7d 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
 80073f4:	e003      	b.n	80073fe <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a62      	ldr	r2, [pc, #392]	; (8007584 <HAL_ADC_ConfigChannel+0xc0c>)
 80073fc:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a61      	ldr	r2, [pc, #388]	; (8007588 <HAL_ADC_ConfigChannel+0xc10>)
 8007404:	4293      	cmp	r3, r2
 8007406:	f040 80ca 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800740a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 80c3 	bne.w	800759e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800742c:	e0b7      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007436:	d004      	beq.n	8007442 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800743c:	4a53      	ldr	r2, [pc, #332]	; (800758c <HAL_ADC_ConfigChannel+0xc14>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d106      	bne.n	8007450 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fc01 	bl	8005c52 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f280 80a2 	bge.w	800759e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a40      	ldr	r2, [pc, #256]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d004      	beq.n	800746e <HAL_ADC_ConfigChannel+0xaf6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a3e      	ldr	r2, [pc, #248]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d101      	bne.n	8007472 <HAL_ADC_ConfigChannel+0xafa>
 800746e:	4b3e      	ldr	r3, [pc, #248]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 8007470:	e000      	b.n	8007474 <HAL_ADC_ConfigChannel+0xafc>
 8007472:	4b3e      	ldr	r3, [pc, #248]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fa4d 	bl	8005914 <LL_ADC_GetCommonPathInternalCh>
 800747a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a43      	ldr	r2, [pc, #268]	; (8007590 <HAL_ADC_ConfigChannel+0xc18>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d115      	bne.n	80074b4 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a34      	ldr	r2, [pc, #208]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_ADC_ConfigChannel+0xb24>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a33      	ldr	r2, [pc, #204]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d101      	bne.n	80074a0 <HAL_ADC_ConfigChannel+0xb28>
 800749c:	4a32      	ldr	r2, [pc, #200]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 800749e:	e000      	b.n	80074a2 <HAL_ADC_ConfigChannel+0xb2a>
 80074a0:	4a32      	ldr	r2, [pc, #200]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 80074a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe fa1e 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
 80074b2:	e034      	b.n	800751e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a36      	ldr	r2, [pc, #216]	; (8007594 <HAL_ADC_ConfigChannel+0xc1c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d115      	bne.n	80074ea <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a27      	ldr	r2, [pc, #156]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_ADC_ConfigChannel+0xb5a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a25      	ldr	r2, [pc, #148]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d101      	bne.n	80074d6 <HAL_ADC_ConfigChannel+0xb5e>
 80074d2:	4a25      	ldr	r2, [pc, #148]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 80074d4:	e000      	b.n	80074d8 <HAL_ADC_ConfigChannel+0xb60>
 80074d6:	4a25      	ldr	r2, [pc, #148]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 80074d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe fa03 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
 80074e8:	e019      	b.n	800751e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a24      	ldr	r2, [pc, #144]	; (8007580 <HAL_ADC_ConfigChannel+0xc08>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d114      	bne.n	800751e <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a19      	ldr	r2, [pc, #100]	; (8007560 <HAL_ADC_ConfigChannel+0xbe8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_ADC_ConfigChannel+0xb90>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a18      	ldr	r2, [pc, #96]	; (8007564 <HAL_ADC_ConfigChannel+0xbec>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d101      	bne.n	800750c <HAL_ADC_ConfigChannel+0xb94>
 8007508:	4a17      	ldr	r2, [pc, #92]	; (8007568 <HAL_ADC_ConfigChannel+0xbf0>)
 800750a:	e000      	b.n	800750e <HAL_ADC_ConfigChannel+0xb96>
 800750c:	4a17      	ldr	r2, [pc, #92]	; (800756c <HAL_ADC_ConfigChannel+0xbf4>)
 800750e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007512:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7fe f9e8 	bl	80058ee <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a19      	ldr	r2, [pc, #100]	; (8007588 <HAL_ADC_ConfigChannel+0xc10>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d13a      	bne.n	800759e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800752c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d134      	bne.n	800759e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007548:	e029      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800755c:	e01f      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
 800755e:	bf00      	nop
 8007560:	42028000 	.word	0x42028000
 8007564:	42028100 	.word	0x42028100
 8007568:	42028300 	.word	0x42028300
 800756c:	46021300 	.word	0x46021300
 8007570:	b6002000 	.word	0xb6002000
 8007574:	20000000 	.word	0x20000000
 8007578:	053e2d63 	.word	0x053e2d63
 800757c:	ba004000 	.word	0xba004000
 8007580:	80000001 	.word	0x80000001
 8007584:	b2001000 	.word	0xb2001000
 8007588:	d7200000 	.word	0xd7200000
 800758c:	80000010 	.word	0x80000010
 8007590:	ce080000 	.word	0xce080000
 8007594:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800759c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80075a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	37dc      	adds	r7, #220	; 0xdc
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd90      	pop	{r4, r7, pc}
 80075b2:	bf00      	nop

080075b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fc65 	bl	8005e90 <LL_ADC_IsEnabled>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d17b      	bne.n	80076c4 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	4b3f      	ldr	r3, [pc, #252]	; (80076d0 <ADC_Enable+0x11c>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00d      	beq.n	80075f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075de:	f043 0210 	orr.w	r2, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ea:	f043 0201 	orr.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e067      	b.n	80076c6 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fc30 	bl	8005e68 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <ADC_Enable+0x66>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <ADC_Enable+0x120>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d054      	beq.n	80076c4 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800761a:	f7fe f8fd 	bl	8005818 <HAL_GetTick>
 800761e:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <ADC_Enable+0x124>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <ADC_Enable+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2b      	ldr	r2, [pc, #172]	; (80076dc <ADC_Enable+0x128>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <ADC_Enable+0x84>
 8007634:	4b2a      	ldr	r3, [pc, #168]	; (80076e0 <ADC_Enable+0x12c>)
 8007636:	e000      	b.n	800763a <ADC_Enable+0x86>
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <ADC_Enable+0x130>)
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fbaa 	bl	8005d94 <LL_ADC_GetMultimode>
 8007640:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a25      	ldr	r2, [pc, #148]	; (80076dc <ADC_Enable+0x128>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d002      	beq.n	8007652 <ADC_Enable+0x9e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	e000      	b.n	8007654 <ADC_Enable+0xa0>
 8007652:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <ADC_Enable+0x124>)
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	4293      	cmp	r3, r2
 800765a:	d02c      	beq.n	80076b6 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d130      	bne.n	80076c4 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007662:	e028      	b.n	80076b6 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe fc11 	bl	8005e90 <LL_ADC_IsEnabled>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fbf5 	bl	8005e68 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800767e:	f7fe f8cb 	bl	8005818 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d914      	bls.n	80076b6 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b01      	cmp	r3, #1
 8007698:	d00d      	beq.n	80076b6 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800769e:	f043 0210 	orr.w	r2, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	f043 0201 	orr.w	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e007      	b.n	80076c6 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d1cf      	bne.n	8007664 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	8000003f 	.word	0x8000003f
 80076d4:	46021000 	.word	0x46021000
 80076d8:	42028000 	.word	0x42028000
 80076dc:	42028100 	.word	0x42028100
 80076e0:	42028300 	.word	0x42028300
 80076e4:	46021300 	.word	0x46021300

080076e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <__NVIC_SetPriorityGrouping+0x44>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007704:	4013      	ands	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800771a:	4a04      	ldr	r2, [pc, #16]	; (800772c <__NVIC_SetPriorityGrouping+0x44>)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	60d3      	str	r3, [r2, #12]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	e000ed00 	.word	0xe000ed00

08007730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <__NVIC_GetPriorityGrouping+0x18>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	f003 0307 	and.w	r3, r3, #7
}
 800773e:	4618      	mov	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800775c:	2b00      	cmp	r3, #0
 800775e:	db0a      	blt.n	8007776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	b2da      	uxtb	r2, r3
 8007764:	490c      	ldr	r1, [pc, #48]	; (8007798 <__NVIC_SetPriority+0x4c>)
 8007766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800776a:	0112      	lsls	r2, r2, #4
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	440b      	add	r3, r1
 8007770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007774:	e00a      	b.n	800778c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	4908      	ldr	r1, [pc, #32]	; (800779c <__NVIC_SetPriority+0x50>)
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	3b04      	subs	r3, #4
 8007784:	0112      	lsls	r2, r2, #4
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	440b      	add	r3, r1
 800778a:	761a      	strb	r2, [r3, #24]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	e000e100 	.word	0xe000e100
 800779c:	e000ed00 	.word	0xe000ed00

080077a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	; 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f1c3 0307 	rsb	r3, r3, #7
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	bf28      	it	cs
 80077be:	2304      	movcs	r3, #4
 80077c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	3304      	adds	r3, #4
 80077c6:	2b06      	cmp	r3, #6
 80077c8:	d902      	bls.n	80077d0 <NVIC_EncodePriority+0x30>
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	3b03      	subs	r3, #3
 80077ce:	e000      	b.n	80077d2 <NVIC_EncodePriority+0x32>
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	43da      	mvns	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	401a      	ands	r2, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	fa01 f303 	lsl.w	r3, r1, r3
 80077f2:	43d9      	mvns	r1, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077f8:	4313      	orrs	r3, r2
         );
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3724      	adds	r7, #36	; 0x24
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3b01      	subs	r3, #1
 8007814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007818:	d301      	bcc.n	800781e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800781a:	2301      	movs	r3, #1
 800781c:	e00f      	b.n	800783e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800781e:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <SysTick_Config+0x40>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3b01      	subs	r3, #1
 8007824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007826:	210f      	movs	r1, #15
 8007828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800782c:	f7ff ff8e 	bl	800774c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <SysTick_Config+0x40>)
 8007832:	2200      	movs	r2, #0
 8007834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007836:	4b04      	ldr	r3, [pc, #16]	; (8007848 <SysTick_Config+0x40>)
 8007838:	2207      	movs	r2, #7
 800783a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	e000e010 	.word	0xe000e010

0800784c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff ff47 	bl	80076e8 <__NVIC_SetPriorityGrouping>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	4603      	mov	r3, r0
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007870:	f7ff ff5e 	bl	8007730 <__NVIC_GetPriorityGrouping>
 8007874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	6978      	ldr	r0, [r7, #20]
 800787c:	f7ff ff90 	bl	80077a0 <NVIC_EncodePriority>
 8007880:	4602      	mov	r2, r0
 8007882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff ff5f 	bl	800774c <__NVIC_SetPriority>
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff ffb2 	bl	8007808 <SysTick_Config>
 80078a4:	4603      	mov	r3, r0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b089      	sub	sp, #36	; 0x24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80078c2:	e1ba      	b.n	8007c3a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	2101      	movs	r1, #1
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 81aa 	beq.w	8007c34 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a55      	ldr	r2, [pc, #340]	; (8007a38 <HAL_GPIO_Init+0x188>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d15d      	bne.n	80079a4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80078ee:	2201      	movs	r2, #1
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43db      	mvns	r3, r3
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	4013      	ands	r3, r2
 80078fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 0201 	and.w	r2, r3, #1
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	fa02 f303 	lsl.w	r3, r2, r3
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	4313      	orrs	r3, r2
 8007910:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007918:	4a48      	ldr	r2, [pc, #288]	; (8007a3c <HAL_GPIO_Init+0x18c>)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007920:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007922:	4a46      	ldr	r2, [pc, #280]	; (8007a3c <HAL_GPIO_Init+0x18c>)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	4413      	add	r3, r2
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	08da      	lsrs	r2, r3, #3
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	3208      	adds	r2, #8
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	220f      	movs	r2, #15
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43db      	mvns	r3, r3
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	4013      	ands	r3, r2
 8007950:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	220b      	movs	r2, #11
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	4313      	orrs	r3, r2
 8007964:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	08da      	lsrs	r2, r3, #3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3208      	adds	r2, #8
 800796e:	69f9      	ldr	r1, [r7, #28]
 8007970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	2203      	movs	r2, #3
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	43db      	mvns	r3, r3
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	4013      	ands	r3, r2
 800798a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	2202      	movs	r2, #2
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	4313      	orrs	r3, r2
 800799a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e067      	b.n	8007a74 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d003      	beq.n	80079b4 <HAL_GPIO_Init+0x104>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b12      	cmp	r3, #18
 80079b2:	d145      	bne.n	8007a40 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	08da      	lsrs	r2, r3, #3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3208      	adds	r2, #8
 80079bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	220f      	movs	r2, #15
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	4013      	ands	r3, r2
 80079d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	08da      	lsrs	r2, r3, #3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3208      	adds	r2, #8
 80079fa:	69f9      	ldr	r1, [r7, #28]
 80079fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	43db      	mvns	r3, r3
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	4013      	ands	r3, r2
 8007a16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f003 0203 	and.w	r2, r3, #3
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e01e      	b.n	8007a74 <HAL_GPIO_Init+0x1c4>
 8007a36:	bf00      	nop
 8007a38:	46020000 	.word	0x46020000
 8007a3c:	08010294 	.word	0x08010294
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0203 	and.w	r2, r3, #3
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d00b      	beq.n	8007a94 <HAL_GPIO_Init+0x1e4>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d007      	beq.n	8007a94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a88:	2b11      	cmp	r3, #17
 8007a8a:	d003      	beq.n	8007a94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b12      	cmp	r3, #18
 8007a92:	d130      	bne.n	8007af6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007aca:	2201      	movs	r2, #1
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	091b      	lsrs	r3, r3, #4
 8007ae0:	f003 0201 	and.w	r2, r3, #1
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d017      	beq.n	8007b2e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	2203      	movs	r2, #3
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	4013      	ands	r3, r2
 8007b14:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d07c      	beq.n	8007c34 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007b3a:	4a47      	ldr	r2, [pc, #284]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	089b      	lsrs	r3, r3, #2
 8007b40:	3318      	adds	r3, #24
 8007b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	220f      	movs	r2, #15
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43db      	mvns	r3, r3
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0a9a      	lsrs	r2, r3, #10
 8007b62:	4b3e      	ldr	r3, [pc, #248]	; (8007c5c <HAL_GPIO_Init+0x3ac>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	f002 0203 	and.w	r2, r2, #3
 8007b6c:	00d2      	lsls	r2, r2, #3
 8007b6e:	4093      	lsls	r3, r2
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007b76:	4938      	ldr	r1, [pc, #224]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	089b      	lsrs	r3, r3, #2
 8007b7c:	3318      	adds	r3, #24
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007b84:	4b34      	ldr	r3, [pc, #208]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	4013      	ands	r3, r2
 8007b92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007ba8:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007bae:	4b2a      	ldr	r3, [pc, #168]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007bd8:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	4013      	ands	r3, r2
 8007be8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007bfe:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007c06:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	4013      	ands	r3, r2
 8007c16:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007c2c:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <HAL_GPIO_Init+0x3a8>)
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3301      	adds	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f47f ae3d 	bne.w	80078c4 <HAL_GPIO_Init+0x14>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	bf00      	nop
 8007c4e:	3724      	adds	r7, #36	; 0x24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	46022000 	.word	0x46022000
 8007c5c:	002f7f7f 	.word	0x002f7f7f

08007c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	807b      	strh	r3, [r7, #2]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c70:	787b      	ldrb	r3, [r7, #1]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c76:	887a      	ldrh	r2, [r7, #2]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007c7c:	e002      	b.n	8007c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007c7e:	887a      	ldrh	r2, [r7, #2]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ca2:	887a      	ldrh	r2, [r7, #2]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	041a      	lsls	r2, r3, #16
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	43d9      	mvns	r1, r3
 8007cae:	887b      	ldrh	r3, [r7, #2]
 8007cb0:	400b      	ands	r3, r1
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	619a      	str	r2, [r3, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	b08d      	sub	sp, #52	; 0x34
 8007cc8:	af0a      	add	r7, sp, #40	; 0x28
 8007cca:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e048      	b.n	8007d68 <HAL_HCD_Init+0xa4>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fc fd4a 	bl	8004784 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
  {
    hhcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f006 f9d0 	bl	800e0a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	687e      	ldr	r6, [r7, #4]
 8007d0a:	466d      	mov	r5, sp
 8007d0c:	f106 0410 	add.w	r4, r6, #16
 8007d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d20:	1d33      	adds	r3, r6, #4
 8007d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d24:	6838      	ldr	r0, [r7, #0]
 8007d26:	f006 f98e 	bl	800e046 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2101      	movs	r1, #1
 8007d30:	4618      	mov	r0, r3
 8007d32:	f006 f9c7 	bl	800e0c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	687e      	ldr	r6, [r7, #4]
 8007d3e:	466d      	mov	r5, sp
 8007d40:	f106 0410 	add.w	r4, r6, #16
 8007d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d54:	1d33      	adds	r3, r6, #4
 8007d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d58:	6838      	ldr	r0, [r7, #0]
 8007d5a:	f006 faa5 	bl	800e2a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d70 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e007      	b.n	8007d9e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8007d8e:	4b07      	ldr	r3, [pc, #28]	; (8007dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 0204 	bic.w	r2, r3, #4
 8007d96:	4905      	ldr	r1, [pc, #20]	; (8007dac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40030400 	.word	0x40030400

08007db0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <HAL_ICACHE_Enable+0x1c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <HAL_ICACHE_Enable+0x1c>)
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40030400 	.word	0x40030400

08007dd0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007dd8:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007de0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d10b      	bne.n	8007e02 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df0:	d905      	bls.n	8007dfe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007df2:	4b33      	ldr	r3, [pc, #204]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	4a32      	ldr	r2, [pc, #200]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dfc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e057      	b.n	8007eb2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e08:	d90a      	bls.n	8007e20 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e1c:	60d3      	str	r3, [r2, #12]
 8007e1e:	e007      	b.n	8007e30 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e28:	4925      	ldr	r1, [pc, #148]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007e30:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a24      	ldr	r2, [pc, #144]	; (8007ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	2232      	movs	r2, #50	; 0x32
 8007e3e:	fb02 f303 	mul.w	r3, r2, r3
 8007e42:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e44:	fba2 2303 	umull	r2, r3, r2, r3
 8007e48:	099b      	lsrs	r3, r3, #6
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007e4e:	e002      	b.n	8007e56 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007e56:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <HAL_PWREx_ControlVoltageScaling+0x98>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1f3      	bne.n	8007e50 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01b      	beq.n	8007ea6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e74:	fba2 2303 	umull	r2, r3, r2, r3
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	2232      	movs	r2, #50	; 0x32
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e8c:	e002      	b.n	8007e94 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e94:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f3      	bne.n	8007e8e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e000      	b.n	8007eb2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	46020800 	.word	0x46020800
 8007ec4:	20000000 	.word	0x20000000
 8007ec8:	10624dd3 	.word	0x10624dd3

08007ecc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	46020800 	.word	0x46020800

08007ee8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007ef0:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <HAL_PWREx_ConfigSupply+0x94>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <HAL_PWREx_ConfigSupply+0x98>)
 8007ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8007efa:	099b      	lsrs	r3, r3, #6
 8007efc:	2232      	movs	r2, #50	; 0x32
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <HAL_PWREx_ConfigSupply+0x98>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	099b      	lsrs	r3, r3, #6
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007f14:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	4a1a      	ldr	r2, [pc, #104]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f1a:	f023 0302 	bic.w	r3, r3, #2
 8007f1e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007f20:	e002      	b.n	8007f28 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007f28:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d116      	bne.n	8007f62 <HAL_PWREx_ConfigSupply+0x7a>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f3      	bne.n	8007f22 <HAL_PWREx_ConfigSupply+0x3a>
 8007f3a:	e012      	b.n	8007f62 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007f3c:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f42:	f043 0302 	orr.w	r3, r3, #2
 8007f46:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007f48:	e002      	b.n	8007f50 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007f50:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <HAL_PWREx_ConfigSupply+0x9c>)
 8007f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <HAL_PWREx_ConfigSupply+0x7a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f3      	bne.n	8007f4a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e000      	b.n	8007f6e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000000 	.word	0x20000000
 8007f80:	10624dd3 	.word	0x10624dd3
 8007f84:	46020800 	.word	0x46020800

08007f88 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	6113      	str	r3, [r2, #16]
}
 8007f98:	bf00      	nop
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	46020800 	.word	0x46020800

08007fa8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fb6:	6113      	str	r3, [r2, #16]
}
 8007fb8:	bf00      	nop
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	46020800 	.word	0x46020800

08007fc8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_PWREx_EnableVddA+0x1c>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a04      	ldr	r2, [pc, #16]	; (8007fe4 <HAL_PWREx_EnableVddA+0x1c>)
 8007fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	6113      	str	r3, [r2, #16]
}
 8007fd8:	bf00      	nop
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	46020800 	.word	0x46020800

08007fe8 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8007fee:	f7ff ff6d 	bl	8007ecc <HAL_PWREx_GetVoltageRange>
 8007ff2:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ffa:	d003      	beq.n	8008004 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008002:	d107      	bne.n	8008014 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4a05      	ldr	r2, [pc, #20]	; (8008020 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800800a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800800e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e000      	b.n	8008016 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	46020800 	.word	0x46020800

08008024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08e      	sub	sp, #56	; 0x38
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f000 bec8 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803e:	4b99      	ldr	r3, [pc, #612]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008048:	4b96      	ldr	r3, [pc, #600]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 816c 	beq.w	8008338 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <HAL_RCC_OscConfig+0x52>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b0c      	cmp	r3, #12
 800806a:	f040 80de 	bne.w	800822a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	2b01      	cmp	r3, #1
 8008072:	f040 80da 	bne.w	800822a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f000 bea5 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008088:	4b86      	ldr	r3, [pc, #536]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <HAL_RCC_OscConfig+0x7a>
 8008094:	4b83      	ldr	r3, [pc, #524]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800809c:	e005      	b.n	80080aa <HAL_RCC_OscConfig+0x86>
 800809e:	4b81      	ldr	r3, [pc, #516]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d255      	bcs.n	800815a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 f9d9 	bl	8009470 <RCC_SetFlashLatencyFromMSIRange>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f000 be82 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80080ca:	4b76      	ldr	r3, [pc, #472]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	4a75      	ldr	r2, [pc, #468]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080d4:	6093      	str	r3, [r2, #8]
 80080d6:	4b73      	ldr	r3, [pc, #460]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	4970      	ldr	r1, [pc, #448]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80080f0:	d309      	bcc.n	8008106 <HAL_RCC_OscConfig+0xe2>
 80080f2:	4b6c      	ldr	r3, [pc, #432]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f023 021f 	bic.w	r2, r3, #31
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	4969      	ldr	r1, [pc, #420]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008100:	4313      	orrs	r3, r2
 8008102:	60cb      	str	r3, [r1, #12]
 8008104:	e07e      	b.n	8008204 <HAL_RCC_OscConfig+0x1e0>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	da0a      	bge.n	8008124 <HAL_RCC_OscConfig+0x100>
 800810e:	4b65      	ldr	r3, [pc, #404]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	015b      	lsls	r3, r3, #5
 800811c:	4961      	ldr	r1, [pc, #388]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800811e:	4313      	orrs	r3, r2
 8008120:	60cb      	str	r3, [r1, #12]
 8008122:	e06f      	b.n	8008204 <HAL_RCC_OscConfig+0x1e0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812c:	d30a      	bcc.n	8008144 <HAL_RCC_OscConfig+0x120>
 800812e:	4b5d      	ldr	r3, [pc, #372]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	4959      	ldr	r1, [pc, #356]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800813e:	4313      	orrs	r3, r2
 8008140:	60cb      	str	r3, [r1, #12]
 8008142:	e05f      	b.n	8008204 <HAL_RCC_OscConfig+0x1e0>
 8008144:	4b57      	ldr	r3, [pc, #348]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	03db      	lsls	r3, r3, #15
 8008152:	4954      	ldr	r1, [pc, #336]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008154:	4313      	orrs	r3, r2
 8008156:	60cb      	str	r3, [r1, #12]
 8008158:	e054      	b.n	8008204 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800815a:	4b52      	ldr	r3, [pc, #328]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	4a51      	ldr	r2, [pc, #324]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008164:	6093      	str	r3, [r2, #8]
 8008166:	4b4f      	ldr	r3, [pc, #316]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	494c      	ldr	r1, [pc, #304]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008174:	4313      	orrs	r3, r2
 8008176:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008180:	d309      	bcc.n	8008196 <HAL_RCC_OscConfig+0x172>
 8008182:	4b48      	ldr	r3, [pc, #288]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f023 021f 	bic.w	r2, r3, #31
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	4945      	ldr	r1, [pc, #276]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008190:	4313      	orrs	r3, r2
 8008192:	60cb      	str	r3, [r1, #12]
 8008194:	e028      	b.n	80081e8 <HAL_RCC_OscConfig+0x1c4>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	da0a      	bge.n	80081b4 <HAL_RCC_OscConfig+0x190>
 800819e:	4b41      	ldr	r3, [pc, #260]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	015b      	lsls	r3, r3, #5
 80081ac:	493d      	ldr	r1, [pc, #244]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60cb      	str	r3, [r1, #12]
 80081b2:	e019      	b.n	80081e8 <HAL_RCC_OscConfig+0x1c4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d30a      	bcc.n	80081d4 <HAL_RCC_OscConfig+0x1b0>
 80081be:	4b39      	ldr	r3, [pc, #228]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	029b      	lsls	r3, r3, #10
 80081cc:	4935      	ldr	r1, [pc, #212]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60cb      	str	r3, [r1, #12]
 80081d2:	e009      	b.n	80081e8 <HAL_RCC_OscConfig+0x1c4>
 80081d4:	4b33      	ldr	r3, [pc, #204]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	03db      	lsls	r3, r3, #15
 80081e2:	4930      	ldr	r1, [pc, #192]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f001 f93c 	bl	8009470 <RCC_SetFlashLatencyFromMSIRange>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	f000 bde5 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008204:	f001 f8de 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008208:	4b27      	ldr	r3, [pc, #156]	; (80082a8 <HAL_RCC_OscConfig+0x284>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f7fd fab9 	bl	8005784 <HAL_InitTick>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 808a 	beq.w	8008336 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008226:	f000 bdd2 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d066      	beq.n	8008300 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a1b      	ldr	r2, [pc, #108]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800823e:	f7fd faeb 	bl	8005818 <HAL_GetTick>
 8008242:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008244:	e009      	b.n	800825a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008246:	f7fd fae7 	bl	8005818 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d902      	bls.n	800825a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	f000 bdba 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0ef      	beq.n	8008246 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	4a0e      	ldr	r2, [pc, #56]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800826c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008270:	6093      	str	r3, [r2, #8]
 8008272:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	4909      	ldr	r1, [pc, #36]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008280:	4313      	orrs	r3, r2
 8008282:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800828c:	d30e      	bcc.n	80082ac <HAL_RCC_OscConfig+0x288>
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f023 021f 	bic.w	r2, r3, #31
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	4902      	ldr	r1, [pc, #8]	; (80082a4 <HAL_RCC_OscConfig+0x280>)
 800829c:	4313      	orrs	r3, r2
 800829e:	60cb      	str	r3, [r1, #12]
 80082a0:	e04a      	b.n	8008338 <HAL_RCC_OscConfig+0x314>
 80082a2:	bf00      	nop
 80082a4:	46020c00 	.word	0x46020c00
 80082a8:	2000001c 	.word	0x2000001c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0a      	bge.n	80082ca <HAL_RCC_OscConfig+0x2a6>
 80082b4:	4b98      	ldr	r3, [pc, #608]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	015b      	lsls	r3, r3, #5
 80082c2:	4995      	ldr	r1, [pc, #596]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60cb      	str	r3, [r1, #12]
 80082c8:	e036      	b.n	8008338 <HAL_RCC_OscConfig+0x314>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d2:	d30a      	bcc.n	80082ea <HAL_RCC_OscConfig+0x2c6>
 80082d4:	4b90      	ldr	r3, [pc, #576]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	029b      	lsls	r3, r3, #10
 80082e2:	498d      	ldr	r1, [pc, #564]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60cb      	str	r3, [r1, #12]
 80082e8:	e026      	b.n	8008338 <HAL_RCC_OscConfig+0x314>
 80082ea:	4b8b      	ldr	r3, [pc, #556]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	03db      	lsls	r3, r3, #15
 80082f8:	4987      	ldr	r1, [pc, #540]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60cb      	str	r3, [r1, #12]
 80082fe:	e01b      	b.n	8008338 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008300:	4b85      	ldr	r3, [pc, #532]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a84      	ldr	r2, [pc, #528]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800830c:	f7fd fa84 	bl	8005818 <HAL_GetTick>
 8008310:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008312:	e009      	b.n	8008328 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008314:	f7fd fa80 	bl	8005818 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d902      	bls.n	8008328 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	f000 bd53 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008328:	4b7b      	ldr	r3, [pc, #492]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1ef      	bne.n	8008314 <HAL_RCC_OscConfig+0x2f0>
 8008334:	e000      	b.n	8008338 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 808b 	beq.w	800845c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	2b08      	cmp	r3, #8
 800834a:	d005      	beq.n	8008358 <HAL_RCC_OscConfig+0x334>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	2b0c      	cmp	r3, #12
 8008350:	d109      	bne.n	8008366 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	2b03      	cmp	r3, #3
 8008356:	d106      	bne.n	8008366 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d17d      	bne.n	800845c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f000 bd34 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836e:	d106      	bne.n	800837e <HAL_RCC_OscConfig+0x35a>
 8008370:	4b69      	ldr	r3, [pc, #420]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a68      	ldr	r2, [pc, #416]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	e041      	b.n	8008402 <HAL_RCC_OscConfig+0x3de>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008386:	d112      	bne.n	80083ae <HAL_RCC_OscConfig+0x38a>
 8008388:	4b63      	ldr	r3, [pc, #396]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a62      	ldr	r2, [pc, #392]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 800838e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	4b60      	ldr	r3, [pc, #384]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a5f      	ldr	r2, [pc, #380]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 800839a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	4b5d      	ldr	r3, [pc, #372]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a5c      	ldr	r2, [pc, #368]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e029      	b.n	8008402 <HAL_RCC_OscConfig+0x3de>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80083b6:	d112      	bne.n	80083de <HAL_RCC_OscConfig+0x3ba>
 80083b8:	4b57      	ldr	r3, [pc, #348]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a56      	ldr	r2, [pc, #344]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	4b54      	ldr	r3, [pc, #336]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a53      	ldr	r2, [pc, #332]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	4b51      	ldr	r3, [pc, #324]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a50      	ldr	r2, [pc, #320]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	e011      	b.n	8008402 <HAL_RCC_OscConfig+0x3de>
 80083de:	4b4e      	ldr	r3, [pc, #312]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a4d      	ldr	r2, [pc, #308]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	4b4b      	ldr	r3, [pc, #300]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a4a      	ldr	r2, [pc, #296]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	4b48      	ldr	r3, [pc, #288]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a47      	ldr	r2, [pc, #284]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80083fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008400:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d014      	beq.n	8008434 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800840a:	f7fd fa05 	bl	8005818 <HAL_GetTick>
 800840e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008410:	e009      	b.n	8008426 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008412:	f7fd fa01 	bl	8005818 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b64      	cmp	r3, #100	; 0x64
 800841e:	d902      	bls.n	8008426 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	f000 bcd4 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008426:	4b3c      	ldr	r3, [pc, #240]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0ef      	beq.n	8008412 <HAL_RCC_OscConfig+0x3ee>
 8008432:	e013      	b.n	800845c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008434:	f7fd f9f0 	bl	8005818 <HAL_GetTick>
 8008438:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800843a:	e009      	b.n	8008450 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800843c:	f7fd f9ec 	bl	8005818 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	; 0x64
 8008448:	d902      	bls.n	8008450 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	f000 bcbf 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008450:	4b31      	ldr	r3, [pc, #196]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1ef      	bne.n	800843c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d05f      	beq.n	8008528 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	2b04      	cmp	r3, #4
 800846c:	d005      	beq.n	800847a <HAL_RCC_OscConfig+0x456>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	2b0c      	cmp	r3, #12
 8008472:	d114      	bne.n	800849e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	2b02      	cmp	r3, #2
 8008478:	d111      	bne.n	800849e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f000 bca3 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008488:	4b23      	ldr	r3, [pc, #140]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	041b      	lsls	r3, r3, #16
 8008496:	4920      	ldr	r1, [pc, #128]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 8008498:	4313      	orrs	r3, r2
 800849a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800849c:	e044      	b.n	8008528 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d024      	beq.n	80084f0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80084a6:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a1b      	ldr	r2, [pc, #108]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80084b2:	f7fd f9b1 	bl	8005818 <HAL_GetTick>
 80084b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b8:	e009      	b.n	80084ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ba:	f7fd f9ad 	bl	8005818 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d902      	bls.n	80084ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	f000 bc80 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0ef      	beq.n	80084ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	490b      	ldr	r1, [pc, #44]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	610b      	str	r3, [r1, #16]
 80084ee:	e01b      	b.n	8008528 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a08      	ldr	r2, [pc, #32]	; (8008518 <HAL_RCC_OscConfig+0x4f4>)
 80084f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80084fc:	f7fd f98c 	bl	8005818 <HAL_GetTick>
 8008500:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008502:	e00b      	b.n	800851c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008504:	f7fd f988 	bl	8005818 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d904      	bls.n	800851c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	f000 bc5b 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
 8008518:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800851c:	4baf      	ldr	r3, [pc, #700]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ed      	bne.n	8008504 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80c8 	beq.w	80086c6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800853c:	4ba7      	ldr	r3, [pc, #668]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800853e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d111      	bne.n	800856e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800854a:	4ba4      	ldr	r3, [pc, #656]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800854c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008550:	4aa2      	ldr	r2, [pc, #648]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008552:	f043 0304 	orr.w	r3, r3, #4
 8008556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800855a:	4ba0      	ldr	r3, [pc, #640]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800855c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800856e:	4b9c      	ldr	r3, [pc, #624]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d119      	bne.n	80085ae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800857a:	4b99      	ldr	r3, [pc, #612]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	4a98      	ldr	r2, [pc, #608]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008586:	f7fd f947 	bl	8005818 <HAL_GetTick>
 800858a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800858c:	e009      	b.n	80085a2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800858e:	f7fd f943 	bl	8005818 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d902      	bls.n	80085a2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	f000 bc16 	b.w	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80085a2:	4b8f      	ldr	r3, [pc, #572]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0ef      	beq.n	800858e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d05f      	beq.n	8008676 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80085b6:	4b89      	ldr	r3, [pc, #548]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80085b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085bc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d037      	beq.n	800863c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e3f4      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01b      	beq.n	8008626 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80085ee:	4b7b      	ldr	r3, [pc, #492]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80085f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085f4:	4a79      	ldr	r2, [pc, #484]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80085f6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80085fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80085fe:	f7fd f90b 	bl	8005818 <HAL_GetTick>
 8008602:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008604:	e008      	b.n	8008618 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008606:	f7fd f907 	bl	8005818 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b05      	cmp	r3, #5
 8008612:	d901      	bls.n	8008618 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e3da      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008618:	4b70      	ldr	r3, [pc, #448]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800861a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800861e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ef      	bne.n	8008606 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008626:	4b6d      	ldr	r3, [pc, #436]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800862c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	4969      	ldr	r1, [pc, #420]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800863c:	4b67      	ldr	r3, [pc, #412]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800863e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008642:	4a66      	ldr	r2, [pc, #408]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008648:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800864c:	f7fd f8e4 	bl	8005818 <HAL_GetTick>
 8008650:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008654:	f7fd f8e0 	bl	8005818 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b05      	cmp	r3, #5
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e3b3      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008666:	4b5d      	ldr	r3, [pc, #372]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800866c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0ef      	beq.n	8008654 <HAL_RCC_OscConfig+0x630>
 8008674:	e01b      	b.n	80086ae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008676:	4b59      	ldr	r3, [pc, #356]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800867c:	4a57      	ldr	r2, [pc, #348]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800867e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008682:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008686:	f7fd f8c7 	bl	8005818 <HAL_GetTick>
 800868a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800868e:	f7fd f8c3 	bl	8005818 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b05      	cmp	r3, #5
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e396      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80086a0:	4b4e      	ldr	r3, [pc, #312]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1ef      	bne.n	800868e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b6:	4b49      	ldr	r3, [pc, #292]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086bc:	4a47      	ldr	r2, [pc, #284]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086be:	f023 0304 	bic.w	r3, r3, #4
 80086c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 8111 	beq.w	80088f6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086da:	4b40      	ldr	r3, [pc, #256]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d111      	bne.n	800870c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e8:	4b3c      	ldr	r3, [pc, #240]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ee:	4a3b      	ldr	r2, [pc, #236]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086f0:	f043 0304 	orr.w	r3, r3, #4
 80086f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80086f8:	4b38      	ldr	r3, [pc, #224]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80086fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800870c:	4b34      	ldr	r3, [pc, #208]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d118      	bne.n	800874a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008718:	4b31      	ldr	r3, [pc, #196]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	4a30      	ldr	r2, [pc, #192]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008724:	f7fd f878 	bl	8005818 <HAL_GetTick>
 8008728:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872c:	f7fd f874 	bl	8005818 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e347      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800873e:	4b28      	ldr	r3, [pc, #160]	; (80087e0 <HAL_RCC_OscConfig+0x7bc>)
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0f0      	beq.n	800872c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01f      	beq.n	8008796 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d010      	beq.n	8008784 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008762:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008768:	4a1c      	ldr	r2, [pc, #112]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800876a:	f043 0304 	orr.w	r3, r3, #4
 800876e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008772:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008778:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008782:	e018      	b.n	80087b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008784:	4b15      	ldr	r3, [pc, #84]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800878a:	4a14      	ldr	r2, [pc, #80]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800878c:	f043 0301 	orr.w	r3, r3, #1
 8008790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008794:	e00f      	b.n	80087b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 8008798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800879c:	4a0f      	ldr	r2, [pc, #60]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80087a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087ac:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <HAL_RCC_OscConfig+0x7b8>)
 80087ae:	f023 0304 	bic.w	r3, r3, #4
 80087b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d057      	beq.n	800886e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80087be:	f7fd f82b 	bl	8005818 <HAL_GetTick>
 80087c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087c4:	e00e      	b.n	80087e4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c6:	f7fd f827 	bl	8005818 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d905      	bls.n	80087e4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e2f8      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
 80087dc:	46020c00 	.word	0x46020c00
 80087e0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087e4:	4b9c      	ldr	r3, [pc, #624]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80087e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0e9      	beq.n	80087c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01b      	beq.n	8008836 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80087fe:	4b96      	ldr	r3, [pc, #600]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008804:	4a94      	ldr	r2, [pc, #592]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800880e:	e00a      	b.n	8008826 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008810:	f7fd f802 	bl	8005818 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	f241 3288 	movw	r2, #5000	; 0x1388
 800881e:	4293      	cmp	r3, r2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e2d3      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008826:	4b8c      	ldr	r3, [pc, #560]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800882c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0ed      	beq.n	8008810 <HAL_RCC_OscConfig+0x7ec>
 8008834:	e053      	b.n	80088de <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008836:	4b88      	ldr	r3, [pc, #544]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800883c:	4a86      	ldr	r2, [pc, #536]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 800883e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008842:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008846:	e00a      	b.n	800885e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008848:	f7fc ffe6 	bl	8005818 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	f241 3288 	movw	r2, #5000	; 0x1388
 8008856:	4293      	cmp	r3, r2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e2b7      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800885e:	4b7e      	ldr	r3, [pc, #504]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1ed      	bne.n	8008848 <HAL_RCC_OscConfig+0x824>
 800886c:	e037      	b.n	80088de <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800886e:	f7fc ffd3 	bl	8005818 <HAL_GetTick>
 8008872:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008874:	e00a      	b.n	800888c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008876:	f7fc ffcf 	bl	8005818 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f241 3288 	movw	r2, #5000	; 0x1388
 8008884:	4293      	cmp	r3, r2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e2a0      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800888c:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1ed      	bne.n	8008876 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800889a:	4b6f      	ldr	r3, [pc, #444]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 800889c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01a      	beq.n	80088de <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80088a8:	4b6b      	ldr	r3, [pc, #428]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80088aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088ae:	4a6a      	ldr	r2, [pc, #424]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80088b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80088b8:	e00a      	b.n	80088d0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ba:	f7fc ffad 	bl	8005818 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e27e      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80088d0:	4b61      	ldr	r3, [pc, #388]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80088d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ed      	bne.n	80088ba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d107      	bne.n	80088f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088e6:	4b5c      	ldr	r3, [pc, #368]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80088e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ec:	4a5a      	ldr	r2, [pc, #360]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80088ee:	f023 0304 	bic.w	r3, r3, #4
 80088f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d036      	beq.n	8008970 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d019      	beq.n	800893e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800890a:	4b53      	ldr	r3, [pc, #332]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a52      	ldr	r2, [pc, #328]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008914:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008916:	f7fc ff7f 	bl	8005818 <HAL_GetTick>
 800891a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800891e:	f7fc ff7b 	bl	8005818 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e24e      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008930:	4b49      	ldr	r3, [pc, #292]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0f0      	beq.n	800891e <HAL_RCC_OscConfig+0x8fa>
 800893c:	e018      	b.n	8008970 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800893e:	4b46      	ldr	r3, [pc, #280]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a45      	ldr	r2, [pc, #276]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008948:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800894a:	f7fc ff65 	bl	8005818 <HAL_GetTick>
 800894e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008950:	e008      	b.n	8008964 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008952:	f7fc ff61 	bl	8005818 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e234      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008964:	4b3c      	ldr	r3, [pc, #240]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1f0      	bne.n	8008952 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008978:	2b00      	cmp	r3, #0
 800897a:	d036      	beq.n	80089ea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d019      	beq.n	80089b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008984:	4b34      	ldr	r3, [pc, #208]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a33      	ldr	r2, [pc, #204]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 800898a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800898e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008990:	f7fc ff42 	bl	8005818 <HAL_GetTick>
 8008994:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008998:	f7fc ff3e 	bl	8005818 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e211      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80089aa:	4b2b      	ldr	r3, [pc, #172]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f0      	beq.n	8008998 <HAL_RCC_OscConfig+0x974>
 80089b6:	e018      	b.n	80089ea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80089b8:	4b27      	ldr	r3, [pc, #156]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a26      	ldr	r2, [pc, #152]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80089be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80089c4:	f7fc ff28 	bl	8005818 <HAL_GetTick>
 80089c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80089cc:	f7fc ff24 	bl	8005818 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e1f7      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80089de:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f0      	bne.n	80089cc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d07f      	beq.n	8008af6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d062      	beq.n	8008ac4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a08:	6093      	str	r3, [r2, #8]
 8008a0a:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	4910      	ldr	r1, [pc, #64]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008a24:	d309      	bcc.n	8008a3a <HAL_RCC_OscConfig+0xa16>
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f023 021f 	bic.w	r2, r3, #31
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	4909      	ldr	r1, [pc, #36]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60cb      	str	r3, [r1, #12]
 8008a38:	e02a      	b.n	8008a90 <HAL_RCC_OscConfig+0xa6c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	da0c      	bge.n	8008a5c <HAL_RCC_OscConfig+0xa38>
 8008a42:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	015b      	lsls	r3, r3, #5
 8008a50:	4901      	ldr	r1, [pc, #4]	; (8008a58 <HAL_RCC_OscConfig+0xa34>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60cb      	str	r3, [r1, #12]
 8008a56:	e01b      	b.n	8008a90 <HAL_RCC_OscConfig+0xa6c>
 8008a58:	46020c00 	.word	0x46020c00
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a64:	d30a      	bcc.n	8008a7c <HAL_RCC_OscConfig+0xa58>
 8008a66:	4ba1      	ldr	r3, [pc, #644]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	499d      	ldr	r1, [pc, #628]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60cb      	str	r3, [r1, #12]
 8008a7a:	e009      	b.n	8008a90 <HAL_RCC_OscConfig+0xa6c>
 8008a7c:	4b9b      	ldr	r3, [pc, #620]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	03db      	lsls	r3, r3, #15
 8008a8a:	4998      	ldr	r1, [pc, #608]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008a90:	4b96      	ldr	r3, [pc, #600]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a95      	ldr	r2, [pc, #596]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008a96:	f043 0310 	orr.w	r3, r3, #16
 8008a9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008a9c:	f7fc febc 	bl	8005818 <HAL_GetTick>
 8008aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008aa4:	f7fc feb8 	bl	8005818 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e18b      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008ab6:	4b8d      	ldr	r3, [pc, #564]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0xa80>
 8008ac2:	e018      	b.n	8008af6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008ac4:	4b89      	ldr	r3, [pc, #548]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a88      	ldr	r2, [pc, #544]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008ad0:	f7fc fea2 	bl	8005818 <HAL_GetTick>
 8008ad4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008ad8:	f7fc fe9e 	bl	8005818 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e171      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008aea:	4b80      	ldr	r3, [pc, #512]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1f0      	bne.n	8008ad8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8166 	beq.w	8008dcc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b06:	4b79      	ldr	r3, [pc, #484]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f003 030c 	and.w	r3, r3, #12
 8008b0e:	2b0c      	cmp	r3, #12
 8008b10:	f000 80f2 	beq.w	8008cf8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	f040 80c5 	bne.w	8008ca8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008b1e:	4b73      	ldr	r3, [pc, #460]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a72      	ldr	r2, [pc, #456]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008b2a:	f7fc fe75 	bl	8005818 <HAL_GetTick>
 8008b2e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b32:	f7fc fe71 	bl	8005818 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e144      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008b44:	4b69      	ldr	r3, [pc, #420]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f0      	bne.n	8008b32 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b50:	4b66      	ldr	r3, [pc, #408]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d111      	bne.n	8008b82 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008b5e:	4b63      	ldr	r3, [pc, #396]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b64:	4a61      	ldr	r2, [pc, #388]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b66:	f043 0304 	orr.w	r3, r3, #4
 8008b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008b6e:	4b5f      	ldr	r3, [pc, #380]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008b82:	4b5b      	ldr	r3, [pc, #364]	; (8008cf0 <HAL_RCC_OscConfig+0xccc>)
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b8e:	d102      	bne.n	8008b96 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008b96:	4b56      	ldr	r3, [pc, #344]	; (8008cf0 <HAL_RCC_OscConfig+0xccc>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	4a55      	ldr	r2, [pc, #340]	; (8008cf0 <HAL_RCC_OscConfig+0xccc>)
 8008b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ba0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008ba2:	4b52      	ldr	r3, [pc, #328]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	0212      	lsls	r2, r2, #8
 8008bba:	4311      	orrs	r1, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	494a      	ldr	r1, [pc, #296]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8008bc8:	4b48      	ldr	r3, [pc, #288]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bcc:	4b49      	ldr	r3, [pc, #292]	; (8008cf4 <HAL_RCC_OscConfig+0xcd0>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008bd4:	3a01      	subs	r2, #1
 8008bd6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008bde:	3a01      	subs	r2, #1
 8008be0:	0252      	lsls	r2, r2, #9
 8008be2:	b292      	uxth	r2, r2
 8008be4:	4311      	orrs	r1, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008bea:	3a01      	subs	r2, #1
 8008bec:	0412      	lsls	r2, r2, #16
 8008bee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bf2:	4311      	orrs	r1, r2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008bf8:	3a01      	subs	r2, #1
 8008bfa:	0612      	lsls	r2, r2, #24
 8008bfc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c00:	430a      	orrs	r2, r1
 8008c02:	493a      	ldr	r1, [pc, #232]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008c08:	4b38      	ldr	r3, [pc, #224]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	4a37      	ldr	r2, [pc, #220]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c18:	4a34      	ldr	r2, [pc, #208]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008c1e:	4b33      	ldr	r3, [pc, #204]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	4a32      	ldr	r2, [pc, #200]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c24:	f043 0310 	orr.w	r3, r3, #16
 8008c28:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008c2a:	4b30      	ldr	r3, [pc, #192]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	f023 020c 	bic.w	r2, r3, #12
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c36:	492d      	ldr	r1, [pc, #180]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d105      	bne.n	8008c50 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008c44:	4b2a      	ldr	r3, [pc, #168]	; (8008cf0 <HAL_RCC_OscConfig+0xccc>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	4a29      	ldr	r2, [pc, #164]	; (8008cf0 <HAL_RCC_OscConfig+0xccc>)
 8008c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c4e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008c50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d107      	bne.n	8008c68 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008c58:	4b24      	ldr	r3, [pc, #144]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c5e:	4a23      	ldr	r2, [pc, #140]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c60:	f023 0304 	bic.w	r3, r3, #4
 8008c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c68:	4b20      	ldr	r3, [pc, #128]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c72:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008c74:	4b1d      	ldr	r3, [pc, #116]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1c      	ldr	r2, [pc, #112]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c80:	f7fc fdca 	bl	8005818 <HAL_GetTick>
 8008c84:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008c86:	e008      	b.n	8008c9a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c88:	f7fc fdc6 	bl	8005818 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e099      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0f0      	beq.n	8008c88 <HAL_RCC_OscConfig+0xc64>
 8008ca6:	e091      	b.n	8008dcc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a0f      	ldr	r2, [pc, #60]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008cb4:	f7fc fdb0 	bl	8005818 <HAL_GetTick>
 8008cb8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbc:	f7fc fdac 	bl	8005818 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e07f      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008cce:	4b07      	ldr	r3, [pc, #28]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f0      	bne.n	8008cbc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	4a03      	ldr	r2, [pc, #12]	; (8008cec <HAL_RCC_OscConfig+0xcc8>)
 8008ce0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008ce4:	f023 0303 	bic.w	r3, r3, #3
 8008ce8:	6293      	str	r3, [r2, #40]	; 0x28
 8008cea:	e06f      	b.n	8008dcc <HAL_RCC_OscConfig+0xda8>
 8008cec:	46020c00 	.word	0x46020c00
 8008cf0:	46020800 	.word	0x46020800
 8008cf4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008cf8:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008cfe:	4b36      	ldr	r3, [pc, #216]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d039      	beq.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f003 0203 	and.w	r2, r3, #3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d132      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	0a1b      	lsrs	r3, r3, #8
 8008d1e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d129      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d122      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d44:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d11a      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	0a5b      	lsrs	r3, r3, #9
 8008d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d111      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d108      	bne.n	8008d80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	0e1b      	lsrs	r3, r3, #24
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d001      	beq.n	8008d84 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e024      	b.n	8008dce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008d84:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	08db      	lsrs	r3, r3, #3
 8008d8a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d01a      	beq.n	8008dcc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008d96:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	4a0f      	ldr	r2, [pc, #60]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008d9c:	f023 0310 	bic.w	r3, r3, #16
 8008da0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da2:	f7fc fd39 	bl	8005818 <HAL_GetTick>
 8008da6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008da8:	bf00      	nop
 8008daa:	f7fc fd35 	bl	8005818 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d0f9      	beq.n	8008daa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dba:	4a07      	ldr	r2, [pc, #28]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc4:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <HAL_RCC_OscConfig+0xdb4>)
 8008dc6:	f043 0310 	orr.w	r3, r3, #16
 8008dca:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3738      	adds	r7, #56	; 0x38
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	46020c00 	.word	0x46020c00

08008ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e1d9      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008df0:	4b9b      	ldr	r3, [pc, #620]	; (8009060 <HAL_RCC_ClockConfig+0x284>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d910      	bls.n	8008e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfe:	4b98      	ldr	r3, [pc, #608]	; (8009060 <HAL_RCC_ClockConfig+0x284>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f023 020f 	bic.w	r2, r3, #15
 8008e06:	4996      	ldr	r1, [pc, #600]	; (8009060 <HAL_RCC_ClockConfig+0x284>)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0e:	4b94      	ldr	r3, [pc, #592]	; (8009060 <HAL_RCC_ClockConfig+0x284>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d001      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e1c1      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d010      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695a      	ldr	r2, [r3, #20]
 8008e30:	4b8c      	ldr	r3, [pc, #560]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d908      	bls.n	8008e4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008e3c:	4b89      	ldr	r3, [pc, #548]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	4986      	ldr	r1, [pc, #536]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d012      	beq.n	8008e80 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691a      	ldr	r2, [r3, #16]
 8008e5e:	4b81      	ldr	r3, [pc, #516]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d909      	bls.n	8008e80 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008e6c:	4b7d      	ldr	r3, [pc, #500]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	497a      	ldr	r1, [pc, #488]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	4b74      	ldr	r3, [pc, #464]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d908      	bls.n	8008eae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008e9c:	4b71      	ldr	r3, [pc, #452]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	496e      	ldr	r1, [pc, #440]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d010      	beq.n	8008edc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	4b69      	ldr	r3, [pc, #420]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d908      	bls.n	8008edc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008eca:	4b66      	ldr	r3, [pc, #408]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	f023 020f 	bic.w	r2, r3, #15
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	4963      	ldr	r1, [pc, #396]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80d2 	beq.w	800908e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d143      	bne.n	8008f7e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ef6:	4b5b      	ldr	r3, [pc, #364]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d110      	bne.n	8008f26 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008f04:	4b57      	ldr	r3, [pc, #348]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f0a:	4a56      	ldr	r2, [pc, #344]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f0c:	f043 0304 	orr.w	r3, r3, #4
 8008f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008f14:	4b53      	ldr	r3, [pc, #332]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	60bb      	str	r3, [r7, #8]
 8008f20:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008f22:	2301      	movs	r3, #1
 8008f24:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008f26:	f7fc fc77 	bl	8005818 <HAL_GetTick>
 8008f2a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008f2c:	4b4e      	ldr	r3, [pc, #312]	; (8009068 <HAL_RCC_ClockConfig+0x28c>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00f      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008f38:	e008      	b.n	8008f4c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008f3a:	f7fc fc6d 	bl	8005818 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e12b      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008f4c:	4b46      	ldr	r3, [pc, #280]	; (8009068 <HAL_RCC_ClockConfig+0x28c>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0f0      	beq.n	8008f3a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d107      	bne.n	8008f6e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008f5e:	4b41      	ldr	r3, [pc, #260]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f64:	4a3f      	ldr	r2, [pc, #252]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f66:	f023 0304 	bic.w	r3, r3, #4
 8008f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008f6e:	4b3d      	ldr	r3, [pc, #244]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d121      	bne.n	8008fbe <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e112      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d107      	bne.n	8008f96 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f86:	4b37      	ldr	r3, [pc, #220]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d115      	bne.n	8008fbe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e106      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d107      	bne.n	8008fae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e0fa      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fae:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0f2      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008fbe:	4b29      	ldr	r3, [pc, #164]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f023 0203 	bic.w	r2, r3, #3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	4926      	ldr	r1, [pc, #152]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008fd0:	f7fc fc22 	bl	8005818 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d112      	bne.n	8009004 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fde:	e00a      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe0:	f7fc fc1a 	bl	8005818 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e0d6      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	f003 030c 	and.w	r3, r3, #12
 8008ffe:	2b0c      	cmp	r3, #12
 8009000:	d1ee      	bne.n	8008fe0 <HAL_RCC_ClockConfig+0x204>
 8009002:	e044      	b.n	800908e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d112      	bne.n	8009032 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800900c:	e00a      	b.n	8009024 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800900e:	f7fc fc03 	bl	8005818 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e0bf      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f003 030c 	and.w	r3, r3, #12
 800902c:	2b08      	cmp	r3, #8
 800902e:	d1ee      	bne.n	800900e <HAL_RCC_ClockConfig+0x232>
 8009030:	e02d      	b.n	800908e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d123      	bne.n	8009082 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800903a:	e00a      	b.n	8009052 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800903c:	f7fc fbec 	bl	8005818 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	f241 3288 	movw	r2, #5000	; 0x1388
 800904a:	4293      	cmp	r3, r2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e0a8      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009052:	4b04      	ldr	r3, [pc, #16]	; (8009064 <HAL_RCC_ClockConfig+0x288>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f003 030c 	and.w	r3, r3, #12
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1ee      	bne.n	800903c <HAL_RCC_ClockConfig+0x260>
 800905e:	e016      	b.n	800908e <HAL_RCC_ClockConfig+0x2b2>
 8009060:	40022000 	.word	0x40022000
 8009064:	46020c00 	.word	0x46020c00
 8009068:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800906c:	f7fc fbd4 	bl	8005818 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	f241 3288 	movw	r2, #5000	; 0x1388
 800907a:	4293      	cmp	r3, r2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e090      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009082:	4b4a      	ldr	r3, [pc, #296]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	f003 030c 	and.w	r3, r3, #12
 800908a:	2b04      	cmp	r3, #4
 800908c:	d1ee      	bne.n	800906c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d010      	beq.n	80090bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	4b43      	ldr	r3, [pc, #268]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d208      	bcs.n	80090bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80090aa:	4b40      	ldr	r3, [pc, #256]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 020f 	bic.w	r2, r3, #15
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	493d      	ldr	r1, [pc, #244]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090bc:	4b3c      	ldr	r3, [pc, #240]	; (80091b0 <HAL_RCC_ClockConfig+0x3d4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d210      	bcs.n	80090ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ca:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <HAL_RCC_ClockConfig+0x3d4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f023 020f 	bic.w	r2, r3, #15
 80090d2:	4937      	ldr	r1, [pc, #220]	; (80091b0 <HAL_RCC_ClockConfig+0x3d4>)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b35      	ldr	r3, [pc, #212]	; (80091b0 <HAL_RCC_ClockConfig+0x3d4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e05b      	b.n	80091a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009104:	429a      	cmp	r2, r3
 8009106:	d208      	bcs.n	800911a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009108:	4b28      	ldr	r3, [pc, #160]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4925      	ldr	r1, [pc, #148]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 8009116:	4313      	orrs	r3, r2
 8009118:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d012      	beq.n	800914c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	4b20      	ldr	r3, [pc, #128]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	091b      	lsrs	r3, r3, #4
 8009130:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009134:	429a      	cmp	r2, r3
 8009136:	d209      	bcs.n	800914c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009138:	4b1c      	ldr	r3, [pc, #112]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	4919      	ldr	r1, [pc, #100]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 8009148:	4313      	orrs	r3, r2
 800914a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	d010      	beq.n	800917a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	695a      	ldr	r2, [r3, #20]
 800915c:	4b13      	ldr	r3, [pc, #76]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009164:	429a      	cmp	r2, r3
 8009166:	d208      	bcs.n	800917a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009168:	4b10      	ldr	r3, [pc, #64]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	490d      	ldr	r1, [pc, #52]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 8009176:	4313      	orrs	r3, r2
 8009178:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800917a:	f000 f821 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800917e:	4602      	mov	r2, r0
 8009180:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <HAL_RCC_ClockConfig+0x3d0>)
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	490a      	ldr	r1, [pc, #40]	; (80091b4 <HAL_RCC_ClockConfig+0x3d8>)
 800918a:	5ccb      	ldrb	r3, [r1, r3]
 800918c:	fa22 f303 	lsr.w	r3, r2, r3
 8009190:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <HAL_RCC_ClockConfig+0x3dc>)
 8009192:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009194:	4b09      	ldr	r3, [pc, #36]	; (80091bc <HAL_RCC_ClockConfig+0x3e0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc faf3 	bl	8005784 <HAL_InitTick>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	46020c00 	.word	0x46020c00
 80091b0:	40022000 	.word	0x40022000
 80091b4:	0801023c 	.word	0x0801023c
 80091b8:	20000000 	.word	0x20000000
 80091bc:	2000001c 	.word	0x2000001c

080091c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b08b      	sub	sp, #44	; 0x2c
 80091c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091ce:	4b78      	ldr	r3, [pc, #480]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f003 030c 	and.w	r3, r3, #12
 80091d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091d8:	4b75      	ldr	r3, [pc, #468]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <HAL_RCC_GetSysClockFreq+0x34>
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d121      	bne.n	8009232 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d11e      	bne.n	8009232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80091f4:	4b6e      	ldr	r3, [pc, #440]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d107      	bne.n	8009210 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009200:	4b6b      	ldr	r3, [pc, #428]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009206:	0b1b      	lsrs	r3, r3, #12
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
 800920e:	e005      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009210:	4b67      	ldr	r3, [pc, #412]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	0f1b      	lsrs	r3, r3, #28
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800921c:	4a65      	ldr	r2, [pc, #404]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009224:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d110      	bne.n	800924e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009230:	e00d      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009232:	4b5f      	ldr	r3, [pc, #380]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	f003 030c 	and.w	r3, r3, #12
 800923a:	2b04      	cmp	r3, #4
 800923c:	d102      	bne.n	8009244 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800923e:	4b5e      	ldr	r3, [pc, #376]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009240:	623b      	str	r3, [r7, #32]
 8009242:	e004      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	2b08      	cmp	r3, #8
 8009248:	d101      	bne.n	800924e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800924a:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800924c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	2b0c      	cmp	r3, #12
 8009252:	f040 80a5 	bne.w	80093a0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009256:	4b56      	ldr	r3, [pc, #344]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009260:	4b53      	ldr	r3, [pc, #332]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	3301      	adds	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800926e:	4b50      	ldr	r3, [pc, #320]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800927a:	4b4d      	ldr	r3, [pc, #308]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	08db      	lsrs	r3, r3, #3
 8009280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	fb02 f303 	mul.w	r3, r2, r3
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009292:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d003      	beq.n	80092a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d022      	beq.n	80092e8 <HAL_RCC_GetSysClockFreq+0x128>
 80092a2:	e043      	b.n	800932c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	eddf 6a43 	vldr	s13, [pc, #268]	; 80093bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80092b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b6:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80092b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80092c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80092ca:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80093c0 <HAL_RCC_GetSysClockFreq+0x200>
 80092ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80092d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e6:	e046      	b.n	8009376 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80093bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b2d      	ldr	r3, [pc, #180]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800930a:	ed97 6a01 	vldr	s12, [r7, #4]
 800930e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80093c0 <HAL_RCC_GetSysClockFreq+0x200>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800931a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800932a:	e024      	b.n	8009376 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009354:	ed97 6a01 	vldr	s12, [r7, #4]
 8009358:	eddf 5a19 	vldr	s11, [pc, #100]	; 80093c0 <HAL_RCC_GetSysClockFreq+0x200>
 800935c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009360:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009368:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800936c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009374:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937a:	0e1b      	lsrs	r3, r3, #24
 800937c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009380:	3301      	adds	r3, #1
 8009382:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800938e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939a:	ee17 3a90 	vmov	r3, s15
 800939e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80093a0:	6a3b      	ldr	r3, [r7, #32]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	372c      	adds	r7, #44	; 0x2c
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	46020c00 	.word	0x46020c00
 80093b4:	08010254 	.word	0x08010254
 80093b8:	00f42400 	.word	0x00f42400
 80093bc:	4b742400 	.word	0x4b742400
 80093c0:	46000000 	.word	0x46000000

080093c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80093c8:	f7ff fefa 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 80093cc:	4602      	mov	r2, r0
 80093ce:	4b07      	ldr	r3, [pc, #28]	; (80093ec <HAL_RCC_GetHCLKFreq+0x28>)
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	4906      	ldr	r1, [pc, #24]	; (80093f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80093d8:	5ccb      	ldrb	r3, [r1, r3]
 80093da:	fa22 f303 	lsr.w	r3, r2, r3
 80093de:	4a05      	ldr	r2, [pc, #20]	; (80093f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80093e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80093e2:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80093e4:	681b      	ldr	r3, [r3, #0]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	46020c00 	.word	0x46020c00
 80093f0:	0801023c 	.word	0x0801023c
 80093f4:	20000000 	.word	0x20000000

080093f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80093fc:	f7ff ffe2 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 8009400:	4602      	mov	r2, r0
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	091b      	lsrs	r3, r3, #4
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	4903      	ldr	r1, [pc, #12]	; (800941c <HAL_RCC_GetPCLK1Freq+0x24>)
 800940e:	5ccb      	ldrb	r3, [r1, r3]
 8009410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009414:	4618      	mov	r0, r3
 8009416:	bd80      	pop	{r7, pc}
 8009418:	46020c00 	.word	0x46020c00
 800941c:	0801024c 	.word	0x0801024c

08009420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009424:	f7ff ffce 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 8009428:	4602      	mov	r2, r0
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	4903      	ldr	r1, [pc, #12]	; (8009444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009436:	5ccb      	ldrb	r3, [r1, r3]
 8009438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800943c:	4618      	mov	r0, r3
 800943e:	bd80      	pop	{r7, pc}
 8009440:	46020c00 	.word	0x46020c00
 8009444:	0801024c 	.word	0x0801024c

08009448 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800944c:	f7ff ffba 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 8009450:	4602      	mov	r2, r0
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	091b      	lsrs	r3, r3, #4
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	4903      	ldr	r1, [pc, #12]	; (800946c <HAL_RCC_GetPCLK3Freq+0x24>)
 800945e:	5ccb      	ldrb	r3, [r1, r3]
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	46020c00 	.word	0x46020c00
 800946c:	0801024c 	.word	0x0801024c

08009470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009478:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800947a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009486:	f7fe fd21 	bl	8007ecc <HAL_PWREx_GetVoltageRange>
 800948a:	6178      	str	r0, [r7, #20]
 800948c:	e019      	b.n	80094c2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800948e:	4b39      	ldr	r3, [pc, #228]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009494:	4a37      	ldr	r2, [pc, #220]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009496:	f043 0304 	orr.w	r3, r3, #4
 800949a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800949e:	4b35      	ldr	r3, [pc, #212]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80094a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80094ac:	f7fe fd0e 	bl	8007ecc <HAL_PWREx_GetVoltageRange>
 80094b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80094b2:	4b30      	ldr	r3, [pc, #192]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80094b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b8:	4a2e      	ldr	r2, [pc, #184]	; (8009574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80094ba:	f023 0304 	bic.w	r3, r3, #4
 80094be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094c8:	d003      	beq.n	80094d2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094d0:	d109      	bne.n	80094e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094d8:	d202      	bcs.n	80094e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80094da:	2301      	movs	r3, #1
 80094dc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80094de:	e033      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80094e4:	e030      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ec:	d208      	bcs.n	8009500 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f4:	d102      	bne.n	80094fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80094f6:	2303      	movs	r3, #3
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	e025      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e035      	b.n	800956c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009506:	d90f      	bls.n	8009528 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009514:	d902      	bls.n	800951c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
 800951a:	e015      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800951c:	2301      	movs	r3, #1
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	e012      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009522:	2300      	movs	r3, #0
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	e00f      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800952e:	d109      	bne.n	8009544 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009536:	d102      	bne.n	800953e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009538:	2301      	movs	r3, #1
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	e004      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800953e:	2302      	movs	r3, #2
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	e001      	b.n	8009548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009544:	2301      	movs	r3, #1
 8009546:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f023 020f 	bic.w	r2, r3, #15
 8009550:	4909      	ldr	r1, [pc, #36]	; (8009578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009558:	4b07      	ldr	r3, [pc, #28]	; (8009578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	429a      	cmp	r2, r3
 8009564:	d001      	beq.n	800956a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e000      	b.n	800956c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	46020c00 	.word	0x46020c00
 8009578:	40022000 	.word	0x40022000

0800957c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800957c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009580:	b0c4      	sub	sp, #272	; 0x110
 8009582:	af00      	add	r7, sp, #0
 8009584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009588:	2300      	movs	r3, #0
 800958a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800958e:	2300      	movs	r3, #0
 8009590:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f002 0401 	and.w	r4, r2, #1
 80095a0:	2500      	movs	r5, #0
 80095a2:	ea54 0305 	orrs.w	r3, r4, r5
 80095a6:	d00b      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80095a8:	4bd5      	ldr	r3, [pc, #852]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095ae:	f023 0103 	bic.w	r1, r3, #3
 80095b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b8:	4ad1      	ldr	r2, [pc, #836]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095ba:	430b      	orrs	r3, r1
 80095bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f002 0802 	and.w	r8, r2, #2
 80095cc:	f04f 0900 	mov.w	r9, #0
 80095d0:	ea58 0309 	orrs.w	r3, r8, r9
 80095d4:	d00b      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80095d6:	4bca      	ldr	r3, [pc, #808]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095dc:	f023 010c 	bic.w	r1, r3, #12
 80095e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	4ac6      	ldr	r2, [pc, #792]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f002 0a04 	and.w	sl, r2, #4
 80095fa:	f04f 0b00 	mov.w	fp, #0
 80095fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009602:	d00b      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009604:	4bbe      	ldr	r3, [pc, #760]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800960a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800960e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009614:	4aba      	ldr	r2, [pc, #744]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009616:	430b      	orrs	r3, r1
 8009618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800961c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f002 0308 	and.w	r3, r2, #8
 8009628:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800962c:	2300      	movs	r3, #0
 800962e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009632:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009636:	460b      	mov	r3, r1
 8009638:	4313      	orrs	r3, r2
 800963a:	d00b      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800963c:	4bb0      	ldr	r3, [pc, #704]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800963e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800964a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964c:	4aac      	ldr	r2, [pc, #688]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800964e:	430b      	orrs	r3, r1
 8009650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f002 0310 	and.w	r3, r2, #16
 8009660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009664:	2300      	movs	r3, #0
 8009666:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800966a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800966e:	460b      	mov	r3, r1
 8009670:	4313      	orrs	r3, r2
 8009672:	d00b      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009674:	4ba2      	ldr	r3, [pc, #648]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800967a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800967e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009684:	4a9e      	ldr	r2, [pc, #632]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009686:	430b      	orrs	r3, r1
 8009688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800968c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800969c:	2300      	movs	r3, #0
 800969e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80096ac:	4b94      	ldr	r3, [pc, #592]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80096b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096bc:	4a90      	ldr	r2, [pc, #576]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096be:	430b      	orrs	r3, r1
 80096c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f002 0320 	and.w	r3, r2, #32
 80096d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096de:	460b      	mov	r3, r1
 80096e0:	4313      	orrs	r3, r2
 80096e2:	d00b      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80096e4:	4b86      	ldr	r3, [pc, #536]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096ea:	f023 0107 	bic.w	r1, r3, #7
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f4:	4a82      	ldr	r2, [pc, #520]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096f6:	430b      	orrs	r3, r1
 80096f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009712:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d00b      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800971c:	4b78      	ldr	r3, [pc, #480]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800971e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009722:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800972a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800972c:	4a74      	ldr	r2, [pc, #464]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800972e:	430b      	orrs	r3, r1
 8009730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009744:	2300      	movs	r3, #0
 8009746:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800974a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800974e:	460b      	mov	r3, r1
 8009750:	4313      	orrs	r3, r2
 8009752:	d00b      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009754:	4b6a      	ldr	r3, [pc, #424]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800975a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800975e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009764:	4a66      	ldr	r2, [pc, #408]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009766:	430b      	orrs	r3, r1
 8009768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800976c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800977c:	2300      	movs	r3, #0
 800977e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009782:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009786:	460b      	mov	r3, r1
 8009788:	4313      	orrs	r3, r2
 800978a:	d00b      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800978c:	4b5c      	ldr	r3, [pc, #368]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800978e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800979a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800979c:	4a58      	ldr	r2, [pc, #352]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800979e:	430b      	orrs	r3, r1
 80097a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80097b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097b4:	2300      	movs	r3, #0
 80097b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80097be:	460b      	mov	r3, r1
 80097c0:	4313      	orrs	r3, r2
 80097c2:	d00b      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80097c4:	4b4e      	ldr	r3, [pc, #312]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097ca:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80097ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d4:	4a4a      	ldr	r2, [pc, #296]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097d6:	430b      	orrs	r3, r1
 80097d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80097dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80097e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097ec:	2300      	movs	r3, #0
 80097ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4313      	orrs	r3, r2
 80097fa:	d00b      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80097fc:	4b40      	ldr	r3, [pc, #256]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009802:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800980a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800980c:	4a3c      	ldr	r2, [pc, #240]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800980e:	430b      	orrs	r3, r1
 8009810:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009824:	2300      	movs	r3, #0
 8009826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800982a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800982e:	460b      	mov	r3, r1
 8009830:	4313      	orrs	r3, r2
 8009832:	d00c      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009834:	4b32      	ldr	r3, [pc, #200]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800983a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800983e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009846:	4a2e      	ldr	r2, [pc, #184]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009848:	430b      	orrs	r3, r1
 800984a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800984e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800985a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800985e:	2300      	movs	r3, #0
 8009860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009868:	460b      	mov	r3, r1
 800986a:	4313      	orrs	r3, r2
 800986c:	d00c      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800986e:	4b24      	ldr	r3, [pc, #144]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009874:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800987c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009880:	4a1f      	ldr	r2, [pc, #124]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009882:	430b      	orrs	r3, r1
 8009884:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009898:	2300      	movs	r3, #0
 800989a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800989e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80098a2:	460b      	mov	r3, r1
 80098a4:	4313      	orrs	r3, r2
 80098a6:	d00c      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80098a8:	4b15      	ldr	r3, [pc, #84]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ae:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80098b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ba:	4a11      	ldr	r2, [pc, #68]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098bc:	430b      	orrs	r3, r1
 80098be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80098c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80098ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80098dc:	460b      	mov	r3, r1
 80098de:	4313      	orrs	r3, r2
 80098e0:	d010      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80098e2:	4b07      	ldr	r3, [pc, #28]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80098ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	4a02      	ldr	r2, [pc, #8]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098f6:	430b      	orrs	r3, r1
 80098f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80098fe:	bf00      	nop
 8009900:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009914:	2300      	movs	r3, #0
 8009916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800991a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800991e:	460b      	mov	r3, r1
 8009920:	4313      	orrs	r3, r2
 8009922:	d04c      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800992c:	2b80      	cmp	r3, #128	; 0x80
 800992e:	d02d      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009930:	2b80      	cmp	r3, #128	; 0x80
 8009932:	d827      	bhi.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009934:	2b60      	cmp	r3, #96	; 0x60
 8009936:	d02b      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009938:	2b60      	cmp	r3, #96	; 0x60
 800993a:	d823      	bhi.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800993c:	2b40      	cmp	r3, #64	; 0x40
 800993e:	d006      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009940:	2b40      	cmp	r3, #64	; 0x40
 8009942:	d81f      	bhi.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d009      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009948:	2b20      	cmp	r3, #32
 800994a:	d011      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800994c:	e01a      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800994e:	4bbe      	ldr	r3, [pc, #760]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	4abd      	ldr	r2, [pc, #756]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009958:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800995a:	e01a      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800995c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009960:	3308      	adds	r3, #8
 8009962:	4618      	mov	r0, r3
 8009964:	f002 fc32 	bl	800c1cc <RCCEx_PLL2_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800996e:	e010      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009974:	332c      	adds	r3, #44	; 0x2c
 8009976:	4618      	mov	r0, r3
 8009978:	f002 fcc0 	bl	800c2fc <RCCEx_PLL3_Config>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009982:	e006      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800998a:	e002      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800998c:	bf00      	nop
 800998e:	e000      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009992:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10d      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800999a:	4bab      	ldr	r3, [pc, #684]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800999c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80099a0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80099a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099ac:	4aa6      	ldr	r2, [pc, #664]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80099b4:	e003      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80099ba:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80099be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80099ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099ce:	2300      	movs	r3, #0
 80099d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80099d8:	460b      	mov	r3, r1
 80099da:	4313      	orrs	r3, r2
 80099dc:	d053      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80099de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ea:	d033      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80099ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f0:	d82c      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80099f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099f6:	d02f      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80099f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099fc:	d826      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80099fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a02:	d008      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a08:	d820      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d011      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009a14:	e01a      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a16:	4b8c      	ldr	r3, [pc, #560]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1a:	4a8b      	ldr	r2, [pc, #556]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a20:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a22:	e01a      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a28:	3308      	adds	r3, #8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f002 fbce 	bl	800c1cc <RCCEx_PLL2_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a36:	e010      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a3c:	332c      	adds	r3, #44	; 0x2c
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f002 fc5c 	bl	800c2fc <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a4a:	e006      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009a52:	e002      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10d      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009a62:	4b79      	ldr	r3, [pc, #484]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a68:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a74:	4a74      	ldr	r2, [pc, #464]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009a82:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009a92:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a94:	2300      	movs	r3, #0
 8009a96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d046      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009aaa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009aae:	d028      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009ab0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009ab4:	d821      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aba:	d022      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac0:	d81b      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac6:	d01c      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009acc:	d815      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad2:	d008      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d80f      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d011      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae2:	d00e      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009ae4:	e009      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aea:	3308      	adds	r3, #8
 8009aec:	4618      	mov	r0, r3
 8009aee:	f002 fb6d 	bl	800c1cc <RCCEx_PLL2_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009af8:	e004      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009b00:	e000      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8009b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b04:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10d      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009b0c:	4b4e      	ldr	r3, [pc, #312]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b12:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b1e:	4a4a      	ldr	r2, [pc, #296]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b20:	430b      	orrs	r3, r1
 8009b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b26:	e003      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009b2c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009b3c:	673b      	str	r3, [r7, #112]	; 0x70
 8009b3e:	2300      	movs	r3, #0
 8009b40:	677b      	str	r3, [r7, #116]	; 0x74
 8009b42:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009b46:	460b      	mov	r3, r1
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d03f      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d81e      	bhi.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8009b58:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	08009b9f 	.word	0x08009b9f
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b83 	.word	0x08009b83
 8009b6c:	08009b9f 	.word	0x08009b9f
 8009b70:	08009b9f 	.word	0x08009b9f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b74:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	4a33      	ldr	r2, [pc, #204]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b7e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009b80:	e00e      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b86:	332c      	adds	r3, #44	; 0x2c
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 fbb7 	bl	800c2fc <RCCEx_PLL3_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009b94:	e004      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009b9c:	e000      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8009b9e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009ba0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10d      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009ba8:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009baa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bae:	f023 0107 	bic.w	r1, r3, #7
 8009bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009bc2:	e003      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009bc8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bda:	2300      	movs	r3, #0
 8009bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009be2:	460b      	mov	r3, r1
 8009be4:	4313      	orrs	r3, r2
 8009be6:	d04c      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bf4:	d02a      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bfa:	d821      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009bfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c00:	d026      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8009c02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c06:	d81b      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c0c:	d00e      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c12:	d815      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01d      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1c:	d110      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	4a09      	ldr	r2, [pc, #36]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c28:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009c2a:	e014      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c30:	332c      	adds	r3, #44	; 0x2c
 8009c32:	4618      	mov	r0, r3
 8009c34:	f002 fb62 	bl	800c2fc <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009c3e:	e00a      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009c46:	e006      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8009c48:	46020c00 	.word	0x46020c00
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8009c54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009c56:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10d      	bne.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009c5e:	4baf      	ldr	r3, [pc, #700]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c70:	4aaa      	ldr	r2, [pc, #680]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009c78:	e003      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009c7e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8009c90:	2300      	movs	r3, #0
 8009c92:	667b      	str	r3, [r7, #100]	; 0x64
 8009c94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f000 80b5 	beq.w	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ca6:	4b9d      	ldr	r3, [pc, #628]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d113      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cb4:	4b99      	ldr	r3, [pc, #612]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cba:	4a98      	ldr	r2, [pc, #608]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009cbc:	f043 0304 	orr.w	r3, r3, #4
 8009cc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009cc4:	4b95      	ldr	r3, [pc, #596]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cca:	f003 0304 	and.w	r3, r3, #4
 8009cce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009cdc:	4b90      	ldr	r3, [pc, #576]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	4a8f      	ldr	r2, [pc, #572]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ce8:	f7fb fd96 	bl	8005818 <HAL_GetTick>
 8009cec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009cf0:	e00b      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cf2:	f7fb fd91 	bl	8005818 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d903      	bls.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009d08:	e005      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009d0a:	4b85      	ldr	r3, [pc, #532]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0ed      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8009d16:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d165      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d1e:	4b7f      	ldr	r3, [pc, #508]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d023      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8009d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d38:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d01b      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d44:	4b75      	ldr	r3, [pc, #468]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d52:	4b72      	ldr	r3, [pc, #456]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d58:	4a70      	ldr	r2, [pc, #448]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d62:	4b6e      	ldr	r3, [pc, #440]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d68:	4a6c      	ldr	r2, [pc, #432]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d72:	4a6a      	ldr	r2, [pc, #424]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d019      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d88:	f7fb fd46 	bl	8005818 <HAL_GetTick>
 8009d8c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d90:	e00d      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d92:	f7fb fd41 	bl	8005818 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d903      	bls.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8009dac:	e006      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dae:	4b5b      	ldr	r3, [pc, #364]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0ea      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8009dbc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10d      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009dc4:	4b55      	ldr	r3, [pc, #340]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009dd6:	4a51      	ldr	r2, [pc, #324]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009dde:	e008      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009de0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009de4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8009de8:	e003      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dea:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009dee:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009df2:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d107      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dfa:	4b48      	ldr	r3, [pc, #288]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e00:	4a46      	ldr	r2, [pc, #280]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009e02:	f023 0304 	bic.w	r3, r3, #4
 8009e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e18:	2300      	movs	r3, #0
 8009e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009e20:	460b      	mov	r3, r1
 8009e22:	4313      	orrs	r3, r2
 8009e24:	d042      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009e32:	d022      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009e34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009e38:	d81b      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e3e:	d011      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8009e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e44:	d815      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d019      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e4e:	d110      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e54:	3308      	adds	r3, #8
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 f9b8 	bl	800c1cc <RCCEx_PLL2_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009e62:	e00d      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e64:	4b2d      	ldr	r3, [pc, #180]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	4a2c      	ldr	r2, [pc, #176]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009e70:	e006      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009e78:	e002      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8009e7a:	bf00      	nop
 8009e7c:	e000      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8009e7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e80:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10d      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8009e88:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e9a:	4a20      	ldr	r2, [pc, #128]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ea2:	e003      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009ea8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8009eba:	2300      	movs	r3, #0
 8009ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8009ebe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	d031      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ed4:	d00b      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eda:	d804      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee4:	d007      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009eec:	e004      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009eee:	bf00      	nop
 8009ef0:	e002      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009ef6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009ef8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d111      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f12:	4a02      	ldr	r2, [pc, #8]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009f14:	430b      	orrs	r3, r1
 8009f16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009f1a:	e007      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8009f1c:	46020c00 	.word	0x46020c00
 8009f20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f24:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009f28:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009f42:	460b      	mov	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d00c      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009f48:	4bb2      	ldr	r3, [pc, #712]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f4e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8009f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f5a:	4aae      	ldr	r2, [pc, #696]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009f5c:	430b      	orrs	r3, r1
 8009f5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f70:	2300      	movs	r3, #0
 8009f72:	647b      	str	r3, [r7, #68]	; 0x44
 8009f74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	d019      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f8a:	d105      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f8c:	4ba1      	ldr	r3, [pc, #644]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f90:	4aa0      	ldr	r2, [pc, #640]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f96:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009f98:	4b9e      	ldr	r3, [pc, #632]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009f9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f9e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009faa:	4a9a      	ldr	r2, [pc, #616]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009fac:	430b      	orrs	r3, r1
 8009fae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	d00c      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009fce:	4b91      	ldr	r3, [pc, #580]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fd4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009fe0:	4a8c      	ldr	r2, [pc, #560]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8009ffa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009ffe:	460b      	mov	r3, r1
 800a000:	4313      	orrs	r3, r2
 800a002:	d00c      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a004:	4b83      	ldr	r3, [pc, #524]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a00a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a016:	4a7f      	ldr	r2, [pc, #508]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a018:	430b      	orrs	r3, r1
 800a01a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a01e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a02c:	2300      	movs	r3, #0
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a030:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a034:	460b      	mov	r3, r1
 800a036:	4313      	orrs	r3, r2
 800a038:	d00c      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a03a:	4b76      	ldr	r3, [pc, #472]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a03c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a040:	f023 0218 	bic.w	r2, r3, #24
 800a044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a048:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a04c:	4971      	ldr	r1, [pc, #452]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a060:	623b      	str	r3, [r7, #32]
 800a062:	2300      	movs	r3, #0
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
 800a066:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a06a:	460b      	mov	r3, r1
 800a06c:	4313      	orrs	r3, r2
 800a06e:	d032      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a07c:	d105      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a07e:	4b65      	ldr	r3, [pc, #404]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	4a64      	ldr	r2, [pc, #400]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a088:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a08e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a096:	d108      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a09c:	3308      	adds	r3, #8
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f002 f894 	bl	800c1cc <RCCEx_PLL2_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 800a0aa:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10d      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a0b2:	4b58      	ldr	r3, [pc, #352]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a0b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a0c4:	4953      	ldr	r1, [pc, #332]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a0cc:	e003      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ce:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a0d2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a0d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	2100      	movs	r1, #0
 800a0e0:	61b9      	str	r1, [r7, #24]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	d04a      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a0f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a0fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a0fe:	d01e      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800a100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a104:	d825      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800a106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a10a:	d00e      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800a10c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a110:	d81f      	bhi.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d021      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a11a:	d11a      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a11c:	4b3d      	ldr	r3, [pc, #244]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	4a3c      	ldr	r2, [pc, #240]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a126:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a128:	e018      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a12a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a12e:	3308      	adds	r3, #8
 800a130:	4618      	mov	r0, r3
 800a132:	f002 f84b 	bl	800c1cc <RCCEx_PLL2_Config>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a13c:	e00e      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a13e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a142:	332c      	adds	r3, #44	; 0x2c
 800a144:	4618      	mov	r0, r3
 800a146:	f002 f8d9 	bl	800c2fc <RCCEx_PLL3_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a150:	e004      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800a158:	e000      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800a15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10d      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a164:	4b2b      	ldr	r3, [pc, #172]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a16a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a172:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a176:	4927      	ldr	r1, [pc, #156]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a17e:	e003      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a184:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a194:	613b      	str	r3, [r7, #16]
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	d03d      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a1a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b0:	d00e      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a1b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1b6:	d815      	bhi.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d017      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1c0:	d110      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1c2:	4b14      	ldr	r3, [pc, #80]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	4a13      	ldr	r2, [pc, #76]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a1c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1cc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a1ce:	e00e      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 fff8 	bl	800c1cc <RCCEx_PLL2_Config>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a1e2:	e004      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800a1ea:	e000      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 800a1ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1ee:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d110      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a1f6:	4b07      	ldr	r3, [pc, #28]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	4902      	ldr	r1, [pc, #8]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a210:	e006      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800a212:	bf00      	nop
 800a214:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a218:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a21c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a22c:	60bb      	str	r3, [r7, #8]
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a236:	460b      	mov	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	d00c      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a23c:	4b2c      	ldr	r3, [pc, #176]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a23e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a242:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a24a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a24e:	4928      	ldr	r1, [pc, #160]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a250:	4313      	orrs	r3, r2
 800a252:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	2100      	movs	r1, #0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a26c:	460b      	mov	r3, r1
 800a26e:	4313      	orrs	r3, r2
 800a270:	d036      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a276:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a27a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a27e:	d00d      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a280:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a284:	d811      	bhi.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800a286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a28a:	d012      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a28c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a290:	d80b      	bhi.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29a:	d106      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a29c:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a6:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a2a8:	e004      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800a2b0:	e000      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800a2b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10d      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a2be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a2c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a2ce:	4908      	ldr	r1, [pc, #32]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a2d6:	e003      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800a2dc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a2e0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2f0:	46020c00 	.word	0x46020c00

0800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a2fc:	4ba6      	ldr	r3, [pc, #664]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a304:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a306:	4ba4      	ldr	r3, [pc, #656]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a310:	4ba1      	ldr	r3, [pc, #644]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	3301      	adds	r3, #1
 800a31c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a31e:	4b9e      	ldr	r3, [pc, #632]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	091b      	lsrs	r3, r3, #4
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a32a:	4b9b      	ldr	r3, [pc, #620]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	08db      	lsrs	r3, r3, #3
 800a330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	fb02 f303 	mul.w	r3, r2, r3
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d062      	beq.n	800a412 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2b03      	cmp	r3, #3
 800a350:	f200 8081 	bhi.w	800a456 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d024      	beq.n	800a3a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d17a      	bne.n	800a456 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a59c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a372:	4b89      	ldr	r3, [pc, #548]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a382:	ed97 6a02 	vldr	s12, [r7, #8]
 800a386:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3a2:	e08f      	b.n	800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a3a4:	4b7c      	ldr	r3, [pc, #496]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a3b0:	4b79      	ldr	r3, [pc, #484]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	0f1b      	lsrs	r3, r3, #28
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	e006      	b.n	800a3ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a3bc:	4b76      	ldr	r3, [pc, #472]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3c2:	041b      	lsls	r3, r3, #16
 800a3c4:	0f1b      	lsrs	r3, r3, #28
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	4a76      	ldr	r2, [pc, #472]	; (800a5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3f4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a3f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a404:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a410:	e058      	b.n	800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	ee07 3a90 	vmov	s15, r3
 800a418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a59c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a424:	4b5c      	ldr	r3, [pc, #368]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a434:	ed97 6a02 	vldr	s12, [r7, #8]
 800a438:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a43c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a448:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a450:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a454:	e036      	b.n	800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a456:	4b50      	ldr	r3, [pc, #320]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a462:	4b4d      	ldr	r3, [pc, #308]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	0f1b      	lsrs	r3, r3, #28
 800a468:	f003 030f 	and.w	r3, r3, #15
 800a46c:	e006      	b.n	800a47c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a46e:	4b4a      	ldr	r3, [pc, #296]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a474:	041b      	lsls	r3, r3, #16
 800a476:	0f1b      	lsrs	r3, r3, #28
 800a478:	f003 030f 	and.w	r3, r3, #15
 800a47c:	4a49      	ldr	r2, [pc, #292]	; (800a5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4a6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a4c4:	4b34      	ldr	r3, [pc, #208]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d017      	beq.n	800a500 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a4d0:	4b31      	ldr	r3, [pc, #196]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d4:	0a5b      	lsrs	r3, r3, #9
 800a4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a4e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a4ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f6:	ee17 2a90 	vmov	r2, s15
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e002      	b.n	800a506 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a506:	4b24      	ldr	r3, [pc, #144]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d017      	beq.n	800a542 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a512:	4b21      	ldr	r3, [pc, #132]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a516:	0c1b      	lsrs	r3, r3, #16
 800a518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51c:	ee07 3a90 	vmov	s15, r3
 800a520:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a528:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a52c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a538:	ee17 2a90 	vmov	r2, s15
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	605a      	str	r2, [r3, #4]
 800a540:	e002      	b.n	800a548 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a548:	4b13      	ldr	r3, [pc, #76]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d017      	beq.n	800a584 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a554:	4b10      	ldr	r3, [pc, #64]	; (800a598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a558:	0e1b      	lsrs	r3, r3, #24
 800a55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a56a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a56e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57a:	ee17 2a90 	vmov	r2, s15
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a582:	e002      	b.n	800a58a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	609a      	str	r2, [r3, #8]
}
 800a58a:	bf00      	nop
 800a58c:	3724      	adds	r7, #36	; 0x24
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	46020c00 	.word	0x46020c00
 800a59c:	4b742400 	.word	0x4b742400
 800a5a0:	46000000 	.word	0x46000000
 800a5a4:	08010254 	.word	0x08010254

0800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b089      	sub	sp, #36	; 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a5b0:	4ba6      	ldr	r3, [pc, #664]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a5ba:	4ba4      	ldr	r3, [pc, #656]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a5c4:	4ba1      	ldr	r3, [pc, #644]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a5d2:	4b9e      	ldr	r3, [pc, #632]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	091b      	lsrs	r3, r3, #4
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a5de:	4b9b      	ldr	r3, [pc, #620]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	08db      	lsrs	r3, r3, #3
 800a5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d062      	beq.n	800a6c6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2b03      	cmp	r3, #3
 800a604:	f200 8081 	bhi.w	800a70a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d024      	beq.n	800a658 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d17a      	bne.n	800a70a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	ee07 3a90 	vmov	s15, r3
 800a61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a626:	4b89      	ldr	r3, [pc, #548]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a636:	ed97 6a02 	vldr	s12, [r7, #8]
 800a63a:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a642:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a656:	e08f      	b.n	800a778 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a658:	4b7c      	ldr	r3, [pc, #496]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a664:	4b79      	ldr	r3, [pc, #484]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	0f1b      	lsrs	r3, r3, #28
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	e006      	b.n	800a67e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a670:	4b76      	ldr	r3, [pc, #472]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a676:	041b      	lsls	r3, r3, #16
 800a678:	0f1b      	lsrs	r3, r3, #28
 800a67a:	f003 030f 	and.w	r3, r3, #15
 800a67e:	4a76      	ldr	r2, [pc, #472]	; (800a858 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a684:	ee07 3a90 	vmov	s15, r3
 800a688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6a8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a6ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a6bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6c4:	e058      	b.n	800a778 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a6d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d8:	4b5c      	ldr	r3, [pc, #368]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e0:	ee07 3a90 	vmov	s15, r3
 800a6e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6e8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ec:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a6f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a6f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a700:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a704:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a708:	e036      	b.n	800a778 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a70a:	4b50      	ldr	r3, [pc, #320]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a716:	4b4d      	ldr	r3, [pc, #308]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	0f1b      	lsrs	r3, r3, #28
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	e006      	b.n	800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a722:	4b4a      	ldr	r3, [pc, #296]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a728:	041b      	lsls	r3, r3, #16
 800a72a:	0f1b      	lsrs	r3, r3, #28
 800a72c:	f003 030f 	and.w	r3, r3, #15
 800a730:	4a49      	ldr	r2, [pc, #292]	; (800a858 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	ee07 3a90 	vmov	s15, r3
 800a744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	ee07 3a90 	vmov	s15, r3
 800a752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a756:	ed97 6a02 	vldr	s12, [r7, #8]
 800a75a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a776:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a778:	4b34      	ldr	r3, [pc, #208]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d017      	beq.n	800a7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a784:	4b31      	ldr	r3, [pc, #196]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a788:	0a5b      	lsrs	r3, r3, #9
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a79a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a79e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7aa:	ee17 2a90 	vmov	r2, s15
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e002      	b.n	800a7ba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a7ba:	4b24      	ldr	r3, [pc, #144]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d017      	beq.n	800a7f6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a7c6:	4b21      	ldr	r3, [pc, #132]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ca:	0c1b      	lsrs	r3, r3, #16
 800a7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a7d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a7e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ec:	ee17 2a90 	vmov	r2, s15
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	605a      	str	r2, [r3, #4]
 800a7f4:	e002      	b.n	800a7fc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a7fc:	4b13      	ldr	r3, [pc, #76]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d017      	beq.n	800a838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a808:	4b10      	ldr	r3, [pc, #64]	; (800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80c:	0e1b      	lsrs	r3, r3, #24
 800a80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a81a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a81e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a822:	edd7 6a07 	vldr	s13, [r7, #28]
 800a826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82e:	ee17 2a90 	vmov	r2, s15
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a836:	e002      	b.n	800a83e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	609a      	str	r2, [r3, #8]
}
 800a83e:	bf00      	nop
 800a840:	3724      	adds	r7, #36	; 0x24
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	46020c00 	.word	0x46020c00
 800a850:	4b742400 	.word	0x4b742400
 800a854:	46000000 	.word	0x46000000
 800a858:	08010254 	.word	0x08010254

0800a85c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a864:	4ba6      	ldr	r3, [pc, #664]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a86e:	4ba4      	ldr	r3, [pc, #656]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a878:	4ba1      	ldr	r3, [pc, #644]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87c:	0a1b      	lsrs	r3, r3, #8
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	3301      	adds	r3, #1
 800a884:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a886:	4b9e      	ldr	r3, [pc, #632]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	091b      	lsrs	r3, r3, #4
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a892:	4b9b      	ldr	r3, [pc, #620]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	fb02 f303 	mul.w	r3, r2, r3
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d062      	beq.n	800a97a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	f200 8081 	bhi.w	800a9be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d024      	beq.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d17a      	bne.n	800a9be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b89      	ldr	r3, [pc, #548]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ee:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a90a:	e08f      	b.n	800aa2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a90c:	4b7c      	ldr	r3, [pc, #496]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a918:	4b79      	ldr	r3, [pc, #484]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	0f1b      	lsrs	r3, r3, #28
 800a91e:	f003 030f 	and.w	r3, r3, #15
 800a922:	e006      	b.n	800a932 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a924:	4b76      	ldr	r3, [pc, #472]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a92a:	041b      	lsls	r3, r3, #16
 800a92c:	0f1b      	lsrs	r3, r3, #28
 800a92e:	f003 030f 	and.w	r3, r3, #15
 800a932:	4a76      	ldr	r2, [pc, #472]	; (800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a958:	ed97 6a02 	vldr	s12, [r7, #8]
 800a95c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a974:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a978:	e058      	b.n	800aa2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	ee07 3a90 	vmov	s15, r3
 800a980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a984:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98c:	4b5c      	ldr	r3, [pc, #368]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a99c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9a0:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a9a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a9a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a9b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9bc:	e036      	b.n	800aa2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a9be:	4b50      	ldr	r3, [pc, #320]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d005      	beq.n	800a9d6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a9ca:	4b4d      	ldr	r3, [pc, #308]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	0f1b      	lsrs	r3, r3, #28
 800a9d0:	f003 030f 	and.w	r3, r3, #15
 800a9d4:	e006      	b.n	800a9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a9d6:	4b4a      	ldr	r3, [pc, #296]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	0f1b      	lsrs	r3, r3, #28
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	4a49      	ldr	r2, [pc, #292]	; (800ab0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	ee07 3a90 	vmov	s15, r3
 800a9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa0e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800aa2c:	4b34      	ldr	r3, [pc, #208]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d017      	beq.n	800aa68 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aa38:	4b31      	ldr	r3, [pc, #196]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3c:	0a5b      	lsrs	r3, r3, #9
 800aa3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800aa4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aa52:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa5e:	ee17 2a90 	vmov	r2, s15
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	e002      	b.n	800aa6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800aa6e:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d017      	beq.n	800aaaa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aa7a:	4b21      	ldr	r3, [pc, #132]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	0c1b      	lsrs	r3, r3, #16
 800aa80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800aa8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aa94:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa0:	ee17 2a90 	vmov	r2, s15
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	e002      	b.n	800aab0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800aab0:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d017      	beq.n	800aaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aabc:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aabe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac0:	0e1b      	lsrs	r3, r3, #24
 800aac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800aace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aad2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aad6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae2:	ee17 2a90 	vmov	r2, s15
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aaea:	e002      	b.n	800aaf2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	609a      	str	r2, [r3, #8]
}
 800aaf2:	bf00      	nop
 800aaf4:	3724      	adds	r7, #36	; 0x24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	46020c00 	.word	0x46020c00
 800ab04:	4b742400 	.word	0x4b742400
 800ab08:	46000000 	.word	0x46000000
 800ab0c:	08010254 	.word	0x08010254

0800ab10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08e      	sub	sp, #56	; 0x38
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ab1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800ab22:	430b      	orrs	r3, r1
 800ab24:	d145      	bne.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ab26:	4ba7      	ldr	r3, [pc, #668]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab30:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ab32:	4ba4      	ldr	r3, [pc, #656]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d108      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab46:	d104      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ab48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab4e:	f001 bb31 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ab52:	4b9c      	ldr	r3, [pc, #624]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab60:	d114      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab68:	d110      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab6a:	4b96      	ldr	r3, [pc, #600]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ab70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab78:	d103      	bne.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ab7a:	23fa      	movs	r3, #250	; 0xfa
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab7e:	f001 bb19 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800ab82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab88:	f001 bb14 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ab8c:	4b8d      	ldr	r3, [pc, #564]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab98:	d107      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aba0:	d103      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800aba2:	4b89      	ldr	r3, [pc, #548]	; (800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800aba4:	637b      	str	r3, [r7, #52]	; 0x34
 800aba6:	f001 bb05 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	637b      	str	r3, [r7, #52]	; 0x34
 800abae:	f001 bb01 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800abba:	430b      	orrs	r3, r1
 800abbc:	d151      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800abbe:	4b81      	ldr	r3, [pc, #516]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800abc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800abc4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800abc8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	2b80      	cmp	r3, #128	; 0x80
 800abce:	d035      	beq.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d841      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	2b60      	cmp	r3, #96	; 0x60
 800abda:	d02a      	beq.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	2b60      	cmp	r3, #96	; 0x60
 800abe0:	d83b      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	2b40      	cmp	r3, #64	; 0x40
 800abe6:	d009      	beq.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	d835      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00c      	beq.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d012      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800abfa:	e02e      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fb77 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac0a:	f001 bad3 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac0e:	f107 0318 	add.w	r3, r7, #24
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fcc8 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac1c:	f001 baca 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fe19 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac2e:	f001 bac1 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ac32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac38:	f001 babc 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac3c:	4b61      	ldr	r3, [pc, #388]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac48:	d103      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ac4a:	4b60      	ldr	r3, [pc, #384]	; (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ac4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac4e:	f001 bab1 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac56:	f001 baad 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac5e:	f001 baa9 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ac62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac66:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ac6a:	430b      	orrs	r3, r1
 800ac6c:	d158      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ac6e:	4b55      	ldr	r3, [pc, #340]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac80:	d03b      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac88:	d846      	bhi.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac90:	d02e      	beq.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac98:	d83e      	bhi.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca0:	d00b      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca8:	d836      	bhi.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00d      	beq.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acb6:	d012      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800acb8:	e02e      	b.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fb18 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acc8:	f001 ba74 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800accc:	f107 0318 	add.w	r3, r7, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fc69 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acda:	f001 ba6b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acde:	f107 030c 	add.w	r3, r7, #12
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff fdba 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acec:	f001 ba62 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800acf0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acf6:	f001 ba5d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acfa:	4b32      	ldr	r3, [pc, #200]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad06:	d103      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ad08:	4b30      	ldr	r3, [pc, #192]	; (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad0c:	f001 ba52 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ad10:	2300      	movs	r3, #0
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad14:	f001 ba4e 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad1c:	f001 ba4a 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ad20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad24:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	d126      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ad2c:	4b25      	ldr	r3, [pc, #148]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ad32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad36:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ad38:	4b22      	ldr	r3, [pc, #136]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad44:	d106      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ad4c:	4b1f      	ldr	r3, [pc, #124]	; (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ad4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad50:	f001 ba30 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ad54:	4b1b      	ldr	r3, [pc, #108]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad60:	d107      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad68:	d103      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ad6a:	4b19      	ldr	r3, [pc, #100]	; (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6e:	f001 ba21 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34
 800ad76:	f001 ba1d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ad7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800ad82:	430b      	orrs	r3, r1
 800ad84:	d16e      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ad86:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad8c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ad90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ad98:	d03d      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ada0:	d85c      	bhi.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ada8:	d014      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adb0:	d854      	bhi.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01f      	beq.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adbe:	d012      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800adc0:	e04c      	b.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800adc2:	bf00      	nop
 800adc4:	46020c00 	.word	0x46020c00
 800adc8:	0007a120 	.word	0x0007a120
 800adcc:	00f42400 	.word	0x00f42400
 800add0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800add4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fa8b 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ade2:	f001 b9e7 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fbdc 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adf4:	f001 b9de 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800adf8:	4ba7      	ldr	r3, [pc, #668]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae04:	d103      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800ae06:	4ba5      	ldr	r3, [pc, #660]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae0a:	f001 b9d3 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae12:	f001 b9cf 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae16:	4ba0      	ldr	r3, [pc, #640]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	d118      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae22:	4b9d      	ldr	r3, [pc, #628]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d005      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ae2e:	4b9a      	ldr	r3, [pc, #616]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	0e1b      	lsrs	r3, r3, #24
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	e006      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ae3a:	4b97      	ldr	r3, [pc, #604]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	0e1b      	lsrs	r3, r3, #24
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	4a95      	ldr	r2, [pc, #596]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ae4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae50:	f001 b9b0 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae58:	f001 b9ac 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae60:	f001 b9a8 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae68:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	d17f      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae70:	4b89      	ldr	r3, [pc, #548]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae7a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d165      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ae82:	4b85      	ldr	r3, [pc, #532]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae88:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ae8c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae94:	d034      	beq.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae9c:	d853      	bhi.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aea4:	d00b      	beq.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeac:	d84b      	bhi.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d016      	beq.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aeba:	d009      	beq.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aebc:	e043      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff fa16 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800aecc:	f001 b972 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aed0:	f107 0318 	add.w	r3, r7, #24
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff fb67 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800aede:	f001 b969 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800aee2:	4b6d      	ldr	r3, [pc, #436]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeee:	d103      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800aef0:	4b6a      	ldr	r3, [pc, #424]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800aef4:	f001 b95e 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800aefc:	f001 b95a 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af00:	4b65      	ldr	r3, [pc, #404]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d118      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af0c:	4b62      	ldr	r3, [pc, #392]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800af18:	4b5f      	ldr	r3, [pc, #380]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	0e1b      	lsrs	r3, r3, #24
 800af1e:	f003 030f 	and.w	r3, r3, #15
 800af22:	e006      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800af24:	4b5c      	ldr	r3, [pc, #368]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af2a:	041b      	lsls	r3, r3, #16
 800af2c:	0e1b      	lsrs	r3, r3, #24
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	4a5b      	ldr	r2, [pc, #364]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800af34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800af3a:	f001 b93b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800af42:	f001 b937 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800af4a:	f001 b933 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af54:	d108      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff f9ca 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	637b      	str	r3, [r7, #52]	; 0x34
 800af64:	f001 b926 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	637b      	str	r3, [r7, #52]	; 0x34
 800af6c:	f001 b922 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800af70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af74:	1e51      	subs	r1, r2, #1
 800af76:	430b      	orrs	r3, r1
 800af78:	d136      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800af7a:	4b47      	ldr	r3, [pc, #284]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af80:	f003 0303 	and.w	r3, r3, #3
 800af84:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800af8c:	f7fe fa48 	bl	8009420 <HAL_RCC_GetPCLK2Freq>
 800af90:	6378      	str	r0, [r7, #52]	; 0x34
 800af92:	f001 b90f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d104      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af9c:	f7fe f910 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800afa0:	6378      	str	r0, [r7, #52]	; 0x34
 800afa2:	f001 b907 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800afa6:	4b3c      	ldr	r3, [pc, #240]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afb2:	d106      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d103      	bne.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800afba:	4b3a      	ldr	r3, [pc, #232]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800afbc:	637b      	str	r3, [r7, #52]	; 0x34
 800afbe:	f001 b8f9 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800afc2:	4b35      	ldr	r3, [pc, #212]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800afc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d107      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d104      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800afd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
 800afdc:	f001 b8ea 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34
 800afe4:	f001 b8e6 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800afe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afec:	1e91      	subs	r1, r2, #2
 800afee:	430b      	orrs	r3, r1
 800aff0:	d136      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800aff2:	4b29      	ldr	r3, [pc, #164]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aff8:	f003 030c 	and.w	r3, r3, #12
 800affc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	2b00      	cmp	r3, #0
 800b002:	d104      	bne.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b004:	f7fe f9f8 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b008:	6378      	str	r0, [r7, #52]	; 0x34
 800b00a:	f001 b8d3 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	2b04      	cmp	r3, #4
 800b012:	d104      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b014:	f7fe f8d4 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b018:	6378      	str	r0, [r7, #52]	; 0x34
 800b01a:	f001 b8cb 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b01e:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b02a:	d106      	bne.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	2b08      	cmp	r3, #8
 800b030:	d103      	bne.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b032:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
 800b036:	f001 b8bd 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b03a:	4b17      	ldr	r3, [pc, #92]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b03c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b02      	cmp	r3, #2
 800b046:	d107      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	2b0c      	cmp	r3, #12
 800b04c:	d104      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b052:	637b      	str	r3, [r7, #52]	; 0x34
 800b054:	f001 b8ae 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	637b      	str	r3, [r7, #52]	; 0x34
 800b05c:	f001 b8aa 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b064:	1f11      	subs	r1, r2, #4
 800b066:	430b      	orrs	r3, r1
 800b068:	d13f      	bne.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b06c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b070:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b074:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b07c:	f7fe f9bc 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b080:	6378      	str	r0, [r7, #52]	; 0x34
 800b082:	f001 b897 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d10d      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b08c:	f7fe f898 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b090:	6378      	str	r0, [r7, #52]	; 0x34
 800b092:	f001 b88f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b096:	bf00      	nop
 800b098:	46020c00 	.word	0x46020c00
 800b09c:	02dc6c00 	.word	0x02dc6c00
 800b0a0:	08010254 	.word	0x08010254
 800b0a4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b0a8:	4ba8      	ldr	r3, [pc, #672]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b4:	d106      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d103      	bne.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b0bc:	4ba4      	ldr	r3, [pc, #656]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0be:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c0:	f001 b878 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b0c4:	4ba1      	ldr	r3, [pc, #644]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b0c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d107      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	2b30      	cmp	r3, #48	; 0x30
 800b0d6:	d104      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b0d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0de:	f001 b869 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e6:	f001 b865 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ee:	f1a2 0108 	sub.w	r1, r2, #8
 800b0f2:	430b      	orrs	r3, r1
 800b0f4:	d136      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b0f6:	4b95      	ldr	r3, [pc, #596]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b100:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b108:	f7fe f976 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b10c:	6378      	str	r0, [r7, #52]	; 0x34
 800b10e:	f001 b851 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	2b40      	cmp	r3, #64	; 0x40
 800b116:	d104      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b118:	f7fe f852 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b11c:	6378      	str	r0, [r7, #52]	; 0x34
 800b11e:	f001 b849 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b122:	4b8a      	ldr	r3, [pc, #552]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b12e:	d106      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	2b80      	cmp	r3, #128	; 0x80
 800b134:	d103      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b136:	4b86      	ldr	r3, [pc, #536]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b138:	637b      	str	r3, [r7, #52]	; 0x34
 800b13a:	f001 b83b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b13e:	4b83      	ldr	r3, [pc, #524]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d107      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2bc0      	cmp	r3, #192	; 0xc0
 800b150:	d104      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b156:	637b      	str	r3, [r7, #52]	; 0x34
 800b158:	f001 b82c 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	637b      	str	r3, [r7, #52]	; 0x34
 800b160:	f001 b828 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b168:	f1a2 0110 	sub.w	r1, r2, #16
 800b16c:	430b      	orrs	r3, r1
 800b16e:	d139      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b170:	4b76      	ldr	r3, [pc, #472]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b182:	f7fe f939 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b186:	6378      	str	r0, [r7, #52]	; 0x34
 800b188:	f001 b814 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b192:	d104      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b194:	f7fe f814 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b198:	6378      	str	r0, [r7, #52]	; 0x34
 800b19a:	f001 b80b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b19e:	4b6b      	ldr	r3, [pc, #428]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1aa:	d107      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1b2:	d103      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b1b4:	4b66      	ldr	r3, [pc, #408]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b1b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1b8:	f000 bffc 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b1bc:	4b63      	ldr	r3, [pc, #396]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d108      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1d0:	d104      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1d8:	f000 bfec 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e0:	f000 bfe8 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b1e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1e8:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	d139      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b1f0:	4b56      	ldr	r3, [pc, #344]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b1f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d104      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b202:	f7fe f8f9 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b206:	6378      	str	r0, [r7, #52]	; 0x34
 800b208:	f000 bfd4 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b212:	d104      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b214:	f7fd ffd4 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b218:	6378      	str	r0, [r7, #52]	; 0x34
 800b21a:	f000 bfcb 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b21e:	4b4b      	ldr	r3, [pc, #300]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b22a:	d107      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b232:	d103      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b234:	4b46      	ldr	r3, [pc, #280]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b236:	637b      	str	r3, [r7, #52]	; 0x34
 800b238:	f000 bfbc 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b23c:	4b43      	ldr	r3, [pc, #268]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b02      	cmp	r3, #2
 800b248:	d108      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b250:	d104      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
 800b258:	f000 bfac 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	637b      	str	r3, [r7, #52]	; 0x34
 800b260:	f000 bfa8 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b268:	f1a2 0120 	sub.w	r1, r2, #32
 800b26c:	430b      	orrs	r3, r1
 800b26e:	d158      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b270:	4b36      	ldr	r3, [pc, #216]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b276:	f003 0307 	and.w	r3, r3, #7
 800b27a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d104      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b282:	f7fe f8e1 	bl	8009448 <HAL_RCC_GetPCLK3Freq>
 800b286:	6378      	str	r0, [r7, #52]	; 0x34
 800b288:	f000 bf94 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d104      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b292:	f7fd ff95 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b296:	6378      	str	r0, [r7, #52]	; 0x34
 800b298:	f000 bf8c 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b29c:	4b2b      	ldr	r3, [pc, #172]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2a8:	d106      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d103      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b2b0:	4b27      	ldr	r3, [pc, #156]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b4:	f000 bf7e 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b2b8:	4b24      	ldr	r3, [pc, #144]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d107      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d104      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d2:	f000 bf6f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b2d6:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b20      	cmp	r3, #32
 800b2e0:	d11b      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	d118      	bne.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2e8:	4b18      	ldr	r3, [pc, #96]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d005      	beq.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b2f4:	4b15      	ldr	r3, [pc, #84]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	0e1b      	lsrs	r3, r3, #24
 800b2fa:	f003 030f 	and.w	r3, r3, #15
 800b2fe:	e006      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b300:	4b12      	ldr	r3, [pc, #72]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	0e1b      	lsrs	r3, r3, #24
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	4a11      	ldr	r2, [pc, #68]	; (800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b314:	637b      	str	r3, [r7, #52]	; 0x34
 800b316:	f000 bf4d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
 800b31e:	f000 bf49 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b326:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b32a:	430b      	orrs	r3, r1
 800b32c:	d172      	bne.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b32e:	4b07      	ldr	r3, [pc, #28]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b334:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b338:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d10a      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b342:	f7fd ff3d 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b346:	6378      	str	r0, [r7, #52]	; 0x34
 800b348:	f000 bf34 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b34c:	46020c00 	.word	0x46020c00
 800b350:	00f42400 	.word	0x00f42400
 800b354:	08010254 	.word	0x08010254
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b35e:	d108      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b360:	f107 0318 	add.w	r3, r7, #24
 800b364:	4618      	mov	r0, r3
 800b366:	f7ff f91f 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
 800b36e:	f000 bf21 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d104      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b378:	f7fe f824 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 800b37c:	6378      	str	r0, [r7, #52]	; 0x34
 800b37e:	f000 bf19 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b388:	d122      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b38a:	4bb0      	ldr	r3, [pc, #704]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0320 	and.w	r3, r3, #32
 800b392:	2b20      	cmp	r3, #32
 800b394:	d118      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b396:	4bad      	ldr	r3, [pc, #692]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b3a2:	4baa      	ldr	r3, [pc, #680]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	0e1b      	lsrs	r3, r3, #24
 800b3a8:	f003 030f 	and.w	r3, r3, #15
 800b3ac:	e006      	b.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b3ae:	4ba7      	ldr	r3, [pc, #668]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b3b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b3b4:	041b      	lsls	r3, r3, #16
 800b3b6:	0e1b      	lsrs	r3, r3, #24
 800b3b8:	f003 030f 	and.w	r3, r3, #15
 800b3bc:	4aa4      	ldr	r2, [pc, #656]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c4:	f000 bef6 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b3cc:	f000 bef2 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b3d0:	4b9e      	ldr	r3, [pc, #632]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3dc:	d107      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3e4:	d103      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b3e6:	4b9b      	ldr	r3, [pc, #620]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ea:	f000 bee3 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b3ee:	4b97      	ldr	r3, [pc, #604]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b402:	d103      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b404:	4b93      	ldr	r3, [pc, #588]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
 800b408:	f000 bed4 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	637b      	str	r3, [r7, #52]	; 0x34
 800b410:	f000 bed0 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b418:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b41c:	430b      	orrs	r3, r1
 800b41e:	d158      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b420:	4b8a      	ldr	r3, [pc, #552]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	2b04      	cmp	r3, #4
 800b430:	d84b      	bhi.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b432:	a201      	add	r2, pc, #4	; (adr r2, 800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b438:	0800b471 	.word	0x0800b471
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b45f 	.word	0x0800b45f
 800b444:	0800b47b 	.word	0x0800b47b
 800b448:	0800b485 	.word	0x0800b485
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe ff4f 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b45a:	f000 beab 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b45e:	f107 030c 	add.w	r3, r7, #12
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff f9fa 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b46c:	f000 bea2 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b470:	f7fd ffa8 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 800b474:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b476:	f000 be9d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b47a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b480:	f000 be98 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b484:	4b71      	ldr	r3, [pc, #452]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0320 	and.w	r3, r3, #32
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d118      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b490:	4b6e      	ldr	r3, [pc, #440]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b49c:	4b6b      	ldr	r3, [pc, #428]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	0e1b      	lsrs	r3, r3, #24
 800b4a2:	f003 030f 	and.w	r3, r3, #15
 800b4a6:	e006      	b.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b4a8:	4b68      	ldr	r3, [pc, #416]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4ae:	041b      	lsls	r3, r3, #16
 800b4b0:	0e1b      	lsrs	r3, r3, #24
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	4a66      	ldr	r2, [pc, #408]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4be:	f000 be79 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4c6:	f000 be75 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4ce:	f000 be71 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b4da:	430b      	orrs	r3, r1
 800b4dc:	d167      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b4de:	4b5b      	ldr	r3, [pc, #364]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b4e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b4e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4f0:	d036      	beq.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4f8:	d855      	bhi.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b500:	d029      	beq.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b508:	d84d      	bhi.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b510:	d013      	beq.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b518:	d845      	bhi.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d015      	beq.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b526:	d13e      	bne.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe fee1 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b536:	f000 be3d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff f98c 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b548:	f000 be34 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b54c:	f7fd ff3a 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 800b550:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b552:	f000 be2f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b556:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b55c:	f000 be2a 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b560:	4b3a      	ldr	r3, [pc, #232]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0320 	and.w	r3, r3, #32
 800b568:	2b20      	cmp	r3, #32
 800b56a:	d118      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b56c:	4b37      	ldr	r3, [pc, #220]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d005      	beq.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b578:	4b34      	ldr	r3, [pc, #208]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	0e1b      	lsrs	r3, r3, #24
 800b57e:	f003 030f 	and.w	r3, r3, #15
 800b582:	e006      	b.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b584:	4b31      	ldr	r3, [pc, #196]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b58a:	041b      	lsls	r3, r3, #16
 800b58c:	0e1b      	lsrs	r3, r3, #24
 800b58e:	f003 030f 	and.w	r3, r3, #15
 800b592:	4a2f      	ldr	r2, [pc, #188]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b59a:	f000 be0b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5a2:	f000 be07 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5aa:	f000 be03 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	d152      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b5ba:	4b24      	ldr	r3, [pc, #144]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b5bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5cc:	f7fd ff14 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b5d0:	6378      	str	r0, [r7, #52]	; 0x34
 800b5d2:	f000 bdef 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5dc:	d104      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5de:	f7fd fdef 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b5e2:	6378      	str	r0, [r7, #52]	; 0x34
 800b5e4:	f000 bde6 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b5e8:	4b18      	ldr	r3, [pc, #96]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f4:	d107      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5fc:	d103      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b5fe:	4b15      	ldr	r3, [pc, #84]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b600:	637b      	str	r3, [r7, #52]	; 0x34
 800b602:	f000 bdd7 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b606:	4b11      	ldr	r3, [pc, #68]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0320 	and.w	r3, r3, #32
 800b60e:	2b20      	cmp	r3, #32
 800b610:	d122      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b618:	d11e      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b61a:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d005      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	0e1b      	lsrs	r3, r3, #24
 800b62c:	f003 030f 	and.w	r3, r3, #15
 800b630:	e006      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b632:	4b06      	ldr	r3, [pc, #24]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b638:	041b      	lsls	r3, r3, #16
 800b63a:	0e1b      	lsrs	r3, r3, #24
 800b63c:	f003 030f 	and.w	r3, r3, #15
 800b640:	4a03      	ldr	r2, [pc, #12]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b646:	637b      	str	r3, [r7, #52]	; 0x34
 800b648:	f000 bdb4 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b64c:	46020c00 	.word	0x46020c00
 800b650:	08010254 	.word	0x08010254
 800b654:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	637b      	str	r3, [r7, #52]	; 0x34
 800b65c:	f000 bdaa 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b664:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800b668:	430b      	orrs	r3, r1
 800b66a:	d14c      	bne.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b66c:	4ba8      	ldr	r3, [pc, #672]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b66e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b672:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b676:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d104      	bne.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b67e:	f7fd febb 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b682:	6378      	str	r0, [r7, #52]	; 0x34
 800b684:	f000 bd96 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b68e:	d104      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b690:	f7fd fd96 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b694:	6378      	str	r0, [r7, #52]	; 0x34
 800b696:	f000 bd8d 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b69a:	4b9d      	ldr	r3, [pc, #628]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a6:	d107      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ae:	d103      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b6b0:	4b98      	ldr	r3, [pc, #608]	; (800b914 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b6b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b4:	f000 bd7e 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b6b8:	4b95      	ldr	r3, [pc, #596]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b20      	cmp	r3, #32
 800b6c2:	d11c      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6ca:	d118      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6cc:	4b90      	ldr	r3, [pc, #576]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d005      	beq.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b6d8:	4b8d      	ldr	r3, [pc, #564]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	0e1b      	lsrs	r3, r3, #24
 800b6de:	f003 030f 	and.w	r3, r3, #15
 800b6e2:	e006      	b.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b6e4:	4b8a      	ldr	r3, [pc, #552]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	0e1b      	lsrs	r3, r3, #24
 800b6ee:	f003 030f 	and.w	r3, r3, #15
 800b6f2:	4a89      	ldr	r2, [pc, #548]	; (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fa:	f000 bd5b 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
 800b702:	f000 bd57 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b70a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b70e:	430b      	orrs	r3, r1
 800b710:	d158      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b712:	4b7f      	ldr	r3, [pc, #508]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b718:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b71c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	2bc0      	cmp	r3, #192	; 0xc0
 800b722:	d028      	beq.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	2bc0      	cmp	r3, #192	; 0xc0
 800b728:	d848      	bhi.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	2b80      	cmp	r3, #128	; 0x80
 800b72e:	d00e      	beq.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	2b80      	cmp	r3, #128	; 0x80
 800b734:	d842      	bhi.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	2b40      	cmp	r3, #64	; 0x40
 800b740:	d014      	beq.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b742:	e03b      	b.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b744:	f7fd fe80 	bl	8009448 <HAL_RCC_GetPCLK3Freq>
 800b748:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b74a:	f000 bd33 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b74e:	4b70      	ldr	r3, [pc, #448]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b75a:	d103      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b75c:	4b6d      	ldr	r3, [pc, #436]	; (800b914 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b75e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b760:	f000 bd28 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b764:	2300      	movs	r3, #0
 800b766:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b768:	f000 bd24 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b76c:	f7fd fd28 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b770:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b772:	f000 bd1f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b776:	4b66      	ldr	r3, [pc, #408]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0320 	and.w	r3, r3, #32
 800b77e:	2b20      	cmp	r3, #32
 800b780:	d118      	bne.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b782:	4b63      	ldr	r3, [pc, #396]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b78e:	4b60      	ldr	r3, [pc, #384]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	0e1b      	lsrs	r3, r3, #24
 800b794:	f003 030f 	and.w	r3, r3, #15
 800b798:	e006      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b79a:	4b5d      	ldr	r3, [pc, #372]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b79c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7a0:	041b      	lsls	r3, r3, #16
 800b7a2:	0e1b      	lsrs	r3, r3, #24
 800b7a4:	f003 030f 	and.w	r3, r3, #15
 800b7a8:	4a5b      	ldr	r2, [pc, #364]	; (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7b0:	f000 bd00 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7b8:	f000 bcfc 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7c0:	f000 bcf8 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c8:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	d14c      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b7d0:	4b4f      	ldr	r3, [pc, #316]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b7da:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d104      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b7e2:	f7fd fe09 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b7e6:	6378      	str	r0, [r7, #52]	; 0x34
 800b7e8:	f000 bce4 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f2:	d104      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b7f4:	f7fd fce4 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b7f8:	6378      	str	r0, [r7, #52]	; 0x34
 800b7fa:	f000 bcdb 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b7fe:	4b44      	ldr	r3, [pc, #272]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b80a:	d107      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b812:	d103      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b814:	4b3f      	ldr	r3, [pc, #252]	; (800b914 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b816:	637b      	str	r3, [r7, #52]	; 0x34
 800b818:	f000 bccc 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b81c:	4b3c      	ldr	r3, [pc, #240]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0320 	and.w	r3, r3, #32
 800b824:	2b20      	cmp	r3, #32
 800b826:	d11c      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b82e:	d118      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b830:	4b37      	ldr	r3, [pc, #220]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d005      	beq.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b83c:	4b34      	ldr	r3, [pc, #208]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	0e1b      	lsrs	r3, r3, #24
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	e006      	b.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b848:	4b31      	ldr	r3, [pc, #196]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b84a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b84e:	041b      	lsls	r3, r3, #16
 800b850:	0e1b      	lsrs	r3, r3, #24
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	4a30      	ldr	r2, [pc, #192]	; (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b85c:	637b      	str	r3, [r7, #52]	; 0x34
 800b85e:	f000 bca9 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b862:	2300      	movs	r3, #0
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
 800b866:	f000 bca5 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b86a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b86e:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800b872:	430b      	orrs	r3, r1
 800b874:	d152      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b876:	4b26      	ldr	r3, [pc, #152]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b87c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b880:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b888:	f7fd fdb6 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b88c:	6378      	str	r0, [r7, #52]	; 0x34
 800b88e:	f000 bc91 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b898:	d104      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b89a:	f7fd fc91 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b89e:	6378      	str	r0, [r7, #52]	; 0x34
 800b8a0:	f000 bc88 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b8a4:	4b1a      	ldr	r3, [pc, #104]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b8:	d103      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b8ba:	4b16      	ldr	r3, [pc, #88]	; (800b914 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8be:	f000 bc79 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b8c2:	4b13      	ldr	r3, [pc, #76]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b20      	cmp	r3, #32
 800b8cc:	d11c      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8d4:	d118      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8d6:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d005      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b8e2:	4b0b      	ldr	r3, [pc, #44]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	0e1b      	lsrs	r3, r3, #24
 800b8e8:	f003 030f 	and.w	r3, r3, #15
 800b8ec:	e006      	b.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b8ee:	4b08      	ldr	r3, [pc, #32]	; (800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b8f4:	041b      	lsls	r3, r3, #16
 800b8f6:	0e1b      	lsrs	r3, r3, #24
 800b8f8:	f003 030f 	and.w	r3, r3, #15
 800b8fc:	4a06      	ldr	r2, [pc, #24]	; (800b918 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
 800b904:	f000 bc56 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
 800b90c:	f000 bc52 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b910:	46020c00 	.word	0x46020c00
 800b914:	00f42400 	.word	0x00f42400
 800b918:	08010254 	.word	0x08010254
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b91c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b920:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800b924:	430b      	orrs	r3, r1
 800b926:	d14a      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b928:	4ba5      	ldr	r3, [pc, #660]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b92a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b92e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b932:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	2b00      	cmp	r3, #0
 800b938:	d104      	bne.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b93a:	f7fd fd5d 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800b93e:	6378      	str	r0, [r7, #52]	; 0x34
 800b940:	f000 bc38 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b94a:	d104      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b94c:	f7fd fc38 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800b950:	6378      	str	r0, [r7, #52]	; 0x34
 800b952:	f000 bc2f 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b956:	4b9a      	ldr	r3, [pc, #616]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b962:	d107      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b96a:	d103      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b96c:	4b95      	ldr	r3, [pc, #596]	; (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
 800b970:	f000 bc20 	b.w	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b974:	4b92      	ldr	r3, [pc, #584]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0320 	and.w	r3, r3, #32
 800b97c:	2b20      	cmp	r3, #32
 800b97e:	d11b      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b986:	d117      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b988:	4b8d      	ldr	r3, [pc, #564]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b994:	4b8a      	ldr	r3, [pc, #552]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	0e1b      	lsrs	r3, r3, #24
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	e006      	b.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b9a0:	4b87      	ldr	r3, [pc, #540]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b9a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9a6:	041b      	lsls	r3, r3, #16
 800b9a8:	0e1b      	lsrs	r3, r3, #24
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	4a86      	ldr	r2, [pc, #536]	; (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b6:	e3fd      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b9bc:	e3fa      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b9be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b9c6:	430b      	orrs	r3, r1
 800b9c8:	d164      	bne.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b9ca:	4b7d      	ldr	r3, [pc, #500]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b9cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d120      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b9dc:	4b78      	ldr	r3, [pc, #480]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b20      	cmp	r3, #32
 800b9e6:	d117      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9e8:	4b75      	ldr	r3, [pc, #468]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800b9f4:	4b72      	ldr	r3, [pc, #456]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	0e1b      	lsrs	r3, r3, #24
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	e006      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800ba00:	4b6f      	ldr	r3, [pc, #444]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ba02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba06:	041b      	lsls	r3, r3, #16
 800ba08:	0e1b      	lsrs	r3, r3, #24
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	4a6e      	ldr	r2, [pc, #440]	; (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ba10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
 800ba16:	e3cd      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1c:	e3ca      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ba1e:	4b68      	ldr	r3, [pc, #416]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ba20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba2c:	d112      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba34:	d10e      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba36:	4b62      	ldr	r3, [pc, #392]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ba38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba44:	d102      	bne.n	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800ba46:	23fa      	movs	r3, #250	; 0xfa
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba4a:	e3b3      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800ba4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ba50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba52:	e3af      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ba54:	4b5a      	ldr	r3, [pc, #360]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba60:	d106      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba68:	d102      	bne.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800ba6a:	4b56      	ldr	r3, [pc, #344]	; (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba6e:	e3a1      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ba70:	4b53      	ldr	r3, [pc, #332]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800ba72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d107      	bne.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba84:	d103      	bne.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800ba86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba8c:	e392      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
 800ba92:	e38f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ba94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba98:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	d164      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800baa0:	4b47      	ldr	r3, [pc, #284]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800baa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800baa6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800baaa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d120      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bab2:	4b43      	ldr	r3, [pc, #268]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b20      	cmp	r3, #32
 800babc:	d117      	bne.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800babe:	4b40      	ldr	r3, [pc, #256]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800baca:	4b3d      	ldr	r3, [pc, #244]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	0e1b      	lsrs	r3, r3, #24
 800bad0:	f003 030f 	and.w	r3, r3, #15
 800bad4:	e006      	b.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800bad6:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800badc:	041b      	lsls	r3, r3, #16
 800bade:	0e1b      	lsrs	r3, r3, #24
 800bae0:	f003 030f 	and.w	r3, r3, #15
 800bae4:	4a38      	ldr	r2, [pc, #224]	; (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baea:	637b      	str	r3, [r7, #52]	; 0x34
 800baec:	e362      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
 800baf2:	e35f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800baf4:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800baf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bafa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb02:	d112      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800bb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0a:	d10e      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb0c:	4b2c      	ldr	r3, [pc, #176]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bb0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb1a:	d102      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 800bb1c:	23fa      	movs	r3, #250	; 0xfa
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb20:	e348      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800bb22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bb26:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb28:	e344      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bb2a:	4b25      	ldr	r3, [pc, #148]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb36:	d106      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb3e:	d102      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800bb40:	4b20      	ldr	r3, [pc, #128]	; (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb42:	637b      	str	r3, [r7, #52]	; 0x34
 800bb44:	e336      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bb46:	4b1e      	ldr	r3, [pc, #120]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bb48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb4c:	f003 0302 	and.w	r3, r3, #2
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d107      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb5a:	d103      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800bb5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb60:	637b      	str	r3, [r7, #52]	; 0x34
 800bb62:	e327      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
 800bb68:	e324      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bb6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb6e:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bb72:	430b      	orrs	r3, r1
 800bb74:	d14e      	bne.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bb76:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bb78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bb80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb88:	f7fd fc36 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800bb8c:	6378      	str	r0, [r7, #52]	; 0x34
 800bb8e:	e311      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bb92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb9e:	d119      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bba6:	d115      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800bbaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbb6:	d109      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800bbb8:	23fa      	movs	r3, #250	; 0xfa
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bbbc:	e2fa      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800bbbe:	bf00      	nop
 800bbc0:	46020c00 	.word	0x46020c00
 800bbc4:	00f42400 	.word	0x00f42400
 800bbc8:	08010254 	.word	0x08010254
      }
      else
      {
        frequency = LSI_VALUE;
 800bbcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bbd2:	e2ef      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bbd4:	4ba8      	ldr	r3, [pc, #672]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbe0:	d106      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bbe8:	d102      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800bbea:	4ba4      	ldr	r3, [pc, #656]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bbec:	637b      	str	r3, [r7, #52]	; 0x34
 800bbee:	e2e1      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bbf0:	4ba1      	ldr	r3, [pc, #644]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bbf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d107      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bc04:	d103      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800bc06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0c:	e2d2      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
 800bc12:	e2cf      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bc14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc18:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	d12d      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bc20:	4b95      	ldr	r3, [pc, #596]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bc22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc26:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bc2a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bc2c:	4b92      	ldr	r3, [pc, #584]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc38:	d105      	bne.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800bc40:	4b8e      	ldr	r3, [pc, #568]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bc42:	637b      	str	r3, [r7, #52]	; 0x34
 800bc44:	e2b6      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc4c:	d107      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fb4e 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5c:	e2aa      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc64:	d107      	bne.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc66:	f107 0318 	add.w	r3, r7, #24
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe fc9c 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	637b      	str	r3, [r7, #52]	; 0x34
 800bc74:	e29e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
 800bc7a:	e29b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800bc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc80:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800bc84:	430b      	orrs	r3, r1
 800bc86:	d156      	bne.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800bc88:	4b7b      	ldr	r3, [pc, #492]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bc8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bc92:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc9a:	d028      	beq.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bca2:	d845      	bhi.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcaa:	d013      	beq.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcb2:	d83d      	bhi.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcc0:	d004      	beq.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800bcc2:	e035      	b.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800bcc4:	f7fd fbac 	bl	8009420 <HAL_RCC_GetPCLK2Freq>
 800bcc8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bcca:	e273      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bccc:	f7fd fa78 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800bcd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bcd2:	e26f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bcd4:	4b68      	ldr	r3, [pc, #416]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bce0:	d102      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800bce2:	4b66      	ldr	r3, [pc, #408]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bce6:	e265      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcec:	e262      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bcee:	4b62      	ldr	r3, [pc, #392]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0320 	and.w	r3, r3, #32
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	d117      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcfa:	4b5f      	ldr	r3, [pc, #380]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800bd06:	4b5c      	ldr	r3, [pc, #368]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	0e1b      	lsrs	r3, r3, #24
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	e006      	b.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800bd12:	4b59      	ldr	r3, [pc, #356]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bd14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	0e1b      	lsrs	r3, r3, #24
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	4a57      	ldr	r2, [pc, #348]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bd28:	e244      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd2e:	e241      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd34:	e23e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800bd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd3a:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	d156      	bne.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800bd42:	4b4d      	ldr	r3, [pc, #308]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bd44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd4c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd54:	d028      	beq.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd5c:	d845      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd64:	d013      	beq.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd6c:	d83d      	bhi.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d004      	beq.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800bd7c:	e035      	b.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800bd7e:	f7fd fb3b 	bl	80093f8 <HAL_RCC_GetPCLK1Freq>
 800bd82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bd84:	e216      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bd86:	f7fd fa1b 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800bd8a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bd8c:	e212      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd8e:	4b3a      	ldr	r3, [pc, #232]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd9a:	d102      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800bd9c:	4b37      	ldr	r3, [pc, #220]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bd9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bda0:	e208      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bda6:	e205      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bda8:	4b33      	ldr	r3, [pc, #204]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0320 	and.w	r3, r3, #32
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d117      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bdb4:	4b30      	ldr	r3, [pc, #192]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800bdc0:	4b2d      	ldr	r3, [pc, #180]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	0e1b      	lsrs	r3, r3, #24
 800bdc6:	f003 030f 	and.w	r3, r3, #15
 800bdca:	e006      	b.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 800bdcc:	4b2a      	ldr	r3, [pc, #168]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bdce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bdd2:	041b      	lsls	r3, r3, #16
 800bdd4:	0e1b      	lsrs	r3, r3, #24
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	4a29      	ldr	r2, [pc, #164]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bde2:	e1e7      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bde8:	e1e4      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdee:	e1e1      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	d17c      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bdfc:	4b1e      	ldr	r3, [pc, #120]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800bdfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be02:	f003 0318 	and.w	r3, r3, #24
 800be06:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	2b18      	cmp	r3, #24
 800be0c:	d870      	bhi.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 800be0e:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be85 	.word	0x0800be85
 800be18:	0800bef1 	.word	0x0800bef1
 800be1c:	0800bef1 	.word	0x0800bef1
 800be20:	0800bef1 	.word	0x0800bef1
 800be24:	0800bef1 	.word	0x0800bef1
 800be28:	0800bef1 	.word	0x0800bef1
 800be2c:	0800bef1 	.word	0x0800bef1
 800be30:	0800bef1 	.word	0x0800bef1
 800be34:	0800be8d 	.word	0x0800be8d
 800be38:	0800bef1 	.word	0x0800bef1
 800be3c:	0800bef1 	.word	0x0800bef1
 800be40:	0800bef1 	.word	0x0800bef1
 800be44:	0800bef1 	.word	0x0800bef1
 800be48:	0800bef1 	.word	0x0800bef1
 800be4c:	0800bef1 	.word	0x0800bef1
 800be50:	0800bef1 	.word	0x0800bef1
 800be54:	0800be95 	.word	0x0800be95
 800be58:	0800bef1 	.word	0x0800bef1
 800be5c:	0800bef1 	.word	0x0800bef1
 800be60:	0800bef1 	.word	0x0800bef1
 800be64:	0800bef1 	.word	0x0800bef1
 800be68:	0800bef1 	.word	0x0800bef1
 800be6c:	0800bef1 	.word	0x0800bef1
 800be70:	0800bef1 	.word	0x0800bef1
 800be74:	0800beaf 	.word	0x0800beaf
 800be78:	46020c00 	.word	0x46020c00
 800be7c:	00f42400 	.word	0x00f42400
 800be80:	08010254 	.word	0x08010254
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800be84:	f7fd fae0 	bl	8009448 <HAL_RCC_GetPCLK3Freq>
 800be88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800be8a:	e193      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800be8c:	f7fd f998 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800be90:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800be92:	e18f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be94:	4b9f      	ldr	r3, [pc, #636]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea0:	d102      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800bea2:	4b9d      	ldr	r3, [pc, #628]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bea4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bea6:	e185      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800beac:	e182      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800beae:	4b99      	ldr	r3, [pc, #612]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0320 	and.w	r3, r3, #32
 800beb6:	2b20      	cmp	r3, #32
 800beb8:	d117      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800beba:	4b96      	ldr	r3, [pc, #600]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800bec6:	4b93      	ldr	r3, [pc, #588]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	0e1b      	lsrs	r3, r3, #24
 800becc:	f003 030f 	and.w	r3, r3, #15
 800bed0:	e006      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800bed2:	4b90      	ldr	r3, [pc, #576]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bed8:	041b      	lsls	r3, r3, #16
 800beda:	0e1b      	lsrs	r3, r3, #24
 800bedc:	f003 030f 	and.w	r3, r3, #15
 800bee0:	4a8e      	ldr	r2, [pc, #568]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bee8:	e164      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800beea:	2300      	movs	r3, #0
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800beee:	e161      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bef4:	e15e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800bef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befa:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800befe:	430b      	orrs	r3, r1
 800bf00:	d155      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bf02:	4b84      	ldr	r3, [pc, #528]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bf04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bf0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf14:	d013      	beq.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf1c:	d844      	bhi.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf24:	d013      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf2c:	d83c      	bhi.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d014      	beq.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf3a:	d014      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800bf3c:	e034      	b.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fb30 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf4c:	e132      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe f9ce 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf5c:	e12a      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bf5e:	f7fd f92f 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800bf62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bf64:	e126      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bf66:	4b6b      	ldr	r3, [pc, #428]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	d117      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bf72:	4b68      	ldr	r3, [pc, #416]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d005      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800bf7e:	4b65      	ldr	r3, [pc, #404]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	0e1b      	lsrs	r3, r3, #24
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	e006      	b.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800bf8a:	4b62      	ldr	r3, [pc, #392]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bf8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf90:	041b      	lsls	r3, r3, #16
 800bf92:	0e1b      	lsrs	r3, r3, #24
 800bf94:	f003 030f 	and.w	r3, r3, #15
 800bf98:	4a60      	ldr	r2, [pc, #384]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bf9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bfa0:	e108      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfa6:	e105      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfac:	e102      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800bfae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb2:	1e59      	subs	r1, r3, #1
 800bfb4:	ea52 0301 	orrs.w	r3, r2, r1
 800bfb8:	d13c      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800bfba:	4b56      	ldr	r3, [pc, #344]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800bfbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bfc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bfc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfcc:	d027      	beq.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfd4:	d82b      	bhi.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfdc:	d017      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfe4:	d823      	bhi.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d004      	beq.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bff2:	d004      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800bff4:	e01b      	b.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bff6:	f7fd f8e3 	bl	80091c0 <HAL_RCC_GetSysClockFreq>
 800bffa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bffc:	e0da      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe f976 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c00c:	e0d2      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c00e:	f107 0318 	add.w	r3, r7, #24
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fac8 	bl	800a5a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c01c:	e0ca      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c01e:	f107 030c 	add.w	r3, r7, #12
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fc1a 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c02c:	e0c2      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c032:	e0bf      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c034:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c038:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c03c:	430b      	orrs	r3, r1
 800c03e:	d131      	bne.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c040:	4b34      	ldr	r3, [pc, #208]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c04a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c04c:	4b31      	ldr	r3, [pc, #196]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c04e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b02      	cmp	r3, #2
 800c058:	d106      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d103      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800c060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c064:	637b      	str	r3, [r7, #52]	; 0x34
 800c066:	e0a5      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c068:	4b2a      	ldr	r3, [pc, #168]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c06a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c076:	d112      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c07e:	d10e      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c080:	4b24      	ldr	r3, [pc, #144]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c08e:	d102      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800c090:	23fa      	movs	r3, #250	; 0xfa
 800c092:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c094:	e08e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800c096:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c09a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c09c:	e08a      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c0a2:	e087      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	d13b      	bne.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c0b0:	4b18      	ldr	r3, [pc, #96]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c0b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c0b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c0ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c0bc:	4b15      	ldr	r3, [pc, #84]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0c8:	d105      	bne.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d102      	bne.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800c0d0:	4b13      	ldr	r3, [pc, #76]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d4:	e06e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c0d6:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e2:	d106      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ea:	d102      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c0ec:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c0f0:	e060      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c0f2:	4b08      	ldr	r3, [pc, #32]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0fe:	d106      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c106:	d102      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800c108:	4b03      	ldr	r3, [pc, #12]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34
 800c10c:	e052      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
 800c112:	e04f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800c114:	46020c00 	.word	0x46020c00
 800c118:	00f42400 	.word	0x00f42400
 800c11c:	08010254 	.word	0x08010254
 800c120:	02dc6c00 	.word	0x02dc6c00
 800c124:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12c:	f1a3 0108 	sub.w	r1, r3, #8
 800c130:	ea52 0301 	orrs.w	r3, r2, r1
 800c134:	d13c      	bne.n	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c136:	4b22      	ldr	r3, [pc, #136]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800c138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c13c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c140:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c142:	4b1f      	ldr	r3, [pc, #124]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14e:	d105      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	2b00      	cmp	r3, #0
 800c154:	d102      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800c156:	4b1b      	ldr	r3, [pc, #108]	; (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800c158:	637b      	str	r3, [r7, #52]	; 0x34
 800c15a:	e02b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c15c:	4b18      	ldr	r3, [pc, #96]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c168:	d106      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c170:	d102      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800c174:	637b      	str	r3, [r7, #52]	; 0x34
 800c176:	e01d      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c17e:	d107      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe f8b5 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	637b      	str	r3, [r7, #52]	; 0x34
 800c18e:	e011      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c196:	d108      	bne.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fe f8a9 	bl	800a2f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	085b      	lsrs	r3, r3, #1
 800c1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a8:	e004      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ae:	e001      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3738      	adds	r7, #56	; 0x38
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	46020c00 	.word	0x46020c00
 800c1c4:	00f42400 	.word	0x00f42400
 800c1c8:	007a1200 	.word	0x007a1200

0800c1cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c1d4:	4b47      	ldr	r3, [pc, #284]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a46      	ldr	r2, [pc, #280]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c1da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c1e0:	f7f9 fb1a 	bl	8005818 <HAL_GetTick>
 800c1e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1e6:	e008      	b.n	800c1fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1e8:	f7f9 fb16 	bl	8005818 <HAL_GetTick>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d901      	bls.n	800c1fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e077      	b.n	800c2ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1fa:	4b3e      	ldr	r3, [pc, #248]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1f0      	bne.n	800c1e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c206:	4b3b      	ldr	r3, [pc, #236]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	6811      	ldr	r1, [r2, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6852      	ldr	r2, [r2, #4]
 800c21a:	3a01      	subs	r2, #1
 800c21c:	0212      	lsls	r2, r2, #8
 800c21e:	430a      	orrs	r2, r1
 800c220:	4934      	ldr	r1, [pc, #208]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c222:	4313      	orrs	r3, r2
 800c224:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c226:	4b33      	ldr	r3, [pc, #204]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c22a:	4b33      	ldr	r3, [pc, #204]	; (800c2f8 <RCCEx_PLL2_Config+0x12c>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6892      	ldr	r2, [r2, #8]
 800c232:	3a01      	subs	r2, #1
 800c234:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	68d2      	ldr	r2, [r2, #12]
 800c23c:	3a01      	subs	r2, #1
 800c23e:	0252      	lsls	r2, r2, #9
 800c240:	b292      	uxth	r2, r2
 800c242:	4311      	orrs	r1, r2
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	6912      	ldr	r2, [r2, #16]
 800c248:	3a01      	subs	r2, #1
 800c24a:	0412      	lsls	r2, r2, #16
 800c24c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c250:	4311      	orrs	r1, r2
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	6952      	ldr	r2, [r2, #20]
 800c256:	3a01      	subs	r2, #1
 800c258:	0612      	lsls	r2, r2, #24
 800c25a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c25e:	430a      	orrs	r2, r1
 800c260:	4924      	ldr	r1, [pc, #144]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c262:	4313      	orrs	r3, r2
 800c264:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c266:	4b23      	ldr	r3, [pc, #140]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	f023 020c 	bic.w	r2, r3, #12
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	4920      	ldr	r1, [pc, #128]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c274:	4313      	orrs	r3, r2
 800c276:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c278:	4b1e      	ldr	r3, [pc, #120]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	491c      	ldr	r1, [pc, #112]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c282:	4313      	orrs	r3, r2
 800c284:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c286:	4b1b      	ldr	r3, [pc, #108]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	4a1a      	ldr	r2, [pc, #104]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c28c:	f023 0310 	bic.w	r3, r3, #16
 800c290:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c292:	4b18      	ldr	r3, [pc, #96]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c29a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	69d2      	ldr	r2, [r2, #28]
 800c2a2:	00d2      	lsls	r2, r2, #3
 800c2a4:	4913      	ldr	r1, [pc, #76]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c2aa:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ae:	4a11      	ldr	r2, [pc, #68]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2b0:	f043 0310 	orr.w	r3, r3, #16
 800c2b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c2c2:	f7f9 faa9 	bl	8005818 <HAL_GetTick>
 800c2c6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2c8:	e008      	b.n	800c2dc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ca:	f7f9 faa5 	bl	8005818 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d901      	bls.n	800c2dc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e006      	b.n	800c2ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <RCCEx_PLL2_Config+0x128>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0f0      	beq.n	800c2ca <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0

}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	46020c00 	.word	0x46020c00
 800c2f8:	80800000 	.word	0x80800000

0800c2fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c304:	4b47      	ldr	r3, [pc, #284]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a46      	ldr	r2, [pc, #280]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c30a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c30e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c310:	f7f9 fa82 	bl	8005818 <HAL_GetTick>
 800c314:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c316:	e008      	b.n	800c32a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c318:	f7f9 fa7e 	bl	8005818 <HAL_GetTick>
 800c31c:	4602      	mov	r2, r0
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	2b02      	cmp	r3, #2
 800c324:	d901      	bls.n	800c32a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c326:	2303      	movs	r3, #3
 800c328:	e077      	b.n	800c41a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c32a:	4b3e      	ldr	r3, [pc, #248]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1f0      	bne.n	800c318 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c336:	4b3b      	ldr	r3, [pc, #236]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6811      	ldr	r1, [r2, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	6852      	ldr	r2, [r2, #4]
 800c34a:	3a01      	subs	r2, #1
 800c34c:	0212      	lsls	r2, r2, #8
 800c34e:	430a      	orrs	r2, r1
 800c350:	4934      	ldr	r1, [pc, #208]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c352:	4313      	orrs	r3, r2
 800c354:	630b      	str	r3, [r1, #48]	; 0x30
 800c356:	4b33      	ldr	r3, [pc, #204]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c35a:	4b33      	ldr	r3, [pc, #204]	; (800c428 <RCCEx_PLL3_Config+0x12c>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6892      	ldr	r2, [r2, #8]
 800c362:	3a01      	subs	r2, #1
 800c364:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	68d2      	ldr	r2, [r2, #12]
 800c36c:	3a01      	subs	r2, #1
 800c36e:	0252      	lsls	r2, r2, #9
 800c370:	b292      	uxth	r2, r2
 800c372:	4311      	orrs	r1, r2
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	6912      	ldr	r2, [r2, #16]
 800c378:	3a01      	subs	r2, #1
 800c37a:	0412      	lsls	r2, r2, #16
 800c37c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c380:	4311      	orrs	r1, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6952      	ldr	r2, [r2, #20]
 800c386:	3a01      	subs	r2, #1
 800c388:	0612      	lsls	r2, r2, #24
 800c38a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c38e:	430a      	orrs	r2, r1
 800c390:	4924      	ldr	r1, [pc, #144]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c392:	4313      	orrs	r3, r2
 800c394:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c396:	4b23      	ldr	r3, [pc, #140]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39a:	f023 020c 	bic.w	r2, r3, #12
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	4920      	ldr	r1, [pc, #128]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c3a8:	4b1e      	ldr	r3, [pc, #120]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	491c      	ldr	r1, [pc, #112]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c3b6:	4b1b      	ldr	r3, [pc, #108]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ba:	4a1a      	ldr	r2, [pc, #104]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3bc:	f023 0310 	bic.w	r3, r3, #16
 800c3c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3c2:	4b18      	ldr	r3, [pc, #96]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	69d2      	ldr	r2, [r2, #28]
 800c3d2:	00d2      	lsls	r2, r2, #3
 800c3d4:	4913      	ldr	r1, [pc, #76]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c3da:	4b12      	ldr	r3, [pc, #72]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3de:	4a11      	ldr	r2, [pc, #68]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3e0:	f043 0310 	orr.w	r3, r3, #16
 800c3e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a0e      	ldr	r2, [pc, #56]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c3ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3f2:	f7f9 fa11 	bl	8005818 <HAL_GetTick>
 800c3f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3f8:	e008      	b.n	800c40c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3fa:	f7f9 fa0d 	bl	8005818 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	2b02      	cmp	r3, #2
 800c406:	d901      	bls.n	800c40c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e006      	b.n	800c41a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c40c:	4b05      	ldr	r3, [pc, #20]	; (800c424 <RCCEx_PLL3_Config+0x128>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0f0      	beq.n	800c3fa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	46020c00 	.word	0x46020c00
 800c428:	80800000 	.word	0x80800000

0800c42c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e0fb      	b.n	800c636 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a7f      	ldr	r2, [pc, #508]	; (800c640 <HAL_SPI_Init+0x214>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d004      	beq.n	800c452 <HAL_SPI_Init+0x26>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a7d      	ldr	r2, [pc, #500]	; (800c644 <HAL_SPI_Init+0x218>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	e000      	b.n	800c454 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c452:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a78      	ldr	r2, [pc, #480]	; (800c640 <HAL_SPI_Init+0x214>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d004      	beq.n	800c46e <HAL_SPI_Init+0x42>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a76      	ldr	r2, [pc, #472]	; (800c644 <HAL_SPI_Init+0x218>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d105      	bne.n	800c47a <HAL_SPI_Init+0x4e>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	2b0f      	cmp	r3, #15
 800c474:	d901      	bls.n	800c47a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e0dd      	b.n	800c636 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fe16 	bl	800d0ac <SPI_GetPacketSize>
 800c480:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a6e      	ldr	r2, [pc, #440]	; (800c640 <HAL_SPI_Init+0x214>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d004      	beq.n	800c496 <HAL_SPI_Init+0x6a>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a6c      	ldr	r2, [pc, #432]	; (800c644 <HAL_SPI_Init+0x218>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d102      	bne.n	800c49c <HAL_SPI_Init+0x70>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d816      	bhi.n	800c4ca <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4a0:	4a69      	ldr	r2, [pc, #420]	; (800c648 <HAL_SPI_Init+0x21c>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00e      	beq.n	800c4c4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a68      	ldr	r2, [pc, #416]	; (800c64c <HAL_SPI_Init+0x220>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d009      	beq.n	800c4c4 <HAL_SPI_Init+0x98>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a66      	ldr	r2, [pc, #408]	; (800c650 <HAL_SPI_Init+0x224>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d004      	beq.n	800c4c4 <HAL_SPI_Init+0x98>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a65      	ldr	r2, [pc, #404]	; (800c654 <HAL_SPI_Init+0x228>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d104      	bne.n	800c4ce <HAL_SPI_Init+0xa2>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b10      	cmp	r3, #16
 800c4c8:	d901      	bls.n	800c4ce <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e0b3      	b.n	800c636 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f8 f87a 	bl	80045dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0201 	bic.w	r2, r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c50a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c514:	d119      	bne.n	800c54a <HAL_SPI_Init+0x11e>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c51e:	d103      	bne.n	800c528 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c524:	2b00      	cmp	r3, #0
 800c526:	d008      	beq.n	800c53a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10c      	bne.n	800c54a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c538:	d107      	bne.n	800c54a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c548:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00f      	beq.n	800c576 <HAL_SPI_Init+0x14a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	2b06      	cmp	r3, #6
 800c55c:	d90b      	bls.n	800c576 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	e007      	b.n	800c586 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c584:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	69da      	ldr	r2, [r3, #28]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	431a      	orrs	r2, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c598:	ea42 0103 	orr.w	r1, r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	430a      	orrs	r2, r1
 800c5a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f2:	ea42 0103 	orr.w	r1, r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	430a      	orrs	r2, r1
 800c622:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	46002000 	.word	0x46002000
 800c644:	56002000 	.word	0x56002000
 800c648:	40013000 	.word	0x40013000
 800c64c:	50013000 	.word	0x50013000
 800c650:	40003800 	.word	0x40003800
 800c654:	50003800 	.word	0x50003800

0800c658 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	4613      	mov	r3, r2
 800c666:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3320      	adds	r3, #32
 800c66e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d101      	bne.n	800c682 <HAL_SPI_Transmit+0x2a>
 800c67e:	2302      	movs	r3, #2
 800c680:	e203      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c68a:	f7f9 f8c5 	bl	8005818 <HAL_GetTick>
 800c68e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d007      	beq.n	800c6ac <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c69c:	2302      	movs	r3, #2
 800c69e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c6a8:	7efb      	ldrb	r3, [r7, #27]
 800c6aa:	e1ee      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <HAL_SPI_Transmit+0x60>
 800c6b2:	88fb      	ldrh	r3, [r7, #6]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d107      	bne.n	800c6c8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c6c4:	7efb      	ldrb	r3, [r7, #27]
 800c6c6:	e1e0      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2203      	movs	r2, #3
 800c6cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	88fa      	ldrh	r2, [r7, #6]
 800c6e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	88fa      	ldrh	r2, [r7, #6]
 800c6ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c718:	d108      	bne.n	800c72c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e009      	b.n	800c740 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c73e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	0c1b      	lsrs	r3, r3, #16
 800c748:	041b      	lsls	r3, r3, #16
 800c74a:	88f9      	ldrh	r1, [r7, #6]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	6812      	ldr	r2, [r2, #0]
 800c750:	430b      	orrs	r3, r1
 800c752:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0201 	orr.w	r2, r2, #1
 800c762:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10c      	bne.n	800c78c <HAL_SPI_Transmit+0x134>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c77a:	d107      	bne.n	800c78c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c78a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	2b0f      	cmp	r3, #15
 800c792:	d95b      	bls.n	800c84c <HAL_SPI_Transmit+0x1f4>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a8f      	ldr	r2, [pc, #572]	; (800c9d8 <HAL_SPI_Transmit+0x380>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d04f      	beq.n	800c83e <HAL_SPI_Transmit+0x1e6>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a8e      	ldr	r2, [pc, #568]	; (800c9dc <HAL_SPI_Transmit+0x384>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d04a      	beq.n	800c83e <HAL_SPI_Transmit+0x1e6>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a8c      	ldr	r2, [pc, #560]	; (800c9e0 <HAL_SPI_Transmit+0x388>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d045      	beq.n	800c83e <HAL_SPI_Transmit+0x1e6>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a8b      	ldr	r2, [pc, #556]	; (800c9e4 <HAL_SPI_Transmit+0x38c>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d147      	bne.n	800c84c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c7bc:	e03f      	b.n	800c83e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d114      	bne.n	800c7f6 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6812      	ldr	r2, [r2, #0]
 800c7d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c7f4:	e023      	b.n	800c83e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7f6:	f7f9 f80f 	bl	8005818 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d803      	bhi.n	800c80e <HAL_SPI_Transmit+0x1b6>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c80c:	d102      	bne.n	800c814 <HAL_SPI_Transmit+0x1bc>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d114      	bne.n	800c83e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 fb7b 	bl	800cf10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800c83a:	2303      	movs	r3, #3
 800c83c:	e125      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c844:	b29b      	uxth	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1b9      	bne.n	800c7be <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c84a:	e0f8      	b.n	800ca3e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	2b07      	cmp	r3, #7
 800c852:	f240 80ed 	bls.w	800ca30 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c856:	e05d      	b.n	800c914 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	f003 0302 	and.w	r3, r3, #2
 800c862:	2b02      	cmp	r3, #2
 800c864:	d132      	bne.n	800c8cc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d918      	bls.n	800c8a4 <HAL_SPI_Transmit+0x24c>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d014      	beq.n	800c8a4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6812      	ldr	r2, [r2, #0]
 800c884:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c88a:	1d1a      	adds	r2, r3, #4
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c896:	b29b      	uxth	r3, r3
 800c898:	3b02      	subs	r3, #2
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c8a2:	e037      	b.n	800c914 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8a8:	881a      	ldrh	r2, [r3, #0]
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c8ca:	e023      	b.n	800c914 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8cc:	f7f8 ffa4 	bl	8005818 <HAL_GetTick>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d803      	bhi.n	800c8e4 <HAL_SPI_Transmit+0x28c>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8e2:	d102      	bne.n	800c8ea <HAL_SPI_Transmit+0x292>
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d114      	bne.n	800c914 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f000 fb10 	bl	800cf10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e0ba      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d19b      	bne.n	800c858 <HAL_SPI_Transmit+0x200>
 800c920:	e08d      	b.n	800ca3e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	f003 0302 	and.w	r3, r3, #2
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d15b      	bne.n	800c9e8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c936:	b29b      	uxth	r3, r3
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d918      	bls.n	800c96e <HAL_SPI_Transmit+0x316>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c940:	2b40      	cmp	r3, #64	; 0x40
 800c942:	d914      	bls.n	800c96e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6812      	ldr	r2, [r2, #0]
 800c94e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c960:	b29b      	uxth	r3, r3
 800c962:	3b04      	subs	r3, #4
 800c964:	b29a      	uxth	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c96c:	e060      	b.n	800ca30 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c974:	b29b      	uxth	r3, r3
 800c976:	2b01      	cmp	r3, #1
 800c978:	d917      	bls.n	800c9aa <HAL_SPI_Transmit+0x352>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d013      	beq.n	800c9aa <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c986:	881a      	ldrh	r2, [r3, #0]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c990:	1c9a      	adds	r2, r3, #2
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	3b02      	subs	r3, #2
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9a8:	e042      	b.n	800ca30 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3320      	adds	r3, #32
 800c9b4:	7812      	ldrb	r2, [r2, #0]
 800c9b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9d4:	e02c      	b.n	800ca30 <HAL_SPI_Transmit+0x3d8>
 800c9d6:	bf00      	nop
 800c9d8:	40013000 	.word	0x40013000
 800c9dc:	50013000 	.word	0x50013000
 800c9e0:	40003800 	.word	0x40003800
 800c9e4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9e8:	f7f8 ff16 	bl	8005818 <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d803      	bhi.n	800ca00 <HAL_SPI_Transmit+0x3a8>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9fe:	d102      	bne.n	800ca06 <HAL_SPI_Transmit+0x3ae>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d114      	bne.n	800ca30 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 fa82 	bl	800cf10 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e02c      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f47f af72 	bne.w	800c922 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2200      	movs	r2, #0
 800ca46:	2108      	movs	r1, #8
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 fb01 	bl	800d050 <SPI_WaitOnFlagUntilTimeout>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca5a:	f043 0220 	orr.w	r2, r3, #32
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 fa53 	bl	800cf10 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e000      	b.n	800ca8a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800ca88:	7efb      	ldrb	r3, [r7, #27]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3720      	adds	r7, #32
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop

0800ca94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08c      	sub	sp, #48	; 0x30
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3320      	adds	r3, #32
 800caae:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3330      	adds	r3, #48	; 0x30
 800cab6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d101      	bne.n	800cac6 <HAL_SPI_TransmitReceive+0x32>
 800cac2:	2302      	movs	r3, #2
 800cac4:	e21f      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cace:	f7f8 fea3 	bl	8005818 <HAL_GetTick>
 800cad2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800cad4:	887b      	ldrh	r3, [r7, #2]
 800cad6:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800cad8:	887b      	ldrh	r3, [r7, #2]
 800cada:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d009      	beq.n	800cafc <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800cae8:	2302      	movs	r3, #2
 800caea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800caf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cafa:	e204      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d005      	beq.n	800cb0e <HAL_SPI_TransmitReceive+0x7a>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <HAL_SPI_TransmitReceive+0x7a>
 800cb08:	887b      	ldrh	r3, [r7, #2]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d109      	bne.n	800cb22 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800cb1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb20:	e1f1      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2205      	movs	r2, #5
 800cb26:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	887a      	ldrh	r2, [r7, #2]
 800cb3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	887a      	ldrh	r2, [r7, #2]
 800cb44:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	887a      	ldrh	r2, [r7, #2]
 800cb52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	887a      	ldrh	r2, [r7, #2]
 800cb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68da      	ldr	r2, [r3, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800cb78:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	0c1b      	lsrs	r3, r3, #16
 800cb82:	041b      	lsls	r3, r3, #16
 800cb84:	8879      	ldrh	r1, [r7, #2]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	6812      	ldr	r2, [r2, #0]
 800cb8a:	430b      	orrs	r3, r1
 800cb8c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f042 0201 	orr.w	r2, r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	69db      	ldr	r3, [r3, #28]
 800cba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10c      	bne.n	800cbc6 <HAL_SPI_TransmitReceive+0x132>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbb4:	d107      	bne.n	800cbc6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	2b0f      	cmp	r3, #15
 800cbcc:	f240 8085 	bls.w	800ccda <HAL_SPI_TransmitReceive+0x246>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a7b      	ldr	r2, [pc, #492]	; (800cdc4 <HAL_SPI_TransmitReceive+0x330>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d078      	beq.n	800cccc <HAL_SPI_TransmitReceive+0x238>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a7a      	ldr	r2, [pc, #488]	; (800cdc8 <HAL_SPI_TransmitReceive+0x334>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d073      	beq.n	800cccc <HAL_SPI_TransmitReceive+0x238>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a78      	ldr	r2, [pc, #480]	; (800cdcc <HAL_SPI_TransmitReceive+0x338>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d06e      	beq.n	800cccc <HAL_SPI_TransmitReceive+0x238>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a77      	ldr	r2, [pc, #476]	; (800cdd0 <HAL_SPI_TransmitReceive+0x33c>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d170      	bne.n	800ccda <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cbf8:	e068      	b.n	800cccc <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	f003 0302 	and.w	r3, r3, #2
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d11a      	bne.n	800cc3e <HAL_SPI_TransmitReceive+0x1aa>
 800cc08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d017      	beq.n	800cc3e <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6812      	ldr	r2, [r2, #0]
 800cc18:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc1e:	1d1a      	adds	r2, r3, #4
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	695a      	ldr	r2, [r3, #20]
 800cc44:	f248 0308 	movw	r3, #32776	; 0x8008
 800cc48:	4013      	ands	r3, r2
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01a      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x1f0>
 800cc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d017      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cc5e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc64:	1d1a      	adds	r2, r3, #4
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	3b01      	subs	r3, #1
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cc82:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc84:	f7f8 fdc8 	bl	8005818 <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d803      	bhi.n	800cc9c <HAL_SPI_TransmitReceive+0x208>
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc9a:	d102      	bne.n	800cca2 <HAL_SPI_TransmitReceive+0x20e>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d114      	bne.n	800cccc <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f934 	bl	800cf10 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e11c      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d193      	bne.n	800cbfa <HAL_SPI_TransmitReceive+0x166>
 800ccd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d190      	bne.n	800cbfa <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ccd8:	e0ee      	b.n	800ceb8 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	2b07      	cmp	r3, #7
 800cce0:	f240 80e4 	bls.w	800ceac <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cce4:	e066      	b.n	800cdb4 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	f003 0302 	and.w	r3, r3, #2
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d119      	bne.n	800cd28 <HAL_SPI_TransmitReceive+0x294>
 800ccf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d016      	beq.n	800cd28 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccfe:	881a      	ldrh	r2, [r3, #0]
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd08:	1c9a      	adds	r2, r3, #2
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd26:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d11a      	bne.n	800cd6c <HAL_SPI_TransmitReceive+0x2d8>
 800cd36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d017      	beq.n	800cd6c <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	8812      	ldrh	r2, [r2, #0]
 800cd44:	b292      	uxth	r2, r2
 800cd46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd4c:	1c9a      	adds	r2, r3, #2
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cd6a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd6c:	f7f8 fd54 	bl	8005818 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d803      	bhi.n	800cd84 <HAL_SPI_TransmitReceive+0x2f0>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd82:	d102      	bne.n	800cd8a <HAL_SPI_TransmitReceive+0x2f6>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d114      	bne.n	800cdb4 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 f8c0 	bl	800cf10 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e0a8      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d195      	bne.n	800cce6 <HAL_SPI_TransmitReceive+0x252>
 800cdba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d192      	bne.n	800cce6 <HAL_SPI_TransmitReceive+0x252>
 800cdc0:	e07a      	b.n	800ceb8 <HAL_SPI_TransmitReceive+0x424>
 800cdc2:	bf00      	nop
 800cdc4:	40013000 	.word	0x40013000
 800cdc8:	50013000 	.word	0x50013000
 800cdcc:	40003800 	.word	0x40003800
 800cdd0:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	f003 0302 	and.w	r3, r3, #2
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d11b      	bne.n	800ce1a <HAL_SPI_TransmitReceive+0x386>
 800cde2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d018      	beq.n	800ce1a <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3320      	adds	r3, #32
 800cdf2:	7812      	ldrb	r2, [r2, #0]
 800cdf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce18:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d11d      	bne.n	800ce64 <HAL_SPI_TransmitReceive+0x3d0>
 800ce28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d01a      	beq.n	800ce64 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3a:	7812      	ldrb	r2, [r2, #0]
 800ce3c:	b2d2      	uxtb	r2, r2
 800ce3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce44:	1c5a      	adds	r2, r3, #1
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ce62:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce64:	f7f8 fcd8 	bl	8005818 <HAL_GetTick>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d803      	bhi.n	800ce7c <HAL_SPI_TransmitReceive+0x3e8>
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce7a:	d102      	bne.n	800ce82 <HAL_SPI_TransmitReceive+0x3ee>
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d114      	bne.n	800ceac <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f000 f844 	bl	800cf10 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e02c      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ceac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d190      	bne.n	800cdd4 <HAL_SPI_TransmitReceive+0x340>
 800ceb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d18d      	bne.n	800cdd4 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	2200      	movs	r2, #0
 800cec0:	2108      	movs	r1, #8
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f000 f8c4 	bl	800d050 <SPI_WaitOnFlagUntilTimeout>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d007      	beq.n	800cede <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ced4:	f043 0220 	orr.w	r2, r3, #32
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 f816 	bl	800cf10 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e001      	b.n	800cf06 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 800cf02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3728      	adds	r7, #40	; 0x28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop

0800cf10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	699a      	ldr	r2, [r3, #24]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f042 0208 	orr.w	r2, r2, #8
 800cf2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	699a      	ldr	r2, [r3, #24]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f042 0210 	orr.w	r2, r2, #16
 800cf3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f022 0201 	bic.w	r2, r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800cf5e:	f023 0303 	bic.w	r3, r3, #3
 800cf62:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689a      	ldr	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cf72:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d014      	beq.n	800cfaa <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00f      	beq.n	800cfaa <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	699a      	ldr	r2, [r3, #24]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f042 0220 	orr.w	r2, r2, #32
 800cfa8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d014      	beq.n	800cfe0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00f      	beq.n	800cfe0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc6:	f043 0204 	orr.w	r2, r3, #4
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfde:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00f      	beq.n	800d00a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cff0:	f043 0201 	orr.w	r2, r3, #1
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	699a      	ldr	r2, [r3, #24]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d008:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00f      	beq.n	800d034 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d01a:	f043 0208 	orr.w	r2, r3, #8
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	699a      	ldr	r2, [r3, #24]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d032:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800d044:	bf00      	nop
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	603b      	str	r3, [r7, #0]
 800d05c:	4613      	mov	r3, r2
 800d05e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d060:	e010      	b.n	800d084 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d062:	f7f8 fbd9 	bl	8005818 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d803      	bhi.n	800d07a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d078:	d102      	bne.n	800d080 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e00f      	b.n	800d0a4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	695a      	ldr	r2, [r3, #20]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	4013      	ands	r3, r2
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	429a      	cmp	r2, r3
 800d092:	bf0c      	ite	eq
 800d094:	2301      	moveq	r3, #1
 800d096:	2300      	movne	r3, #0
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	461a      	mov	r2, r3
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d0df      	beq.n	800d062 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b8:	095b      	lsrs	r3, r3, #5
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	3307      	adds	r3, #7
 800d0ca:	08db      	lsrs	r3, r3, #3
 800d0cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b083      	sub	sp, #12
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d12e      	bne.n	800d156 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d101      	bne.n	800d106 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d102:	2302      	movs	r3, #2
 800d104:	e028      	b.n	800d158 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2202      	movs	r2, #2
 800d112:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f022 0201 	bic.w	r2, r2, #1
 800d124:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800d132:	ea42 0103 	orr.w	r1, r2, r3
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	689a      	ldr	r2, [r3, #8]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	e000      	b.n	800d158 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
  }
}
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e042      	b.n	800d1fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7f7 fa91 	bl	80046b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2224      	movs	r2, #36	; 0x24
 800d192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0201 	bic.w	r2, r2, #1
 800d1a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fa64 	bl	800d67c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f8b3 	bl	800d320 <UART_SetConfig>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e01b      	b.n	800d1fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	689a      	ldr	r2, [r3, #8]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0201 	orr.w	r2, r2, #1
 800d1f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fae3 	bl	800d7c0 <UART_CheckIdleState>
 800d1fa:	4603      	mov	r3, r0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08a      	sub	sp, #40	; 0x28
 800d208:	af02      	add	r7, sp, #8
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	603b      	str	r3, [r7, #0]
 800d210:	4613      	mov	r3, r2
 800d212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d21a:	2b20      	cmp	r3, #32
 800d21c:	d17b      	bne.n	800d316 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <HAL_UART_Transmit+0x26>
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e074      	b.n	800d318 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2221      	movs	r2, #33	; 0x21
 800d23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d23e:	f7f8 faeb 	bl	8005818 <HAL_GetTick>
 800d242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	88fa      	ldrh	r2, [r7, #6]
 800d248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	88fa      	ldrh	r2, [r7, #6]
 800d250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d25c:	d108      	bne.n	800d270 <HAL_UART_Transmit+0x6c>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	61bb      	str	r3, [r7, #24]
 800d26e:	e003      	b.n	800d278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d278:	e030      	b.n	800d2dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2200      	movs	r2, #0
 800d282:	2180      	movs	r1, #128	; 0x80
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 fb45 	bl	800d914 <UART_WaitOnFlagUntilTimeout>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d005      	beq.n	800d29c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2220      	movs	r2, #32
 800d294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d298:	2303      	movs	r3, #3
 800d29a:	e03d      	b.n	800d318 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10b      	bne.n	800d2ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	3302      	adds	r3, #2
 800d2b6:	61bb      	str	r3, [r7, #24]
 800d2b8:	e007      	b.n	800d2ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	781a      	ldrb	r2, [r3, #0]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1c8      	bne.n	800d27a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2140      	movs	r1, #64	; 0x40
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f000 fb0e 	bl	800d914 <UART_WaitOnFlagUntilTimeout>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d005      	beq.n	800d30a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2220      	movs	r2, #32
 800d302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	e006      	b.n	800d318 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2220      	movs	r2, #32
 800d30e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	e000      	b.n	800d318 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d316:	2302      	movs	r3, #2
  }
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3720      	adds	r7, #32
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d324:	b094      	sub	sp, #80	; 0x50
 800d326:	af00      	add	r7, sp, #0
 800d328:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b83      	ldr	r3, [pc, #524]	; (800d544 <UART_SetConfig+0x224>)
 800d336:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	689a      	ldr	r2, [r3, #8]
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	431a      	orrs	r2, r3
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	431a      	orrs	r2, r3
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	69db      	ldr	r3, [r3, #28]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	497c      	ldr	r1, [pc, #496]	; (800d548 <UART_SetConfig+0x228>)
 800d358:	4019      	ands	r1, r3
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d360:	430b      	orrs	r3, r1
 800d362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	68d9      	ldr	r1, [r3, #12]
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	ea40 0301 	orr.w	r3, r0, r1
 800d37a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	4b6f      	ldr	r3, [pc, #444]	; (800d544 <UART_SetConfig+0x224>)
 800d388:	429a      	cmp	r2, r3
 800d38a:	d009      	beq.n	800d3a0 <UART_SetConfig+0x80>
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	4b6e      	ldr	r3, [pc, #440]	; (800d54c <UART_SetConfig+0x22c>)
 800d392:	429a      	cmp	r2, r3
 800d394:	d004      	beq.n	800d3a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d39c:	4313      	orrs	r3, r2
 800d39e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d3aa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	f023 000f 	bic.w	r0, r3, #15
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	ea40 0301 	orr.w	r3, r0, r1
 800d3ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	4b5e      	ldr	r3, [pc, #376]	; (800d550 <UART_SetConfig+0x230>)
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d102      	bne.n	800d3e0 <UART_SetConfig+0xc0>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3de:	e032      	b.n	800d446 <UART_SetConfig+0x126>
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	4b5b      	ldr	r3, [pc, #364]	; (800d554 <UART_SetConfig+0x234>)
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d102      	bne.n	800d3f0 <UART_SetConfig+0xd0>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ee:	e02a      	b.n	800d446 <UART_SetConfig+0x126>
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	4b58      	ldr	r3, [pc, #352]	; (800d558 <UART_SetConfig+0x238>)
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d102      	bne.n	800d400 <UART_SetConfig+0xe0>
 800d3fa:	2304      	movs	r3, #4
 800d3fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3fe:	e022      	b.n	800d446 <UART_SetConfig+0x126>
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	4b55      	ldr	r3, [pc, #340]	; (800d55c <UART_SetConfig+0x23c>)
 800d406:	429a      	cmp	r2, r3
 800d408:	d102      	bne.n	800d410 <UART_SetConfig+0xf0>
 800d40a:	2308      	movs	r3, #8
 800d40c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d40e:	e01a      	b.n	800d446 <UART_SetConfig+0x126>
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	4b52      	ldr	r3, [pc, #328]	; (800d560 <UART_SetConfig+0x240>)
 800d416:	429a      	cmp	r2, r3
 800d418:	d102      	bne.n	800d420 <UART_SetConfig+0x100>
 800d41a:	2310      	movs	r3, #16
 800d41c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d41e:	e012      	b.n	800d446 <UART_SetConfig+0x126>
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	4b4f      	ldr	r3, [pc, #316]	; (800d564 <UART_SetConfig+0x244>)
 800d426:	429a      	cmp	r2, r3
 800d428:	d103      	bne.n	800d432 <UART_SetConfig+0x112>
 800d42a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d42e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d430:	e009      	b.n	800d446 <UART_SetConfig+0x126>
 800d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	4b43      	ldr	r3, [pc, #268]	; (800d544 <UART_SetConfig+0x224>)
 800d438:	429a      	cmp	r2, r3
 800d43a:	d102      	bne.n	800d442 <UART_SetConfig+0x122>
 800d43c:	2320      	movs	r3, #32
 800d43e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d440:	e001      	b.n	800d446 <UART_SetConfig+0x126>
 800d442:	2300      	movs	r3, #0
 800d444:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	4b3e      	ldr	r3, [pc, #248]	; (800d544 <UART_SetConfig+0x224>)
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d005      	beq.n	800d45c <UART_SetConfig+0x13c>
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4b3d      	ldr	r3, [pc, #244]	; (800d54c <UART_SetConfig+0x22c>)
 800d456:	429a      	cmp	r2, r3
 800d458:	f040 8088 	bne.w	800d56c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d45e:	2200      	movs	r2, #0
 800d460:	623b      	str	r3, [r7, #32]
 800d462:	627a      	str	r2, [r7, #36]	; 0x24
 800d464:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d468:	f7fd fb52 	bl	800ab10 <HAL_RCCEx_GetPeriphCLKFreq>
 800d46c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 80eb 	beq.w	800d64c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47a:	4a3b      	ldr	r2, [pc, #236]	; (800d568 <UART_SetConfig+0x248>)
 800d47c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d480:	461a      	mov	r2, r3
 800d482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d484:	fbb3 f3f2 	udiv	r3, r3, r2
 800d488:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	4613      	mov	r3, r2
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	4413      	add	r3, r2
 800d494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d496:	429a      	cmp	r2, r3
 800d498:	d305      	bcc.n	800d4a6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d903      	bls.n	800d4ae <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d4ac:	e048      	b.n	800d540 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	61bb      	str	r3, [r7, #24]
 800d4b4:	61fa      	str	r2, [r7, #28]
 800d4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	4a2b      	ldr	r2, [pc, #172]	; (800d568 <UART_SetConfig+0x248>)
 800d4bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	613b      	str	r3, [r7, #16]
 800d4c6:	617a      	str	r2, [r7, #20]
 800d4c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d4cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d4d0:	f7f3 fb64 	bl	8000b9c <__aeabi_uldivmod>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f04f 0200 	mov.w	r2, #0
 800d4e0:	f04f 0300 	mov.w	r3, #0
 800d4e4:	020b      	lsls	r3, r1, #8
 800d4e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4ea:	0202      	lsls	r2, r0, #8
 800d4ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4ee:	6849      	ldr	r1, [r1, #4]
 800d4f0:	0849      	lsrs	r1, r1, #1
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	eb12 0804 	adds.w	r8, r2, r4
 800d4fc:	eb43 0905 	adc.w	r9, r3, r5
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	60bb      	str	r3, [r7, #8]
 800d508:	60fa      	str	r2, [r7, #12]
 800d50a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f3 fb43 	bl	8000b9c <__aeabi_uldivmod>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	4613      	mov	r3, r2
 800d51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d524:	d308      	bcc.n	800d538 <UART_SetConfig+0x218>
 800d526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d52c:	d204      	bcs.n	800d538 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d534:	60da      	str	r2, [r3, #12]
 800d536:	e003      	b.n	800d540 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d53e:	e085      	b.n	800d64c <UART_SetConfig+0x32c>
 800d540:	e084      	b.n	800d64c <UART_SetConfig+0x32c>
 800d542:	bf00      	nop
 800d544:	46002400 	.word	0x46002400
 800d548:	cfff69f3 	.word	0xcfff69f3
 800d54c:	56002400 	.word	0x56002400
 800d550:	40013800 	.word	0x40013800
 800d554:	40004400 	.word	0x40004400
 800d558:	40004800 	.word	0x40004800
 800d55c:	40004c00 	.word	0x40004c00
 800d560:	40005000 	.word	0x40005000
 800d564:	40006400 	.word	0x40006400
 800d568:	08010314 	.word	0x08010314
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d574:	d13c      	bne.n	800d5f0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d578:	2200      	movs	r2, #0
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	607a      	str	r2, [r7, #4]
 800d57e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d582:	f7fd fac5 	bl	800ab10 <HAL_RCCEx_GetPeriphCLKFreq>
 800d586:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d05e      	beq.n	800d64c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d592:	4a39      	ldr	r2, [pc, #228]	; (800d678 <UART_SetConfig+0x358>)
 800d594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d598:	461a      	mov	r2, r3
 800d59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5a0:	005a      	lsls	r2, r3, #1
 800d5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	085b      	lsrs	r3, r3, #1
 800d5a8:	441a      	add	r2, r3
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b6:	2b0f      	cmp	r3, #15
 800d5b8:	d916      	bls.n	800d5e8 <UART_SetConfig+0x2c8>
 800d5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c0:	d212      	bcs.n	800d5e8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	f023 030f 	bic.w	r3, r3, #15
 800d5ca:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ce:	085b      	lsrs	r3, r3, #1
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d5e4:	60da      	str	r2, [r3, #12]
 800d5e6:	e031      	b.n	800d64c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d5ee:	e02d      	b.n	800d64c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	469a      	mov	sl, r3
 800d5f6:	4693      	mov	fp, r2
 800d5f8:	4650      	mov	r0, sl
 800d5fa:	4659      	mov	r1, fp
 800d5fc:	f7fd fa88 	bl	800ab10 <HAL_RCCEx_GetPeriphCLKFreq>
 800d600:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d604:	2b00      	cmp	r3, #0
 800d606:	d021      	beq.n	800d64c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	4a1a      	ldr	r2, [pc, #104]	; (800d678 <UART_SetConfig+0x358>)
 800d60e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d612:	461a      	mov	r2, r3
 800d614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d616:	fbb3 f2f2 	udiv	r2, r3, r2
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	085b      	lsrs	r3, r3, #1
 800d620:	441a      	add	r2, r3
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62e:	2b0f      	cmp	r3, #15
 800d630:	d909      	bls.n	800d646 <UART_SetConfig+0x326>
 800d632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d638:	d205      	bcs.n	800d646 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	60da      	str	r2, [r3, #12]
 800d644:	e002      	b.n	800d64c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	2201      	movs	r2, #1
 800d650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	2201      	movs	r2, #1
 800d658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	2200      	movs	r2, #0
 800d660:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	2200      	movs	r2, #0
 800d666:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d668:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3750      	adds	r7, #80	; 0x50
 800d670:	46bd      	mov	sp, r7
 800d672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d676:	bf00      	nop
 800d678:	08010314 	.word	0x08010314

0800d67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d688:	f003 0308 	and.w	r3, r3, #8
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00a      	beq.n	800d6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00a      	beq.n	800d6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6cc:	f003 0302 	and.w	r3, r3, #2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00a      	beq.n	800d6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ee:	f003 0304 	and.w	r3, r3, #4
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00a      	beq.n	800d70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	430a      	orrs	r2, r1
 800d70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d710:	f003 0310 	and.w	r3, r3, #16
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00a      	beq.n	800d72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	430a      	orrs	r2, r1
 800d72c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d732:	f003 0320 	and.w	r3, r3, #32
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00a      	beq.n	800d750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	430a      	orrs	r2, r1
 800d74e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01a      	beq.n	800d792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	430a      	orrs	r2, r1
 800d770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d77a:	d10a      	bne.n	800d792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	430a      	orrs	r2, r1
 800d7b2:	605a      	str	r2, [r3, #4]
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b098      	sub	sp, #96	; 0x60
 800d7c4:	af02      	add	r7, sp, #8
 800d7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7d0:	f7f8 f822 	bl	8005818 <HAL_GetTick>
 800d7d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f003 0308 	and.w	r3, r3, #8
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	d12f      	bne.n	800d844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f88e 	bl	800d914 <UART_WaitOnFlagUntilTimeout>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d022      	beq.n	800d844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	e853 3f00 	ldrex	r3, [r3]
 800d80a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d812:	653b      	str	r3, [r7, #80]	; 0x50
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d81c:	647b      	str	r3, [r7, #68]	; 0x44
 800d81e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e6      	bne.n	800d7fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2220      	movs	r2, #32
 800d834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d840:	2303      	movs	r3, #3
 800d842:	e063      	b.n	800d90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0304 	and.w	r3, r3, #4
 800d84e:	2b04      	cmp	r3, #4
 800d850:	d149      	bne.n	800d8e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d852:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d85a:	2200      	movs	r2, #0
 800d85c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f857 	bl	800d914 <UART_WaitOnFlagUntilTimeout>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d03c      	beq.n	800d8e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	e853 3f00 	ldrex	r3, [r3]
 800d878:	623b      	str	r3, [r7, #32]
   return(result);
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d880:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	461a      	mov	r2, r3
 800d888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d88a:	633b      	str	r3, [r7, #48]	; 0x30
 800d88c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d892:	e841 2300 	strex	r3, r2, [r1]
 800d896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d1e6      	bne.n	800d86c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	e853 3f00 	ldrex	r3, [r3]
 800d8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f023 0301 	bic.w	r3, r3, #1
 800d8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3308      	adds	r3, #8
 800d8bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8be:	61fa      	str	r2, [r7, #28]
 800d8c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	69b9      	ldr	r1, [r7, #24]
 800d8c4:	69fa      	ldr	r2, [r7, #28]
 800d8c6:	e841 2300 	strex	r3, r2, [r1]
 800d8ca:	617b      	str	r3, [r7, #20]
   return(result);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e5      	bne.n	800d89e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	e012      	b.n	800d90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2220      	movs	r2, #32
 800d8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3758      	adds	r7, #88	; 0x58
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	603b      	str	r3, [r7, #0]
 800d920:	4613      	mov	r3, r2
 800d922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d924:	e049      	b.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d92c:	d045      	beq.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d92e:	f7f7 ff73 	bl	8005818 <HAL_GetTick>
 800d932:	4602      	mov	r2, r0
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d302      	bcc.n	800d944 <UART_WaitOnFlagUntilTimeout+0x30>
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d944:	2303      	movs	r3, #3
 800d946:	e048      	b.n	800d9da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f003 0304 	and.w	r3, r3, #4
 800d952:	2b00      	cmp	r3, #0
 800d954:	d031      	beq.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	f003 0308 	and.w	r3, r3, #8
 800d960:	2b08      	cmp	r3, #8
 800d962:	d110      	bne.n	800d986 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2208      	movs	r2, #8
 800d96a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 f838 	bl	800d9e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2208      	movs	r2, #8
 800d976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e029      	b.n	800d9da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	69db      	ldr	r3, [r3, #28]
 800d98c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d994:	d111      	bne.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f81e 	bl	800d9e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	e00f      	b.n	800d9da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	69da      	ldr	r2, [r3, #28]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	68ba      	ldr	r2, [r7, #8]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	bf0c      	ite	eq
 800d9ca:	2301      	moveq	r3, #1
 800d9cc:	2300      	movne	r3, #0
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d0a6      	beq.n	800d926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b095      	sub	sp, #84	; 0x54
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f2:	e853 3f00 	ldrex	r3, [r3]
 800d9f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	461a      	mov	r2, r3
 800da06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da08:	643b      	str	r3, [r7, #64]	; 0x40
 800da0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da10:	e841 2300 	strex	r3, r2, [r1]
 800da14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1e6      	bne.n	800d9ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	3308      	adds	r3, #8
 800da22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	e853 3f00 	ldrex	r3, [r3]
 800da2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da32:	f023 0301 	bic.w	r3, r3, #1
 800da36:	64bb      	str	r3, [r7, #72]	; 0x48
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3308      	adds	r3, #8
 800da3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e3      	bne.n	800da1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d118      	bne.n	800da8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	e853 3f00 	ldrex	r3, [r3]
 800da68:	60bb      	str	r3, [r7, #8]
   return(result);
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	f023 0310 	bic.w	r3, r3, #16
 800da70:	647b      	str	r3, [r7, #68]	; 0x44
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	461a      	mov	r2, r3
 800da78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da7a:	61bb      	str	r3, [r7, #24]
 800da7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7e:	6979      	ldr	r1, [r7, #20]
 800da80:	69ba      	ldr	r2, [r7, #24]
 800da82:	e841 2300 	strex	r3, r2, [r1]
 800da86:	613b      	str	r3, [r7, #16]
   return(result);
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e6      	bne.n	800da5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800daa2:	bf00      	nop
 800daa4:	3754      	adds	r7, #84	; 0x54
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800daae:	b480      	push	{r7}
 800dab0:	b085      	sub	sp, #20
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <HAL_UARTEx_DisableFifoMode+0x16>
 800dac0:	2302      	movs	r3, #2
 800dac2:	e027      	b.n	800db14 <HAL_UARTEx_DisableFifoMode+0x66>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2224      	movs	r2, #36	; 0x24
 800dad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 0201 	bic.w	r2, r2, #1
 800daea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800daf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2220      	movs	r2, #32
 800db06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800db30:	2b01      	cmp	r3, #1
 800db32:	d101      	bne.n	800db38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db34:	2302      	movs	r3, #2
 800db36:	e02d      	b.n	800db94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2224      	movs	r2, #36	; 0x24
 800db44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0201 	bic.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	430a      	orrs	r2, r1
 800db72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f84f 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2220      	movs	r2, #32
 800db86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d101      	bne.n	800dbb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e02d      	b.n	800dc10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2224      	movs	r2, #36	; 0x24
 800dbc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f022 0201 	bic.w	r2, r2, #1
 800dbda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	430a      	orrs	r2, r1
 800dbee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f811 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2220      	movs	r2, #32
 800dc02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d108      	bne.n	800dc3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc38:	e031      	b.n	800dc9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc3a:	2308      	movs	r3, #8
 800dc3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc3e:	2308      	movs	r3, #8
 800dc40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	0e5b      	lsrs	r3, r3, #25
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f003 0307 	and.w	r3, r3, #7
 800dc50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	0f5b      	lsrs	r3, r3, #29
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 0307 	and.w	r3, r3, #7
 800dc60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	7b3a      	ldrb	r2, [r7, #12]
 800dc66:	4911      	ldr	r1, [pc, #68]	; (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc68:	5c8a      	ldrb	r2, [r1, r2]
 800dc6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc6e:	7b3a      	ldrb	r2, [r7, #12]
 800dc70:	490f      	ldr	r1, [pc, #60]	; (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc74:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	7b7a      	ldrb	r2, [r7, #13]
 800dc84:	4909      	ldr	r1, [pc, #36]	; (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc86:	5c8a      	ldrb	r2, [r1, r2]
 800dc88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc8c:	7b7a      	ldrb	r2, [r7, #13]
 800dc8e:	4908      	ldr	r1, [pc, #32]	; (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc92:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dc9e:	bf00      	nop
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	0801032c 	.word	0x0801032c
 800dcb0:	08010334 	.word	0x08010334

0800dcb4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b08b      	sub	sp, #44	; 0x2c
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	fa93 f3a3 	rbit	r3, r3
 800dcce:	613b      	str	r3, [r7, #16]
  return result;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800dcda:	2320      	movs	r3, #32
 800dcdc:	e003      	b.n	800dce6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	fab3 f383 	clz	r3, r3
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	2103      	movs	r1, #3
 800dcea:	fa01 f303 	lsl.w	r3, r1, r3
 800dcee:	43db      	mvns	r3, r3
 800dcf0:	401a      	ands	r2, r3
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	fa93 f3a3 	rbit	r3, r3
 800dcfc:	61fb      	str	r3, [r7, #28]
  return result;
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800dd08:	2320      	movs	r3, #32
 800dd0a:	e003      	b.n	800dd14 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	fab3 f383 	clz	r3, r3
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	fa01 f303 	lsl.w	r3, r1, r3
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	601a      	str	r2, [r3, #0]
}
 800dd22:	bf00      	nop
 800dd24:	372c      	adds	r7, #44	; 0x2c
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr

0800dd2e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b085      	sub	sp, #20
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	43db      	mvns	r3, r3
 800dd42:	401a      	ands	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	fb01 f303 	mul.w	r3, r1, r3
 800dd4c:	431a      	orrs	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	605a      	str	r2, [r3, #4]
}
 800dd52:	bf00      	nop
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800dd5e:	b480      	push	{r7}
 800dd60:	b08b      	sub	sp, #44	; 0x2c
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	60f8      	str	r0, [r7, #12]
 800dd66:	60b9      	str	r1, [r7, #8]
 800dd68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	689a      	ldr	r2, [r3, #8]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	fa93 f3a3 	rbit	r3, r3
 800dd78:	613b      	str	r3, [r7, #16]
  return result;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800dd84:	2320      	movs	r3, #32
 800dd86:	e003      	b.n	800dd90 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	fab3 f383 	clz	r3, r3
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	2103      	movs	r1, #3
 800dd94:	fa01 f303 	lsl.w	r3, r1, r3
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	401a      	ands	r2, r3
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	fa93 f3a3 	rbit	r3, r3
 800dda6:	61fb      	str	r3, [r7, #28]
  return result;
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ddb2:	2320      	movs	r3, #32
 800ddb4:	e003      	b.n	800ddbe <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb8:	fab3 f383 	clz	r3, r3
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800ddcc:	bf00      	nop
 800ddce:	372c      	adds	r7, #44	; 0x2c
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b08b      	sub	sp, #44	; 0x2c
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	68da      	ldr	r2, [r3, #12]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	fa93 f3a3 	rbit	r3, r3
 800ddf2:	613b      	str	r3, [r7, #16]
  return result;
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ddfe:	2320      	movs	r3, #32
 800de00:	e003      	b.n	800de0a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	fab3 f383 	clz	r3, r3
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	005b      	lsls	r3, r3, #1
 800de0c:	2103      	movs	r1, #3
 800de0e:	fa01 f303 	lsl.w	r3, r1, r3
 800de12:	43db      	mvns	r3, r3
 800de14:	401a      	ands	r2, r3
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	fa93 f3a3 	rbit	r3, r3
 800de20:	61fb      	str	r3, [r7, #28]
  return result;
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800de2c:	2320      	movs	r3, #32
 800de2e:	e003      	b.n	800de38 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	fab3 f383 	clz	r3, r3
 800de36:	b2db      	uxtb	r3, r3
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	fa01 f303 	lsl.w	r3, r1, r3
 800de40:	431a      	orrs	r2, r3
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	60da      	str	r2, [r3, #12]
}
 800de46:	bf00      	nop
 800de48:	372c      	adds	r7, #44	; 0x2c
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800de52:	b480      	push	{r7}
 800de54:	b08b      	sub	sp, #44	; 0x2c
 800de56:	af00      	add	r7, sp, #0
 800de58:	60f8      	str	r0, [r7, #12]
 800de5a:	60b9      	str	r1, [r7, #8]
 800de5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6a1a      	ldr	r2, [r3, #32]
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	fa93 f3a3 	rbit	r3, r3
 800de6c:	613b      	str	r3, [r7, #16]
  return result;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800de78:	2320      	movs	r3, #32
 800de7a:	e003      	b.n	800de84 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800de7c:	69bb      	ldr	r3, [r7, #24]
 800de7e:	fab3 f383 	clz	r3, r3
 800de82:	b2db      	uxtb	r3, r3
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	210f      	movs	r1, #15
 800de88:	fa01 f303 	lsl.w	r3, r1, r3
 800de8c:	43db      	mvns	r3, r3
 800de8e:	401a      	ands	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	fa93 f3a3 	rbit	r3, r3
 800de9a:	61fb      	str	r3, [r7, #28]
  return result;
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800dea6:	2320      	movs	r3, #32
 800dea8:	e003      	b.n	800deb2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	fab3 f383 	clz	r3, r3
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	fa01 f303 	lsl.w	r3, r1, r3
 800deba:	431a      	orrs	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800dec0:	bf00      	nop
 800dec2:	372c      	adds	r7, #44	; 0x2c
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800decc:	b480      	push	{r7}
 800dece:	b08b      	sub	sp, #44	; 0x2c
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	0a1b      	lsrs	r3, r3, #8
 800dee0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	fa93 f3a3 	rbit	r3, r3
 800dee8:	613b      	str	r3, [r7, #16]
  return result;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800def4:	2320      	movs	r3, #32
 800def6:	e003      	b.n	800df00 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	fab3 f383 	clz	r3, r3
 800defe:	b2db      	uxtb	r3, r3
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	210f      	movs	r1, #15
 800df04:	fa01 f303 	lsl.w	r3, r1, r3
 800df08:	43db      	mvns	r3, r3
 800df0a:	401a      	ands	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	0a1b      	lsrs	r3, r3, #8
 800df10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	fa93 f3a3 	rbit	r3, r3
 800df18:	61fb      	str	r3, [r7, #28]
  return result;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800df24:	2320      	movs	r3, #32
 800df26:	e003      	b.n	800df30 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	fab3 f383 	clz	r3, r3
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	fa01 f303 	lsl.w	r3, r1, r3
 800df38:	431a      	orrs	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800df3e:	bf00      	nop
 800df40:	372c      	adds	r7, #44	; 0x2c
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b08a      	sub	sp, #40	; 0x28
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	fa93 f3a3 	rbit	r3, r3
 800df60:	617b      	str	r3, [r7, #20]
  return result;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <LL_GPIO_Init+0x26>
    return 32U;
 800df6c:	2320      	movs	r3, #32
 800df6e:	e003      	b.n	800df78 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	fab3 f383 	clz	r3, r3
 800df76:	b2db      	uxtb	r3, r3
 800df78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800df7a:	e058      	b.n	800e02e <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	2101      	movs	r1, #1
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	fa01 f303 	lsl.w	r3, r1, r3
 800df88:	4013      	ands	r3, r2
 800df8a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d04a      	beq.n	800e028 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2b01      	cmp	r3, #1
 800df98:	d003      	beq.n	800dfa2 <LL_GPIO_Init+0x58>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d10e      	bne.n	800dfc0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	6a39      	ldr	r1, [r7, #32]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff fed7 	bl	800dd5e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff feb7 	bl	800dd2e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	6a39      	ldr	r1, [r7, #32]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff ff05 	bl	800ddd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	d121      	bne.n	800e01a <LL_GPIO_Init+0xd0>
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	fa93 f3a3 	rbit	r3, r3
 800dfe0:	60bb      	str	r3, [r7, #8]
  return result;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <LL_GPIO_Init+0xa6>
    return 32U;
 800dfec:	2320      	movs	r3, #32
 800dfee:	e003      	b.n	800dff8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	fab3 f383 	clz	r3, r3
 800dff6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800dff8:	2b07      	cmp	r3, #7
 800dffa:	d807      	bhi.n	800e00c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	695b      	ldr	r3, [r3, #20]
 800e000:	461a      	mov	r2, r3
 800e002:	6a39      	ldr	r1, [r7, #32]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ff24 	bl	800de52 <LL_GPIO_SetAFPin_0_7>
 800e00a:	e006      	b.n	800e01a <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	461a      	mov	r2, r3
 800e012:	6a39      	ldr	r1, [r7, #32]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff ff59 	bl	800decc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	461a      	mov	r2, r3
 800e020:	6a39      	ldr	r1, [r7, #32]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff fe46 	bl	800dcb4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	3301      	adds	r3, #1
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	fa22 f303 	lsr.w	r3, r2, r3
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d19f      	bne.n	800df7c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3728      	adds	r7, #40	; 0x28
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e046:	b084      	sub	sp, #16
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	f107 001c 	add.w	r0, r7, #28
 800e054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	2b03      	cmp	r3, #3
 800e05c:	d105      	bne.n	800e06a <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f8e8 	bl	800e240 <USB_CoreReset>
 800e070:	4603      	mov	r3, r0
 800e072:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	2b01      	cmp	r3, #1
 800e078:	d10b      	bne.n	800e092 <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	f043 0208 	orr.w	r2, r3, #8
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f043 0220 	orr.w	r2, r3, #32
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e09e:	b004      	add	sp, #16
 800e0a0:	4770      	bx	lr

0800e0a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b083      	sub	sp, #12
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f023 0201 	bic.w	r2, r3, #1
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d115      	bne.n	800e112 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e0f2:	2001      	movs	r0, #1
 800e0f4:	f7f7 fb9c 	bl	8005830 <HAL_Delay>
      ms++;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f890 	bl	800e224 <USB_GetMode>
 800e104:	4603      	mov	r3, r0
 800e106:	2b01      	cmp	r3, #1
 800e108:	d01e      	beq.n	800e148 <USB_SetCurrentMode+0x84>
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b31      	cmp	r3, #49	; 0x31
 800e10e:	d9f0      	bls.n	800e0f2 <USB_SetCurrentMode+0x2e>
 800e110:	e01a      	b.n	800e148 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e112:	78fb      	ldrb	r3, [r7, #3]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d115      	bne.n	800e144 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e124:	2001      	movs	r0, #1
 800e126:	f7f7 fb83 	bl	8005830 <HAL_Delay>
      ms++;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3301      	adds	r3, #1
 800e12e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 f877 	bl	800e224 <USB_GetMode>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d005      	beq.n	800e148 <USB_SetCurrentMode+0x84>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b31      	cmp	r3, #49	; 0x31
 800e140:	d9f0      	bls.n	800e124 <USB_SetCurrentMode+0x60>
 800e142:	e001      	b.n	800e148 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	e005      	b.n	800e154 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b32      	cmp	r3, #50	; 0x32
 800e14c:	d101      	bne.n	800e152 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e000      	b.n	800e154 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	3301      	adds	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	4a13      	ldr	r2, [pc, #76]	; (800e1c0 <USB_FlushTxFifo+0x64>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d901      	bls.n	800e17c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e178:	2303      	movs	r3, #3
 800e17a:	e01b      	b.n	800e1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	2b00      	cmp	r3, #0
 800e182:	daf2      	bge.n	800e16a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e184:	2300      	movs	r3, #0
 800e186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	019b      	lsls	r3, r3, #6
 800e18c:	f043 0220 	orr.w	r2, r3, #32
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	3301      	adds	r3, #1
 800e198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	4a08      	ldr	r2, [pc, #32]	; (800e1c0 <USB_FlushTxFifo+0x64>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d901      	bls.n	800e1a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e006      	b.n	800e1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	f003 0320 	and.w	r3, r3, #32
 800e1ae:	2b20      	cmp	r3, #32
 800e1b0:	d0f0      	beq.n	800e194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3714      	adds	r7, #20
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	00030d40 	.word	0x00030d40

0800e1c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4a11      	ldr	r2, [pc, #68]	; (800e220 <USB_FlushRxFifo+0x5c>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d901      	bls.n	800e1e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	e018      	b.n	800e214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	691b      	ldr	r3, [r3, #16]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	daf2      	bge.n	800e1d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2210      	movs	r2, #16
 800e1f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	4a08      	ldr	r2, [pc, #32]	; (800e220 <USB_FlushRxFifo+0x5c>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d901      	bls.n	800e206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e202:	2303      	movs	r3, #3
 800e204:	e006      	b.n	800e214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	f003 0310 	and.w	r3, r3, #16
 800e20e:	2b10      	cmp	r3, #16
 800e210:	d0f0      	beq.n	800e1f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	00030d40 	.word	0x00030d40

0800e224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	f003 0301 	and.w	r3, r3, #1
}
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e248:	2300      	movs	r3, #0
 800e24a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3301      	adds	r3, #1
 800e250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	4a13      	ldr	r2, [pc, #76]	; (800e2a4 <USB_CoreReset+0x64>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d901      	bls.n	800e25e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e25a:	2303      	movs	r3, #3
 800e25c:	e01b      	b.n	800e296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	daf2      	bge.n	800e24c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	f043 0201 	orr.w	r2, r3, #1
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3301      	adds	r3, #1
 800e27a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	4a09      	ldr	r2, [pc, #36]	; (800e2a4 <USB_CoreReset+0x64>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d901      	bls.n	800e288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e284:	2303      	movs	r3, #3
 800e286:	e006      	b.n	800e296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	2b01      	cmp	r3, #1
 800e292:	d0f0      	beq.n	800e276 <USB_CoreReset+0x36>

  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	00030d40 	.word	0x00030d40

0800e2a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b086      	sub	sp, #24
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e2b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2de:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#else
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e302:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e312:	2b00      	cmp	r3, #0
 800e314:	d018      	beq.n	800e348 <USB_HostInit+0xa0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d10a      	bne.n	800e332 <USB_HostInit+0x8a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e32a:	f043 0304 	orr.w	r3, r3, #4
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	e014      	b.n	800e35c <USB_HostInit+0xb4>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e340:	f023 0304 	bic.w	r3, r3, #4
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	e009      	b.n	800e35c <USB_HostInit+0xb4>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e356:	f023 0304 	bic.w	r3, r3, #4
 800e35a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e35c:	2110      	movs	r1, #16
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff fefc 	bl	800e15c <USB_FlushTxFifo>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <USB_HostInit+0xc6>
  {
    ret = HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff ff28 	bl	800e1c4 <USB_FlushRxFifo>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <USB_HostInit+0xd6>
  {
    ret = HAL_ERROR;
 800e37a:	2301      	movs	r3, #1
 800e37c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e37e:	2300      	movs	r3, #0
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	e015      	b.n	800e3b0 <USB_HostInit+0x108>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e390:	461a      	mov	r2, r3
 800e392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e396:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	015a      	lsls	r2, r3, #5
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	613b      	str	r3, [r7, #16]
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d3e5      	bcc.n	800e384 <USB_HostInit+0xdc>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00b      	beq.n	800e3ea <USB_HostInit+0x142>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a13      	ldr	r2, [pc, #76]	; (800e42c <USB_HostInit+0x184>)
 800e3de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a13      	ldr	r2, [pc, #76]	; (800e430 <USB_HostInit+0x188>)
 800e3e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e3e8:	e009      	b.n	800e3fe <USB_HostInit+0x156>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2280      	movs	r2, #128	; 0x80
 800e3ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a10      	ldr	r2, [pc, #64]	; (800e434 <USB_HostInit+0x18c>)
 800e3f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4a0f      	ldr	r2, [pc, #60]	; (800e438 <USB_HostInit+0x190>)
 800e3fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	2b00      	cmp	r3, #0
 800e402:	d105      	bne.n	800e410 <USB_HostInit+0x168>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	f043 0210 	orr.w	r2, r3, #16
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	699a      	ldr	r2, [r3, #24]
 800e414:	4b09      	ldr	r3, [pc, #36]	; (800e43c <USB_HostInit+0x194>)
 800e416:	4313      	orrs	r3, r2
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3718      	adds	r7, #24
 800e422:	46bd      	mov	sp, r7
 800e424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e428:	b004      	add	sp, #16
 800e42a:	4770      	bx	lr
 800e42c:	01000200 	.word	0x01000200
 800e430:	00e00300 	.word	0x00e00300
 800e434:	00600080 	.word	0x00600080
 800e438:	004000e0 	.word	0x004000e0
 800e43c:	a3200008 	.word	0xa3200008

0800e440 <siprintf>:
 800e440:	b40e      	push	{r1, r2, r3}
 800e442:	b500      	push	{lr}
 800e444:	b09c      	sub	sp, #112	; 0x70
 800e446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e44a:	ab1d      	add	r3, sp, #116	; 0x74
 800e44c:	9002      	str	r0, [sp, #8]
 800e44e:	9006      	str	r0, [sp, #24]
 800e450:	9107      	str	r1, [sp, #28]
 800e452:	9104      	str	r1, [sp, #16]
 800e454:	4808      	ldr	r0, [pc, #32]	; (800e478 <siprintf+0x38>)
 800e456:	4909      	ldr	r1, [pc, #36]	; (800e47c <siprintf+0x3c>)
 800e458:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45c:	9105      	str	r1, [sp, #20]
 800e45e:	a902      	add	r1, sp, #8
 800e460:	6800      	ldr	r0, [r0, #0]
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	f000 f8d4 	bl	800e610 <_svfiprintf_r>
 800e468:	9b02      	ldr	r3, [sp, #8]
 800e46a:	2200      	movs	r2, #0
 800e46c:	701a      	strb	r2, [r3, #0]
 800e46e:	b01c      	add	sp, #112	; 0x70
 800e470:	f85d eb04 	ldr.w	lr, [sp], #4
 800e474:	b003      	add	sp, #12
 800e476:	4770      	bx	lr
 800e478:	20000070 	.word	0x20000070
 800e47c:	ffff0208 	.word	0xffff0208

0800e480 <_vsniprintf_r>:
 800e480:	b530      	push	{r4, r5, lr}
 800e482:	4614      	mov	r4, r2
 800e484:	b09b      	sub	sp, #108	; 0x6c
 800e486:	4605      	mov	r5, r0
 800e488:	461a      	mov	r2, r3
 800e48a:	2c00      	cmp	r4, #0
 800e48c:	da05      	bge.n	800e49a <_vsniprintf_r+0x1a>
 800e48e:	238b      	movs	r3, #139	; 0x8b
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e496:	b01b      	add	sp, #108	; 0x6c
 800e498:	bd30      	pop	{r4, r5, pc}
 800e49a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e49e:	9100      	str	r1, [sp, #0]
 800e4a0:	9104      	str	r1, [sp, #16]
 800e4a2:	4669      	mov	r1, sp
 800e4a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e4a8:	bf14      	ite	ne
 800e4aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e4ae:	4623      	moveq	r3, r4
 800e4b0:	9302      	str	r3, [sp, #8]
 800e4b2:	9305      	str	r3, [sp, #20]
 800e4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e4bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e4be:	f000 f8a7 	bl	800e610 <_svfiprintf_r>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	bfbc      	itt	lt
 800e4c6:	238b      	movlt	r3, #139	; 0x8b
 800e4c8:	602b      	strlt	r3, [r5, #0]
 800e4ca:	2c00      	cmp	r4, #0
 800e4cc:	d0e3      	beq.n	800e496 <_vsniprintf_r+0x16>
 800e4ce:	9b00      	ldr	r3, [sp, #0]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	e7df      	b.n	800e496 <_vsniprintf_r+0x16>
	...

0800e4d8 <vsniprintf>:
 800e4d8:	b507      	push	{r0, r1, r2, lr}
 800e4da:	9300      	str	r3, [sp, #0]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	460a      	mov	r2, r1
 800e4e0:	4601      	mov	r1, r0
 800e4e2:	4803      	ldr	r0, [pc, #12]	; (800e4f0 <vsniprintf+0x18>)
 800e4e4:	6800      	ldr	r0, [r0, #0]
 800e4e6:	f7ff ffcb 	bl	800e480 <_vsniprintf_r>
 800e4ea:	b003      	add	sp, #12
 800e4ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4f0:	20000070 	.word	0x20000070

0800e4f4 <memset>:
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d100      	bne.n	800e4fe <memset+0xa>
 800e4fc:	4770      	bx	lr
 800e4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e502:	e7f9      	b.n	800e4f8 <memset+0x4>

0800e504 <__errno>:
 800e504:	4b01      	ldr	r3, [pc, #4]	; (800e50c <__errno+0x8>)
 800e506:	6818      	ldr	r0, [r3, #0]
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	20000070 	.word	0x20000070

0800e510 <__libc_init_array>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	4d0d      	ldr	r5, [pc, #52]	; (800e548 <__libc_init_array+0x38>)
 800e514:	2600      	movs	r6, #0
 800e516:	4c0d      	ldr	r4, [pc, #52]	; (800e54c <__libc_init_array+0x3c>)
 800e518:	1b64      	subs	r4, r4, r5
 800e51a:	10a4      	asrs	r4, r4, #2
 800e51c:	42a6      	cmp	r6, r4
 800e51e:	d109      	bne.n	800e534 <__libc_init_array+0x24>
 800e520:	4d0b      	ldr	r5, [pc, #44]	; (800e550 <__libc_init_array+0x40>)
 800e522:	2600      	movs	r6, #0
 800e524:	4c0b      	ldr	r4, [pc, #44]	; (800e554 <__libc_init_array+0x44>)
 800e526:	f001 fd1f 	bl	800ff68 <_init>
 800e52a:	1b64      	subs	r4, r4, r5
 800e52c:	10a4      	asrs	r4, r4, #2
 800e52e:	42a6      	cmp	r6, r4
 800e530:	d105      	bne.n	800e53e <__libc_init_array+0x2e>
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	f855 3b04 	ldr.w	r3, [r5], #4
 800e538:	3601      	adds	r6, #1
 800e53a:	4798      	blx	r3
 800e53c:	e7ee      	b.n	800e51c <__libc_init_array+0xc>
 800e53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e542:	3601      	adds	r6, #1
 800e544:	4798      	blx	r3
 800e546:	e7f2      	b.n	800e52e <__libc_init_array+0x1e>
 800e548:	08010550 	.word	0x08010550
 800e54c:	08010550 	.word	0x08010550
 800e550:	08010550 	.word	0x08010550
 800e554:	08010554 	.word	0x08010554

0800e558 <__retarget_lock_acquire_recursive>:
 800e558:	4770      	bx	lr

0800e55a <__retarget_lock_release_recursive>:
 800e55a:	4770      	bx	lr

0800e55c <__ssputs_r>:
 800e55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e560:	461f      	mov	r7, r3
 800e562:	688e      	ldr	r6, [r1, #8]
 800e564:	4682      	mov	sl, r0
 800e566:	460c      	mov	r4, r1
 800e568:	42be      	cmp	r6, r7
 800e56a:	4690      	mov	r8, r2
 800e56c:	680b      	ldr	r3, [r1, #0]
 800e56e:	d82c      	bhi.n	800e5ca <__ssputs_r+0x6e>
 800e570:	898a      	ldrh	r2, [r1, #12]
 800e572:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e576:	d026      	beq.n	800e5c6 <__ssputs_r+0x6a>
 800e578:	6965      	ldr	r5, [r4, #20]
 800e57a:	6909      	ldr	r1, [r1, #16]
 800e57c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e580:	eba3 0901 	sub.w	r9, r3, r1
 800e584:	1c7b      	adds	r3, r7, #1
 800e586:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e58a:	444b      	add	r3, r9
 800e58c:	106d      	asrs	r5, r5, #1
 800e58e:	429d      	cmp	r5, r3
 800e590:	bf38      	it	cc
 800e592:	461d      	movcc	r5, r3
 800e594:	0553      	lsls	r3, r2, #21
 800e596:	d527      	bpl.n	800e5e8 <__ssputs_r+0x8c>
 800e598:	4629      	mov	r1, r5
 800e59a:	f000 f957 	bl	800e84c <_malloc_r>
 800e59e:	4606      	mov	r6, r0
 800e5a0:	b360      	cbz	r0, 800e5fc <__ssputs_r+0xa0>
 800e5a2:	464a      	mov	r2, r9
 800e5a4:	6921      	ldr	r1, [r4, #16]
 800e5a6:	f000 fbd7 	bl	800ed58 <memcpy>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5b4:	81a3      	strh	r3, [r4, #12]
 800e5b6:	6126      	str	r6, [r4, #16]
 800e5b8:	444e      	add	r6, r9
 800e5ba:	6165      	str	r5, [r4, #20]
 800e5bc:	eba5 0509 	sub.w	r5, r5, r9
 800e5c0:	6026      	str	r6, [r4, #0]
 800e5c2:	463e      	mov	r6, r7
 800e5c4:	60a5      	str	r5, [r4, #8]
 800e5c6:	42be      	cmp	r6, r7
 800e5c8:	d900      	bls.n	800e5cc <__ssputs_r+0x70>
 800e5ca:	463e      	mov	r6, r7
 800e5cc:	4632      	mov	r2, r6
 800e5ce:	4641      	mov	r1, r8
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	f000 fb88 	bl	800ece6 <memmove>
 800e5d6:	68a3      	ldr	r3, [r4, #8]
 800e5d8:	2000      	movs	r0, #0
 800e5da:	1b9b      	subs	r3, r3, r6
 800e5dc:	60a3      	str	r3, [r4, #8]
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	4433      	add	r3, r6
 800e5e2:	6023      	str	r3, [r4, #0]
 800e5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	f000 fb4d 	bl	800ec88 <_realloc_r>
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1e0      	bne.n	800e5b6 <__ssputs_r+0x5a>
 800e5f4:	6921      	ldr	r1, [r4, #16]
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	f000 fbbc 	bl	800ed74 <_free_r>
 800e5fc:	230c      	movs	r3, #12
 800e5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e602:	f8ca 3000 	str.w	r3, [sl]
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e60c:	81a3      	strh	r3, [r4, #12]
 800e60e:	e7e9      	b.n	800e5e4 <__ssputs_r+0x88>

0800e610 <_svfiprintf_r>:
 800e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	4698      	mov	r8, r3
 800e616:	898b      	ldrh	r3, [r1, #12]
 800e618:	b09d      	sub	sp, #116	; 0x74
 800e61a:	4607      	mov	r7, r0
 800e61c:	061b      	lsls	r3, r3, #24
 800e61e:	460d      	mov	r5, r1
 800e620:	4614      	mov	r4, r2
 800e622:	d50e      	bpl.n	800e642 <_svfiprintf_r+0x32>
 800e624:	690b      	ldr	r3, [r1, #16]
 800e626:	b963      	cbnz	r3, 800e642 <_svfiprintf_r+0x32>
 800e628:	2140      	movs	r1, #64	; 0x40
 800e62a:	f000 f90f 	bl	800e84c <_malloc_r>
 800e62e:	6028      	str	r0, [r5, #0]
 800e630:	6128      	str	r0, [r5, #16]
 800e632:	b920      	cbnz	r0, 800e63e <_svfiprintf_r+0x2e>
 800e634:	230c      	movs	r3, #12
 800e636:	603b      	str	r3, [r7, #0]
 800e638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e63c:	e0d0      	b.n	800e7e0 <_svfiprintf_r+0x1d0>
 800e63e:	2340      	movs	r3, #64	; 0x40
 800e640:	616b      	str	r3, [r5, #20]
 800e642:	2300      	movs	r3, #0
 800e644:	f8cd 800c 	str.w	r8, [sp, #12]
 800e648:	f04f 0901 	mov.w	r9, #1
 800e64c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e7f8 <_svfiprintf_r+0x1e8>
 800e650:	9309      	str	r3, [sp, #36]	; 0x24
 800e652:	2320      	movs	r3, #32
 800e654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e658:	2330      	movs	r3, #48	; 0x30
 800e65a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e65e:	4623      	mov	r3, r4
 800e660:	469a      	mov	sl, r3
 800e662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e666:	b10a      	cbz	r2, 800e66c <_svfiprintf_r+0x5c>
 800e668:	2a25      	cmp	r2, #37	; 0x25
 800e66a:	d1f9      	bne.n	800e660 <_svfiprintf_r+0x50>
 800e66c:	ebba 0b04 	subs.w	fp, sl, r4
 800e670:	d00b      	beq.n	800e68a <_svfiprintf_r+0x7a>
 800e672:	465b      	mov	r3, fp
 800e674:	4622      	mov	r2, r4
 800e676:	4629      	mov	r1, r5
 800e678:	4638      	mov	r0, r7
 800e67a:	f7ff ff6f 	bl	800e55c <__ssputs_r>
 800e67e:	3001      	adds	r0, #1
 800e680:	f000 80a9 	beq.w	800e7d6 <_svfiprintf_r+0x1c6>
 800e684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e686:	445a      	add	r2, fp
 800e688:	9209      	str	r2, [sp, #36]	; 0x24
 800e68a:	f89a 3000 	ldrb.w	r3, [sl]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f000 80a1 	beq.w	800e7d6 <_svfiprintf_r+0x1c6>
 800e694:	2300      	movs	r3, #0
 800e696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e69a:	f10a 0a01 	add.w	sl, sl, #1
 800e69e:	9304      	str	r3, [sp, #16]
 800e6a0:	9307      	str	r3, [sp, #28]
 800e6a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6a6:	931a      	str	r3, [sp, #104]	; 0x68
 800e6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ac:	4654      	mov	r4, sl
 800e6ae:	2205      	movs	r2, #5
 800e6b0:	4851      	ldr	r0, [pc, #324]	; (800e7f8 <_svfiprintf_r+0x1e8>)
 800e6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6b6:	f000 fb41 	bl	800ed3c <memchr>
 800e6ba:	9a04      	ldr	r2, [sp, #16]
 800e6bc:	b9d8      	cbnz	r0, 800e6f6 <_svfiprintf_r+0xe6>
 800e6be:	06d0      	lsls	r0, r2, #27
 800e6c0:	bf44      	itt	mi
 800e6c2:	2320      	movmi	r3, #32
 800e6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6c8:	0711      	lsls	r1, r2, #28
 800e6ca:	bf44      	itt	mi
 800e6cc:	232b      	movmi	r3, #43	; 0x2b
 800e6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e6d8:	d015      	beq.n	800e706 <_svfiprintf_r+0xf6>
 800e6da:	9a07      	ldr	r2, [sp, #28]
 800e6dc:	4654      	mov	r4, sl
 800e6de:	2000      	movs	r0, #0
 800e6e0:	f04f 0c0a 	mov.w	ip, #10
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ea:	3b30      	subs	r3, #48	; 0x30
 800e6ec:	2b09      	cmp	r3, #9
 800e6ee:	d94d      	bls.n	800e78c <_svfiprintf_r+0x17c>
 800e6f0:	b1b0      	cbz	r0, 800e720 <_svfiprintf_r+0x110>
 800e6f2:	9207      	str	r2, [sp, #28]
 800e6f4:	e014      	b.n	800e720 <_svfiprintf_r+0x110>
 800e6f6:	eba0 0308 	sub.w	r3, r0, r8
 800e6fa:	46a2      	mov	sl, r4
 800e6fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e700:	4313      	orrs	r3, r2
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	e7d2      	b.n	800e6ac <_svfiprintf_r+0x9c>
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	1d19      	adds	r1, r3, #4
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	9103      	str	r1, [sp, #12]
 800e710:	bfbb      	ittet	lt
 800e712:	425b      	neglt	r3, r3
 800e714:	f042 0202 	orrlt.w	r2, r2, #2
 800e718:	9307      	strge	r3, [sp, #28]
 800e71a:	9307      	strlt	r3, [sp, #28]
 800e71c:	bfb8      	it	lt
 800e71e:	9204      	strlt	r2, [sp, #16]
 800e720:	7823      	ldrb	r3, [r4, #0]
 800e722:	2b2e      	cmp	r3, #46	; 0x2e
 800e724:	d10c      	bne.n	800e740 <_svfiprintf_r+0x130>
 800e726:	7863      	ldrb	r3, [r4, #1]
 800e728:	2b2a      	cmp	r3, #42	; 0x2a
 800e72a:	d134      	bne.n	800e796 <_svfiprintf_r+0x186>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	3402      	adds	r4, #2
 800e730:	1d1a      	adds	r2, r3, #4
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	9203      	str	r2, [sp, #12]
 800e738:	bfb8      	it	lt
 800e73a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e73e:	9305      	str	r3, [sp, #20]
 800e740:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e808 <_svfiprintf_r+0x1f8>
 800e744:	2203      	movs	r2, #3
 800e746:	7821      	ldrb	r1, [r4, #0]
 800e748:	4650      	mov	r0, sl
 800e74a:	f000 faf7 	bl	800ed3c <memchr>
 800e74e:	b138      	cbz	r0, 800e760 <_svfiprintf_r+0x150>
 800e750:	eba0 000a 	sub.w	r0, r0, sl
 800e754:	2240      	movs	r2, #64	; 0x40
 800e756:	9b04      	ldr	r3, [sp, #16]
 800e758:	3401      	adds	r4, #1
 800e75a:	4082      	lsls	r2, r0
 800e75c:	4313      	orrs	r3, r2
 800e75e:	9304      	str	r3, [sp, #16]
 800e760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e764:	2206      	movs	r2, #6
 800e766:	4825      	ldr	r0, [pc, #148]	; (800e7fc <_svfiprintf_r+0x1ec>)
 800e768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e76c:	f000 fae6 	bl	800ed3c <memchr>
 800e770:	2800      	cmp	r0, #0
 800e772:	d038      	beq.n	800e7e6 <_svfiprintf_r+0x1d6>
 800e774:	4b22      	ldr	r3, [pc, #136]	; (800e800 <_svfiprintf_r+0x1f0>)
 800e776:	bb1b      	cbnz	r3, 800e7c0 <_svfiprintf_r+0x1b0>
 800e778:	9b03      	ldr	r3, [sp, #12]
 800e77a:	3307      	adds	r3, #7
 800e77c:	f023 0307 	bic.w	r3, r3, #7
 800e780:	3308      	adds	r3, #8
 800e782:	9303      	str	r3, [sp, #12]
 800e784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e786:	4433      	add	r3, r6
 800e788:	9309      	str	r3, [sp, #36]	; 0x24
 800e78a:	e768      	b.n	800e65e <_svfiprintf_r+0x4e>
 800e78c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e790:	460c      	mov	r4, r1
 800e792:	2001      	movs	r0, #1
 800e794:	e7a6      	b.n	800e6e4 <_svfiprintf_r+0xd4>
 800e796:	2300      	movs	r3, #0
 800e798:	3401      	adds	r4, #1
 800e79a:	f04f 0c0a 	mov.w	ip, #10
 800e79e:	4619      	mov	r1, r3
 800e7a0:	9305      	str	r3, [sp, #20]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7a8:	3a30      	subs	r2, #48	; 0x30
 800e7aa:	2a09      	cmp	r2, #9
 800e7ac:	d903      	bls.n	800e7b6 <_svfiprintf_r+0x1a6>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d0c6      	beq.n	800e740 <_svfiprintf_r+0x130>
 800e7b2:	9105      	str	r1, [sp, #20]
 800e7b4:	e7c4      	b.n	800e740 <_svfiprintf_r+0x130>
 800e7b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7f0      	b.n	800e7a2 <_svfiprintf_r+0x192>
 800e7c0:	ab03      	add	r3, sp, #12
 800e7c2:	462a      	mov	r2, r5
 800e7c4:	a904      	add	r1, sp, #16
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	4b0e      	ldr	r3, [pc, #56]	; (800e804 <_svfiprintf_r+0x1f4>)
 800e7cc:	f3af 8000 	nop.w
 800e7d0:	1c42      	adds	r2, r0, #1
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	d1d6      	bne.n	800e784 <_svfiprintf_r+0x174>
 800e7d6:	89ab      	ldrh	r3, [r5, #12]
 800e7d8:	065b      	lsls	r3, r3, #25
 800e7da:	f53f af2d 	bmi.w	800e638 <_svfiprintf_r+0x28>
 800e7de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7e0:	b01d      	add	sp, #116	; 0x74
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	ab03      	add	r3, sp, #12
 800e7e8:	462a      	mov	r2, r5
 800e7ea:	a904      	add	r1, sp, #16
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	4b04      	ldr	r3, [pc, #16]	; (800e804 <_svfiprintf_r+0x1f4>)
 800e7f2:	f000 f91d 	bl	800ea30 <_printf_i>
 800e7f6:	e7eb      	b.n	800e7d0 <_svfiprintf_r+0x1c0>
 800e7f8:	0801033c 	.word	0x0801033c
 800e7fc:	08010346 	.word	0x08010346
 800e800:	00000000 	.word	0x00000000
 800e804:	0800e55d 	.word	0x0800e55d
 800e808:	08010342 	.word	0x08010342

0800e80c <sbrk_aligned>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	4e0e      	ldr	r6, [pc, #56]	; (800e848 <sbrk_aligned+0x3c>)
 800e810:	460c      	mov	r4, r1
 800e812:	4605      	mov	r5, r0
 800e814:	6831      	ldr	r1, [r6, #0]
 800e816:	b911      	cbnz	r1, 800e81e <sbrk_aligned+0x12>
 800e818:	f000 fa80 	bl	800ed1c <_sbrk_r>
 800e81c:	6030      	str	r0, [r6, #0]
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f000 fa7b 	bl	800ed1c <_sbrk_r>
 800e826:	1c43      	adds	r3, r0, #1
 800e828:	d00a      	beq.n	800e840 <sbrk_aligned+0x34>
 800e82a:	1cc4      	adds	r4, r0, #3
 800e82c:	f024 0403 	bic.w	r4, r4, #3
 800e830:	42a0      	cmp	r0, r4
 800e832:	d007      	beq.n	800e844 <sbrk_aligned+0x38>
 800e834:	1a21      	subs	r1, r4, r0
 800e836:	4628      	mov	r0, r5
 800e838:	f000 fa70 	bl	800ed1c <_sbrk_r>
 800e83c:	3001      	adds	r0, #1
 800e83e:	d101      	bne.n	800e844 <sbrk_aligned+0x38>
 800e840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e844:	4620      	mov	r0, r4
 800e846:	bd70      	pop	{r4, r5, r6, pc}
 800e848:	200008cc 	.word	0x200008cc

0800e84c <_malloc_r>:
 800e84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e850:	1ccd      	adds	r5, r1, #3
 800e852:	4607      	mov	r7, r0
 800e854:	f025 0503 	bic.w	r5, r5, #3
 800e858:	3508      	adds	r5, #8
 800e85a:	2d0c      	cmp	r5, #12
 800e85c:	bf38      	it	cc
 800e85e:	250c      	movcc	r5, #12
 800e860:	2d00      	cmp	r5, #0
 800e862:	db01      	blt.n	800e868 <_malloc_r+0x1c>
 800e864:	42a9      	cmp	r1, r5
 800e866:	d905      	bls.n	800e874 <_malloc_r+0x28>
 800e868:	230c      	movs	r3, #12
 800e86a:	2600      	movs	r6, #0
 800e86c:	603b      	str	r3, [r7, #0]
 800e86e:	4630      	mov	r0, r6
 800e870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e948 <_malloc_r+0xfc>
 800e878:	f000 f9fa 	bl	800ec70 <__malloc_lock>
 800e87c:	f8d8 3000 	ldr.w	r3, [r8]
 800e880:	461c      	mov	r4, r3
 800e882:	bb5c      	cbnz	r4, 800e8dc <_malloc_r+0x90>
 800e884:	4629      	mov	r1, r5
 800e886:	4638      	mov	r0, r7
 800e888:	f7ff ffc0 	bl	800e80c <sbrk_aligned>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	4604      	mov	r4, r0
 800e890:	d155      	bne.n	800e93e <_malloc_r+0xf2>
 800e892:	f8d8 4000 	ldr.w	r4, [r8]
 800e896:	4626      	mov	r6, r4
 800e898:	2e00      	cmp	r6, #0
 800e89a:	d145      	bne.n	800e928 <_malloc_r+0xdc>
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	d048      	beq.n	800e932 <_malloc_r+0xe6>
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	eb04 0903 	add.w	r9, r4, r3
 800e8aa:	f000 fa37 	bl	800ed1c <_sbrk_r>
 800e8ae:	4581      	cmp	r9, r0
 800e8b0:	d13f      	bne.n	800e932 <_malloc_r+0xe6>
 800e8b2:	6821      	ldr	r1, [r4, #0]
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	1a6d      	subs	r5, r5, r1
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7ff ffa7 	bl	800e80c <sbrk_aligned>
 800e8be:	3001      	adds	r0, #1
 800e8c0:	d037      	beq.n	800e932 <_malloc_r+0xe6>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	442b      	add	r3, r5
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d038      	beq.n	800e942 <_malloc_r+0xf6>
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	42a2      	cmp	r2, r4
 800e8d4:	d12b      	bne.n	800e92e <_malloc_r+0xe2>
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	605a      	str	r2, [r3, #4]
 800e8da:	e00f      	b.n	800e8fc <_malloc_r+0xb0>
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	1b52      	subs	r2, r2, r5
 800e8e0:	d41f      	bmi.n	800e922 <_malloc_r+0xd6>
 800e8e2:	2a0b      	cmp	r2, #11
 800e8e4:	d917      	bls.n	800e916 <_malloc_r+0xca>
 800e8e6:	1961      	adds	r1, r4, r5
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	6025      	str	r5, [r4, #0]
 800e8ec:	bf18      	it	ne
 800e8ee:	6059      	strne	r1, [r3, #4]
 800e8f0:	6863      	ldr	r3, [r4, #4]
 800e8f2:	bf08      	it	eq
 800e8f4:	f8c8 1000 	streq.w	r1, [r8]
 800e8f8:	5162      	str	r2, [r4, r5]
 800e8fa:	604b      	str	r3, [r1, #4]
 800e8fc:	f104 060b 	add.w	r6, r4, #11
 800e900:	4638      	mov	r0, r7
 800e902:	f000 f9bb 	bl	800ec7c <__malloc_unlock>
 800e906:	1d23      	adds	r3, r4, #4
 800e908:	f026 0607 	bic.w	r6, r6, #7
 800e90c:	1af2      	subs	r2, r6, r3
 800e90e:	d0ae      	beq.n	800e86e <_malloc_r+0x22>
 800e910:	1b9b      	subs	r3, r3, r6
 800e912:	50a3      	str	r3, [r4, r2]
 800e914:	e7ab      	b.n	800e86e <_malloc_r+0x22>
 800e916:	42a3      	cmp	r3, r4
 800e918:	6862      	ldr	r2, [r4, #4]
 800e91a:	d1dd      	bne.n	800e8d8 <_malloc_r+0x8c>
 800e91c:	f8c8 2000 	str.w	r2, [r8]
 800e920:	e7ec      	b.n	800e8fc <_malloc_r+0xb0>
 800e922:	4623      	mov	r3, r4
 800e924:	6864      	ldr	r4, [r4, #4]
 800e926:	e7ac      	b.n	800e882 <_malloc_r+0x36>
 800e928:	4634      	mov	r4, r6
 800e92a:	6876      	ldr	r6, [r6, #4]
 800e92c:	e7b4      	b.n	800e898 <_malloc_r+0x4c>
 800e92e:	4613      	mov	r3, r2
 800e930:	e7cc      	b.n	800e8cc <_malloc_r+0x80>
 800e932:	230c      	movs	r3, #12
 800e934:	4638      	mov	r0, r7
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	f000 f9a0 	bl	800ec7c <__malloc_unlock>
 800e93c:	e797      	b.n	800e86e <_malloc_r+0x22>
 800e93e:	6025      	str	r5, [r4, #0]
 800e940:	e7dc      	b.n	800e8fc <_malloc_r+0xb0>
 800e942:	605b      	str	r3, [r3, #4]
 800e944:	deff      	udf	#255	; 0xff
 800e946:	bf00      	nop
 800e948:	200008c8 	.word	0x200008c8

0800e94c <_printf_common>:
 800e94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	4616      	mov	r6, r2
 800e952:	4699      	mov	r9, r3
 800e954:	688a      	ldr	r2, [r1, #8]
 800e956:	4607      	mov	r7, r0
 800e958:	690b      	ldr	r3, [r1, #16]
 800e95a:	460c      	mov	r4, r1
 800e95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e960:	4293      	cmp	r3, r2
 800e962:	bfb8      	it	lt
 800e964:	4613      	movlt	r3, r2
 800e966:	6033      	str	r3, [r6, #0]
 800e968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e96c:	b10a      	cbz	r2, 800e972 <_printf_common+0x26>
 800e96e:	3301      	adds	r3, #1
 800e970:	6033      	str	r3, [r6, #0]
 800e972:	6823      	ldr	r3, [r4, #0]
 800e974:	0699      	lsls	r1, r3, #26
 800e976:	bf42      	ittt	mi
 800e978:	6833      	ldrmi	r3, [r6, #0]
 800e97a:	3302      	addmi	r3, #2
 800e97c:	6033      	strmi	r3, [r6, #0]
 800e97e:	6825      	ldr	r5, [r4, #0]
 800e980:	f015 0506 	ands.w	r5, r5, #6
 800e984:	d106      	bne.n	800e994 <_printf_common+0x48>
 800e986:	f104 0a19 	add.w	sl, r4, #25
 800e98a:	68e3      	ldr	r3, [r4, #12]
 800e98c:	6832      	ldr	r2, [r6, #0]
 800e98e:	1a9b      	subs	r3, r3, r2
 800e990:	42ab      	cmp	r3, r5
 800e992:	dc2b      	bgt.n	800e9ec <_printf_common+0xa0>
 800e994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e998:	1e13      	subs	r3, r2, #0
 800e99a:	6822      	ldr	r2, [r4, #0]
 800e99c:	bf18      	it	ne
 800e99e:	2301      	movne	r3, #1
 800e9a0:	0692      	lsls	r2, r2, #26
 800e9a2:	d430      	bmi.n	800ea06 <_printf_common+0xba>
 800e9a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	47c0      	blx	r8
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	d023      	beq.n	800e9fa <_printf_common+0xae>
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	341a      	adds	r4, #26
 800e9b6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e9ba:	f003 0306 	and.w	r3, r3, #6
 800e9be:	2b04      	cmp	r3, #4
 800e9c0:	bf0a      	itet	eq
 800e9c2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e9c6:	2500      	movne	r5, #0
 800e9c8:	6833      	ldreq	r3, [r6, #0]
 800e9ca:	f04f 0600 	mov.w	r6, #0
 800e9ce:	bf08      	it	eq
 800e9d0:	1aed      	subeq	r5, r5, r3
 800e9d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e9d6:	bf08      	it	eq
 800e9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	bfc4      	itt	gt
 800e9e0:	1a9b      	subgt	r3, r3, r2
 800e9e2:	18ed      	addgt	r5, r5, r3
 800e9e4:	42b5      	cmp	r5, r6
 800e9e6:	d11a      	bne.n	800ea1e <_printf_common+0xd2>
 800e9e8:	2000      	movs	r0, #0
 800e9ea:	e008      	b.n	800e9fe <_printf_common+0xb2>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	4652      	mov	r2, sl
 800e9f0:	4649      	mov	r1, r9
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	47c0      	blx	r8
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d103      	bne.n	800ea02 <_printf_common+0xb6>
 800e9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea02:	3501      	adds	r5, #1
 800ea04:	e7c1      	b.n	800e98a <_printf_common+0x3e>
 800ea06:	18e1      	adds	r1, r4, r3
 800ea08:	1c5a      	adds	r2, r3, #1
 800ea0a:	2030      	movs	r0, #48	; 0x30
 800ea0c:	3302      	adds	r3, #2
 800ea0e:	4422      	add	r2, r4
 800ea10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea1c:	e7c2      	b.n	800e9a4 <_printf_common+0x58>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4622      	mov	r2, r4
 800ea22:	4649      	mov	r1, r9
 800ea24:	4638      	mov	r0, r7
 800ea26:	47c0      	blx	r8
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d0e6      	beq.n	800e9fa <_printf_common+0xae>
 800ea2c:	3601      	adds	r6, #1
 800ea2e:	e7d9      	b.n	800e9e4 <_printf_common+0x98>

0800ea30 <_printf_i>:
 800ea30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea34:	7e0f      	ldrb	r7, [r1, #24]
 800ea36:	4691      	mov	r9, r2
 800ea38:	4680      	mov	r8, r0
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	2f78      	cmp	r7, #120	; 0x78
 800ea3e:	469a      	mov	sl, r3
 800ea40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea46:	d807      	bhi.n	800ea58 <_printf_i+0x28>
 800ea48:	2f62      	cmp	r7, #98	; 0x62
 800ea4a:	d80a      	bhi.n	800ea62 <_printf_i+0x32>
 800ea4c:	2f00      	cmp	r7, #0
 800ea4e:	f000 80d3 	beq.w	800ebf8 <_printf_i+0x1c8>
 800ea52:	2f58      	cmp	r7, #88	; 0x58
 800ea54:	f000 80bf 	beq.w	800ebd6 <_printf_i+0x1a6>
 800ea58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea60:	e03a      	b.n	800ead8 <_printf_i+0xa8>
 800ea62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea66:	2b15      	cmp	r3, #21
 800ea68:	d8f6      	bhi.n	800ea58 <_printf_i+0x28>
 800ea6a:	a101      	add	r1, pc, #4	; (adr r1, 800ea70 <_printf_i+0x40>)
 800ea6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea70:	0800eac9 	.word	0x0800eac9
 800ea74:	0800eadd 	.word	0x0800eadd
 800ea78:	0800ea59 	.word	0x0800ea59
 800ea7c:	0800ea59 	.word	0x0800ea59
 800ea80:	0800ea59 	.word	0x0800ea59
 800ea84:	0800ea59 	.word	0x0800ea59
 800ea88:	0800eadd 	.word	0x0800eadd
 800ea8c:	0800ea59 	.word	0x0800ea59
 800ea90:	0800ea59 	.word	0x0800ea59
 800ea94:	0800ea59 	.word	0x0800ea59
 800ea98:	0800ea59 	.word	0x0800ea59
 800ea9c:	0800ebdf 	.word	0x0800ebdf
 800eaa0:	0800eb09 	.word	0x0800eb09
 800eaa4:	0800eb9b 	.word	0x0800eb9b
 800eaa8:	0800ea59 	.word	0x0800ea59
 800eaac:	0800ea59 	.word	0x0800ea59
 800eab0:	0800ec01 	.word	0x0800ec01
 800eab4:	0800ea59 	.word	0x0800ea59
 800eab8:	0800eb09 	.word	0x0800eb09
 800eabc:	0800ea59 	.word	0x0800ea59
 800eac0:	0800ea59 	.word	0x0800ea59
 800eac4:	0800eba3 	.word	0x0800eba3
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	1d1a      	adds	r2, r3, #4
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	602a      	str	r2, [r5, #0]
 800ead0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ead4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ead8:	2301      	movs	r3, #1
 800eada:	e09e      	b.n	800ec1a <_printf_i+0x1ea>
 800eadc:	6820      	ldr	r0, [r4, #0]
 800eade:	682b      	ldr	r3, [r5, #0]
 800eae0:	0607      	lsls	r7, r0, #24
 800eae2:	f103 0104 	add.w	r1, r3, #4
 800eae6:	6029      	str	r1, [r5, #0]
 800eae8:	d501      	bpl.n	800eaee <_printf_i+0xbe>
 800eaea:	681e      	ldr	r6, [r3, #0]
 800eaec:	e003      	b.n	800eaf6 <_printf_i+0xc6>
 800eaee:	0646      	lsls	r6, r0, #25
 800eaf0:	d5fb      	bpl.n	800eaea <_printf_i+0xba>
 800eaf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	da03      	bge.n	800eb02 <_printf_i+0xd2>
 800eafa:	232d      	movs	r3, #45	; 0x2d
 800eafc:	4276      	negs	r6, r6
 800eafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb02:	4859      	ldr	r0, [pc, #356]	; (800ec68 <_printf_i+0x238>)
 800eb04:	230a      	movs	r3, #10
 800eb06:	e012      	b.n	800eb2e <_printf_i+0xfe>
 800eb08:	682b      	ldr	r3, [r5, #0]
 800eb0a:	6820      	ldr	r0, [r4, #0]
 800eb0c:	1d19      	adds	r1, r3, #4
 800eb0e:	6029      	str	r1, [r5, #0]
 800eb10:	0605      	lsls	r5, r0, #24
 800eb12:	d501      	bpl.n	800eb18 <_printf_i+0xe8>
 800eb14:	681e      	ldr	r6, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <_printf_i+0xee>
 800eb18:	0641      	lsls	r1, r0, #25
 800eb1a:	d5fb      	bpl.n	800eb14 <_printf_i+0xe4>
 800eb1c:	881e      	ldrh	r6, [r3, #0]
 800eb1e:	2f6f      	cmp	r7, #111	; 0x6f
 800eb20:	4851      	ldr	r0, [pc, #324]	; (800ec68 <_printf_i+0x238>)
 800eb22:	bf0c      	ite	eq
 800eb24:	2308      	moveq	r3, #8
 800eb26:	230a      	movne	r3, #10
 800eb28:	2100      	movs	r1, #0
 800eb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb2e:	6865      	ldr	r5, [r4, #4]
 800eb30:	2d00      	cmp	r5, #0
 800eb32:	60a5      	str	r5, [r4, #8]
 800eb34:	bfa2      	ittt	ge
 800eb36:	6821      	ldrge	r1, [r4, #0]
 800eb38:	f021 0104 	bicge.w	r1, r1, #4
 800eb3c:	6021      	strge	r1, [r4, #0]
 800eb3e:	b90e      	cbnz	r6, 800eb44 <_printf_i+0x114>
 800eb40:	2d00      	cmp	r5, #0
 800eb42:	d04a      	beq.n	800ebda <_printf_i+0x1aa>
 800eb44:	4615      	mov	r5, r2
 800eb46:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb4a:	fb03 6711 	mls	r7, r3, r1, r6
 800eb4e:	5dc7      	ldrb	r7, [r0, r7]
 800eb50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb54:	4637      	mov	r7, r6
 800eb56:	460e      	mov	r6, r1
 800eb58:	42bb      	cmp	r3, r7
 800eb5a:	d9f4      	bls.n	800eb46 <_printf_i+0x116>
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	d10b      	bne.n	800eb78 <_printf_i+0x148>
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	07de      	lsls	r6, r3, #31
 800eb64:	d508      	bpl.n	800eb78 <_printf_i+0x148>
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	6861      	ldr	r1, [r4, #4]
 800eb6a:	4299      	cmp	r1, r3
 800eb6c:	bfde      	ittt	le
 800eb6e:	2330      	movle	r3, #48	; 0x30
 800eb70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eb78:	1b52      	subs	r2, r2, r5
 800eb7a:	6122      	str	r2, [r4, #16]
 800eb7c:	464b      	mov	r3, r9
 800eb7e:	aa03      	add	r2, sp, #12
 800eb80:	4621      	mov	r1, r4
 800eb82:	4640      	mov	r0, r8
 800eb84:	f8cd a000 	str.w	sl, [sp]
 800eb88:	f7ff fee0 	bl	800e94c <_printf_common>
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d149      	bne.n	800ec24 <_printf_i+0x1f4>
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb94:	b004      	add	sp, #16
 800eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	f043 0320 	orr.w	r3, r3, #32
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	2778      	movs	r7, #120	; 0x78
 800eba4:	4831      	ldr	r0, [pc, #196]	; (800ec6c <_printf_i+0x23c>)
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebac:	061f      	lsls	r7, r3, #24
 800ebae:	6829      	ldr	r1, [r5, #0]
 800ebb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebb4:	d402      	bmi.n	800ebbc <_printf_i+0x18c>
 800ebb6:	065f      	lsls	r7, r3, #25
 800ebb8:	bf48      	it	mi
 800ebba:	b2b6      	uxthmi	r6, r6
 800ebbc:	07df      	lsls	r7, r3, #31
 800ebbe:	6029      	str	r1, [r5, #0]
 800ebc0:	bf44      	itt	mi
 800ebc2:	f043 0320 	orrmi.w	r3, r3, #32
 800ebc6:	6023      	strmi	r3, [r4, #0]
 800ebc8:	b91e      	cbnz	r6, 800ebd2 <_printf_i+0x1a2>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	f023 0320 	bic.w	r3, r3, #32
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	2310      	movs	r3, #16
 800ebd4:	e7a8      	b.n	800eb28 <_printf_i+0xf8>
 800ebd6:	4824      	ldr	r0, [pc, #144]	; (800ec68 <_printf_i+0x238>)
 800ebd8:	e7e5      	b.n	800eba6 <_printf_i+0x176>
 800ebda:	4615      	mov	r5, r2
 800ebdc:	e7be      	b.n	800eb5c <_printf_i+0x12c>
 800ebde:	682b      	ldr	r3, [r5, #0]
 800ebe0:	6826      	ldr	r6, [r4, #0]
 800ebe2:	1d18      	adds	r0, r3, #4
 800ebe4:	6961      	ldr	r1, [r4, #20]
 800ebe6:	6028      	str	r0, [r5, #0]
 800ebe8:	0635      	lsls	r5, r6, #24
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	d501      	bpl.n	800ebf2 <_printf_i+0x1c2>
 800ebee:	6019      	str	r1, [r3, #0]
 800ebf0:	e002      	b.n	800ebf8 <_printf_i+0x1c8>
 800ebf2:	0670      	lsls	r0, r6, #25
 800ebf4:	d5fb      	bpl.n	800ebee <_printf_i+0x1be>
 800ebf6:	8019      	strh	r1, [r3, #0]
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	4615      	mov	r5, r2
 800ebfc:	6123      	str	r3, [r4, #16]
 800ebfe:	e7bd      	b.n	800eb7c <_printf_i+0x14c>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	2100      	movs	r1, #0
 800ec04:	1d1a      	adds	r2, r3, #4
 800ec06:	602a      	str	r2, [r5, #0]
 800ec08:	681d      	ldr	r5, [r3, #0]
 800ec0a:	6862      	ldr	r2, [r4, #4]
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f000 f895 	bl	800ed3c <memchr>
 800ec12:	b108      	cbz	r0, 800ec18 <_printf_i+0x1e8>
 800ec14:	1b40      	subs	r0, r0, r5
 800ec16:	6060      	str	r0, [r4, #4]
 800ec18:	6863      	ldr	r3, [r4, #4]
 800ec1a:	6123      	str	r3, [r4, #16]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec22:	e7ab      	b.n	800eb7c <_printf_i+0x14c>
 800ec24:	6923      	ldr	r3, [r4, #16]
 800ec26:	462a      	mov	r2, r5
 800ec28:	4649      	mov	r1, r9
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	47d0      	blx	sl
 800ec2e:	3001      	adds	r0, #1
 800ec30:	d0ae      	beq.n	800eb90 <_printf_i+0x160>
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	079b      	lsls	r3, r3, #30
 800ec36:	d413      	bmi.n	800ec60 <_printf_i+0x230>
 800ec38:	68e0      	ldr	r0, [r4, #12]
 800ec3a:	9b03      	ldr	r3, [sp, #12]
 800ec3c:	4298      	cmp	r0, r3
 800ec3e:	bfb8      	it	lt
 800ec40:	4618      	movlt	r0, r3
 800ec42:	e7a7      	b.n	800eb94 <_printf_i+0x164>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4632      	mov	r2, r6
 800ec48:	4649      	mov	r1, r9
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	47d0      	blx	sl
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d09e      	beq.n	800eb90 <_printf_i+0x160>
 800ec52:	3501      	adds	r5, #1
 800ec54:	68e3      	ldr	r3, [r4, #12]
 800ec56:	9903      	ldr	r1, [sp, #12]
 800ec58:	1a5b      	subs	r3, r3, r1
 800ec5a:	42ab      	cmp	r3, r5
 800ec5c:	dcf2      	bgt.n	800ec44 <_printf_i+0x214>
 800ec5e:	e7eb      	b.n	800ec38 <_printf_i+0x208>
 800ec60:	2500      	movs	r5, #0
 800ec62:	f104 0619 	add.w	r6, r4, #25
 800ec66:	e7f5      	b.n	800ec54 <_printf_i+0x224>
 800ec68:	0801034d 	.word	0x0801034d
 800ec6c:	0801035e 	.word	0x0801035e

0800ec70 <__malloc_lock>:
 800ec70:	4801      	ldr	r0, [pc, #4]	; (800ec78 <__malloc_lock+0x8>)
 800ec72:	f7ff bc71 	b.w	800e558 <__retarget_lock_acquire_recursive>
 800ec76:	bf00      	nop
 800ec78:	200008c4 	.word	0x200008c4

0800ec7c <__malloc_unlock>:
 800ec7c:	4801      	ldr	r0, [pc, #4]	; (800ec84 <__malloc_unlock+0x8>)
 800ec7e:	f7ff bc6c 	b.w	800e55a <__retarget_lock_release_recursive>
 800ec82:	bf00      	nop
 800ec84:	200008c4 	.word	0x200008c4

0800ec88 <_realloc_r>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	4680      	mov	r8, r0
 800ec8e:	4614      	mov	r4, r2
 800ec90:	460e      	mov	r6, r1
 800ec92:	b921      	cbnz	r1, 800ec9e <_realloc_r+0x16>
 800ec94:	4611      	mov	r1, r2
 800ec96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9a:	f7ff bdd7 	b.w	800e84c <_malloc_r>
 800ec9e:	b92a      	cbnz	r2, 800ecac <_realloc_r+0x24>
 800eca0:	4625      	mov	r5, r4
 800eca2:	f000 f867 	bl	800ed74 <_free_r>
 800eca6:	4628      	mov	r0, r5
 800eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecac:	f000 f8ae 	bl	800ee0c <_malloc_usable_size_r>
 800ecb0:	4284      	cmp	r4, r0
 800ecb2:	4607      	mov	r7, r0
 800ecb4:	d802      	bhi.n	800ecbc <_realloc_r+0x34>
 800ecb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecba:	d812      	bhi.n	800ece2 <_realloc_r+0x5a>
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	f7ff fdc4 	bl	800e84c <_malloc_r>
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d0ed      	beq.n	800eca6 <_realloc_r+0x1e>
 800ecca:	42bc      	cmp	r4, r7
 800eccc:	4622      	mov	r2, r4
 800ecce:	4631      	mov	r1, r6
 800ecd0:	bf28      	it	cs
 800ecd2:	463a      	movcs	r2, r7
 800ecd4:	f000 f840 	bl	800ed58 <memcpy>
 800ecd8:	4631      	mov	r1, r6
 800ecda:	4640      	mov	r0, r8
 800ecdc:	f000 f84a 	bl	800ed74 <_free_r>
 800ece0:	e7e1      	b.n	800eca6 <_realloc_r+0x1e>
 800ece2:	4635      	mov	r5, r6
 800ece4:	e7df      	b.n	800eca6 <_realloc_r+0x1e>

0800ece6 <memmove>:
 800ece6:	4288      	cmp	r0, r1
 800ece8:	b510      	push	{r4, lr}
 800ecea:	eb01 0402 	add.w	r4, r1, r2
 800ecee:	d902      	bls.n	800ecf6 <memmove+0x10>
 800ecf0:	4284      	cmp	r4, r0
 800ecf2:	4623      	mov	r3, r4
 800ecf4:	d807      	bhi.n	800ed06 <memmove+0x20>
 800ecf6:	1e43      	subs	r3, r0, #1
 800ecf8:	42a1      	cmp	r1, r4
 800ecfa:	d008      	beq.n	800ed0e <memmove+0x28>
 800ecfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed00:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed04:	e7f8      	b.n	800ecf8 <memmove+0x12>
 800ed06:	4402      	add	r2, r0
 800ed08:	4601      	mov	r1, r0
 800ed0a:	428a      	cmp	r2, r1
 800ed0c:	d100      	bne.n	800ed10 <memmove+0x2a>
 800ed0e:	bd10      	pop	{r4, pc}
 800ed10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed18:	e7f7      	b.n	800ed0a <memmove+0x24>
	...

0800ed1c <_sbrk_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	2300      	movs	r3, #0
 800ed20:	4d05      	ldr	r5, [pc, #20]	; (800ed38 <_sbrk_r+0x1c>)
 800ed22:	4604      	mov	r4, r0
 800ed24:	4608      	mov	r0, r1
 800ed26:	602b      	str	r3, [r5, #0]
 800ed28:	f7f5 fdce 	bl	80048c8 <_sbrk>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d102      	bne.n	800ed36 <_sbrk_r+0x1a>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	b103      	cbz	r3, 800ed36 <_sbrk_r+0x1a>
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	200008d0 	.word	0x200008d0

0800ed3c <memchr>:
 800ed3c:	b2c9      	uxtb	r1, r1
 800ed3e:	4402      	add	r2, r0
 800ed40:	b510      	push	{r4, lr}
 800ed42:	4290      	cmp	r0, r2
 800ed44:	4603      	mov	r3, r0
 800ed46:	d101      	bne.n	800ed4c <memchr+0x10>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	e003      	b.n	800ed54 <memchr+0x18>
 800ed4c:	781c      	ldrb	r4, [r3, #0]
 800ed4e:	3001      	adds	r0, #1
 800ed50:	428c      	cmp	r4, r1
 800ed52:	d1f6      	bne.n	800ed42 <memchr+0x6>
 800ed54:	4618      	mov	r0, r3
 800ed56:	bd10      	pop	{r4, pc}

0800ed58 <memcpy>:
 800ed58:	440a      	add	r2, r1
 800ed5a:	1e43      	subs	r3, r0, #1
 800ed5c:	4291      	cmp	r1, r2
 800ed5e:	d100      	bne.n	800ed62 <memcpy+0xa>
 800ed60:	4770      	bx	lr
 800ed62:	b510      	push	{r4, lr}
 800ed64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed68:	4291      	cmp	r1, r2
 800ed6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed6e:	d1f9      	bne.n	800ed64 <memcpy+0xc>
 800ed70:	bd10      	pop	{r4, pc}
	...

0800ed74 <_free_r>:
 800ed74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed76:	2900      	cmp	r1, #0
 800ed78:	d043      	beq.n	800ee02 <_free_r+0x8e>
 800ed7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed7e:	1f0c      	subs	r4, r1, #4
 800ed80:	9001      	str	r0, [sp, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	bfb8      	it	lt
 800ed86:	18e4      	addlt	r4, r4, r3
 800ed88:	f7ff ff72 	bl	800ec70 <__malloc_lock>
 800ed8c:	4a1e      	ldr	r2, [pc, #120]	; (800ee08 <_free_r+0x94>)
 800ed8e:	9801      	ldr	r0, [sp, #4]
 800ed90:	6813      	ldr	r3, [r2, #0]
 800ed92:	b933      	cbnz	r3, 800eda2 <_free_r+0x2e>
 800ed94:	6063      	str	r3, [r4, #4]
 800ed96:	6014      	str	r4, [r2, #0]
 800ed98:	b003      	add	sp, #12
 800ed9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed9e:	f7ff bf6d 	b.w	800ec7c <__malloc_unlock>
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	d908      	bls.n	800edb8 <_free_r+0x44>
 800eda6:	6825      	ldr	r5, [r4, #0]
 800eda8:	1961      	adds	r1, r4, r5
 800edaa:	428b      	cmp	r3, r1
 800edac:	bf01      	itttt	eq
 800edae:	6819      	ldreq	r1, [r3, #0]
 800edb0:	685b      	ldreq	r3, [r3, #4]
 800edb2:	1949      	addeq	r1, r1, r5
 800edb4:	6021      	streq	r1, [r4, #0]
 800edb6:	e7ed      	b.n	800ed94 <_free_r+0x20>
 800edb8:	461a      	mov	r2, r3
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	b10b      	cbz	r3, 800edc2 <_free_r+0x4e>
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	d9fa      	bls.n	800edb8 <_free_r+0x44>
 800edc2:	6811      	ldr	r1, [r2, #0]
 800edc4:	1855      	adds	r5, r2, r1
 800edc6:	42a5      	cmp	r5, r4
 800edc8:	d10b      	bne.n	800ede2 <_free_r+0x6e>
 800edca:	6824      	ldr	r4, [r4, #0]
 800edcc:	4421      	add	r1, r4
 800edce:	1854      	adds	r4, r2, r1
 800edd0:	6011      	str	r1, [r2, #0]
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	d1e0      	bne.n	800ed98 <_free_r+0x24>
 800edd6:	681c      	ldr	r4, [r3, #0]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	440c      	add	r4, r1
 800eddc:	6053      	str	r3, [r2, #4]
 800edde:	6014      	str	r4, [r2, #0]
 800ede0:	e7da      	b.n	800ed98 <_free_r+0x24>
 800ede2:	d902      	bls.n	800edea <_free_r+0x76>
 800ede4:	230c      	movs	r3, #12
 800ede6:	6003      	str	r3, [r0, #0]
 800ede8:	e7d6      	b.n	800ed98 <_free_r+0x24>
 800edea:	6825      	ldr	r5, [r4, #0]
 800edec:	1961      	adds	r1, r4, r5
 800edee:	428b      	cmp	r3, r1
 800edf0:	bf02      	ittt	eq
 800edf2:	6819      	ldreq	r1, [r3, #0]
 800edf4:	685b      	ldreq	r3, [r3, #4]
 800edf6:	1949      	addeq	r1, r1, r5
 800edf8:	6063      	str	r3, [r4, #4]
 800edfa:	bf08      	it	eq
 800edfc:	6021      	streq	r1, [r4, #0]
 800edfe:	6054      	str	r4, [r2, #4]
 800ee00:	e7ca      	b.n	800ed98 <_free_r+0x24>
 800ee02:	b003      	add	sp, #12
 800ee04:	bd30      	pop	{r4, r5, pc}
 800ee06:	bf00      	nop
 800ee08:	200008c8 	.word	0x200008c8

0800ee0c <_malloc_usable_size_r>:
 800ee0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee10:	1f18      	subs	r0, r3, #4
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	bfbc      	itt	lt
 800ee16:	580b      	ldrlt	r3, [r1, r0]
 800ee18:	18c0      	addlt	r0, r0, r3
 800ee1a:	4770      	bx	lr
 800ee1c:	0000      	movs	r0, r0
	...

0800ee20 <tan>:
 800ee20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee22:	ec53 2b10 	vmov	r2, r3, d0
 800ee26:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ee2a:	4815      	ldr	r0, [pc, #84]	; (800ee80 <tan+0x60>)
 800ee2c:	4281      	cmp	r1, r0
 800ee2e:	dc07      	bgt.n	800ee40 <tan+0x20>
 800ee30:	2001      	movs	r0, #1
 800ee32:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800ee78 <tan+0x58>
 800ee36:	b005      	add	sp, #20
 800ee38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee3c:	f000 bd80 	b.w	800f940 <__kernel_tan>
 800ee40:	4810      	ldr	r0, [pc, #64]	; (800ee84 <tan+0x64>)
 800ee42:	4281      	cmp	r1, r0
 800ee44:	dd09      	ble.n	800ee5a <tan+0x3a>
 800ee46:	ee10 0a10 	vmov	r0, s0
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	f7f1 fa2c 	bl	80002a8 <__aeabi_dsub>
 800ee50:	ec41 0b10 	vmov	d0, r0, r1
 800ee54:	b005      	add	sp, #20
 800ee56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee5a:	4668      	mov	r0, sp
 800ee5c:	f000 f814 	bl	800ee88 <__ieee754_rem_pio2>
 800ee60:	0040      	lsls	r0, r0, #1
 800ee62:	f000 0002 	and.w	r0, r0, #2
 800ee66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee6a:	ed9d 0b00 	vldr	d0, [sp]
 800ee6e:	f1c0 0001 	rsb	r0, r0, #1
 800ee72:	f000 fd65 	bl	800f940 <__kernel_tan>
 800ee76:	e7ed      	b.n	800ee54 <tan+0x34>
	...
 800ee80:	3fe921fb 	.word	0x3fe921fb
 800ee84:	7fefffff 	.word	0x7fefffff

0800ee88 <__ieee754_rem_pio2>:
 800ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8c:	ec55 4b10 	vmov	r4, r5, d0
 800ee90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ee94:	4bca      	ldr	r3, [pc, #808]	; (800f1c0 <__ieee754_rem_pio2+0x338>)
 800ee96:	4682      	mov	sl, r0
 800ee98:	4598      	cmp	r8, r3
 800ee9a:	ed2d 8b02 	vpush	{d8}
 800ee9e:	b08b      	sub	sp, #44	; 0x2c
 800eea0:	9502      	str	r5, [sp, #8]
 800eea2:	dc08      	bgt.n	800eeb6 <__ieee754_rem_pio2+0x2e>
 800eea4:	2200      	movs	r2, #0
 800eea6:	2300      	movs	r3, #0
 800eea8:	ed80 0b00 	vstr	d0, [r0]
 800eeac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eeb0:	f04f 0b00 	mov.w	fp, #0
 800eeb4:	e028      	b.n	800ef08 <__ieee754_rem_pio2+0x80>
 800eeb6:	4bc3      	ldr	r3, [pc, #780]	; (800f1c4 <__ieee754_rem_pio2+0x33c>)
 800eeb8:	4598      	cmp	r8, r3
 800eeba:	dc78      	bgt.n	800efae <__ieee754_rem_pio2+0x126>
 800eebc:	9b02      	ldr	r3, [sp, #8]
 800eebe:	ee10 0a10 	vmov	r0, s0
 800eec2:	4ec1      	ldr	r6, [pc, #772]	; (800f1c8 <__ieee754_rem_pio2+0x340>)
 800eec4:	4629      	mov	r1, r5
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	a3af      	add	r3, pc, #700	; (adr r3, 800f188 <__ieee754_rem_pio2+0x300>)
 800eeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eece:	dd39      	ble.n	800ef44 <__ieee754_rem_pio2+0xbc>
 800eed0:	f7f1 f9ea 	bl	80002a8 <__aeabi_dsub>
 800eed4:	45b0      	cmp	r8, r6
 800eed6:	4604      	mov	r4, r0
 800eed8:	460d      	mov	r5, r1
 800eeda:	d01b      	beq.n	800ef14 <__ieee754_rem_pio2+0x8c>
 800eedc:	a3ac      	add	r3, pc, #688	; (adr r3, 800f190 <__ieee754_rem_pio2+0x308>)
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	f7f1 f9e1 	bl	80002a8 <__aeabi_dsub>
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	4620      	mov	r0, r4
 800eeec:	4629      	mov	r1, r5
 800eeee:	e9ca 2300 	strd	r2, r3, [sl]
 800eef2:	f7f1 f9d9 	bl	80002a8 <__aeabi_dsub>
 800eef6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f190 <__ieee754_rem_pio2+0x308>)
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	f04f 0b01 	mov.w	fp, #1
 800ef00:	f7f1 f9d2 	bl	80002a8 <__aeabi_dsub>
 800ef04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef08:	4658      	mov	r0, fp
 800ef0a:	b00b      	add	sp, #44	; 0x2c
 800ef0c:	ecbd 8b02 	vpop	{d8}
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef14:	a3a0      	add	r3, pc, #640	; (adr r3, 800f198 <__ieee754_rem_pio2+0x310>)
 800ef16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1a:	f7f1 f9c5 	bl	80002a8 <__aeabi_dsub>
 800ef1e:	4604      	mov	r4, r0
 800ef20:	460d      	mov	r5, r1
 800ef22:	a39f      	add	r3, pc, #636	; (adr r3, 800f1a0 <__ieee754_rem_pio2+0x318>)
 800ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef28:	f7f1 f9be 	bl	80002a8 <__aeabi_dsub>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4620      	mov	r0, r4
 800ef32:	4629      	mov	r1, r5
 800ef34:	e9ca 2300 	strd	r2, r3, [sl]
 800ef38:	f7f1 f9b6 	bl	80002a8 <__aeabi_dsub>
 800ef3c:	a398      	add	r3, pc, #608	; (adr r3, 800f1a0 <__ieee754_rem_pio2+0x318>)
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	e7db      	b.n	800eefc <__ieee754_rem_pio2+0x74>
 800ef44:	f7f1 f9b2 	bl	80002ac <__adddf3>
 800ef48:	45b0      	cmp	r8, r6
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	d016      	beq.n	800ef7e <__ieee754_rem_pio2+0xf6>
 800ef50:	a38f      	add	r3, pc, #572	; (adr r3, 800f190 <__ieee754_rem_pio2+0x308>)
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	f7f1 f9a9 	bl	80002ac <__adddf3>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4620      	mov	r0, r4
 800ef60:	4629      	mov	r1, r5
 800ef62:	e9ca 2300 	strd	r2, r3, [sl]
 800ef66:	f7f1 f99f 	bl	80002a8 <__aeabi_dsub>
 800ef6a:	a389      	add	r3, pc, #548	; (adr r3, 800f190 <__ieee754_rem_pio2+0x308>)
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	f7f1 f99c 	bl	80002ac <__adddf3>
 800ef74:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ef78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef7c:	e7c4      	b.n	800ef08 <__ieee754_rem_pio2+0x80>
 800ef7e:	a386      	add	r3, pc, #536	; (adr r3, 800f198 <__ieee754_rem_pio2+0x310>)
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f7f1 f992 	bl	80002ac <__adddf3>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	460d      	mov	r5, r1
 800ef8c:	a384      	add	r3, pc, #528	; (adr r3, 800f1a0 <__ieee754_rem_pio2+0x318>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 f98b 	bl	80002ac <__adddf3>
 800ef96:	4602      	mov	r2, r0
 800ef98:	460b      	mov	r3, r1
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	e9ca 2300 	strd	r2, r3, [sl]
 800efa2:	f7f1 f981 	bl	80002a8 <__aeabi_dsub>
 800efa6:	a37e      	add	r3, pc, #504	; (adr r3, 800f1a0 <__ieee754_rem_pio2+0x318>)
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	e7e0      	b.n	800ef70 <__ieee754_rem_pio2+0xe8>
 800efae:	4b87      	ldr	r3, [pc, #540]	; (800f1cc <__ieee754_rem_pio2+0x344>)
 800efb0:	4598      	cmp	r8, r3
 800efb2:	f300 80d8 	bgt.w	800f166 <__ieee754_rem_pio2+0x2de>
 800efb6:	f000 fecd 	bl	800fd54 <fabs>
 800efba:	ee10 0a10 	vmov	r0, s0
 800efbe:	ec55 4b10 	vmov	r4, r5, d0
 800efc2:	a379      	add	r3, pc, #484	; (adr r3, 800f1a8 <__ieee754_rem_pio2+0x320>)
 800efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 fb25 	bl	8000618 <__aeabi_dmul>
 800efce:	2200      	movs	r2, #0
 800efd0:	4b7f      	ldr	r3, [pc, #508]	; (800f1d0 <__ieee754_rem_pio2+0x348>)
 800efd2:	f7f1 f96b 	bl	80002ac <__adddf3>
 800efd6:	f7f1 fdb9 	bl	8000b4c <__aeabi_d2iz>
 800efda:	4683      	mov	fp, r0
 800efdc:	f7f1 fab2 	bl	8000544 <__aeabi_i2d>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	ec43 2b18 	vmov	d8, r2, r3
 800efe8:	a367      	add	r3, pc, #412	; (adr r3, 800f188 <__ieee754_rem_pio2+0x300>)
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	f7f1 fb13 	bl	8000618 <__aeabi_dmul>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	4620      	mov	r0, r4
 800eff8:	4629      	mov	r1, r5
 800effa:	f7f1 f955 	bl	80002a8 <__aeabi_dsub>
 800effe:	4606      	mov	r6, r0
 800f000:	460f      	mov	r7, r1
 800f002:	a363      	add	r3, pc, #396	; (adr r3, 800f190 <__ieee754_rem_pio2+0x308>)
 800f004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f008:	ec51 0b18 	vmov	r0, r1, d8
 800f00c:	f7f1 fb04 	bl	8000618 <__aeabi_dmul>
 800f010:	f1bb 0f1f 	cmp.w	fp, #31
 800f014:	4604      	mov	r4, r0
 800f016:	460d      	mov	r5, r1
 800f018:	dc0d      	bgt.n	800f036 <__ieee754_rem_pio2+0x1ae>
 800f01a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f01e:	4b6d      	ldr	r3, [pc, #436]	; (800f1d4 <__ieee754_rem_pio2+0x34c>)
 800f020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f024:	4543      	cmp	r3, r8
 800f026:	d006      	beq.n	800f036 <__ieee754_rem_pio2+0x1ae>
 800f028:	4622      	mov	r2, r4
 800f02a:	462b      	mov	r3, r5
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f1 f93a 	bl	80002a8 <__aeabi_dsub>
 800f034:	e00e      	b.n	800f054 <__ieee754_rem_pio2+0x1cc>
 800f036:	462b      	mov	r3, r5
 800f038:	4622      	mov	r2, r4
 800f03a:	4630      	mov	r0, r6
 800f03c:	4639      	mov	r1, r7
 800f03e:	f7f1 f933 	bl	80002a8 <__aeabi_dsub>
 800f042:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f046:	9303      	str	r3, [sp, #12]
 800f048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f04c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f050:	2b10      	cmp	r3, #16
 800f052:	dc02      	bgt.n	800f05a <__ieee754_rem_pio2+0x1d2>
 800f054:	e9ca 0100 	strd	r0, r1, [sl]
 800f058:	e039      	b.n	800f0ce <__ieee754_rem_pio2+0x246>
 800f05a:	a34f      	add	r3, pc, #316	; (adr r3, 800f198 <__ieee754_rem_pio2+0x310>)
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	ec51 0b18 	vmov	r0, r1, d8
 800f064:	f7f1 fad8 	bl	8000618 <__aeabi_dmul>
 800f068:	4604      	mov	r4, r0
 800f06a:	460d      	mov	r5, r1
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4630      	mov	r0, r6
 800f072:	4639      	mov	r1, r7
 800f074:	f7f1 f918 	bl	80002a8 <__aeabi_dsub>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	4680      	mov	r8, r0
 800f07e:	4689      	mov	r9, r1
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	f7f1 f910 	bl	80002a8 <__aeabi_dsub>
 800f088:	4622      	mov	r2, r4
 800f08a:	462b      	mov	r3, r5
 800f08c:	f7f1 f90c 	bl	80002a8 <__aeabi_dsub>
 800f090:	4604      	mov	r4, r0
 800f092:	460d      	mov	r5, r1
 800f094:	a342      	add	r3, pc, #264	; (adr r3, 800f1a0 <__ieee754_rem_pio2+0x318>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	ec51 0b18 	vmov	r0, r1, d8
 800f09e:	f7f1 fabb 	bl	8000618 <__aeabi_dmul>
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	462b      	mov	r3, r5
 800f0a6:	f7f1 f8ff 	bl	80002a8 <__aeabi_dsub>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	f7f1 f8f7 	bl	80002a8 <__aeabi_dsub>
 800f0ba:	9a03      	ldr	r2, [sp, #12]
 800f0bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	2b31      	cmp	r3, #49	; 0x31
 800f0c4:	dc24      	bgt.n	800f110 <__ieee754_rem_pio2+0x288>
 800f0c6:	4646      	mov	r6, r8
 800f0c8:	464f      	mov	r7, r9
 800f0ca:	e9ca 0100 	strd	r0, r1, [sl]
 800f0ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	4642      	mov	r2, r8
 800f0d8:	464b      	mov	r3, r9
 800f0da:	f7f1 f8e5 	bl	80002a8 <__aeabi_dsub>
 800f0de:	462b      	mov	r3, r5
 800f0e0:	4622      	mov	r2, r4
 800f0e2:	f7f1 f8e1 	bl	80002a8 <__aeabi_dsub>
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f0ee:	f6bf af0b 	bge.w	800ef08 <__ieee754_rem_pio2+0x80>
 800f0f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f0f6:	f8ca 8000 	str.w	r8, [sl]
 800f0fa:	f8ca 0008 	str.w	r0, [sl, #8]
 800f0fe:	f8ca 3004 	str.w	r3, [sl, #4]
 800f102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f106:	f8ca 300c 	str.w	r3, [sl, #12]
 800f10a:	f1cb 0b00 	rsb	fp, fp, #0
 800f10e:	e6fb      	b.n	800ef08 <__ieee754_rem_pio2+0x80>
 800f110:	a327      	add	r3, pc, #156	; (adr r3, 800f1b0 <__ieee754_rem_pio2+0x328>)
 800f112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f116:	ec51 0b18 	vmov	r0, r1, d8
 800f11a:	f7f1 fa7d 	bl	8000618 <__aeabi_dmul>
 800f11e:	4604      	mov	r4, r0
 800f120:	460d      	mov	r5, r1
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	4640      	mov	r0, r8
 800f128:	4649      	mov	r1, r9
 800f12a:	f7f1 f8bd 	bl	80002a8 <__aeabi_dsub>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4606      	mov	r6, r0
 800f134:	460f      	mov	r7, r1
 800f136:	4640      	mov	r0, r8
 800f138:	4649      	mov	r1, r9
 800f13a:	f7f1 f8b5 	bl	80002a8 <__aeabi_dsub>
 800f13e:	4622      	mov	r2, r4
 800f140:	462b      	mov	r3, r5
 800f142:	f7f1 f8b1 	bl	80002a8 <__aeabi_dsub>
 800f146:	4604      	mov	r4, r0
 800f148:	460d      	mov	r5, r1
 800f14a:	a31b      	add	r3, pc, #108	; (adr r3, 800f1b8 <__ieee754_rem_pio2+0x330>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	ec51 0b18 	vmov	r0, r1, d8
 800f154:	f7f1 fa60 	bl	8000618 <__aeabi_dmul>
 800f158:	4622      	mov	r2, r4
 800f15a:	462b      	mov	r3, r5
 800f15c:	f7f1 f8a4 	bl	80002a8 <__aeabi_dsub>
 800f160:	4604      	mov	r4, r0
 800f162:	460d      	mov	r5, r1
 800f164:	e760      	b.n	800f028 <__ieee754_rem_pio2+0x1a0>
 800f166:	4b1c      	ldr	r3, [pc, #112]	; (800f1d8 <__ieee754_rem_pio2+0x350>)
 800f168:	4598      	cmp	r8, r3
 800f16a:	dd37      	ble.n	800f1dc <__ieee754_rem_pio2+0x354>
 800f16c:	ee10 2a10 	vmov	r2, s0
 800f170:	462b      	mov	r3, r5
 800f172:	4620      	mov	r0, r4
 800f174:	4629      	mov	r1, r5
 800f176:	f7f1 f897 	bl	80002a8 <__aeabi_dsub>
 800f17a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f17e:	e9ca 0100 	strd	r0, r1, [sl]
 800f182:	e695      	b.n	800eeb0 <__ieee754_rem_pio2+0x28>
 800f184:	f3af 8000 	nop.w
 800f188:	54400000 	.word	0x54400000
 800f18c:	3ff921fb 	.word	0x3ff921fb
 800f190:	1a626331 	.word	0x1a626331
 800f194:	3dd0b461 	.word	0x3dd0b461
 800f198:	1a600000 	.word	0x1a600000
 800f19c:	3dd0b461 	.word	0x3dd0b461
 800f1a0:	2e037073 	.word	0x2e037073
 800f1a4:	3ba3198a 	.word	0x3ba3198a
 800f1a8:	6dc9c883 	.word	0x6dc9c883
 800f1ac:	3fe45f30 	.word	0x3fe45f30
 800f1b0:	2e000000 	.word	0x2e000000
 800f1b4:	3ba3198a 	.word	0x3ba3198a
 800f1b8:	252049c1 	.word	0x252049c1
 800f1bc:	397b839a 	.word	0x397b839a
 800f1c0:	3fe921fb 	.word	0x3fe921fb
 800f1c4:	4002d97b 	.word	0x4002d97b
 800f1c8:	3ff921fb 	.word	0x3ff921fb
 800f1cc:	413921fb 	.word	0x413921fb
 800f1d0:	3fe00000 	.word	0x3fe00000
 800f1d4:	08010370 	.word	0x08010370
 800f1d8:	7fefffff 	.word	0x7fefffff
 800f1dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	2703      	movs	r7, #3
 800f1e4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f1e8:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f1ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	f7f1 fcab 	bl	8000b4c <__aeabi_d2iz>
 800f1f6:	f7f1 f9a5 	bl	8000544 <__aeabi_i2d>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4620      	mov	r0, r4
 800f200:	4629      	mov	r1, r5
 800f202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f206:	f7f1 f84f 	bl	80002a8 <__aeabi_dsub>
 800f20a:	2200      	movs	r2, #0
 800f20c:	4b1f      	ldr	r3, [pc, #124]	; (800f28c <__ieee754_rem_pio2+0x404>)
 800f20e:	f7f1 fa03 	bl	8000618 <__aeabi_dmul>
 800f212:	460d      	mov	r5, r1
 800f214:	4604      	mov	r4, r0
 800f216:	f7f1 fc99 	bl	8000b4c <__aeabi_d2iz>
 800f21a:	f7f1 f993 	bl	8000544 <__aeabi_i2d>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	4620      	mov	r0, r4
 800f224:	4629      	mov	r1, r5
 800f226:	2400      	movs	r4, #0
 800f228:	2500      	movs	r5, #0
 800f22a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f22e:	f7f1 f83b 	bl	80002a8 <__aeabi_dsub>
 800f232:	2200      	movs	r2, #0
 800f234:	4b15      	ldr	r3, [pc, #84]	; (800f28c <__ieee754_rem_pio2+0x404>)
 800f236:	f7f1 f9ef 	bl	8000618 <__aeabi_dmul>
 800f23a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f23e:	4622      	mov	r2, r4
 800f240:	462b      	mov	r3, r5
 800f242:	46b9      	mov	r9, r7
 800f244:	3f01      	subs	r7, #1
 800f246:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f24a:	f7f1 fc4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f24e:	2800      	cmp	r0, #0
 800f250:	d1f5      	bne.n	800f23e <__ieee754_rem_pio2+0x3b6>
 800f252:	4b0f      	ldr	r3, [pc, #60]	; (800f290 <__ieee754_rem_pio2+0x408>)
 800f254:	4632      	mov	r2, r6
 800f256:	4651      	mov	r1, sl
 800f258:	a804      	add	r0, sp, #16
 800f25a:	9301      	str	r3, [sp, #4]
 800f25c:	2302      	movs	r3, #2
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	464b      	mov	r3, r9
 800f262:	f000 f819 	bl	800f298 <__kernel_rem_pio2>
 800f266:	9b02      	ldr	r3, [sp, #8]
 800f268:	4683      	mov	fp, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f6bf ae4c 	bge.w	800ef08 <__ieee754_rem_pio2+0x80>
 800f270:	e9da 2100 	ldrd	r2, r1, [sl]
 800f274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f278:	e9ca 2300 	strd	r2, r3, [sl]
 800f27c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f284:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f288:	e73f      	b.n	800f10a <__ieee754_rem_pio2+0x282>
 800f28a:	bf00      	nop
 800f28c:	41700000 	.word	0x41700000
 800f290:	080103f0 	.word	0x080103f0
 800f294:	00000000 	.word	0x00000000

0800f298 <__kernel_rem_pio2>:
 800f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	ed2d 8b02 	vpush	{d8}
 800f2a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f2a4:	f112 0f14 	cmn.w	r2, #20
 800f2a8:	f04f 0500 	mov.w	r5, #0
 800f2ac:	9306      	str	r3, [sp, #24]
 800f2ae:	bfa8      	it	ge
 800f2b0:	1ed4      	subge	r4, r2, #3
 800f2b2:	4bc5      	ldr	r3, [pc, #788]	; (800f5c8 <__kernel_rem_pio2+0x330>)
 800f2b4:	bfb8      	it	lt
 800f2b6:	2400      	movlt	r4, #0
 800f2b8:	9104      	str	r1, [sp, #16]
 800f2ba:	ae20      	add	r6, sp, #128	; 0x80
 800f2bc:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f2be:	9009      	str	r0, [sp, #36]	; 0x24
 800f2c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	9b06      	ldr	r3, [sp, #24]
 800f2c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f2cc:	9305      	str	r3, [sp, #20]
 800f2ce:	bfa4      	itt	ge
 800f2d0:	2318      	movge	r3, #24
 800f2d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f2d6:	f06f 0317 	mvn.w	r3, #23
 800f2da:	fb04 3303 	mla	r3, r4, r3, r3
 800f2de:	eb03 0a02 	add.w	sl, r3, r2
 800f2e2:	9b00      	ldr	r3, [sp, #0]
 800f2e4:	9a05      	ldr	r2, [sp, #20]
 800f2e6:	eb03 0802 	add.w	r8, r3, r2
 800f2ea:	1aa7      	subs	r7, r4, r2
 800f2ec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f2ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f5b8 <__kernel_rem_pio2+0x320>
 800f2f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f2f6:	4545      	cmp	r5, r8
 800f2f8:	dd13      	ble.n	800f322 <__kernel_rem_pio2+0x8a>
 800f2fa:	aa20      	add	r2, sp, #128	; 0x80
 800f2fc:	9b06      	ldr	r3, [sp, #24]
 800f2fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f302:	f04f 0800 	mov.w	r8, #0
 800f306:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f30a:	9b00      	ldr	r3, [sp, #0]
 800f30c:	4598      	cmp	r8, r3
 800f30e:	dc30      	bgt.n	800f372 <__kernel_rem_pio2+0xda>
 800f310:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f314:	462f      	mov	r7, r5
 800f316:	2600      	movs	r6, #0
 800f318:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800f5b8 <__kernel_rem_pio2+0x320>
 800f31c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f320:	e01b      	b.n	800f35a <__kernel_rem_pio2+0xc2>
 800f322:	42ef      	cmn	r7, r5
 800f324:	d407      	bmi.n	800f336 <__kernel_rem_pio2+0x9e>
 800f326:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f32a:	f7f1 f90b 	bl	8000544 <__aeabi_i2d>
 800f32e:	3501      	adds	r5, #1
 800f330:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f334:	e7df      	b.n	800f2f6 <__kernel_rem_pio2+0x5e>
 800f336:	ec51 0b18 	vmov	r0, r1, d8
 800f33a:	e7f8      	b.n	800f32e <__kernel_rem_pio2+0x96>
 800f33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f340:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f344:	3601      	adds	r6, #1
 800f346:	f7f1 f967 	bl	8000618 <__aeabi_dmul>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f352:	f7f0 ffab 	bl	80002ac <__adddf3>
 800f356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f35a:	9b05      	ldr	r3, [sp, #20]
 800f35c:	3f08      	subs	r7, #8
 800f35e:	429e      	cmp	r6, r3
 800f360:	ddec      	ble.n	800f33c <__kernel_rem_pio2+0xa4>
 800f362:	f108 0801 	add.w	r8, r8, #1
 800f366:	3508      	adds	r5, #8
 800f368:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f36c:	ecab 7b02 	vstmia	fp!, {d7}
 800f370:	e7cb      	b.n	800f30a <__kernel_rem_pio2+0x72>
 800f372:	9b00      	ldr	r3, [sp, #0]
 800f374:	aa0c      	add	r2, sp, #48	; 0x30
 800f376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f37a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f37c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f37e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f382:	9c00      	ldr	r4, [sp, #0]
 800f384:	930a      	str	r3, [sp, #40]	; 0x28
 800f386:	00e3      	lsls	r3, r4, #3
 800f388:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f38c:	46a1      	mov	r9, r4
 800f38e:	9308      	str	r3, [sp, #32]
 800f390:	ab98      	add	r3, sp, #608	; 0x260
 800f392:	46c3      	mov	fp, r8
 800f394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f398:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f39c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f39e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f3a2:	f1b9 0f00 	cmp.w	r9, #0
 800f3a6:	f1a5 0508 	sub.w	r5, r5, #8
 800f3aa:	dc77      	bgt.n	800f49c <__kernel_rem_pio2+0x204>
 800f3ac:	4650      	mov	r0, sl
 800f3ae:	ec47 6b10 	vmov	d0, r6, r7
 800f3b2:	f000 fcd9 	bl	800fd68 <scalbn>
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f3bc:	ee10 0a10 	vmov	r0, s0
 800f3c0:	ec57 6b10 	vmov	r6, r7, d0
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	f7f1 f927 	bl	8000618 <__aeabi_dmul>
 800f3ca:	ec41 0b10 	vmov	d0, r0, r1
 800f3ce:	f000 fd4b 	bl	800fe68 <floor>
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	4b7d      	ldr	r3, [pc, #500]	; (800f5cc <__kernel_rem_pio2+0x334>)
 800f3d6:	ec51 0b10 	vmov	r0, r1, d0
 800f3da:	f7f1 f91d 	bl	8000618 <__aeabi_dmul>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	4639      	mov	r1, r7
 800f3e6:	f7f0 ff5f 	bl	80002a8 <__aeabi_dsub>
 800f3ea:	460f      	mov	r7, r1
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	f7f1 fbad 	bl	8000b4c <__aeabi_d2iz>
 800f3f2:	9002      	str	r0, [sp, #8]
 800f3f4:	f7f1 f8a6 	bl	8000544 <__aeabi_i2d>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	4639      	mov	r1, r7
 800f400:	f7f0 ff52 	bl	80002a8 <__aeabi_dsub>
 800f404:	f1ba 0f00 	cmp.w	sl, #0
 800f408:	4606      	mov	r6, r0
 800f40a:	460f      	mov	r7, r1
 800f40c:	dd6d      	ble.n	800f4ea <__kernel_rem_pio2+0x252>
 800f40e:	1e61      	subs	r1, r4, #1
 800f410:	ab0c      	add	r3, sp, #48	; 0x30
 800f412:	f1ca 0018 	rsb	r0, sl, #24
 800f416:	9d02      	ldr	r5, [sp, #8]
 800f418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f41c:	fa43 f200 	asr.w	r2, r3, r0
 800f420:	4415      	add	r5, r2
 800f422:	4082      	lsls	r2, r0
 800f424:	1a9b      	subs	r3, r3, r2
 800f426:	aa0c      	add	r2, sp, #48	; 0x30
 800f428:	9502      	str	r5, [sp, #8]
 800f42a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f42e:	f1ca 0217 	rsb	r2, sl, #23
 800f432:	fa43 fb02 	asr.w	fp, r3, r2
 800f436:	f1bb 0f00 	cmp.w	fp, #0
 800f43a:	dd65      	ble.n	800f508 <__kernel_rem_pio2+0x270>
 800f43c:	9b02      	ldr	r3, [sp, #8]
 800f43e:	2200      	movs	r2, #0
 800f440:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f444:	3301      	adds	r3, #1
 800f446:	4615      	mov	r5, r2
 800f448:	9302      	str	r3, [sp, #8]
 800f44a:	4294      	cmp	r4, r2
 800f44c:	f300 809f 	bgt.w	800f58e <__kernel_rem_pio2+0x2f6>
 800f450:	f1ba 0f00 	cmp.w	sl, #0
 800f454:	dd07      	ble.n	800f466 <__kernel_rem_pio2+0x1ce>
 800f456:	f1ba 0f01 	cmp.w	sl, #1
 800f45a:	f000 80c3 	beq.w	800f5e4 <__kernel_rem_pio2+0x34c>
 800f45e:	f1ba 0f02 	cmp.w	sl, #2
 800f462:	f000 80c9 	beq.w	800f5f8 <__kernel_rem_pio2+0x360>
 800f466:	f1bb 0f02 	cmp.w	fp, #2
 800f46a:	d14d      	bne.n	800f508 <__kernel_rem_pio2+0x270>
 800f46c:	4632      	mov	r2, r6
 800f46e:	463b      	mov	r3, r7
 800f470:	2000      	movs	r0, #0
 800f472:	4957      	ldr	r1, [pc, #348]	; (800f5d0 <__kernel_rem_pio2+0x338>)
 800f474:	f7f0 ff18 	bl	80002a8 <__aeabi_dsub>
 800f478:	4606      	mov	r6, r0
 800f47a:	460f      	mov	r7, r1
 800f47c:	2d00      	cmp	r5, #0
 800f47e:	d043      	beq.n	800f508 <__kernel_rem_pio2+0x270>
 800f480:	4650      	mov	r0, sl
 800f482:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 800f5c0 <__kernel_rem_pio2+0x328>
 800f486:	f000 fc6f 	bl	800fd68 <scalbn>
 800f48a:	4630      	mov	r0, r6
 800f48c:	4639      	mov	r1, r7
 800f48e:	ec53 2b10 	vmov	r2, r3, d0
 800f492:	f7f0 ff09 	bl	80002a8 <__aeabi_dsub>
 800f496:	4606      	mov	r6, r0
 800f498:	460f      	mov	r7, r1
 800f49a:	e035      	b.n	800f508 <__kernel_rem_pio2+0x270>
 800f49c:	2200      	movs	r2, #0
 800f49e:	4b4d      	ldr	r3, [pc, #308]	; (800f5d4 <__kernel_rem_pio2+0x33c>)
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	4639      	mov	r1, r7
 800f4a4:	f7f1 f8b8 	bl	8000618 <__aeabi_dmul>
 800f4a8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f4ac:	f7f1 fb4e 	bl	8000b4c <__aeabi_d2iz>
 800f4b0:	f7f1 f848 	bl	8000544 <__aeabi_i2d>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	ec43 2b18 	vmov	d8, r2, r3
 800f4bc:	2200      	movs	r2, #0
 800f4be:	4b46      	ldr	r3, [pc, #280]	; (800f5d8 <__kernel_rem_pio2+0x340>)
 800f4c0:	f7f1 f8aa 	bl	8000618 <__aeabi_dmul>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	f7f0 feec 	bl	80002a8 <__aeabi_dsub>
 800f4d0:	f7f1 fb3c 	bl	8000b4c <__aeabi_d2iz>
 800f4d4:	f84b 0b04 	str.w	r0, [fp], #4
 800f4d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4dc:	ec51 0b18 	vmov	r0, r1, d8
 800f4e0:	f7f0 fee4 	bl	80002ac <__adddf3>
 800f4e4:	4606      	mov	r6, r0
 800f4e6:	460f      	mov	r7, r1
 800f4e8:	e75b      	b.n	800f3a2 <__kernel_rem_pio2+0x10a>
 800f4ea:	d106      	bne.n	800f4fa <__kernel_rem_pio2+0x262>
 800f4ec:	1e63      	subs	r3, r4, #1
 800f4ee:	aa0c      	add	r2, sp, #48	; 0x30
 800f4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f4:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f4f8:	e79d      	b.n	800f436 <__kernel_rem_pio2+0x19e>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4b37      	ldr	r3, [pc, #220]	; (800f5dc <__kernel_rem_pio2+0x344>)
 800f4fe:	f7f1 fb11 	bl	8000b24 <__aeabi_dcmpge>
 800f502:	2800      	cmp	r0, #0
 800f504:	d140      	bne.n	800f588 <__kernel_rem_pio2+0x2f0>
 800f506:	4683      	mov	fp, r0
 800f508:	2200      	movs	r2, #0
 800f50a:	2300      	movs	r3, #0
 800f50c:	4630      	mov	r0, r6
 800f50e:	4639      	mov	r1, r7
 800f510:	f7f1 faea 	bl	8000ae8 <__aeabi_dcmpeq>
 800f514:	2800      	cmp	r0, #0
 800f516:	f000 80c3 	beq.w	800f6a0 <__kernel_rem_pio2+0x408>
 800f51a:	1e65      	subs	r5, r4, #1
 800f51c:	2200      	movs	r2, #0
 800f51e:	462b      	mov	r3, r5
 800f520:	9900      	ldr	r1, [sp, #0]
 800f522:	428b      	cmp	r3, r1
 800f524:	da6f      	bge.n	800f606 <__kernel_rem_pio2+0x36e>
 800f526:	2a00      	cmp	r2, #0
 800f528:	f000 808c 	beq.w	800f644 <__kernel_rem_pio2+0x3ac>
 800f52c:	ab0c      	add	r3, sp, #48	; 0x30
 800f52e:	f1aa 0a18 	sub.w	sl, sl, #24
 800f532:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 80b0 	beq.w	800f69c <__kernel_rem_pio2+0x404>
 800f53c:	4650      	mov	r0, sl
 800f53e:	462c      	mov	r4, r5
 800f540:	f04f 0800 	mov.w	r8, #0
 800f544:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800f5d4 <__kernel_rem_pio2+0x33c>
 800f548:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 800f5c0 <__kernel_rem_pio2+0x328>
 800f54c:	f000 fc0c 	bl	800fd68 <scalbn>
 800f550:	1c6b      	adds	r3, r5, #1
 800f552:	00da      	lsls	r2, r3, #3
 800f554:	9205      	str	r2, [sp, #20]
 800f556:	aa70      	add	r2, sp, #448	; 0x1c0
 800f558:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f55c:	ec57 6b10 	vmov	r6, r7, d0
 800f560:	2c00      	cmp	r4, #0
 800f562:	f280 80d6 	bge.w	800f712 <__kernel_rem_pio2+0x47a>
 800f566:	462c      	mov	r4, r5
 800f568:	2c00      	cmp	r4, #0
 800f56a:	f2c0 8104 	blt.w	800f776 <__kernel_rem_pio2+0x4de>
 800f56e:	4b1c      	ldr	r3, [pc, #112]	; (800f5e0 <__kernel_rem_pio2+0x348>)
 800f570:	f04f 0900 	mov.w	r9, #0
 800f574:	f04f 0a00 	mov.w	sl, #0
 800f578:	2700      	movs	r7, #0
 800f57a:	461e      	mov	r6, r3
 800f57c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f57e:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f582:	1b2b      	subs	r3, r5, r4
 800f584:	9306      	str	r3, [sp, #24]
 800f586:	e0e8      	b.n	800f75a <__kernel_rem_pio2+0x4c2>
 800f588:	f04f 0b02 	mov.w	fp, #2
 800f58c:	e756      	b.n	800f43c <__kernel_rem_pio2+0x1a4>
 800f58e:	f8d8 3000 	ldr.w	r3, [r8]
 800f592:	b955      	cbnz	r5, 800f5aa <__kernel_rem_pio2+0x312>
 800f594:	b123      	cbz	r3, 800f5a0 <__kernel_rem_pio2+0x308>
 800f596:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f59a:	f8c8 3000 	str.w	r3, [r8]
 800f59e:	2301      	movs	r3, #1
 800f5a0:	3201      	adds	r2, #1
 800f5a2:	f108 0804 	add.w	r8, r8, #4
 800f5a6:	461d      	mov	r5, r3
 800f5a8:	e74f      	b.n	800f44a <__kernel_rem_pio2+0x1b2>
 800f5aa:	1acb      	subs	r3, r1, r3
 800f5ac:	f8c8 3000 	str.w	r3, [r8]
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	e7f5      	b.n	800f5a0 <__kernel_rem_pio2+0x308>
 800f5b4:	f3af 8000 	nop.w
	...
 800f5c4:	3ff00000 	.word	0x3ff00000
 800f5c8:	08010538 	.word	0x08010538
 800f5cc:	40200000 	.word	0x40200000
 800f5d0:	3ff00000 	.word	0x3ff00000
 800f5d4:	3e700000 	.word	0x3e700000
 800f5d8:	41700000 	.word	0x41700000
 800f5dc:	3fe00000 	.word	0x3fe00000
 800f5e0:	080104f8 	.word	0x080104f8
 800f5e4:	1e62      	subs	r2, r4, #1
 800f5e6:	ab0c      	add	r3, sp, #48	; 0x30
 800f5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f5f0:	a90c      	add	r1, sp, #48	; 0x30
 800f5f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f5f6:	e736      	b.n	800f466 <__kernel_rem_pio2+0x1ce>
 800f5f8:	1e62      	subs	r2, r4, #1
 800f5fa:	ab0c      	add	r3, sp, #48	; 0x30
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f604:	e7f4      	b.n	800f5f0 <__kernel_rem_pio2+0x358>
 800f606:	a90c      	add	r1, sp, #48	; 0x30
 800f608:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	430a      	orrs	r2, r1
 800f610:	e786      	b.n	800f520 <__kernel_rem_pio2+0x288>
 800f612:	3301      	adds	r3, #1
 800f614:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f618:	2900      	cmp	r1, #0
 800f61a:	d0fa      	beq.n	800f612 <__kernel_rem_pio2+0x37a>
 800f61c:	9a08      	ldr	r2, [sp, #32]
 800f61e:	a920      	add	r1, sp, #128	; 0x80
 800f620:	18e3      	adds	r3, r4, r3
 800f622:	f104 0801 	add.w	r8, r4, #1
 800f626:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f62a:	9302      	str	r3, [sp, #8]
 800f62c:	446a      	add	r2, sp
 800f62e:	3a98      	subs	r2, #152	; 0x98
 800f630:	9208      	str	r2, [sp, #32]
 800f632:	9a06      	ldr	r2, [sp, #24]
 800f634:	18a2      	adds	r2, r4, r2
 800f636:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f63a:	9b02      	ldr	r3, [sp, #8]
 800f63c:	4543      	cmp	r3, r8
 800f63e:	da04      	bge.n	800f64a <__kernel_rem_pio2+0x3b2>
 800f640:	461c      	mov	r4, r3
 800f642:	e6a0      	b.n	800f386 <__kernel_rem_pio2+0xee>
 800f644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f646:	2301      	movs	r3, #1
 800f648:	e7e4      	b.n	800f614 <__kernel_rem_pio2+0x37c>
 800f64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f64c:	f04f 0900 	mov.w	r9, #0
 800f650:	2600      	movs	r6, #0
 800f652:	2700      	movs	r7, #0
 800f654:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f658:	f7f0 ff74 	bl	8000544 <__aeabi_i2d>
 800f65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f662:	461c      	mov	r4, r3
 800f664:	46ab      	mov	fp, r5
 800f666:	9b05      	ldr	r3, [sp, #20]
 800f668:	4599      	cmp	r9, r3
 800f66a:	dd06      	ble.n	800f67a <__kernel_rem_pio2+0x3e2>
 800f66c:	9b08      	ldr	r3, [sp, #32]
 800f66e:	f108 0801 	add.w	r8, r8, #1
 800f672:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f676:	9308      	str	r3, [sp, #32]
 800f678:	e7df      	b.n	800f63a <__kernel_rem_pio2+0x3a2>
 800f67a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f67e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f682:	f7f0 ffc9 	bl	8000618 <__aeabi_dmul>
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	4630      	mov	r0, r6
 800f68c:	4639      	mov	r1, r7
 800f68e:	f109 0901 	add.w	r9, r9, #1
 800f692:	f7f0 fe0b 	bl	80002ac <__adddf3>
 800f696:	4606      	mov	r6, r0
 800f698:	460f      	mov	r7, r1
 800f69a:	e7e4      	b.n	800f666 <__kernel_rem_pio2+0x3ce>
 800f69c:	3d01      	subs	r5, #1
 800f69e:	e745      	b.n	800f52c <__kernel_rem_pio2+0x294>
 800f6a0:	f1ca 0000 	rsb	r0, sl, #0
 800f6a4:	ec47 6b10 	vmov	d0, r6, r7
 800f6a8:	f000 fb5e 	bl	800fd68 <scalbn>
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	4ba1      	ldr	r3, [pc, #644]	; (800f934 <__kernel_rem_pio2+0x69c>)
 800f6b0:	ee10 0a10 	vmov	r0, s0
 800f6b4:	ec57 6b10 	vmov	r6, r7, d0
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	f7f1 fa33 	bl	8000b24 <__aeabi_dcmpge>
 800f6be:	b1f8      	cbz	r0, 800f700 <__kernel_rem_pio2+0x468>
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4b9d      	ldr	r3, [pc, #628]	; (800f938 <__kernel_rem_pio2+0x6a0>)
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f0 ffa6 	bl	8000618 <__aeabi_dmul>
 800f6cc:	1c65      	adds	r5, r4, #1
 800f6ce:	f7f1 fa3d 	bl	8000b4c <__aeabi_d2iz>
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	f7f0 ff36 	bl	8000544 <__aeabi_i2d>
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4b96      	ldr	r3, [pc, #600]	; (800f934 <__kernel_rem_pio2+0x69c>)
 800f6dc:	f10a 0a18 	add.w	sl, sl, #24
 800f6e0:	f7f0 ff9a 	bl	8000618 <__aeabi_dmul>
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	4639      	mov	r1, r7
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f7f0 fddc 	bl	80002a8 <__aeabi_dsub>
 800f6f0:	f7f1 fa2c 	bl	8000b4c <__aeabi_d2iz>
 800f6f4:	ab0c      	add	r3, sp, #48	; 0x30
 800f6f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f6fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f6fe:	e71d      	b.n	800f53c <__kernel_rem_pio2+0x2a4>
 800f700:	4630      	mov	r0, r6
 800f702:	4639      	mov	r1, r7
 800f704:	f7f1 fa22 	bl	8000b4c <__aeabi_d2iz>
 800f708:	ab0c      	add	r3, sp, #48	; 0x30
 800f70a:	4625      	mov	r5, r4
 800f70c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f710:	e714      	b.n	800f53c <__kernel_rem_pio2+0x2a4>
 800f712:	ab0c      	add	r3, sp, #48	; 0x30
 800f714:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f718:	3c01      	subs	r4, #1
 800f71a:	f7f0 ff13 	bl	8000544 <__aeabi_i2d>
 800f71e:	4632      	mov	r2, r6
 800f720:	463b      	mov	r3, r7
 800f722:	f7f0 ff79 	bl	8000618 <__aeabi_dmul>
 800f726:	4642      	mov	r2, r8
 800f728:	464b      	mov	r3, r9
 800f72a:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f72e:	4630      	mov	r0, r6
 800f730:	4639      	mov	r1, r7
 800f732:	f7f0 ff71 	bl	8000618 <__aeabi_dmul>
 800f736:	4606      	mov	r6, r0
 800f738:	460f      	mov	r7, r1
 800f73a:	e711      	b.n	800f560 <__kernel_rem_pio2+0x2c8>
 800f73c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f740:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f744:	f7f0 ff68 	bl	8000618 <__aeabi_dmul>
 800f748:	4602      	mov	r2, r0
 800f74a:	460b      	mov	r3, r1
 800f74c:	4648      	mov	r0, r9
 800f74e:	4651      	mov	r1, sl
 800f750:	3701      	adds	r7, #1
 800f752:	f7f0 fdab 	bl	80002ac <__adddf3>
 800f756:	4681      	mov	r9, r0
 800f758:	468a      	mov	sl, r1
 800f75a:	9b00      	ldr	r3, [sp, #0]
 800f75c:	429f      	cmp	r7, r3
 800f75e:	dc02      	bgt.n	800f766 <__kernel_rem_pio2+0x4ce>
 800f760:	9b06      	ldr	r3, [sp, #24]
 800f762:	429f      	cmp	r7, r3
 800f764:	ddea      	ble.n	800f73c <__kernel_rem_pio2+0x4a4>
 800f766:	ab48      	add	r3, sp, #288	; 0x120
 800f768:	9a06      	ldr	r2, [sp, #24]
 800f76a:	3c01      	subs	r4, #1
 800f76c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f770:	e9c6 9a00 	strd	r9, sl, [r6]
 800f774:	e6f8      	b.n	800f568 <__kernel_rem_pio2+0x2d0>
 800f776:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f778:	2b02      	cmp	r3, #2
 800f77a:	dc0b      	bgt.n	800f794 <__kernel_rem_pio2+0x4fc>
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	dc39      	bgt.n	800f7f4 <__kernel_rem_pio2+0x55c>
 800f780:	d05d      	beq.n	800f83e <__kernel_rem_pio2+0x5a6>
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	f003 0007 	and.w	r0, r3, #7
 800f788:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f78c:	ecbd 8b02 	vpop	{d8}
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f796:	2b03      	cmp	r3, #3
 800f798:	d1f3      	bne.n	800f782 <__kernel_rem_pio2+0x4ea>
 800f79a:	9b05      	ldr	r3, [sp, #20]
 800f79c:	9500      	str	r5, [sp, #0]
 800f79e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f7a2:	eb0d 0403 	add.w	r4, sp, r3
 800f7a6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f7aa:	46a2      	mov	sl, r4
 800f7ac:	9b00      	ldr	r3, [sp, #0]
 800f7ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	dc69      	bgt.n	800f88a <__kernel_rem_pio2+0x5f2>
 800f7b6:	46aa      	mov	sl, r5
 800f7b8:	f1ba 0f01 	cmp.w	sl, #1
 800f7bc:	f1a4 0408 	sub.w	r4, r4, #8
 800f7c0:	f300 8083 	bgt.w	800f8ca <__kernel_rem_pio2+0x632>
 800f7c4:	9c05      	ldr	r4, [sp, #20]
 800f7c6:	ab48      	add	r3, sp, #288	; 0x120
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	441c      	add	r4, r3
 800f7ce:	2d01      	cmp	r5, #1
 800f7d0:	f300 809a 	bgt.w	800f908 <__kernel_rem_pio2+0x670>
 800f7d4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f7d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f7dc:	f1bb 0f00 	cmp.w	fp, #0
 800f7e0:	f040 8098 	bne.w	800f914 <__kernel_rem_pio2+0x67c>
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	e9c3 7800 	strd	r7, r8, [r3]
 800f7ea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f7ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f7f2:	e7c6      	b.n	800f782 <__kernel_rem_pio2+0x4ea>
 800f7f4:	9e05      	ldr	r6, [sp, #20]
 800f7f6:	ab48      	add	r3, sp, #288	; 0x120
 800f7f8:	462c      	mov	r4, r5
 800f7fa:	2000      	movs	r0, #0
 800f7fc:	441e      	add	r6, r3
 800f7fe:	2100      	movs	r1, #0
 800f800:	2c00      	cmp	r4, #0
 800f802:	da33      	bge.n	800f86c <__kernel_rem_pio2+0x5d4>
 800f804:	f1bb 0f00 	cmp.w	fp, #0
 800f808:	d036      	beq.n	800f878 <__kernel_rem_pio2+0x5e0>
 800f80a:	4602      	mov	r2, r0
 800f80c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f810:	9c04      	ldr	r4, [sp, #16]
 800f812:	ae4a      	add	r6, sp, #296	; 0x128
 800f814:	e9c4 2300 	strd	r2, r3, [r4]
 800f818:	2401      	movs	r4, #1
 800f81a:	4602      	mov	r2, r0
 800f81c:	460b      	mov	r3, r1
 800f81e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f822:	f7f0 fd41 	bl	80002a8 <__aeabi_dsub>
 800f826:	42a5      	cmp	r5, r4
 800f828:	da29      	bge.n	800f87e <__kernel_rem_pio2+0x5e6>
 800f82a:	f1bb 0f00 	cmp.w	fp, #0
 800f82e:	d002      	beq.n	800f836 <__kernel_rem_pio2+0x59e>
 800f830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f834:	4619      	mov	r1, r3
 800f836:	9b04      	ldr	r3, [sp, #16]
 800f838:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f83c:	e7a1      	b.n	800f782 <__kernel_rem_pio2+0x4ea>
 800f83e:	9c05      	ldr	r4, [sp, #20]
 800f840:	ab48      	add	r3, sp, #288	; 0x120
 800f842:	2000      	movs	r0, #0
 800f844:	2100      	movs	r1, #0
 800f846:	441c      	add	r4, r3
 800f848:	2d00      	cmp	r5, #0
 800f84a:	da09      	bge.n	800f860 <__kernel_rem_pio2+0x5c8>
 800f84c:	f1bb 0f00 	cmp.w	fp, #0
 800f850:	d002      	beq.n	800f858 <__kernel_rem_pio2+0x5c0>
 800f852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f856:	4619      	mov	r1, r3
 800f858:	9b04      	ldr	r3, [sp, #16]
 800f85a:	e9c3 0100 	strd	r0, r1, [r3]
 800f85e:	e790      	b.n	800f782 <__kernel_rem_pio2+0x4ea>
 800f860:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f864:	3d01      	subs	r5, #1
 800f866:	f7f0 fd21 	bl	80002ac <__adddf3>
 800f86a:	e7ed      	b.n	800f848 <__kernel_rem_pio2+0x5b0>
 800f86c:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f870:	3c01      	subs	r4, #1
 800f872:	f7f0 fd1b 	bl	80002ac <__adddf3>
 800f876:	e7c3      	b.n	800f800 <__kernel_rem_pio2+0x568>
 800f878:	4602      	mov	r2, r0
 800f87a:	460b      	mov	r3, r1
 800f87c:	e7c8      	b.n	800f810 <__kernel_rem_pio2+0x578>
 800f87e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f882:	3401      	adds	r4, #1
 800f884:	f7f0 fd12 	bl	80002ac <__adddf3>
 800f888:	e7cd      	b.n	800f826 <__kernel_rem_pio2+0x58e>
 800f88a:	9b00      	ldr	r3, [sp, #0]
 800f88c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f890:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f894:	3b01      	subs	r3, #1
 800f896:	4640      	mov	r0, r8
 800f898:	4632      	mov	r2, r6
 800f89a:	4649      	mov	r1, r9
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	463b      	mov	r3, r7
 800f8a0:	f7f0 fd04 	bl	80002ac <__adddf3>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	f7f0 fcfa 	bl	80002a8 <__aeabi_dsub>
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	463b      	mov	r3, r7
 800f8b8:	f7f0 fcf8 	bl	80002ac <__adddf3>
 800f8bc:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f8c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8c4:	ed8a 7b00 	vstr	d7, [sl]
 800f8c8:	e770      	b.n	800f7ac <__kernel_rem_pio2+0x514>
 800f8ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f8ce:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f8d2:	4640      	mov	r0, r8
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	4632      	mov	r2, r6
 800f8d8:	463b      	mov	r3, r7
 800f8da:	f7f0 fce7 	bl	80002ac <__adddf3>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f8e6:	e9cd 0100 	strd	r0, r1, [sp]
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	f7f0 fcdb 	bl	80002a8 <__aeabi_dsub>
 800f8f2:	4632      	mov	r2, r6
 800f8f4:	463b      	mov	r3, r7
 800f8f6:	f7f0 fcd9 	bl	80002ac <__adddf3>
 800f8fa:	ed9d 7b00 	vldr	d7, [sp]
 800f8fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f902:	ed84 7b00 	vstr	d7, [r4]
 800f906:	e757      	b.n	800f7b8 <__kernel_rem_pio2+0x520>
 800f908:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f90c:	3d01      	subs	r5, #1
 800f90e:	f7f0 fccd 	bl	80002ac <__adddf3>
 800f912:	e75c      	b.n	800f7ce <__kernel_rem_pio2+0x536>
 800f914:	9b04      	ldr	r3, [sp, #16]
 800f916:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f91a:	9a04      	ldr	r2, [sp, #16]
 800f91c:	601f      	str	r7, [r3, #0]
 800f91e:	605c      	str	r4, [r3, #4]
 800f920:	609d      	str	r5, [r3, #8]
 800f922:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f926:	6110      	str	r0, [r2, #16]
 800f928:	60d3      	str	r3, [r2, #12]
 800f92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f92e:	6153      	str	r3, [r2, #20]
 800f930:	e727      	b.n	800f782 <__kernel_rem_pio2+0x4ea>
 800f932:	bf00      	nop
 800f934:	41700000 	.word	0x41700000
 800f938:	3e700000 	.word	0x3e700000
 800f93c:	00000000 	.word	0x00000000

0800f940 <__kernel_tan>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	ec5b ab10 	vmov	sl, fp, d0
 800f948:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f94c:	4be0      	ldr	r3, [pc, #896]	; (800fcd0 <__kernel_tan+0x390>)
 800f94e:	4606      	mov	r6, r0
 800f950:	429f      	cmp	r7, r3
 800f952:	ed2d 8b06 	vpush	{d8-d10}
 800f956:	b083      	sub	sp, #12
 800f958:	ec59 8b11 	vmov	r8, r9, d1
 800f95c:	f8cd b000 	str.w	fp, [sp]
 800f960:	dc61      	bgt.n	800fa26 <__kernel_tan+0xe6>
 800f962:	ee10 0a10 	vmov	r0, s0
 800f966:	4659      	mov	r1, fp
 800f968:	f7f1 f8f0 	bl	8000b4c <__aeabi_d2iz>
 800f96c:	4605      	mov	r5, r0
 800f96e:	2800      	cmp	r0, #0
 800f970:	f040 8083 	bne.w	800fa7a <__kernel_tan+0x13a>
 800f974:	1c73      	adds	r3, r6, #1
 800f976:	4652      	mov	r2, sl
 800f978:	4313      	orrs	r3, r2
 800f97a:	433b      	orrs	r3, r7
 800f97c:	d112      	bne.n	800f9a4 <__kernel_tan+0x64>
 800f97e:	ec4b ab10 	vmov	d0, sl, fp
 800f982:	f000 f9e7 	bl	800fd54 <fabs>
 800f986:	2000      	movs	r0, #0
 800f988:	49d2      	ldr	r1, [pc, #840]	; (800fcd4 <__kernel_tan+0x394>)
 800f98a:	ec53 2b10 	vmov	r2, r3, d0
 800f98e:	f7f0 ff6d 	bl	800086c <__aeabi_ddiv>
 800f992:	4682      	mov	sl, r0
 800f994:	468b      	mov	fp, r1
 800f996:	ec4b ab10 	vmov	d0, sl, fp
 800f99a:	b003      	add	sp, #12
 800f99c:	ecbd 8b06 	vpop	{d8-d10}
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	2e01      	cmp	r6, #1
 800f9a6:	d0f6      	beq.n	800f996 <__kernel_tan+0x56>
 800f9a8:	4642      	mov	r2, r8
 800f9aa:	464b      	mov	r3, r9
 800f9ac:	4650      	mov	r0, sl
 800f9ae:	4659      	mov	r1, fp
 800f9b0:	f7f0 fc7c 	bl	80002ac <__adddf3>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	49c6      	ldr	r1, [pc, #792]	; (800fcd8 <__kernel_tan+0x398>)
 800f9be:	f7f0 ff55 	bl	800086c <__aeabi_ddiv>
 800f9c2:	462e      	mov	r6, r5
 800f9c4:	462c      	mov	r4, r5
 800f9c6:	e9cd 0100 	strd	r0, r1, [sp]
 800f9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	4652      	mov	r2, sl
 800f9d2:	461d      	mov	r5, r3
 800f9d4:	4639      	mov	r1, r7
 800f9d6:	465b      	mov	r3, fp
 800f9d8:	f7f0 fc66 	bl	80002a8 <__aeabi_dsub>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	f7f0 fc60 	bl	80002a8 <__aeabi_dsub>
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	462b      	mov	r3, r5
 800f9ec:	f7f0 fe14 	bl	8000618 <__aeabi_dmul>
 800f9f0:	4632      	mov	r2, r6
 800f9f2:	4680      	mov	r8, r0
 800f9f4:	4689      	mov	r9, r1
 800f9f6:	462b      	mov	r3, r5
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	f7f0 fe0c 	bl	8000618 <__aeabi_dmul>
 800fa00:	2200      	movs	r2, #0
 800fa02:	4bb4      	ldr	r3, [pc, #720]	; (800fcd4 <__kernel_tan+0x394>)
 800fa04:	f7f0 fc52 	bl	80002ac <__adddf3>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	4649      	mov	r1, r9
 800fa10:	f7f0 fc4c 	bl	80002ac <__adddf3>
 800fa14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa18:	f7f0 fdfe 	bl	8000618 <__aeabi_dmul>
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	462b      	mov	r3, r5
 800fa20:	f7f0 fc44 	bl	80002ac <__adddf3>
 800fa24:	e7b5      	b.n	800f992 <__kernel_tan+0x52>
 800fa26:	4bad      	ldr	r3, [pc, #692]	; (800fcdc <__kernel_tan+0x39c>)
 800fa28:	429f      	cmp	r7, r3
 800fa2a:	dd26      	ble.n	800fa7a <__kernel_tan+0x13a>
 800fa2c:	9b00      	ldr	r3, [sp, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	da09      	bge.n	800fa46 <__kernel_tan+0x106>
 800fa32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa36:	ee10 aa10 	vmov	sl, s0
 800fa3a:	ee11 8a10 	vmov	r8, s2
 800fa3e:	469b      	mov	fp, r3
 800fa40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa44:	4699      	mov	r9, r3
 800fa46:	4652      	mov	r2, sl
 800fa48:	465b      	mov	r3, fp
 800fa4a:	a183      	add	r1, pc, #524	; (adr r1, 800fc58 <__kernel_tan+0x318>)
 800fa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa50:	f7f0 fc2a 	bl	80002a8 <__aeabi_dsub>
 800fa54:	4604      	mov	r4, r0
 800fa56:	460d      	mov	r5, r1
 800fa58:	4642      	mov	r2, r8
 800fa5a:	464b      	mov	r3, r9
 800fa5c:	f04f 0800 	mov.w	r8, #0
 800fa60:	f04f 0900 	mov.w	r9, #0
 800fa64:	a17e      	add	r1, pc, #504	; (adr r1, 800fc60 <__kernel_tan+0x320>)
 800fa66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa6a:	f7f0 fc1d 	bl	80002a8 <__aeabi_dsub>
 800fa6e:	4622      	mov	r2, r4
 800fa70:	462b      	mov	r3, r5
 800fa72:	f7f0 fc1b 	bl	80002ac <__adddf3>
 800fa76:	4682      	mov	sl, r0
 800fa78:	468b      	mov	fp, r1
 800fa7a:	4652      	mov	r2, sl
 800fa7c:	465b      	mov	r3, fp
 800fa7e:	4650      	mov	r0, sl
 800fa80:	4659      	mov	r1, fp
 800fa82:	f7f0 fdc9 	bl	8000618 <__aeabi_dmul>
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	ec43 2b18 	vmov	d8, r2, r3
 800fa8e:	f7f0 fdc3 	bl	8000618 <__aeabi_dmul>
 800fa92:	4604      	mov	r4, r0
 800fa94:	460d      	mov	r5, r1
 800fa96:	4650      	mov	r0, sl
 800fa98:	4659      	mov	r1, fp
 800fa9a:	ec53 2b18 	vmov	r2, r3, d8
 800fa9e:	f7f0 fdbb 	bl	8000618 <__aeabi_dmul>
 800faa2:	a371      	add	r3, pc, #452	; (adr r3, 800fc68 <__kernel_tan+0x328>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	ec41 0b19 	vmov	d9, r0, r1
 800faac:	4620      	mov	r0, r4
 800faae:	4629      	mov	r1, r5
 800fab0:	f7f0 fdb2 	bl	8000618 <__aeabi_dmul>
 800fab4:	a36e      	add	r3, pc, #440	; (adr r3, 800fc70 <__kernel_tan+0x330>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fbf7 	bl	80002ac <__adddf3>
 800fabe:	4622      	mov	r2, r4
 800fac0:	462b      	mov	r3, r5
 800fac2:	f7f0 fda9 	bl	8000618 <__aeabi_dmul>
 800fac6:	a36c      	add	r3, pc, #432	; (adr r3, 800fc78 <__kernel_tan+0x338>)
 800fac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800facc:	f7f0 fbee 	bl	80002ac <__adddf3>
 800fad0:	4622      	mov	r2, r4
 800fad2:	462b      	mov	r3, r5
 800fad4:	f7f0 fda0 	bl	8000618 <__aeabi_dmul>
 800fad8:	a369      	add	r3, pc, #420	; (adr r3, 800fc80 <__kernel_tan+0x340>)
 800fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fade:	f7f0 fbe5 	bl	80002ac <__adddf3>
 800fae2:	4622      	mov	r2, r4
 800fae4:	462b      	mov	r3, r5
 800fae6:	f7f0 fd97 	bl	8000618 <__aeabi_dmul>
 800faea:	a367      	add	r3, pc, #412	; (adr r3, 800fc88 <__kernel_tan+0x348>)
 800faec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf0:	f7f0 fbdc 	bl	80002ac <__adddf3>
 800faf4:	4622      	mov	r2, r4
 800faf6:	462b      	mov	r3, r5
 800faf8:	f7f0 fd8e 	bl	8000618 <__aeabi_dmul>
 800fafc:	a364      	add	r3, pc, #400	; (adr r3, 800fc90 <__kernel_tan+0x350>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	f7f0 fbd3 	bl	80002ac <__adddf3>
 800fb06:	ec53 2b18 	vmov	r2, r3, d8
 800fb0a:	f7f0 fd85 	bl	8000618 <__aeabi_dmul>
 800fb0e:	a362      	add	r3, pc, #392	; (adr r3, 800fc98 <__kernel_tan+0x358>)
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	ec41 0b1a 	vmov	d10, r0, r1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fd7c 	bl	8000618 <__aeabi_dmul>
 800fb20:	a35f      	add	r3, pc, #380	; (adr r3, 800fca0 <__kernel_tan+0x360>)
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f7f0 fbc1 	bl	80002ac <__adddf3>
 800fb2a:	4622      	mov	r2, r4
 800fb2c:	462b      	mov	r3, r5
 800fb2e:	f7f0 fd73 	bl	8000618 <__aeabi_dmul>
 800fb32:	a35d      	add	r3, pc, #372	; (adr r3, 800fca8 <__kernel_tan+0x368>)
 800fb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb38:	f7f0 fbb8 	bl	80002ac <__adddf3>
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	462b      	mov	r3, r5
 800fb40:	f7f0 fd6a 	bl	8000618 <__aeabi_dmul>
 800fb44:	a35a      	add	r3, pc, #360	; (adr r3, 800fcb0 <__kernel_tan+0x370>)
 800fb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4a:	f7f0 fbaf 	bl	80002ac <__adddf3>
 800fb4e:	4622      	mov	r2, r4
 800fb50:	462b      	mov	r3, r5
 800fb52:	f7f0 fd61 	bl	8000618 <__aeabi_dmul>
 800fb56:	a358      	add	r3, pc, #352	; (adr r3, 800fcb8 <__kernel_tan+0x378>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	f7f0 fba6 	bl	80002ac <__adddf3>
 800fb60:	4622      	mov	r2, r4
 800fb62:	462b      	mov	r3, r5
 800fb64:	f7f0 fd58 	bl	8000618 <__aeabi_dmul>
 800fb68:	a355      	add	r3, pc, #340	; (adr r3, 800fcc0 <__kernel_tan+0x380>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f7f0 fb9d 	bl	80002ac <__adddf3>
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	ec51 0b1a 	vmov	r0, r1, d10
 800fb7a:	f7f0 fb97 	bl	80002ac <__adddf3>
 800fb7e:	ec53 2b19 	vmov	r2, r3, d9
 800fb82:	f7f0 fd49 	bl	8000618 <__aeabi_dmul>
 800fb86:	4642      	mov	r2, r8
 800fb88:	464b      	mov	r3, r9
 800fb8a:	f7f0 fb8f 	bl	80002ac <__adddf3>
 800fb8e:	ec53 2b18 	vmov	r2, r3, d8
 800fb92:	f7f0 fd41 	bl	8000618 <__aeabi_dmul>
 800fb96:	4642      	mov	r2, r8
 800fb98:	464b      	mov	r3, r9
 800fb9a:	f7f0 fb87 	bl	80002ac <__adddf3>
 800fb9e:	4604      	mov	r4, r0
 800fba0:	460d      	mov	r5, r1
 800fba2:	a349      	add	r3, pc, #292	; (adr r3, 800fcc8 <__kernel_tan+0x388>)
 800fba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba8:	ec51 0b19 	vmov	r0, r1, d9
 800fbac:	f7f0 fd34 	bl	8000618 <__aeabi_dmul>
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	462b      	mov	r3, r5
 800fbb4:	f7f0 fb7a 	bl	80002ac <__adddf3>
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4602      	mov	r2, r0
 800fbbc:	ec41 0b18 	vmov	d8, r0, r1
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	f7f0 fb72 	bl	80002ac <__adddf3>
 800fbc8:	4b44      	ldr	r3, [pc, #272]	; (800fcdc <__kernel_tan+0x39c>)
 800fbca:	4604      	mov	r4, r0
 800fbcc:	460d      	mov	r5, r1
 800fbce:	429f      	cmp	r7, r3
 800fbd0:	f340 8086 	ble.w	800fce0 <__kernel_tan+0x3a0>
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f7f0 fcb5 	bl	8000544 <__aeabi_i2d>
 800fbda:	4622      	mov	r2, r4
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	462b      	mov	r3, r5
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	f7f0 fd17 	bl	8000618 <__aeabi_dmul>
 800fbea:	4606      	mov	r6, r0
 800fbec:	460f      	mov	r7, r1
 800fbee:	4642      	mov	r2, r8
 800fbf0:	464b      	mov	r3, r9
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	f7f0 fb59 	bl	80002ac <__adddf3>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4630      	mov	r0, r6
 800fc00:	4639      	mov	r1, r7
 800fc02:	f7f0 fe33 	bl	800086c <__aeabi_ddiv>
 800fc06:	ec53 2b18 	vmov	r2, r3, d8
 800fc0a:	f7f0 fb4d 	bl	80002a8 <__aeabi_dsub>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	460b      	mov	r3, r1
 800fc12:	4650      	mov	r0, sl
 800fc14:	4659      	mov	r1, fp
 800fc16:	f7f0 fb47 	bl	80002a8 <__aeabi_dsub>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	f7f0 fb45 	bl	80002ac <__adddf3>
 800fc22:	4602      	mov	r2, r0
 800fc24:	460b      	mov	r3, r1
 800fc26:	4640      	mov	r0, r8
 800fc28:	4649      	mov	r1, r9
 800fc2a:	f7f0 fb3d 	bl	80002a8 <__aeabi_dsub>
 800fc2e:	9b00      	ldr	r3, [sp, #0]
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800fc38:	f00a 0a02 	and.w	sl, sl, #2
 800fc3c:	f1ca 0001 	rsb	r0, sl, #1
 800fc40:	f7f0 fc80 	bl	8000544 <__aeabi_i2d>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4620      	mov	r0, r4
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	f7f0 fce4 	bl	8000618 <__aeabi_dmul>
 800fc50:	e69f      	b.n	800f992 <__kernel_tan+0x52>
 800fc52:	bf00      	nop
 800fc54:	f3af 8000 	nop.w
 800fc58:	54442d18 	.word	0x54442d18
 800fc5c:	3fe921fb 	.word	0x3fe921fb
 800fc60:	33145c07 	.word	0x33145c07
 800fc64:	3c81a626 	.word	0x3c81a626
 800fc68:	74bf7ad4 	.word	0x74bf7ad4
 800fc6c:	3efb2a70 	.word	0x3efb2a70
 800fc70:	32f0a7e9 	.word	0x32f0a7e9
 800fc74:	3f12b80f 	.word	0x3f12b80f
 800fc78:	1a8d1068 	.word	0x1a8d1068
 800fc7c:	3f3026f7 	.word	0x3f3026f7
 800fc80:	fee08315 	.word	0xfee08315
 800fc84:	3f57dbc8 	.word	0x3f57dbc8
 800fc88:	e96e8493 	.word	0xe96e8493
 800fc8c:	3f8226e3 	.word	0x3f8226e3
 800fc90:	1bb341fe 	.word	0x1bb341fe
 800fc94:	3faba1ba 	.word	0x3faba1ba
 800fc98:	db605373 	.word	0xdb605373
 800fc9c:	bef375cb 	.word	0xbef375cb
 800fca0:	a03792a6 	.word	0xa03792a6
 800fca4:	3f147e88 	.word	0x3f147e88
 800fca8:	f2f26501 	.word	0xf2f26501
 800fcac:	3f4344d8 	.word	0x3f4344d8
 800fcb0:	c9560328 	.word	0xc9560328
 800fcb4:	3f6d6d22 	.word	0x3f6d6d22
 800fcb8:	8406d637 	.word	0x8406d637
 800fcbc:	3f9664f4 	.word	0x3f9664f4
 800fcc0:	1110fe7a 	.word	0x1110fe7a
 800fcc4:	3fc11111 	.word	0x3fc11111
 800fcc8:	55555563 	.word	0x55555563
 800fccc:	3fd55555 	.word	0x3fd55555
 800fcd0:	3e2fffff 	.word	0x3e2fffff
 800fcd4:	3ff00000 	.word	0x3ff00000
 800fcd8:	bff00000 	.word	0xbff00000
 800fcdc:	3fe59427 	.word	0x3fe59427
 800fce0:	2e01      	cmp	r6, #1
 800fce2:	d02f      	beq.n	800fd44 <__kernel_tan+0x404>
 800fce4:	2600      	movs	r6, #0
 800fce6:	460f      	mov	r7, r1
 800fce8:	4602      	mov	r2, r0
 800fcea:	460b      	mov	r3, r1
 800fcec:	4689      	mov	r9, r1
 800fcee:	2000      	movs	r0, #0
 800fcf0:	4916      	ldr	r1, [pc, #88]	; (800fd4c <__kernel_tan+0x40c>)
 800fcf2:	46b0      	mov	r8, r6
 800fcf4:	f7f0 fdba 	bl	800086c <__aeabi_ddiv>
 800fcf8:	4652      	mov	r2, sl
 800fcfa:	465b      	mov	r3, fp
 800fcfc:	e9cd 0100 	strd	r0, r1, [sp]
 800fd00:	e9dd 4500 	ldrd	r4, r5, [sp]
 800fd04:	4630      	mov	r0, r6
 800fd06:	4639      	mov	r1, r7
 800fd08:	f7f0 face 	bl	80002a8 <__aeabi_dsub>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	4634      	mov	r4, r6
 800fd12:	ec51 0b18 	vmov	r0, r1, d8
 800fd16:	f7f0 fac7 	bl	80002a8 <__aeabi_dsub>
 800fd1a:	4632      	mov	r2, r6
 800fd1c:	462b      	mov	r3, r5
 800fd1e:	f7f0 fc7b 	bl	8000618 <__aeabi_dmul>
 800fd22:	4642      	mov	r2, r8
 800fd24:	4606      	mov	r6, r0
 800fd26:	460f      	mov	r7, r1
 800fd28:	462b      	mov	r3, r5
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	f7f0 fc73 	bl	8000618 <__aeabi_dmul>
 800fd32:	2200      	movs	r2, #0
 800fd34:	4b06      	ldr	r3, [pc, #24]	; (800fd50 <__kernel_tan+0x410>)
 800fd36:	f7f0 fab9 	bl	80002ac <__adddf3>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4630      	mov	r0, r6
 800fd40:	4639      	mov	r1, r7
 800fd42:	e665      	b.n	800fa10 <__kernel_tan+0xd0>
 800fd44:	4682      	mov	sl, r0
 800fd46:	468b      	mov	fp, r1
 800fd48:	e625      	b.n	800f996 <__kernel_tan+0x56>
 800fd4a:	bf00      	nop
 800fd4c:	bff00000 	.word	0xbff00000
 800fd50:	3ff00000 	.word	0x3ff00000

0800fd54 <fabs>:
 800fd54:	ec51 0b10 	vmov	r0, r1, d0
 800fd58:	ee10 2a10 	vmov	r2, s0
 800fd5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd60:	ec43 2b10 	vmov	d0, r2, r3
 800fd64:	4770      	bx	lr
	...

0800fd68 <scalbn>:
 800fd68:	b570      	push	{r4, r5, r6, lr}
 800fd6a:	ec55 4b10 	vmov	r4, r5, d0
 800fd6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fd72:	4606      	mov	r6, r0
 800fd74:	462b      	mov	r3, r5
 800fd76:	b999      	cbnz	r1, 800fda0 <scalbn+0x38>
 800fd78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fd7c:	4323      	orrs	r3, r4
 800fd7e:	d03f      	beq.n	800fe00 <scalbn+0x98>
 800fd80:	4b35      	ldr	r3, [pc, #212]	; (800fe58 <scalbn+0xf0>)
 800fd82:	4629      	mov	r1, r5
 800fd84:	2200      	movs	r2, #0
 800fd86:	ee10 0a10 	vmov	r0, s0
 800fd8a:	f7f0 fc45 	bl	8000618 <__aeabi_dmul>
 800fd8e:	4b33      	ldr	r3, [pc, #204]	; (800fe5c <scalbn+0xf4>)
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	429e      	cmp	r6, r3
 800fd96:	da10      	bge.n	800fdba <scalbn+0x52>
 800fd98:	a327      	add	r3, pc, #156	; (adr r3, 800fe38 <scalbn+0xd0>)
 800fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9e:	e01f      	b.n	800fde0 <scalbn+0x78>
 800fda0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fda4:	4291      	cmp	r1, r2
 800fda6:	d10c      	bne.n	800fdc2 <scalbn+0x5a>
 800fda8:	ee10 2a10 	vmov	r2, s0
 800fdac:	4620      	mov	r0, r4
 800fdae:	4629      	mov	r1, r5
 800fdb0:	f7f0 fa7c 	bl	80002ac <__adddf3>
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	e022      	b.n	800fe00 <scalbn+0x98>
 800fdba:	460b      	mov	r3, r1
 800fdbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fdc0:	3936      	subs	r1, #54	; 0x36
 800fdc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fdc6:	4296      	cmp	r6, r2
 800fdc8:	dd0d      	ble.n	800fde6 <scalbn+0x7e>
 800fdca:	2d00      	cmp	r5, #0
 800fdcc:	a11c      	add	r1, pc, #112	; (adr r1, 800fe40 <scalbn+0xd8>)
 800fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd2:	da02      	bge.n	800fdda <scalbn+0x72>
 800fdd4:	a11c      	add	r1, pc, #112	; (adr r1, 800fe48 <scalbn+0xe0>)
 800fdd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdda:	a319      	add	r3, pc, #100	; (adr r3, 800fe40 <scalbn+0xd8>)
 800fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde0:	f7f0 fc1a 	bl	8000618 <__aeabi_dmul>
 800fde4:	e7e6      	b.n	800fdb4 <scalbn+0x4c>
 800fde6:	1872      	adds	r2, r6, r1
 800fde8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fdec:	428a      	cmp	r2, r1
 800fdee:	dcec      	bgt.n	800fdca <scalbn+0x62>
 800fdf0:	2a00      	cmp	r2, #0
 800fdf2:	dd08      	ble.n	800fe06 <scalbn+0x9e>
 800fdf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fdf8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fdfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fe00:	ec45 4b10 	vmov	d0, r4, r5
 800fe04:	bd70      	pop	{r4, r5, r6, pc}
 800fe06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fe0a:	da08      	bge.n	800fe1e <scalbn+0xb6>
 800fe0c:	2d00      	cmp	r5, #0
 800fe0e:	a10a      	add	r1, pc, #40	; (adr r1, 800fe38 <scalbn+0xd0>)
 800fe10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe14:	dac0      	bge.n	800fd98 <scalbn+0x30>
 800fe16:	a10e      	add	r1, pc, #56	; (adr r1, 800fe50 <scalbn+0xe8>)
 800fe18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe1c:	e7bc      	b.n	800fd98 <scalbn+0x30>
 800fe1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fe22:	3236      	adds	r2, #54	; 0x36
 800fe24:	4620      	mov	r0, r4
 800fe26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fe2a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fe2e:	2200      	movs	r2, #0
 800fe30:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <scalbn+0xf8>)
 800fe32:	e7d5      	b.n	800fde0 <scalbn+0x78>
 800fe34:	f3af 8000 	nop.w
 800fe38:	c2f8f359 	.word	0xc2f8f359
 800fe3c:	01a56e1f 	.word	0x01a56e1f
 800fe40:	8800759c 	.word	0x8800759c
 800fe44:	7e37e43c 	.word	0x7e37e43c
 800fe48:	8800759c 	.word	0x8800759c
 800fe4c:	fe37e43c 	.word	0xfe37e43c
 800fe50:	c2f8f359 	.word	0xc2f8f359
 800fe54:	81a56e1f 	.word	0x81a56e1f
 800fe58:	43500000 	.word	0x43500000
 800fe5c:	ffff3cb0 	.word	0xffff3cb0
 800fe60:	3c900000 	.word	0x3c900000
 800fe64:	00000000 	.word	0x00000000

0800fe68 <floor>:
 800fe68:	ec51 0b10 	vmov	r0, r1, d0
 800fe6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800fe78:	460c      	mov	r4, r1
 800fe7a:	ee10 5a10 	vmov	r5, s0
 800fe7e:	ee10 8a10 	vmov	r8, s0
 800fe82:	2e13      	cmp	r6, #19
 800fe84:	dc32      	bgt.n	800feec <floor+0x84>
 800fe86:	2e00      	cmp	r6, #0
 800fe88:	da14      	bge.n	800feb4 <floor+0x4c>
 800fe8a:	a333      	add	r3, pc, #204	; (adr r3, 800ff58 <floor+0xf0>)
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	f7f0 fa0c 	bl	80002ac <__adddf3>
 800fe94:	2200      	movs	r2, #0
 800fe96:	2300      	movs	r3, #0
 800fe98:	f7f0 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 800fe9c:	b138      	cbz	r0, 800feae <floor+0x46>
 800fe9e:	2c00      	cmp	r4, #0
 800fea0:	da54      	bge.n	800ff4c <floor+0xe4>
 800fea2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fea6:	4325      	orrs	r5, r4
 800fea8:	d053      	beq.n	800ff52 <floor+0xea>
 800feaa:	2500      	movs	r5, #0
 800feac:	4c2c      	ldr	r4, [pc, #176]	; (800ff60 <floor+0xf8>)
 800feae:	4621      	mov	r1, r4
 800feb0:	4628      	mov	r0, r5
 800feb2:	e025      	b.n	800ff00 <floor+0x98>
 800feb4:	4f2b      	ldr	r7, [pc, #172]	; (800ff64 <floor+0xfc>)
 800feb6:	4137      	asrs	r7, r6
 800feb8:	ea01 0307 	and.w	r3, r1, r7
 800febc:	4303      	orrs	r3, r0
 800febe:	d01f      	beq.n	800ff00 <floor+0x98>
 800fec0:	a325      	add	r3, pc, #148	; (adr r3, 800ff58 <floor+0xf0>)
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	f7f0 f9f1 	bl	80002ac <__adddf3>
 800feca:	2200      	movs	r2, #0
 800fecc:	2300      	movs	r3, #0
 800fece:	f7f0 fe33 	bl	8000b38 <__aeabi_dcmpgt>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d0eb      	beq.n	800feae <floor+0x46>
 800fed6:	2c00      	cmp	r4, #0
 800fed8:	f04f 0500 	mov.w	r5, #0
 800fedc:	bfbe      	ittt	lt
 800fede:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fee2:	4133      	asrlt	r3, r6
 800fee4:	18e4      	addlt	r4, r4, r3
 800fee6:	ea24 0407 	bic.w	r4, r4, r7
 800feea:	e7e0      	b.n	800feae <floor+0x46>
 800feec:	2e33      	cmp	r6, #51	; 0x33
 800feee:	dd0b      	ble.n	800ff08 <floor+0xa0>
 800fef0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fef4:	d104      	bne.n	800ff00 <floor+0x98>
 800fef6:	ee10 2a10 	vmov	r2, s0
 800fefa:	460b      	mov	r3, r1
 800fefc:	f7f0 f9d6 	bl	80002ac <__adddf3>
 800ff00:	ec41 0b10 	vmov	d0, r0, r1
 800ff04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff08:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ff0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ff10:	40df      	lsrs	r7, r3
 800ff12:	4238      	tst	r0, r7
 800ff14:	d0f4      	beq.n	800ff00 <floor+0x98>
 800ff16:	a310      	add	r3, pc, #64	; (adr r3, 800ff58 <floor+0xf0>)
 800ff18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1c:	f7f0 f9c6 	bl	80002ac <__adddf3>
 800ff20:	2200      	movs	r2, #0
 800ff22:	2300      	movs	r3, #0
 800ff24:	f7f0 fe08 	bl	8000b38 <__aeabi_dcmpgt>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d0c0      	beq.n	800feae <floor+0x46>
 800ff2c:	2c00      	cmp	r4, #0
 800ff2e:	da0a      	bge.n	800ff46 <floor+0xde>
 800ff30:	2e14      	cmp	r6, #20
 800ff32:	d101      	bne.n	800ff38 <floor+0xd0>
 800ff34:	3401      	adds	r4, #1
 800ff36:	e006      	b.n	800ff46 <floor+0xde>
 800ff38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	40b3      	lsls	r3, r6
 800ff40:	441d      	add	r5, r3
 800ff42:	45a8      	cmp	r8, r5
 800ff44:	d8f6      	bhi.n	800ff34 <floor+0xcc>
 800ff46:	ea25 0507 	bic.w	r5, r5, r7
 800ff4a:	e7b0      	b.n	800feae <floor+0x46>
 800ff4c:	2500      	movs	r5, #0
 800ff4e:	462c      	mov	r4, r5
 800ff50:	e7ad      	b.n	800feae <floor+0x46>
 800ff52:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ff56:	e7aa      	b.n	800feae <floor+0x46>
 800ff58:	8800759c 	.word	0x8800759c
 800ff5c:	7e37e43c 	.word	0x7e37e43c
 800ff60:	bff00000 	.word	0xbff00000
 800ff64:	000fffff 	.word	0x000fffff

0800ff68 <_init>:
 800ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6a:	bf00      	nop
 800ff6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff6e:	bc08      	pop	{r3}
 800ff70:	469e      	mov	lr, r3
 800ff72:	4770      	bx	lr

0800ff74 <_fini>:
 800ff74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff76:	bf00      	nop
 800ff78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff7a:	bc08      	pop	{r3}
 800ff7c:	469e      	mov	lr, r3
 800ff7e:	4770      	bx	lr
