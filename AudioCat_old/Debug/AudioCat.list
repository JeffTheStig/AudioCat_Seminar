
AudioCat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096fc  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013b  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  08009a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000690  2000005c  08009af4  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006ec  08009af4  000206ec  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   000170bd  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a47  00000000  00000000  00037192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001240  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e06  00000000  00000000  0003ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a84d  00000000  00000000  0003bc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017131  00000000  00000000  00076473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00176dd9  00000000  00000000  0008d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005344  00000000  00000000  00204380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  002096c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000005c 	.word	0x2000005c
 800026c:	00000000 	.word	0x00000000
 8000270:	08009934 	.word	0x08009934

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000060 	.word	0x20000060
 800028c:	08009934 	.word	0x08009934

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d146      	bne.n	800036e <__udivmoddi4+0x9e>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d95e      	bls.n	80003a4 <__udivmoddi4+0xd4>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	409c      	lsls	r4, r3
 80002f8:	fa20 f202 	lsr.w	r2, r0, r2
 80002fc:	4317      	orrs	r7, r2
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	0c22      	lsrs	r2, r4, #16
 8000308:	fbb7 f1fe 	udiv	r1, r7, lr
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	fb01 f005 	mul.w	r0, r1, r5
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x5e>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x5c>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 8134 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	b2a4      	uxth	r4, r4
 8000332:	fbb2 f0fe 	udiv	r0, r2, lr
 8000336:	fb0e 2210 	mls	r2, lr, r0, r2
 800033a:	fb00 f505 	mul.w	r5, r0, r5
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	42a5      	cmp	r5, r4
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x88>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f100 32ff 	add.w	r2, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x86>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f200 8119 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 8000356:	4610      	mov	r0, r2
 8000358:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	2100      	movs	r1, #0
 8000360:	b11e      	cbz	r6, 800036a <__udivmoddi4+0x9a>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c6 4300 	strd	r4, r3, [r6]
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036e:	428b      	cmp	r3, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0xb4>
 8000372:	2e00      	cmp	r6, #0
 8000374:	f000 80fc 	beq.w	8000570 <__udivmoddi4+0x2a0>
 8000378:	2100      	movs	r1, #0
 800037a:	e9c6 0500 	strd	r0, r5, [r6]
 800037e:	4608      	mov	r0, r1
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14c      	bne.n	8000426 <__udivmoddi4+0x156>
 800038c:	42ab      	cmp	r3, r5
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2a6>
 8000392:	4282      	cmp	r2, r0
 8000394:	f240 80ef 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000398:	4608      	mov	r0, r1
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e5      	beq.n	800036a <__udivmoddi4+0x9a>
 800039e:	e9c6 4700 	strd	r4, r7, [r6]
 80003a2:	e7e2      	b.n	800036a <__udivmoddi4+0x9a>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xd8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f382 	clz	r3, r2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	f040 809f 	bne.w	80004f0 <__udivmoddi4+0x220>
 80003b2:	1a8a      	subs	r2, r1, r2
 80003b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b8:	fa1f f78c 	uxth.w	r7, ip
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb2 f5fe 	udiv	r5, r2, lr
 80003c2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c6:	0c22      	lsrs	r2, r4, #16
 80003c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003cc:	fb07 f005 	mul.w	r0, r7, r5
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d90f      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003d4:	eb1c 0202 	adds.w	r2, ip, r2
 80003d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003dc:	bf2c      	ite	cs
 80003de:	f04f 0901 	movcs.w	r9, #1
 80003e2:	f04f 0900 	movcc.w	r9, #0
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d903      	bls.n	80003f2 <__udivmoddi4+0x122>
 80003ea:	f1b9 0f00 	cmp.w	r9, #0
 80003ee:	f000 80ce 	beq.w	800058e <__udivmoddi4+0x2be>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8000400:	fb00 f707 	mul.w	r7, r0, r7
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	42a7      	cmp	r7, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	42a7      	cmp	r7, r4
 8000418:	f200 80b3 	bhi.w	8000582 <__udivmoddi4+0x2b2>
 800041c:	4610      	mov	r0, r2
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000424:	e79c      	b.n	8000360 <__udivmoddi4+0x90>
 8000426:	f1c1 0420 	rsb	r4, r1, #32
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000430:	fa22 f704 	lsr.w	r7, r2, r4
 8000434:	40e5      	lsrs	r5, r4
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f304 	lsr.w	r3, r0, r4
 800043e:	4088      	lsls	r0, r1
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fbb5 fef8 	udiv	lr, r5, r8
 8000454:	fb08 551e 	mls	r5, r8, lr, r5
 8000458:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045c:	fb0e f90c 	mul.w	r9, lr, ip
 8000460:	45a9      	cmp	r9, r5
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1b2>
 8000464:	197d      	adds	r5, r7, r5
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a9      	cmp	r9, r5
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 808d 	beq.w	800059a <__udivmoddi4+0x2ca>
 8000480:	46d6      	mov	lr, sl
 8000482:	eba5 0509 	sub.w	r5, r5, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb5 f3f8 	udiv	r3, r5, r8
 800048e:	fb08 5513 	mls	r5, r8, r3, r5
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800049a:	45ac      	cmp	ip, r5
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1dc>
 800049e:	197d      	adds	r5, r7, r5
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1da>
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d87e      	bhi.n	80005a8 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004b0:	eba5 050c 	sub.w	r5, r5, ip
 80004b4:	fba3 9802 	umull	r9, r8, r3, r2
 80004b8:	4545      	cmp	r5, r8
 80004ba:	46ce      	mov	lr, r9
 80004bc:	46c4      	mov	ip, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1f6>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x200>
 80004c2:	4548      	cmp	r0, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x200>
 80004c6:	3b01      	subs	r3, #1
 80004c8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004cc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d06f      	beq.n	80005b4 <__udivmoddi4+0x2e4>
 80004d4:	ebb0 020e 	subs.w	r2, r0, lr
 80004d8:	eb65 050c 	sbc.w	r5, r5, ip
 80004dc:	40ca      	lsrs	r2, r1
 80004de:	fa05 f404 	lsl.w	r4, r5, r4
 80004e2:	40cd      	lsrs	r5, r1
 80004e4:	4618      	mov	r0, r3
 80004e6:	4314      	orrs	r4, r2
 80004e8:	2100      	movs	r1, #0
 80004ea:	e9c6 4500 	strd	r4, r5, [r6]
 80004ee:	e73c      	b.n	800036a <__udivmoddi4+0x9a>
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	f1c3 0220 	rsb	r2, r3, #32
 80004f8:	4099      	lsls	r1, r3
 80004fa:	409c      	lsls	r4, r3
 80004fc:	40d5      	lsrs	r5, r2
 80004fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000502:	fa20 f202 	lsr.w	r2, r0, r2
 8000506:	fa1f f78c 	uxth.w	r7, ip
 800050a:	fbb5 f0fe 	udiv	r0, r5, lr
 800050e:	430a      	orrs	r2, r1
 8000510:	fb0e 5510 	mls	r5, lr, r0, r5
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f507 	mul.w	r5, r0, r7
 800051e:	428d      	cmp	r5, r1
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x270>
 8000522:	eb1c 0101 	adds.w	r1, ip, r1
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	bf2c      	ite	cs
 800052c:	f04f 0901 	movcs.w	r9, #1
 8000530:	f04f 0900 	movcc.w	r9, #0
 8000534:	428d      	cmp	r5, r1
 8000536:	d902      	bls.n	800053e <__udivmoddi4+0x26e>
 8000538:	f1b9 0f00 	cmp.w	r9, #0
 800053c:	d031      	beq.n	80005a2 <__udivmoddi4+0x2d2>
 800053e:	4640      	mov	r0, r8
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5fe 	udiv	r5, r1, lr
 8000548:	fb0e 1115 	mls	r1, lr, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f107 	mul.w	r1, r5, r7
 8000554:	4291      	cmp	r1, r2
 8000556:	d907      	bls.n	8000568 <__udivmoddi4+0x298>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x296>
 8000562:	4291      	cmp	r1, r2
 8000564:	d823      	bhi.n	80005ae <__udivmoddi4+0x2de>
 8000566:	4645      	mov	r5, r8
 8000568:	1a52      	subs	r2, r2, r1
 800056a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056e:	e726      	b.n	80003be <__udivmoddi4+0xee>
 8000570:	4631      	mov	r1, r6
 8000572:	4630      	mov	r0, r6
 8000574:	e6f9      	b.n	800036a <__udivmoddi4+0x9a>
 8000576:	1a84      	subs	r4, r0, r2
 8000578:	eb65 0203 	sbc.w	r2, r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	4617      	mov	r7, r2
 8000580:	e70b      	b.n	800039a <__udivmoddi4+0xca>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14e>
 8000588:	4464      	add	r4, ip
 800058a:	3802      	subs	r0, #2
 800058c:	e6e4      	b.n	8000358 <__udivmoddi4+0x88>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	3902      	subs	r1, #2
 8000596:	4462      	add	r2, ip
 8000598:	e6c9      	b.n	800032e <__udivmoddi4+0x5e>
 800059a:	f1ae 0e02 	sub.w	lr, lr, #2
 800059e:	443d      	add	r5, r7
 80005a0:	e76f      	b.n	8000482 <__udivmoddi4+0x1b2>
 80005a2:	3802      	subs	r0, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	e7cb      	b.n	8000540 <__udivmoddi4+0x270>
 80005a8:	3b02      	subs	r3, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e77e      	b.n	80004ac <__udivmoddi4+0x1dc>
 80005ae:	3d02      	subs	r5, #2
 80005b0:	4462      	add	r2, ip
 80005b2:	e7d9      	b.n	8000568 <__udivmoddi4+0x298>
 80005b4:	4618      	mov	r0, r3
 80005b6:	4631      	mov	r1, r6
 80005b8:	e6d7      	b.n	800036a <__udivmoddi4+0x9a>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ce:	4909      	ldr	r1, [pc, #36]	; (80005f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e4:	68fb      	ldr	r3, [r7, #12]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	46020c00 	.word	0x46020c00

080005f8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <LL_APB1_GRP2_EnableClock+0x34>)
 8000602:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000606:	4909      	ldr	r1, [pc, #36]	; (800062c <LL_APB1_GRP2_EnableClock+0x34>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <LL_APB1_GRP2_EnableClock+0x34>)
 8000612:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061c:	68fb      	ldr	r3, [r7, #12]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	46020c00 	.word	0x46020c00

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fcf5 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f847 	bl	80006cc <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800063e:	f000 f8a6 	bl	800078e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f9e7 	bl	8000a14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000646:	f000 f8b1 	bl	80007ac <MX_ADC1_Init>
  MX_ICACHE_Init();
 800064a:	f000 f91f 	bl	800088c <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800064e:	f000 f937 	bl	80008c0 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000652:	f000 f96b 	bl	800092c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000656:	f000 f9b5 	bl	80009c4 <MX_USB_OTG_HS_HCD_Init>
  MX_MEMORYMAP_Init();
 800065a:	f000 f92a 	bl	80008b2 <MX_MEMORYMAP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	4815      	ldr	r0, [pc, #84]	; (80006bc <main+0x8c>)
 8000666:	f002 ff79 	bl	800355c <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 800066a:	4815      	ldr	r0, [pc, #84]	; (80006c0 <main+0x90>)
 800066c:	f001 fbc4 	bl	8001df8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000670:	f04f 31ff 	mov.w	r1, #4294967295
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <main+0x90>)
 8000676:	f001 fc9d 	bl	8001fb4 <HAL_ADC_PollForConversion>
	  raw= HAL_ADC_GetValue(&hadc1);
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0x90>)
 800067c:	f001 fdec 	bl	8002258 <HAL_ADC_GetValue>
 8000680:	4603      	mov	r3, r0
 8000682:	81fb      	strh	r3, [r7, #14]
    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0x8c>)
 800068c:	f002 ff66 	bl	800355c <HAL_GPIO_WritePin>
	  sprintf(msg, "%hu\r\n", raw);
 8000690:	89fa      	ldrh	r2, [r7, #14]
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	490b      	ldr	r1, [pc, #44]	; (80006c4 <main+0x94>)
 8000696:	4618      	mov	r0, r3
 8000698:	f008 fc9a 	bl	8008fd0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fdf6 	bl	8000290 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <main+0x98>)
 80006b0:	f007 fb70 	bl	8007d94 <HAL_UART_Transmit>
	  HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fd39 	bl	800112c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006ba:	e7d0      	b.n	800065e <main+0x2e>
 80006bc:	42020000 	.word	0x42020000
 80006c0:	20000078 	.word	0x20000078
 80006c4:	0800994c 	.word	0x0800994c
 80006c8:	20000104 	.word	0x20000104

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09e      	sub	sp, #120	; 0x78
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2260      	movs	r2, #96	; 0x60
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f008 fc98 	bl	8009010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
 80006ee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80006f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006f4:	f002 ffd0 	bl	8003698 <HAL_PWREx_ControlVoltageScaling>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006fe:	f000 fa41 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000702:	2312      	movs	r3, #18
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000720:	2301      	movs	r3, #1
 8000722:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800072a:	2303      	movs	r3, #3
 800072c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800072e:	2308      	movs	r3, #8
 8000730:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000732:	2308      	movs	r3, #8
 8000734:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800073e:	230c      	movs	r3, #12
 8000740:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	4618      	mov	r0, r3
 800074c:	f003 f8ce 	bl	80038ec <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000756:	f000 fa15 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	231f      	movs	r3, #31
 800075c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f003 ff94 	bl	80046a4 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000782:	f000 f9ff 	bl	8000b84 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3778      	adds	r7, #120	; 0x78
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000792:	f003 f86d 	bl	8003870 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000796:	2002      	movs	r0, #2
 8000798:	f003 f80a 	bl	80037b0 <HAL_PWREx_ConfigSupply>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007a2:	f000 f9ef 	bl	8000b84 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f008 fc29 	bl	8009010 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007c0:	4a30      	ldr	r2, [pc, #192]	; (8000884 <MX_ADC1_Init+0xd8>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_ADC1_Init+0xd4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_ADC1_Init+0xd4>)
 800080c:	2200      	movs	r2, #0
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_ADC1_Init+0xd4>)
 800081a:	2200      	movs	r2, #0
 800081c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_ADC1_Init+0xd4>)
 800082c:	2200      	movs	r2, #0
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_ADC1_Init+0xd4>)
 800083a:	f000 fff5 	bl	8001828 <HAL_ADC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000844:	f000 f99e 	bl	8000b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_ADC1_Init+0xdc>)
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_ADC1_Init+0xd4>)
 8000868:	f001 fd04 	bl	8002274 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000872:	f000 f987 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000078 	.word	0x20000078
 8000884:	42028000 	.word	0x42028000
 8000888:	0c000008 	.word	0x0c000008

0800088c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000890:	2000      	movs	r0, #0
 8000892:	f002 fed1 	bl	8003638 <HAL_ICACHE_ConfigAssociativityMode>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800089c:	f000 f972 	bl	8000b84 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008a0:	f002 feea 	bl	8003678 <HAL_ICACHE_Enable>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008aa:	f000 f96b 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80008d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80008da:	f7ff fe8d 	bl	80005f8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fe6e 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fe6b 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80008ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008f0:	2303      	movs	r3, #3
 80008f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_UCPD1_Init+0x64>)
 80008fe:	f008 f8ec 	bl	8008ada <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000906:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_UCPD1_Init+0x68>)
 8000916:	f008 f8e0 	bl	8008ada <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	42020400 	.word	0x42020400
 8000928:	42020000 	.word	0x42020000

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000932:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <MX_USART1_UART_Init+0x94>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_USART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000976:	f007 f9bd 	bl	8007cf4 <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 f900 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_USART1_UART_Init+0x90>)
 8000988:	f007 fe92 	bl	80086b0 <HAL_UARTEx_SetTxFifoThreshold>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000992:	f000 f8f7 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <MX_USART1_UART_Init+0x90>)
 800099a:	f007 fec7 	bl	800872c <HAL_UARTEx_SetRxFifoThreshold>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 f8ee 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_USART1_UART_Init+0x90>)
 80009aa:	f007 fe48 	bl	800863e <HAL_UARTEx_DisableFifoMode>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 f8e6 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000104 	.word	0x20000104
 80009c0:	40013800 	.word	0x40013800

080009c4 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 80009cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009d0:	2210      	movs	r2, #16
 80009d2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USB_OTG_HS_HCD_Init+0x48>)
 80009fa:	f002 fdc7 	bl	800358c <HAL_HCD_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8000a04:	f000 f8be 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000198 	.word	0x20000198
 8000a10:	42040000 	.word	0x42040000

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b51      	ldr	r3, [pc, #324]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a30:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a48:	4b49      	ldr	r3, [pc, #292]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4e:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a58:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6c:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a76:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a8a:	4a39      	ldr	r2, [pc, #228]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa8:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	482b      	ldr	r0, [pc, #172]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000ac6:	f002 fd49 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	482a      	ldr	r0, [pc, #168]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000ad0:	f002 fd44 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	21a0      	movs	r1, #160	; 0xa0
 8000ad8:	4828      	ldr	r0, [pc, #160]	; (8000b7c <MX_GPIO_Init+0x168>)
 8000ada:	f002 fd3f 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_GPIO_Init+0x16c>)
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4821      	ldr	r0, [pc, #132]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000af4:	f002 fb5a 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481b      	ldr	r0, [pc, #108]	; (8000b7c <MX_GPIO_Init+0x168>)
 8000b0e:	f002 fb4d 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000b2a:	f002 fb3f 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000b46:	f002 fb31 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8000b4a:	23a0      	movs	r3, #160	; 0xa0
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_GPIO_Init+0x168>)
 8000b62:	f002 fb23 	bl	80031ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	46020c00 	.word	0x46020c00
 8000b74:	42021800 	.word	0x42021800
 8000b78:	42020800 	.word	0x42020800
 8000b7c:	42020400 	.word	0x42020400
 8000b80:	10110000 	.word	0x10110000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x30>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x30>)
 8000ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000bb4:	f002 fe6c 	bl	8003890 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	46020c00 	.word	0x46020c00

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0c2      	sub	sp, #264	; 0x108
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bd2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	22d8      	movs	r2, #216	; 0xd8
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fa0f 	bl	8009010 <memset>
  if(hadc->Instance==ADC1)
 8000bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <HAL_ADC_MspInit+0x108>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d15e      	bne.n	8000cc2 <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f911 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000c28:	f7ff ffac 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c32:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_ADC_MspInit+0x10c>)
 8000c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c86:	2304      	movs	r3, #4
 8000c88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <HAL_ADC_MspInit+0x110>)
 8000ca0:	f002 fa84 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_ADC_MspInit+0x114>)
 8000cbe:	f002 fa75 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	42028000 	.word	0x42028000
 8000cd0:	46020c00 	.word	0x46020c00
 8000cd4:	42020800 	.word	0x42020800
 8000cd8:	42020000 	.word	0x42020000

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0c0      	sub	sp, #256	; 0x100
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	22d8      	movs	r2, #216	; 0xd8
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f008 f987 	bl	8009010 <memset>
  if(huart->Instance==USART1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_UART_MspInit+0xc8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d145      	bne.n	8000d98 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d0c:	f04f 0201 	mov.w	r2, #1
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f88f 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d2c:	f7ff ff2a 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000d6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d86:	2307      	movs	r3, #7
 8000d88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_UART_MspInit+0xd0>)
 8000d94:	f002 fa0a 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013800 	.word	0x40013800
 8000da8:	46020c00 	.word	0x46020c00
 8000dac:	42020000 	.word	0x42020000

08000db0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0bc      	sub	sp, #240	; 0xf0
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	22d8      	movs	r2, #216	; 0xd8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 f925 	bl	8009010 <memset>
  if(hhcd->Instance==USB_OTG_HS)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <HAL_HCD_MspInit+0xe8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d15e      	bne.n	8000e8e <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	f04f 0308 	mov.w	r3, #8
 8000dd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8000ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 f82b 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 8000df4:	f7ff fec6 	bl	8000b84 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8000df8:	200c      	movs	r0, #12
 8000dfa:	f000 f9cf 	bl	800119c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11b      	bne.n	8000e80 <HAL_HCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000e66:	f002 fcf3 	bl	8003850 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000e6a:	f002 fd21 	bl	80038b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_HCD_MspInit+0xec>)
 8000e76:	f023 0304 	bic.w	r3, r3, #4
 8000e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e7e:	e003      	b.n	8000e88 <HAL_HCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000e80:	f002 fce6 	bl	8003850 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000e84:	f002 fd14 	bl	80038b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 f973 	bl	8001174 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	37f0      	adds	r7, #240	; 0xf0
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	42040000 	.word	0x42040000
 8000e9c:	46020c00 	.word	0x46020c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8fe 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f008 f87c 	bl	8009020 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20270000 	.word	0x20270000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	2000059c 	.word	0x2000059c
 8000f5c:	200006f0 	.word	0x200006f0

08000f60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <SystemInit+0x68>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <SystemInit+0x68>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <SystemInit+0x6c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <SystemInit+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SystemInit+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <SystemInit+0x6c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <SystemInit+0x6c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <SystemInit+0x6c>)
 8000f92:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f96:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <SystemInit+0x6c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <SystemInit+0x6c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <SystemInit+0x6c>)
 8000fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SystemInit+0x6c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SystemInit+0x68>)
 8000fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fba:	609a      	str	r2, [r3, #8]
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	46020c00 	.word	0x46020c00

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd4:	f7ff ffc4 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fda:	e003      	b.n	8000fe4 <LoopCopyDataInit>

08000fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fe2:	3104      	adds	r1, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fec:	d3f6      	bcc.n	8000fdc <CopyDataInit>
	ldr	r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ff0:	e002      	b.n	8000ff8 <LoopFillZerobss>

08000ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ff4:	f842 3b04 	str.w	r3, [r2], #4

08000ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <LoopForever+0x16>)
	cmp	r2, r3
 8000ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ffc:	d3f9      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f008 f815 	bl	800902c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fb15 	bl	8000630 <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001008:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800100c:	08009a98 	.word	0x08009a98
	ldr	r0, =_sdata
 8001010:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001014:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001018:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 800101c:	200006ec 	.word	0x200006ec

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_Init+0x4c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_Init+0x4c>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f002 f887 	bl	8003148 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800103a:	f003 fd25 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800103e:	4602      	mov	r2, r0
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_Init+0x50>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	490b      	ldr	r1, [pc, #44]	; (8001078 <HAL_Init+0x54>)
 800104a:	5ccb      	ldrb	r3, [r1, r3]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x58>)
 8001052:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001054:	200f      	movs	r0, #15
 8001056:	f000 f813 	bl	8001080 <HAL_InitTick>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e002      	b.n	800106a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fd94 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000
 8001074:	46020c00 	.word	0x46020c00
 8001078:	08009954 	.word	0x08009954
 800107c:	20000000 	.word	0x20000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f871 	bl	8003192 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f002 f849 	bl	800315e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	200005a0 	.word	0x200005a0

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200005a0 	.word	0x200005a0

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001180:	f023 0201 	bic.w	r2, r3, #1
 8001184:	4904      	ldr	r1, [pc, #16]	; (8001198 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	674b      	str	r3, [r1, #116]	; 0x74
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	46000400 	.word	0x46000400

0800119c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80011a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a8:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 80011ac:	4904      	ldr	r1, [pc, #16]	; (80011c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	674b      	str	r3, [r1, #116]	; 0x74
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	46000400 	.word	0x46000400

080011c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <LL_ADC_SetResolution+0x3c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d104      	bne.n	800124c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f023 020c 	bic.w	r2, r3, #12
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	46021000 	.word	0x46021000

0800126c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	430b      	orrs	r3, r1
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3360      	adds	r3, #96	; 0x60
 80012bc:	461a      	mov	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012da:	b480      	push	{r7}
 80012dc:	b087      	sub	sp, #28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3360      	adds	r3, #96	; 0x60
 80012ea:	461a      	mov	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	431a      	orrs	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3360      	adds	r3, #96	; 0x60
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800138e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d002      	beq.n	80013ae <LL_ADC_SetGainCompensation+0x32>
 80013a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013ac:	e000      	b.n	80013b0 <LL_ADC_SetGainCompensation+0x34>
 80013ae:	2200      	movs	r2, #0
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2107      	movs	r1, #7
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	401a      	ands	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d020      	beq.n	800147e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3330      	adds	r3, #48	; 0x30
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	4413      	add	r3, r2
 800144e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	211f      	movs	r1, #31
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0e9b      	lsrs	r3, r3, #26
 8001468:	f003 011f 	and.w	r1, r3, #31
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800147c:	e02b      	b.n	80014d6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	210f      	movs	r1, #15
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0e9b      	lsrs	r3, r3, #26
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	e010      	b.n	80014c8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	613b      	str	r3, [r7, #16]
  return result;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80014bc:	2320      	movs	r3, #32
 80014be:	e003      	b.n	80014c8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	f001 011f 	and.w	r1, r1, #31
 80014ce:	408b      	lsls	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	46021000 	.word	0x46021000

080014e8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <LL_ADC_REG_SetSequencerChAdd+0x24>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	0e9b      	lsrs	r3, r3, #26
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	e015      	b.n	8001538 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	60fb      	str	r3, [r7, #12]
  return result;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e003      	b.n	800152e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	0e9b      	lsrs	r3, r3, #26
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001580:	b480      	push	{r7}
 8001582:	b08b      	sub	sp, #44	; 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d042      	beq.n	800161a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x28>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	f003 021f 	and.w	r2, r3, #31
 80015a6:	e011      	b.n	80015cc <LL_ADC_SetChannelSamplingTime+0x4c>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	617b      	str	r3, [r7, #20]
  return result;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80015be:	2320      	movs	r3, #32
 80015c0:	e003      	b.n	80015ca <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	0e5b      	lsrs	r3, r3, #25
 80015d0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad2      	subs	r2, r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3314      	adds	r3, #20
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	0e5b      	lsrs	r3, r3, #25
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2107      	movs	r1, #7
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001618:	e00e      	b.n	8001638 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	0219      	lsls	r1, r3, #8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	400b      	ands	r3, r1
 800162e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001632:	431a      	orrs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	615a      	str	r2, [r3, #20]
}
 8001638:	bf00      	nop
 800163a:	372c      	adds	r7, #44	; 0x2c
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	46021000 	.word	0x46021000

08001648 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0318 	and.w	r3, r3, #24
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <LL_ADC_SetChannelSingleDiff+0x44>)
 800166c:	40d9      	lsrs	r1, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	400b      	ands	r3, r1
 8001672:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	000fffff 	.word	0x000fffff

08001690 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 031f 	and.w	r3, r3, #31
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6093      	str	r3, [r2, #8]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001700:	d101      	bne.n	8001706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001750:	d101      	bne.n	8001756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <LL_ADC_IsEnabled+0x18>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <LL_ADC_IsEnabled+0x1a>
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b08      	cmp	r3, #8
 8001812:	d101      	bne.n	8001818 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e2ce      	b.n	8001de6 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a95      	ldr	r2, [pc, #596]	; (8001aac <HAL_ADC_Init+0x284>)
 8001856:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff f9af 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff37 	bl	80016ec <LL_ADC_IsDeepPowerDownEnabled>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff1d 	bl	80016c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff52 	bl	800173c <LL_ADC_IsInternalRegulatorEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff36 	bl	8001714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a8:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <HAL_ADC_Init+0x288>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	4a81      	ldr	r2, [pc, #516]	; (8001ab4 <HAL_ADC_Init+0x28c>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff34 	bl	800173c <LL_ADC_IsInternalRegulatorEnabled>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10e      	bne.n	80018f8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff6c 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 8001902:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 825f 	bne.w	8001dd0 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 825b 	bne.w	8001dd0 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800191e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff2c 	bl	800178c <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d14f      	bne.n	80019da <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5b      	ldr	r2, [pc, #364]	; (8001aac <HAL_ADC_Init+0x284>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d037      	beq.n	80019b4 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_ADC_Init+0x290>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_ADC_Init+0x130>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_ADC_Init+0x294>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10e      	bne.n	8001976 <HAL_ADC_Init+0x14e>
 8001958:	4857      	ldr	r0, [pc, #348]	; (8001ab8 <HAL_ADC_Init+0x290>)
 800195a:	f7ff ff17 	bl	800178c <LL_ADC_IsEnabled>
 800195e:	4604      	mov	r4, r0
 8001960:	4856      	ldr	r0, [pc, #344]	; (8001abc <HAL_ADC_Init+0x294>)
 8001962:	f7ff ff13 	bl	800178c <LL_ADC_IsEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	4323      	orrs	r3, r4
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	e008      	b.n	8001988 <HAL_ADC_Init+0x160>
 8001976:	484d      	ldr	r0, [pc, #308]	; (8001aac <HAL_ADC_Init+0x284>)
 8001978:	f7ff ff08 	bl	800178c <LL_ADC_IsEnabled>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_ADC_Init+0x290>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_ADC_Init+0x178>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_ADC_Init+0x294>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_Init+0x17c>
 80019a0:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_ADC_Init+0x298>)
 80019a2:	e000      	b.n	80019a6 <HAL_ADC_Init+0x17e>
 80019a4:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_ADC_Init+0x29c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f7ff fc09 	bl	80011c4 <LL_ADC_SetCommonClock>
 80019b2:	e012      	b.n	80019da <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff fc34 	bl	800122c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_ADC_Init+0x29c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019d4:	493b      	ldr	r1, [pc, #236]	; (8001ac4 <HAL_ADC_Init+0x29c>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a33      	ldr	r2, [pc, #204]	; (8001aac <HAL_ADC_Init+0x284>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d010      	beq.n	8001a06 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ea:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019f0:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80019f6:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019fe:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001a00:	4313      	orrs	r3, r2
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	e035      	b.n	8001a72 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
 8001a0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a12:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a14:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_ADC_Init+0x1fc>
 8001a1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a22:	e000      	b.n	8001a26 <HAL_ADC_Init+0x1fe>
 8001a24:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a26:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001a2c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da04      	bge.n	8001a40 <HAL_ADC_Init+0x218>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Init+0x21c>
 8001a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001a44:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	491b      	ldr	r1, [pc, #108]	; (8001ab8 <HAL_ADC_Init+0x290>)
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d004      	beq.n	8001a5a <HAL_ADC_Init+0x232>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4919      	ldr	r1, [pc, #100]	; (8001abc <HAL_ADC_Init+0x294>)
 8001a56:	428b      	cmp	r3, r1
 8001a58:	d103      	bne.n	8001a62 <HAL_ADC_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a60:	e003      	b.n	8001a6a <HAL_ADC_Init+0x242>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a68:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001a6a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d131      	bne.n	8001ae0 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_ADC_Init+0x284>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	045b      	lsls	r3, r3, #17
 8001a8e:	6a3a      	ldr	r2, [r7, #32]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	e024      	b.n	8001ae0 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d113      	bne.n	8001ac8 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	e01a      	b.n	8001ae0 <HAL_ADC_Init+0x2b8>
 8001aaa:	bf00      	nop
 8001aac:	46021000 	.word	0x46021000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	053e2d63 	.word	0x053e2d63
 8001ab8:	42028000 	.word	0x42028000
 8001abc:	42028100 	.word	0x42028100
 8001ac0:	42028300 	.word	0x42028300
 8001ac4:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a75      	ldr	r2, [pc, #468]	; (8001cbc <HAL_ADC_Init+0x494>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	4313      	orrs	r3, r2
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <HAL_ADC_Init+0x498>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	6a39      	ldr	r1, [r7, #32]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]
 8001b1a:	e031      	b.n	8001b80 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	4313      	orrs	r3, r2
 8001b32:	6a3a      	ldr	r2, [r7, #32]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_ADC_Init+0x49c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	6a39      	ldr	r1, [r7, #32]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_ADC_Init+0x494>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	f000 80a4 	beq.w	8001cd4 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fe22 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 8001b96:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe2f 	bl	8001800 <LL_ADC_INJ_IsConversionOngoing>
 8001ba2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d166      	bne.n	8001c78 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d163      	bne.n	8001c78 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f1b      	ldrb	r3, [r3, #28]
 8001bb4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4943      	ldr	r1, [pc, #268]	; (8001cc8 <HAL_ADC_Init+0x4a0>)
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d004      	beq.n	8001bca <HAL_ADC_Init+0x3a2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4941      	ldr	r1, [pc, #260]	; (8001ccc <HAL_ADC_Init+0x4a4>)
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_ADC_Init+0x3a8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Init+0x3ae>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be4:	f023 0303 	bic.w	r3, r3, #3
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff fbb9 	bl	800137c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11e      	bne.n	8001c52 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_ADC_Init+0x4a8>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c28:	0411      	lsls	r1, r2, #16
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c40:	0892      	lsrs	r2, r2, #2
 8001c42:	430a      	orrs	r2, r1
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	e007      	b.n	8001c62 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10c      	bne.n	8001c9a <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f023 010f 	bic.w	r1, r3, #15
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	e007      	b.n	8001caa <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020f 	bic.w	r2, r2, #15
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cba:	e092      	b.n	8001de2 <HAL_ADC_Init+0x5ba>
 8001cbc:	46021000 	.word	0x46021000
 8001cc0:	fff0c013 	.word	0xfff0c013
 8001cc4:	ffde800d 	.word	0xffde800d
 8001cc8:	42028000 	.word	0x42028000
 8001ccc:	42028100 	.word	0x42028100
 8001cd0:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d111      	bne.n	8001d02 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001ce6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001cec:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001cf2:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_ADC_Init+0x5c8>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f7ff fb4e 	bl	80013c2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001d34:	f7ff fb45 	bl	80013c2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f062 020f 	orn	r2, r2, #15
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d50:	e018      	b.n	8001d84 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d5a:	d113      	bne.n	8001d84 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f003 031c 	and.w	r3, r3, #28
 8001d6e:	f06f 020f 	mvn.w	r2, #15
 8001d72:	fa02 f103 	lsl.w	r1, r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_ADC_Init+0x5cc>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	6a3a      	ldr	r2, [r7, #32]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10b      	bne.n	8001dac <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001daa:	e01a      	b.n	8001de2 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001db0:	f023 0312 	bic.w	r3, r3, #18
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dce:	e008      	b.n	8001de2 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	f7fffc02 	.word	0xf7fffc02
 8001df4:	833ffff3 	.word	0x833ffff3

08001df8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef       *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_ADC_Start+0x1a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_ADC_Start+0x1c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_ADC_Start+0x1ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_Start+0x20>
 8001e14:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_ADC_Start+0x1b0>)
 8001e16:	e000      	b.n	8001e1a <HAL_ADC_Start+0x22>
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_ADC_Start+0x1b4>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc38 	bl	8001690 <LL_ADC_GetMultimode>
 8001e20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fcd7 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80af 	bne.w	8001f92 <HAL_ADC_Start+0x19a>
  {
    __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Start+0x4a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0aa      	b.n	8001f98 <HAL_ADC_Start+0x1a0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f001 f830 	bl	8002eb0 <ADC_Enable>
 8001e50:	4603      	mov	r3, r0
 8001e52:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 8096 	bne.w	8001f88 <HAL_ADC_Start+0x190>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_ADC_Start+0x1b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d027      	beq.n	8001eca <HAL_ADC_Start+0xd2>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - by default if ADC is Master or Independent or if multimode feature is not available
          - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_ADC_Start+0x1ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d002      	beq.n	8001e8a <HAL_ADC_Start+0x92>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	e000      	b.n	8001e8c <HAL_ADC_Start+0x94>
 8001e8a:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_ADC_Start+0x1a8>)
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Start+0xa2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_Start+0xae>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_ADC_Start+0xca>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eb8:	f023 0206 	bic.w	r2, r3, #6
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ec0:	e006      	b.n	8001ed0 <HAL_ADC_Start+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0xd8>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	221c      	movs	r2, #28
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <HAL_ADC_Start+0x1b8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d048      	beq.n	8001f7c <HAL_ADC_Start+0x184>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_ADC_Start+0x1ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d002      	beq.n	8001efa <HAL_ADC_Start+0x102>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_Start+0x104>
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_ADC_Start+0x1a8>)
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d008      	beq.n	8001f16 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d002      	beq.n	8001f16 <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	d114      	bne.n	8001f40 <HAL_ADC_Start+0x148>
           )
        {
          /* Multimode feature is not available or ADC Instance is Independent or Master,
             or is not Slave ADC with dual regular conversions enabled.
             Then, set HAL_ADC_STATE_INJ_BUSY bit and reset HAL_ADC_STATE_INJ_EOC bit if JAUTO is set. */
          if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_ADC_Start+0x13c>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	679a      	str	r2, [r3, #120]	; 0x78
          }

          /* Start ADC group regular conversion */
          LL_ADC_REG_StartConversion(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fc3a 	bl	80017b2 <LL_ADC_REG_StartConversion>
 8001f3e:	e01d      	b.n	8001f7c <HAL_ADC_Start+0x184>
        }
        else
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	679a      	str	r2, [r3, #120]	; 0x78
          /* if Master ADC JAUTO bit is set, update Slave State in setting
             HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_ADC_Start+0x1ac>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d002      	beq.n	8001f5c <HAL_ADC_Start+0x164>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_Start+0x166>
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_ADC_Start+0x1a8>)
 8001f5e:	60fb      	str	r3, [r7, #12]
          if (READ_BIT(tmp_adc_master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_ADC_Start+0x184>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc16 	bl	80017b2 <LL_ADC_REG_StartConversion>
 8001f86:	e006      	b.n	8001f96 <HAL_ADC_Start+0x19e>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001f90:	e001      	b.n	8001f96 <HAL_ADC_Start+0x19e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	42028000 	.word	0x42028000
 8001fa4:	42028100 	.word	0x42028100
 8001fa8:	42028300 	.word	0x42028300
 8001fac:	46021300 	.word	0x46021300
 8001fb0:	46021000 	.word	0x46021000

08001fb4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a82      	ldr	r2, [pc, #520]	; (80021cc <HAL_ADC_PollForConversion+0x218>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x1e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a80      	ldr	r2, [pc, #512]	; (80021d0 <HAL_ADC_PollForConversion+0x21c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x22>
 8001fd2:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_ADC_PollForConversion+0x220>)
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x24>
 8001fd6:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_ADC_PollForConversion+0x224>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb59 	bl	8001690 <LL_ADC_GetMultimode>
 8001fde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d102      	bne.n	8001fee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	e04e      	b.n	800208c <HAL_ADC_PollForConversion+0xd8>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7a      	ldr	r2, [pc, #488]	; (80021dc <HAL_ADC_PollForConversion+0x228>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d038      	beq.n	800206a <HAL_ADC_PollForConversion+0xb6>
    {
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d002      	beq.n	800200a <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d111      	bne.n	800202e <HAL_ADC_PollForConversion+0x7a>
         )
      {
        /* Check ADC DMA mode */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_ADC_PollForConversion+0x74>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e112      	b.n	800224e <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8002028:	2304      	movs	r3, #4
 800202a:	61fb      	str	r3, [r7, #28]
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800202c:	e02e      	b.n	800208c <HAL_ADC_PollForConversion+0xd8>
        }
      }
      else
      {
        /* Check ADC DMA mode in multimode */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a66      	ldr	r2, [pc, #408]	; (80021cc <HAL_ADC_PollForConversion+0x218>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_ADC_PollForConversion+0x8e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a64      	ldr	r2, [pc, #400]	; (80021d0 <HAL_ADC_PollForConversion+0x21c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_ADC_PollForConversion+0x92>
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_ADC_PollForConversion+0x220>)
 8002044:	e000      	b.n	8002048 <HAL_ADC_PollForConversion+0x94>
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_ADC_PollForConversion+0x224>)
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fb2f 	bl	80016ac <LL_ADC_GetMultiDMATransfer>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_PollForConversion+0xb0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0f4      	b.n	800224e <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8002064:	2304      	movs	r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e010      	b.n	800208c <HAL_ADC_PollForConversion+0xd8>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_PollForConversion+0xd4>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0e2      	b.n	800224e <HAL_ADC_PollForConversion+0x29a>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002088:	2304      	movs	r3, #4
 800208a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800208c:	f7ff f842 	bl	8001114 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002092:	e021      	b.n	80020d8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d01d      	beq.n	80020d8 <HAL_ADC_PollForConversion+0x124>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800209c:	f7ff f83a 	bl	8001114 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d302      	bcc.n	80020b2 <HAL_ADC_PollForConversion+0xfe>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d112      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x124>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x124>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0ba      	b.n	800224e <HAL_ADC_PollForConversion+0x29a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0d6      	beq.n	8002094 <HAL_ADC_PollForConversion+0xe0>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f982 	bl	8001400 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80a4 	beq.w	800224c <HAL_ADC_PollForConversion+0x298>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 809e 	bne.w	800224c <HAL_ADC_PollForConversion+0x298>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a31      	ldr	r2, [pc, #196]	; (80021dc <HAL_ADC_PollForConversion+0x228>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d062      	beq.n	80021e0 <HAL_ADC_PollForConversion+0x22c>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d111      	bne.n	800214c <HAL_ADC_PollForConversion+0x198>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800212c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_PollForConversion+0x198>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Get relevant register CFGR in ADC instance of ADC master or slave        */
      /* in function of multimode state (for devices with multimode               */
      /* available).                                                              */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_ADC_PollForConversion+0x21c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d002      	beq.n	800215c <HAL_ADC_PollForConversion+0x1a8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e000      	b.n	800215e <HAL_ADC_PollForConversion+0x1aa>
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_ADC_PollForConversion+0x218>)
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4293      	cmp	r3, r2
 8002164:	d008      	beq.n	8002178 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d002      	beq.n	8002178 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b09      	cmp	r3, #9
 8002176:	d104      	bne.n	8002182 <HAL_ADC_PollForConversion+0x1ce>
         )
      {
        /* Retrieve handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e011      	b.n	80021a6 <HAL_ADC_PollForConversion+0x1f2>
      }
      else
      {
        /* Retrieve Master ADC CFGR register */
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_ADC_PollForConversion+0x218>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_ADC_PollForConversion+0x1e2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_ADC_PollForConversion+0x228>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_ADC_PollForConversion+0x1e8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e000      	b.n	800219e <HAL_ADC_PollForConversion+0x1ea>
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_ADC_PollForConversion+0x218>)
 800219e:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d104      	bne.n	80021b6 <HAL_ADC_PollForConversion+0x202>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2208      	movs	r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e04a      	b.n	800224c <HAL_ADC_PollForConversion+0x298>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d145      	bne.n	800224c <HAL_ADC_PollForConversion+0x298>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	220c      	movs	r2, #12
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e040      	b.n	800224c <HAL_ADC_PollForConversion+0x298>
 80021ca:	bf00      	nop
 80021cc:	42028000 	.word	0x42028000
 80021d0:	42028100 	.word	0x42028100
 80021d4:	42028300 	.word	0x42028300
 80021d8:	46021300 	.word	0x46021300
 80021dc:	46021000 	.word	0x46021000
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d126      	bne.n	800223c <HAL_ADC_PollForConversion+0x288>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff faf1 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d112      	bne.n	8002224 <HAL_ADC_PollForConversion+0x270>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 020c 	bic.w	r2, r2, #12
 800220c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	679a      	str	r2, [r3, #120]	; 0x78
 8002222:	e00b      	b.n	800223c <HAL_ADC_PollForConversion+0x288>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7f1b      	ldrb	r3, [r3, #28]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <HAL_ADC_PollForConversion+0x298>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	220c      	movs	r2, #12
 800224a:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b0b7      	sub	sp, #220	; 0xdc
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4aa8      	ldr	r2, [pc, #672]	; (8002530 <HAL_ADC_ConfigChannel+0x2bc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d103      	bne.n	800229a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x36>
 80022a4:	2302      	movs	r3, #2
 80022a6:	f000 bdfe 	b.w	8002ea6 <HAL_ADC_ConfigChannel+0xc32>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fa8f 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 85c1 	bne.w	8002e46 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a99      	ldr	r2, [pc, #612]	; (8002530 <HAL_ADC_ConfigChannel+0x2bc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f000 8409 	beq.w	8002ae2 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d108      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x7a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2201      	movs	r2, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	e01d      	b.n	800232a <HAL_ADC_ConfigChannel+0xb6>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800230a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e004      	b.n	8002320 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002316:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2201      	movs	r2, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	69d1      	ldr	r1, [r2, #28]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	430b      	orrs	r3, r1
 8002336:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	f7ff f86f 	bl	8001428 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fa43 	bl	80017da <LL_ADC_REG_IsConversionOngoing>
 8002354:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fa4f 	bl	8001800 <LL_ADC_INJ_IsConversionOngoing>
 8002362:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 81df 	bne.w	800272e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 81da 	bne.w	800272e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	461a      	mov	r2, r3
 8002388:	f7ff f8fa 	bl	8001580 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d046      	beq.n	800243c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023be:	f7fe ff55 	bl	800126c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7fe ff83 	bl	80012da <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7e9b      	ldrb	r3, [r3, #26]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d11e      	bne.n	800241a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x17e>
 80023ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f0:	e000      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x180>
 80023f2:	2300      	movs	r3, #0
 80023f4:	461a      	mov	r2, r3
 80023f6:	f7fe ffa6 	bl	8001346 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x19c>
 800240a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800240e:	e000      	b.n	8002412 <HAL_ADC_ConfigChannel+0x19e>
 8002410:	2300      	movs	r3, #0
 8002412:	461a      	mov	r2, r3
 8002414:	f7fe ff7c 	bl	8001310 <LL_ADC_SetOffsetSignedSaturation>
 8002418:	e189      	b.n	800272e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2200      	movs	r2, #0
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe ff8e 	bl	8001346 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe ff6b 	bl	8001310 <LL_ADC_SetOffsetSignedSaturation>
 800243a:	e178      	b.n	800272e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe ff33 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1f4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe ff28 	bl	80012ae <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	e01e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x232>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe ff1d 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800248e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800249a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_ADC_ConfigChannel+0x24a>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	e018      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x27c>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80024e2:	2320      	movs	r3, #32
 80024e4:	e004      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80024e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	f7fe feb4 	bl	800126c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fecf 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x2c0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fec4 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	e020      	b.n	8002572 <HAL_ADC_ConfigChannel+0x2fe>
 8002530:	46021000 	.word	0x46021000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe feb7 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002556:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800255a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e004      	b.n	8002570 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_ConfigChannel+0x316>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	e018      	b.n	80025bc <HAL_ADC_ConfigChannel+0x348>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800259e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e004      	b.n	80025bc <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80025b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	f7fe fe4e 	bl	800126c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fe69 	bl	80012ae <LL_ADC_GetOffsetChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x388>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2102      	movs	r1, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fe5e 	bl	80012ae <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	e01a      	b.n	8002632 <HAL_ADC_ConfigChannel+0x3be>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2102      	movs	r1, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fe53 	bl	80012ae <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e004      	b.n	8002630 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8002626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_ConfigChannel+0x3d6>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	e011      	b.n	800266e <HAL_ADC_ConfigChannel+0x3fa>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800265c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800266e:	429a      	cmp	r2, r3
 8002670:	d107      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	2102      	movs	r1, #2
 800267e:	f7fe fdf5 	bl	800126c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2103      	movs	r1, #3
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fe10 	bl	80012ae <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x43a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2103      	movs	r1, #3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fe05 	bl	80012ae <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x46a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fdfa 	bl	80012ae <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80026c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80026ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x482>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	e011      	b.n	800271a <HAL_ADC_ConfigChannel+0x4a6>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8002712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271a:	429a      	cmp	r2, r3
 800271c:	d107      	bne.n	800272e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	2103      	movs	r1, #3
 800272a:	f7fe fd9f 	bl	800126c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f82a 	bl	800178c <LL_ADC_IsEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 83ad 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	461a      	mov	r2, r3
 800274e:	f7fe ff7b 	bl	8001648 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800275a:	f040 80d6 	bne.w	800290a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x50e>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	3301      	adds	r3, #1
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b09      	cmp	r3, #9
 8002778:	bf94      	ite	ls
 800277a:	2301      	movls	r3, #1
 800277c:	2300      	movhi	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e019      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x542>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2b09      	cmp	r3, #9
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d04d      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x5e2>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x562>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	3301      	adds	r3, #1
 80027ce:	069b      	lsls	r3, r3, #26
 80027d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d4:	e015      	b.n	8002802 <HAL_ADC_ConfigChannel+0x58e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80027ee:	2320      	movs	r3, #32
 80027f0:	e003      	b.n	80027fa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80027f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x5ae>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	3301      	adds	r3, #1
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	e017      	b.n	8002852 <HAL_ADC_ConfigChannel+0x5de>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e003      	b.n	8002846 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	e04e      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x680>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x5fe>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	e015      	b.n	800289e <HAL_ADC_ConfigChannel+0x62a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	069b      	lsls	r3, r3, #26
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_ADC_ConfigChannel+0x64a>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	e017      	b.n	80028ee <HAL_ADC_ConfigChannel+0x67a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	61bb      	str	r3, [r7, #24]
  return result;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e003      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	461a      	mov	r2, r3
 8002902:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002906:	f7fe fe3b 	bl	8001580 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f280 82c3 	bge.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a92      	ldr	r2, [pc, #584]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x6b4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a91      	ldr	r2, [pc, #580]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x6b8>
 8002928:	4b90      	ldr	r3, [pc, #576]	; (8002b6c <HAL_ADC_ConfigChannel+0x8f8>)
 800292a:	e000      	b.n	800292e <HAL_ADC_ConfigChannel+0x6ba>
 800292c:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <HAL_ADC_ConfigChannel+0x8fc>)
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fc6e 	bl	8001210 <LL_ADC_GetCommonPathInternalCh>
 8002934:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a89      	ldr	r2, [pc, #548]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_ADC_ConfigChannel+0x6d8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a88      	ldr	r2, [pc, #544]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10e      	bne.n	800296a <HAL_ADC_ConfigChannel+0x6f6>
 800294c:	4885      	ldr	r0, [pc, #532]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 800294e:	f7fe ff1d 	bl	800178c <LL_ADC_IsEnabled>
 8002952:	4604      	mov	r4, r0
 8002954:	4884      	ldr	r0, [pc, #528]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002956:	f7fe ff19 	bl	800178c <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	4323      	orrs	r3, r4
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e008      	b.n	800297c <HAL_ADC_ConfigChannel+0x708>
 800296a:	4882      	ldr	r0, [pc, #520]	; (8002b74 <HAL_ADC_ConfigChannel+0x900>)
 800296c:	f7fe ff0e 	bl	800178c <LL_ADC_IsEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a6 	beq.w	8002ace <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_ADC_ConfigChannel+0x904>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d13c      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800298c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d136      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00a      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x744>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d005      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x744>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a70      	ldr	r2, [pc, #448]	; (8002b74 <HAL_ADC_ConfigChannel+0x900>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f040 826e 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x758>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x75c>
 80029cc:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <HAL_ADC_ConfigChannel+0x8f8>)
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x75e>
 80029d0:	4a67      	ldr	r2, [pc, #412]	; (8002b70 <HAL_ADC_ConfigChannel+0x8fc>)
 80029d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe fc04 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e2:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_ADC_ConfigChannel+0x908>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_ADC_ConfigChannel+0x90c>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80029f4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80029f6:	e002      	b.n	80029fe <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a04:	e246      	b.n	8002e94 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	; (8002b84 <HAL_ADC_ConfigChannel+0x910>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d12b      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d125      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a50      	ldr	r2, [pc, #320]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00a      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0x7c8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d005      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0x7c8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_ADC_ConfigChannel+0x900>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 822e 	bne.w	8002e98 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x7dc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x7e0>
 8002a50:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_ADC_ConfigChannel+0x8f8>)
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x7e2>
 8002a54:	4a46      	ldr	r2, [pc, #280]	; (8002b70 <HAL_ADC_ConfigChannel+0x8fc>)
 8002a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7fe fbc2 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a66:	e217      	b.n	8002e98 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_ADC_ConfigChannel+0x914>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	f040 8213 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 820c 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x82e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d005      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x82e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a36      	ldr	r2, [pc, #216]	; (8002b74 <HAL_ADC_ConfigChannel+0x900>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f040 81fc 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_ADC_ConfigChannel+0x8f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x842>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <HAL_ADC_ConfigChannel+0x8f4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x846>
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <HAL_ADC_ConfigChannel+0x8f8>)
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_ConfigChannel+0x848>
 8002aba:	4a2d      	ldr	r2, [pc, #180]	; (8002b70 <HAL_ADC_ConfigChannel+0x8fc>)
 8002abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7fe fb8f 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
 8002acc:	e1e5      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ae0:	e1db      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f000 811b 	beq.w	8002d2a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_ADC_ConfigChannel+0x918>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d107      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fce9 	bl	80014e8 <LL_ADC_REG_SetSequencerChAdd>
 8002b16:	e059      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	210f      	movs	r1, #15
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x8d4>
 8002b3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	e027      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x924>
 8002b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b4c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	60fb      	str	r3, [r7, #12]
  return result;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d117      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e019      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x924>
 8002b64:	42028000 	.word	0x42028000
 8002b68:	42028100 	.word	0x42028100
 8002b6c:	42028300 	.word	0x42028300
 8002b70:	46021300 	.word	0x46021300
 8002b74:	46021000 	.word	0x46021000
 8002b78:	ce080000 	.word	0xce080000
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	053e2d63 	.word	0x053e2d63
 8002b84:	ca040000 	.word	0xca040000
 8002b88:	80000001 	.word	0x80000001
 8002b8c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	6849      	ldr	r1, [r1, #4]
 8002b9c:	f001 011f 	and.w	r1, r1, #31
 8002ba0:	408b      	lsls	r3, r1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d808      	bhi.n	8002bcc <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7fe fc2e 	bl	8001428 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002bda:	f7fe fcd1 	bl	8001580 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f280 8159 	bge.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a9b      	ldr	r2, [pc, #620]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x988>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a9a      	ldr	r2, [pc, #616]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x98c>
 8002bfc:	4b99      	ldr	r3, [pc, #612]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002bfe:	e000      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x98e>
 8002c00:	4b99      	ldr	r3, [pc, #612]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fb04 	bl	8001210 <LL_ADC_GetCommonPathInternalCh>
 8002c08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a96      	ldr	r2, [pc, #600]	; (8002e6c <HAL_ADC_ConfigChannel+0xbf8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12b      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d125      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a8d      	ldr	r2, [pc, #564]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x9c2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8b      	ldr	r2, [pc, #556]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x9c6>
 8002c36:	4a8b      	ldr	r2, [pc, #556]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x9c8>
 8002c3a:	4a8b      	ldr	r2, [pc, #556]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe facf 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c4c:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_ADC_ConfigChannel+0xbfc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <HAL_ADC_ConfigChannel+0xc00>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c5e:	e002      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f9      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002c6c:	e045      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a81      	ldr	r2, [pc, #516]	; (8002e78 <HAL_ADC_ConfigChannel+0xc04>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d11b      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d115      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0xa24>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0xa28>
 8002c98:	4a72      	ldr	r2, [pc, #456]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002c9a:	e000      	b.n	8002c9e <HAL_ADC_ConfigChannel+0xa2a>
 8002c9c:	4a72      	ldr	r2, [pc, #456]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7fe fa9e 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
 8002cae:	e024      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a71      	ldr	r2, [pc, #452]	; (8002e7c <HAL_ADC_ConfigChannel+0xc08>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d11f      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a64      	ldr	r2, [pc, #400]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_ConfigChannel+0xa66>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0xa6a>
 8002cda:	4a62      	ldr	r2, [pc, #392]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0xa6c>
 8002cde:	4a62      	ldr	r2, [pc, #392]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7fe fa7d 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_ADC_ConfigChannel+0xc0c>)
 8002cf8:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_ADC_ConfigChannel+0xc10>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f040 80ca 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80c3 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002d28:	e0b7      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d32:	d004      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002d38:	4a53      	ldr	r2, [pc, #332]	; (8002e88 <HAL_ADC_ConfigChannel+0xc14>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fc01 	bl	800154e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f280 80a2 	bge.w	8002e9a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0xaf6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0xafa>
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0xafc>
 8002d6e:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fa4d 	bl	8001210 <LL_ADC_GetCommonPathInternalCh>
 8002d76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_ADC_ConfigChannel+0xc18>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d115      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0xb24>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0xb28>
 8002d98:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002d9a:	e000      	b.n	8002d9e <HAL_ADC_ConfigChannel+0xb2a>
 8002d9c:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002da2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f7fe fa1e 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
 8002dae:	e034      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <HAL_ADC_ConfigChannel+0xc1c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d115      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_ConfigChannel+0xb5a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0xb5e>
 8002dce:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xb60>
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fa03 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
 8002de4:	e019      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_ADC_ConfigChannel+0xc08>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d114      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_ADC_ConfigChannel+0xbe8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0xb90>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_ADC_ConfigChannel+0xbec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0xb94>
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_ADC_ConfigChannel+0xbf0>)
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_ConfigChannel+0xb96>
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_ADC_ConfigChannel+0xbf4>)
 8002e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fe f9e8 	bl	80011ea <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_ADC_ConfigChannel+0xc10>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d13a      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d134      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002e44:	e029      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e58:	e01f      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
 8002e5a:	bf00      	nop
 8002e5c:	42028000 	.word	0x42028000
 8002e60:	42028100 	.word	0x42028100
 8002e64:	42028300 	.word	0x42028300
 8002e68:	46021300 	.word	0x46021300
 8002e6c:	b6002000 	.word	0xb6002000
 8002e70:	20000000 	.word	0x20000000
 8002e74:	053e2d63 	.word	0x053e2d63
 8002e78:	ba004000 	.word	0xba004000
 8002e7c:	80000001 	.word	0x80000001
 8002e80:	b2001000 	.word	0xb2001000
 8002e84:	d7200000 	.word	0xd7200000
 8002e88:	80000010 	.word	0x80000010
 8002e8c:	ce080000 	.word	0xce080000
 8002e90:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e98:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002ea2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	37dc      	adds	r7, #220	; 0xdc
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop

08002eb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fc65 	bl	800178c <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d17b      	bne.n	8002fc0 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <ADC_Enable+0x11c>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e067      	b.n	8002fc2 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fc30 	bl	8001764 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <ADC_Enable+0x66>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <ADC_Enable+0x120>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d054      	beq.n	8002fc0 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f16:	f7fe f8fd 	bl	8001114 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <ADC_Enable+0x124>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <ADC_Enable+0x80>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <ADC_Enable+0x128>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <ADC_Enable+0x84>
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <ADC_Enable+0x12c>)
 8002f32:	e000      	b.n	8002f36 <ADC_Enable+0x86>
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <ADC_Enable+0x130>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fbaa 	bl	8001690 <LL_ADC_GetMultimode>
 8002f3c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <ADC_Enable+0x128>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d002      	beq.n	8002f4e <ADC_Enable+0x9e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e000      	b.n	8002f50 <ADC_Enable+0xa0>
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <ADC_Enable+0x124>)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d02c      	beq.n	8002fb2 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d130      	bne.n	8002fc0 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5e:	e028      	b.n	8002fb2 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fc11 	bl	800178c <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fbf5 	bl	8001764 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f7a:	f7fe f8cb 	bl	8001114 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d914      	bls.n	8002fb2 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d00d      	beq.n	8002fb2 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d1cf      	bne.n	8002f60 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	8000003f 	.word	0x8000003f
 8002fd0:	46021000 	.word	0x46021000
 8002fd4:	42028000 	.word	0x42028000
 8002fd8:	42028100 	.word	0x42028100
 8002fdc:	42028300 	.word	0x42028300
 8002fe0:	46021300 	.word	0x46021300

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d301      	bcc.n	800311a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003116:	2301      	movs	r3, #1
 8003118:	e00f      	b.n	800313a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <SysTick_Config+0x40>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003122:	210f      	movs	r1, #15
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f7ff ff8e 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <SysTick_Config+0x40>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <SysTick_Config+0x40>)
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000e010 	.word	0xe000e010

08003148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff47 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff5e 	bl	800302c <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff90 	bl	800309c <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5f 	bl	8003048 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffb2 	bl	8003104 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031be:	e1ba      	b.n	8003536 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 81aa 	beq.w	8003530 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a55      	ldr	r2, [pc, #340]	; (8003334 <HAL_GPIO_Init+0x188>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d15d      	bne.n	80032a0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80031ea:	2201      	movs	r2, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	4313      	orrs	r3, r2
 800320c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003214:	4a48      	ldr	r2, [pc, #288]	; (8003338 <HAL_GPIO_Init+0x18c>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800321c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800321e:	4a46      	ldr	r2, [pc, #280]	; (8003338 <HAL_GPIO_Init+0x18c>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3208      	adds	r2, #8
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	4013      	ands	r3, r2
 800324c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220b      	movs	r2, #11
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	08da      	lsrs	r2, r3, #3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3208      	adds	r2, #8
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	4013      	ands	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2202      	movs	r2, #2
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e067      	b.n	8003370 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x104>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	d145      	bne.n	800333c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	69f9      	ldr	r1, [r7, #28]
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	4013      	ands	r3, r2
 8003312:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	4313      	orrs	r3, r2
 8003328:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e01e      	b.n	8003370 <HAL_GPIO_Init+0x1c4>
 8003332:	bf00      	nop
 8003334:	46020000 	.word	0x46020000
 8003338:	080099ac 	.word	0x080099ac
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	4013      	ands	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	4313      	orrs	r3, r2
 8003368:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d00b      	beq.n	8003390 <HAL_GPIO_Init+0x1e4>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d007      	beq.n	8003390 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003384:	2b11      	cmp	r3, #17
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b12      	cmp	r3, #18
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80033c6:	2201      	movs	r2, #1
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d017      	beq.n	800342a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4013      	ands	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4313      	orrs	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d07c      	beq.n	8003530 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003436:	4a47      	ldr	r2, [pc, #284]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3318      	adds	r3, #24
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	4013      	ands	r3, r2
 8003458:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0a9a      	lsrs	r2, r3, #10
 800345e:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <HAL_GPIO_Init+0x3ac>)
 8003460:	4013      	ands	r3, r2
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	f002 0203 	and.w	r2, r2, #3
 8003468:	00d2      	lsls	r2, r2, #3
 800346a:	4093      	lsls	r3, r2
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	4313      	orrs	r3, r2
 8003470:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003472:	4938      	ldr	r1, [pc, #224]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3318      	adds	r3, #24
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	43db      	mvns	r3, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	4013      	ands	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80034a4:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80034ce:	4a21      	ldr	r2, [pc, #132]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 8003504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003508:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	4013      	ands	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <HAL_GPIO_Init+0x3a8>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3301      	adds	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f ae3d 	bne.w	80031c0 <HAL_GPIO_Init+0x14>
  }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	3724      	adds	r7, #36	; 0x24
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	46022000 	.word	0x46022000
 8003558:	002f7f7f 	.word	0x002f7f7f

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003578:	e002      	b.n	8003580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b08d      	sub	sp, #52	; 0x34
 8003590:	af0a      	add	r7, sp, #40	; 0x28
 8003592:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e048      	b.n	8003630 <HAL_HCD_Init+0xa4>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fbfc 	bl	8000db0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
  {
    hhcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 fb34 	bl	8008c32 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	687e      	ldr	r6, [r7, #4]
 80035d2:	466d      	mov	r5, sp
 80035d4:	f106 0410 	add.w	r4, r6, #16
 80035d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e8:	1d33      	adds	r3, r6, #4
 80035ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f005 faf2 	bl	8008bd6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 fb2b 	bl	8008c54 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	687e      	ldr	r6, [r7, #4]
 8003606:	466d      	mov	r5, sp
 8003608:	f106 0410 	add.w	r4, r6, #16
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003614:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003618:	e885 0003 	stmia.w	r5, {r0, r1}
 800361c:	1d33      	adds	r3, r6, #4
 800361e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f005 fc09 	bl	8008e38 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003638 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e007      	b.n	8003666 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0204 	bic.w	r2, r3, #4
 800365e:	4905      	ldr	r1, [pc, #20]	; (8003674 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40030400 	.word	0x40030400

08003678 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_ICACHE_Enable+0x1c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <HAL_ICACHE_Enable+0x1c>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	40030400 	.word	0x40030400

08003698 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d10b      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d905      	bls.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80036ba:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a32      	ldr	r2, [pc, #200]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e057      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d90a      	bls.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4313      	orrs	r3, r2
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e4:	60d3      	str	r3, [r2, #12]
 80036e6:	e007      	b.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036f0:	4925      	ldr	r1, [pc, #148]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a24      	ldr	r2, [pc, #144]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003716:	e002      	b.n	800371e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x98>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f3      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01b      	beq.n	800376e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	2232      	movs	r2, #50	; 0x32
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	3301      	adds	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003754:	e002      	b.n	800375c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f3      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e000      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	46020800 	.word	0x46020800
 800378c:	20000000 	.word	0x20000000
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <HAL_PWREx_GetVoltageRange+0x18>)
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	46020800 	.word	0x46020800

080037b0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_PWREx_ConfigSupply+0x94>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_PWREx_ConfigSupply+0x98>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2232      	movs	r2, #50	; 0x32
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_PWREx_ConfigSupply+0x98>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	3301      	adds	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 80037e2:	f023 0302 	bic.w	r3, r3, #2
 80037e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037e8:	e002      	b.n	80037f0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d116      	bne.n	800382a <HAL_PWREx_ConfigSupply+0x7a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f3      	bne.n	80037ea <HAL_PWREx_ConfigSupply+0x3a>
 8003802:	e012      	b.n	800382a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003810:	e002      	b.n	8003818 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3b01      	subs	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_PWREx_ConfigSupply+0x9c>)
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <HAL_PWREx_ConfigSupply+0x7a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f3      	bne.n	8003812 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e000      	b.n	8003836 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000
 8003848:	10624dd3 	.word	0x10624dd3
 800384c:	46020800 	.word	0x46020800

08003850 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_PWREx_EnableVddUSB+0x1c>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6113      	str	r3, [r2, #16]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	46020800 	.word	0x46020800

08003870 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_PWREx_EnableVddIO2+0x1c>)
 800387a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800387e:	6113      	str	r3, [r2, #16]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	46020800 	.word	0x46020800

08003890 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_PWREx_EnableVddA+0x1c>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_PWREx_EnableVddA+0x1c>)
 800389a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800389e:	6113      	str	r3, [r2, #16]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	46020800 	.word	0x46020800

080038b0 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80038b6:	f7ff ff6d 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038c2:	d003      	beq.n	80038cc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ca:	d107      	bne.n	80038dc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80038d2:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80038d6:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	46020800 	.word	0x46020800

080038ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f000 bec8 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b99      	ldr	r3, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b96      	ldr	r3, [pc, #600]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 816c 	beq.w	8003c00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_RCC_OscConfig+0x52>
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2b0c      	cmp	r3, #12
 8003932:	f040 80de 	bne.w	8003af2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 80da 	bne.w	8003af2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f000 bea5 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003950:	4b86      	ldr	r3, [pc, #536]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_RCC_OscConfig+0x7a>
 800395c:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003964:	e005      	b.n	8003972 <HAL_RCC_OscConfig+0x86>
 8003966:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003972:	4293      	cmp	r3, r2
 8003974:	d255      	bcs.n	8003a22 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f9d9 	bl	8004d38 <RCC_SetFlashLatencyFromMSIRange>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f000 be82 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4a75      	ldr	r2, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800399c:	6093      	str	r3, [r2, #8]
 800399e:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	4970      	ldr	r1, [pc, #448]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80039b8:	d309      	bcc.n	80039ce <HAL_RCC_OscConfig+0xe2>
 80039ba:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 021f 	bic.w	r2, r3, #31
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4969      	ldr	r1, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60cb      	str	r3, [r1, #12]
 80039cc:	e07e      	b.n	8003acc <HAL_RCC_OscConfig+0x1e0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0a      	bge.n	80039ec <HAL_RCC_OscConfig+0x100>
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	4961      	ldr	r1, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
 80039ea:	e06f      	b.n	8003acc <HAL_RCC_OscConfig+0x1e0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d30a      	bcc.n	8003a0c <HAL_RCC_OscConfig+0x120>
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	4959      	ldr	r1, [pc, #356]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
 8003a0a:	e05f      	b.n	8003acc <HAL_RCC_OscConfig+0x1e0>
 8003a0c:	4b57      	ldr	r3, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	03db      	lsls	r3, r3, #15
 8003a1a:	4954      	ldr	r1, [pc, #336]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e054      	b.n	8003acc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003a22:	4b52      	ldr	r3, [pc, #328]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	494c      	ldr	r1, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003a48:	d309      	bcc.n	8003a5e <HAL_RCC_OscConfig+0x172>
 8003a4a:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 021f 	bic.w	r2, r3, #31
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4945      	ldr	r1, [pc, #276]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
 8003a5c:	e028      	b.n	8003ab0 <HAL_RCC_OscConfig+0x1c4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da0a      	bge.n	8003a7c <HAL_RCC_OscConfig+0x190>
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	015b      	lsls	r3, r3, #5
 8003a74:	493d      	ldr	r1, [pc, #244]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60cb      	str	r3, [r1, #12]
 8003a7a:	e019      	b.n	8003ab0 <HAL_RCC_OscConfig+0x1c4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d30a      	bcc.n	8003a9c <HAL_RCC_OscConfig+0x1b0>
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	029b      	lsls	r3, r3, #10
 8003a94:	4935      	ldr	r1, [pc, #212]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60cb      	str	r3, [r1, #12]
 8003a9a:	e009      	b.n	8003ab0 <HAL_RCC_OscConfig+0x1c4>
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	03db      	lsls	r3, r3, #15
 8003aaa:	4930      	ldr	r1, [pc, #192]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 f93c 	bl	8004d38 <RCC_SetFlashLatencyFromMSIRange>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f000 bde5 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003acc:	f001 f8de 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x284>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fad3 	bl	8001080 <HAL_InitTick>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 808a 	beq.w	8003bfe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aee:	f000 bdd2 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d066      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b06:	f7fd fb05 	bl	8001114 <HAL_GetTick>
 8003b0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b0c:	e009      	b.n	8003b22 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0e:	f7fd fb01 	bl	8001114 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d902      	bls.n	8003b22 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	f000 bdba 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ef      	beq.n	8003b0e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b38:	6093      	str	r3, [r2, #8]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	4909      	ldr	r1, [pc, #36]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b54:	d30e      	bcc.n	8003b74 <HAL_RCC_OscConfig+0x288>
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 021f 	bic.w	r2, r3, #31
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4902      	ldr	r1, [pc, #8]	; (8003b6c <HAL_RCC_OscConfig+0x280>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60cb      	str	r3, [r1, #12]
 8003b68:	e04a      	b.n	8003c00 <HAL_RCC_OscConfig+0x314>
 8003b6a:	bf00      	nop
 8003b6c:	46020c00 	.word	0x46020c00
 8003b70:	20000004 	.word	0x20000004
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da0a      	bge.n	8003b92 <HAL_RCC_OscConfig+0x2a6>
 8003b7c:	4b98      	ldr	r3, [pc, #608]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	4995      	ldr	r1, [pc, #596]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
 8003b90:	e036      	b.n	8003c00 <HAL_RCC_OscConfig+0x314>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9a:	d30a      	bcc.n	8003bb2 <HAL_RCC_OscConfig+0x2c6>
 8003b9c:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	498d      	ldr	r1, [pc, #564]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
 8003bb0:	e026      	b.n	8003c00 <HAL_RCC_OscConfig+0x314>
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	03db      	lsls	r3, r3, #15
 8003bc0:	4987      	ldr	r1, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
 8003bc6:	e01b      	b.n	8003c00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003bc8:	4b85      	ldr	r3, [pc, #532]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a84      	ldr	r2, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bd4:	f7fd fa9e 	bl	8001114 <HAL_GetTick>
 8003bd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003bda:	e009      	b.n	8003bf0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bdc:	f7fd fa9a 	bl	8001114 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	f000 bd53 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ef      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2f0>
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 808b 	beq.w	8003d24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d17d      	bne.n	8003d24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f000 bd34 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x35a>
 8003c38:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a68      	ldr	r2, [pc, #416]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e041      	b.n	8003cca <HAL_RCC_OscConfig+0x3de>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_OscConfig+0x38a>
 8003c50:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a62      	ldr	r2, [pc, #392]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5f      	ldr	r2, [pc, #380]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b5d      	ldr	r3, [pc, #372]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e029      	b.n	8003cca <HAL_RCC_OscConfig+0x3de>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003c7e:	d112      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3ba>
 8003c80:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a53      	ldr	r2, [pc, #332]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e011      	b.n	8003cca <HAL_RCC_OscConfig+0x3de>
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4d      	ldr	r2, [pc, #308]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a47      	ldr	r2, [pc, #284]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fa1f 	bl	8001114 <HAL_GetTick>
 8003cd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd8:	e009      	b.n	8003cee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cda:	f7fd fa1b 	bl	8001114 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d902      	bls.n	8003cee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	f000 bcd4 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cee:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ef      	beq.n	8003cda <HAL_RCC_OscConfig+0x3ee>
 8003cfa:	e013      	b.n	8003d24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fa0a 	bl	8001114 <HAL_GetTick>
 8003d00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d02:	e009      	b.n	8003d18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fd fa06 	bl	8001114 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d902      	bls.n	8003d18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f000 bcbf 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ef      	bne.n	8003d04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05f      	beq.n	8003df0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d005      	beq.n	8003d42 <HAL_RCC_OscConfig+0x456>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d114      	bne.n	8003d66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d111      	bne.n	8003d66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f000 bca3 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	4920      	ldr	r1, [pc, #128]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d64:	e044      	b.n	8003df0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d7a:	f7fd f9cb 	bl	8001114 <HAL_GetTick>
 8003d7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d82:	f7fd f9c7 	bl	8001114 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d902      	bls.n	8003d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	f000 bc80 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ef      	beq.n	8003d82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	490b      	ldr	r1, [pc, #44]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	610b      	str	r3, [r1, #16]
 8003db6:	e01b      	b.n	8003df0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <HAL_RCC_OscConfig+0x4f4>)
 8003dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dc4:	f7fd f9a6 	bl	8001114 <HAL_GetTick>
 8003dc8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dcc:	f7fd f9a2 	bl	8001114 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d904      	bls.n	8003de4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	f000 bc5b 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
 8003de0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de4:	4baf      	ldr	r3, [pc, #700]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ed      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80c8 	beq.w	8003f8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e04:	4ba7      	ldr	r3, [pc, #668]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d111      	bne.n	8003e36 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	4ba4      	ldr	r3, [pc, #656]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	4aa2      	ldr	r2, [pc, #648]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e22:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e36:	4b9c      	ldr	r3, [pc, #624]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d119      	bne.n	8003e76 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e42:	4b99      	ldr	r3, [pc, #612]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	4a98      	ldr	r2, [pc, #608]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd f961 	bl	8001114 <HAL_GetTick>
 8003e52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e54:	e009      	b.n	8003e6a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fd f95d 	bl	8001114 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	f000 bc16 	b.w	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e6a:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ef      	beq.n	8003e56 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05f      	beq.n	8003f3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003e7e:	4b89      	ldr	r3, [pc, #548]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e84:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d037      	beq.n	8003f04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e3f4      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01b      	beq.n	8003eee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003eb6:	4b7b      	ldr	r3, [pc, #492]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ebc:	4a79      	ldr	r2, [pc, #484]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003ebe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003ec6:	f7fd f925 	bl	8001114 <HAL_GetTick>
 8003eca:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fd f921 	bl	8001114 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e3da      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ee0:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ef      	bne.n	8003ece <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003eee:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4969      	ldr	r1, [pc, #420]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003f04:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f0a:	4a66      	ldr	r2, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003f14:	f7fd f8fe 	bl	8001114 <HAL_GetTick>
 8003f18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fd f8fa 	bl	8001114 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e3b3      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ef      	beq.n	8003f1c <HAL_RCC_OscConfig+0x630>
 8003f3c:	e01b      	b.n	8003f76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b59      	ldr	r3, [pc, #356]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f44:	4a57      	ldr	r2, [pc, #348]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f46:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003f4e:	f7fd f8e1 	bl	8001114 <HAL_GetTick>
 8003f52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd f8dd 	bl	8001114 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e396      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ef      	bne.n	8003f56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003f86:	f023 0304 	bic.w	r3, r3, #4
 8003f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8111 	beq.w	80041be <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d118      	bne.n	8004012 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fec:	f7fd f892 	bl	8001114 <HAL_GetTick>
 8003ff0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd f88e 	bl	8001114 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e347      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004006:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x7bc>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01f      	beq.n	800405e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 800402c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004030:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 800403c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800404a:	e018      	b.n	800407e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 800404e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800405c:	e00f      	b.n	800407e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004074:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x7b8>)
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d057      	beq.n	8004136 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004086:	f7fd f845 	bl	8001114 <HAL_GetTick>
 800408a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408c:	e00e      	b.n	80040ac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd f841 	bl	8001114 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d905      	bls.n	80040ac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e2f8      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
 80040a4:	46020c00 	.word	0x46020c00
 80040a8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ac:	4b9c      	ldr	r3, [pc, #624]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80040ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0e9      	beq.n	800408e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01b      	beq.n	80040fe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040c6:	4b96      	ldr	r3, [pc, #600]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80040c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040cc:	4a94      	ldr	r2, [pc, #592]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80040ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fd f81c 	bl	8001114 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2d3      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80040f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ed      	beq.n	80040d8 <HAL_RCC_OscConfig+0x7ec>
 80040fc:	e053      	b.n	80041a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040fe:	4b88      	ldr	r3, [pc, #544]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004104:	4a86      	ldr	r2, [pc, #536]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd f800 	bl	8001114 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e2b7      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004126:	4b7e      	ldr	r3, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ed      	bne.n	8004110 <HAL_RCC_OscConfig+0x824>
 8004134:	e037      	b.n	80041a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004136:	f7fc ffed 	bl	8001114 <HAL_GetTick>
 800413a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fc ffe9 	bl	8001114 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e2a0      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004154:	4b72      	ldr	r3, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ed      	bne.n	800413e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004162:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004170:	4b6b      	ldr	r3, [pc, #428]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004176:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc ffc7 	bl	8001114 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e27e      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800419a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800419e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ed      	bne.n	8004182 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ae:	4b5c      	ldr	r3, [pc, #368]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	4a5a      	ldr	r2, [pc, #360]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d036      	beq.n	8004238 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d019      	beq.n	8004206 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80041d2:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80041d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041de:	f7fc ff99 	bl	8001114 <HAL_GetTick>
 80041e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e6:	f7fc ff95 	bl	8001114 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e24e      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x8fa>
 8004204:	e018      	b.n	8004238 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004206:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a45      	ldr	r2, [pc, #276]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800420c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004210:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004212:	f7fc ff7f 	bl	8001114 <HAL_GetTick>
 8004216:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421a:	f7fc ff7b 	bl	8001114 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e234      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800422c:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d036      	beq.n	80042b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b00      	cmp	r3, #0
 800424a:	d019      	beq.n	8004280 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800424c:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a33      	ldr	r2, [pc, #204]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004256:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004258:	f7fc ff5c 	bl	8001114 <HAL_GetTick>
 800425c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004260:	f7fc ff58 	bl	8001114 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e211      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x974>
 800427e:	e018      	b.n	80042b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a26      	ldr	r2, [pc, #152]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 8004286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800428c:	f7fc ff42 	bl	8001114 <HAL_GetTick>
 8004290:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004294:	f7fc ff3e 	bl	8001114 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1f7      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d07f      	beq.n	80043be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d062      	beq.n	800438c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042d0:	6093      	str	r3, [r2, #8]
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	4910      	ldr	r1, [pc, #64]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80042ec:	d309      	bcc.n	8004302 <HAL_RCC_OscConfig+0xa16>
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f023 021f 	bic.w	r2, r3, #31
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4909      	ldr	r1, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60cb      	str	r3, [r1, #12]
 8004300:	e02a      	b.n	8004358 <HAL_RCC_OscConfig+0xa6c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	da0c      	bge.n	8004324 <HAL_RCC_OscConfig+0xa38>
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	4901      	ldr	r1, [pc, #4]	; (8004320 <HAL_RCC_OscConfig+0xa34>)
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0xa6c>
 8004320:	46020c00 	.word	0x46020c00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d30a      	bcc.n	8004344 <HAL_RCC_OscConfig+0xa58>
 800432e:	4ba1      	ldr	r3, [pc, #644]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	499d      	ldr	r1, [pc, #628]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	60cb      	str	r3, [r1, #12]
 8004342:	e009      	b.n	8004358 <HAL_RCC_OscConfig+0xa6c>
 8004344:	4b9b      	ldr	r3, [pc, #620]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	03db      	lsls	r3, r3, #15
 8004352:	4998      	ldr	r1, [pc, #608]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004358:	4b96      	ldr	r3, [pc, #600]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a95      	ldr	r2, [pc, #596]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800435e:	f043 0310 	orr.w	r3, r3, #16
 8004362:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004364:	f7fc fed6 	bl	8001114 <HAL_GetTick>
 8004368:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800436c:	f7fc fed2 	bl	8001114 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e18b      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800437e:	4b8d      	ldr	r3, [pc, #564]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0xa80>
 800438a:	e018      	b.n	80043be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800438c:	4b89      	ldr	r3, [pc, #548]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a88      	ldr	r2, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004392:	f023 0310 	bic.w	r3, r3, #16
 8004396:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004398:	f7fc febc 	bl	8001114 <HAL_GetTick>
 800439c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043a0:	f7fc feb8 	bl	8001114 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e171      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043b2:	4b80      	ldr	r3, [pc, #512]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8166 	beq.w	8004694 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ce:	4b79      	ldr	r3, [pc, #484]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	f000 80f2 	beq.w	80045c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	f040 80c5 	bne.w	8004570 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b73      	ldr	r3, [pc, #460]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a72      	ldr	r2, [pc, #456]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80043ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043f2:	f7fc fe8f 	bl	8001114 <HAL_GetTick>
 80043f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fc fe8b 	bl	8001114 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e144      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800440c:	4b69      	ldr	r3, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d111      	bne.n	800444a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442c:	4a61      	ldr	r2, [pc, #388]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0xccc>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004456:	d102      	bne.n	800445e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <HAL_RCC_OscConfig+0xccc>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4a55      	ldr	r2, [pc, #340]	; (80045b8 <HAL_RCC_OscConfig+0xccc>)
 8004464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004468:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004472:	f023 0303 	bic.w	r3, r3, #3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800447e:	3a01      	subs	r2, #1
 8004480:	0212      	lsls	r2, r2, #8
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004488:	430a      	orrs	r2, r1
 800448a:	494a      	ldr	r1, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	628b      	str	r3, [r1, #40]	; 0x28
 8004490:	4b48      	ldr	r3, [pc, #288]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <HAL_RCC_OscConfig+0xcd0>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800449c:	3a01      	subs	r2, #1
 800449e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044a6:	3a01      	subs	r2, #1
 80044a8:	0252      	lsls	r2, r2, #9
 80044aa:	b292      	uxth	r2, r2
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0412      	lsls	r2, r2, #16
 80044b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80044c0:	3a01      	subs	r2, #1
 80044c2:	0612      	lsls	r2, r2, #24
 80044c4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80044c8:	430a      	orrs	r2, r1
 80044ca:	493a      	ldr	r1, [pc, #232]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80044d0:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	4a37      	ldr	r2, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044d6:	f023 0310 	bic.w	r3, r3, #16
 80044da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	4a32      	ldr	r2, [pc, #200]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044ec:	f043 0310 	orr.w	r3, r3, #16
 80044f0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80044f2:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	f023 020c 	bic.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	492d      	ldr	r1, [pc, #180]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004500:	4313      	orrs	r3, r2
 8004502:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <HAL_RCC_OscConfig+0xccc>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <HAL_RCC_OscConfig+0xccc>)
 8004512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004516:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004518:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004548:	f7fc fde4 	bl	8001114 <HAL_GetTick>
 800454c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004550:	f7fc fde0 	bl	8001114 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e099      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xc64>
 800456e:	e091      	b.n	8004694 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800457c:	f7fc fdca 	bl	8001114 <HAL_GetTick>
 8004580:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004584:	f7fc fdc6 	bl	8001114 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e07f      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <HAL_RCC_OscConfig+0xcc8>)
 80045a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80045ac:	f023 0303 	bic.w	r3, r3, #3
 80045b0:	6293      	str	r3, [r2, #40]	; 0x28
 80045b2:	e06f      	b.n	8004694 <HAL_RCC_OscConfig+0xda8>
 80045b4:	46020c00 	.word	0x46020c00
 80045b8:	46020800 	.word	0x46020800
 80045bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80045c0:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d039      	beq.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d132      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d129      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d122      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11a      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	0a5b      	lsrs	r3, r3, #9
 8004616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d111      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d108      	bne.n	8004648 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e024      	b.n	8004696 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800465a:	429a      	cmp	r2, r3
 800465c:	d01a      	beq.n	8004694 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 8004664:	f023 0310 	bic.w	r3, r3, #16
 8004668:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fc fd53 	bl	8001114 <HAL_GetTick>
 800466e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004670:	bf00      	nop
 8004672:	f7fc fd4f 	bl	8001114 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	4293      	cmp	r3, r2
 800467c:	d0f9      	beq.n	8004672 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCC_OscConfig+0xdb4>)
 800468e:	f043 0310 	orr.w	r3, r3, #16
 8004692:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3738      	adds	r7, #56	; 0x38
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	46020c00 	.word	0x46020c00

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e1d9      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b9b      	ldr	r3, [pc, #620]	; (8004928 <HAL_RCC_ClockConfig+0x284>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d910      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b98      	ldr	r3, [pc, #608]	; (8004928 <HAL_RCC_ClockConfig+0x284>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 020f 	bic.w	r2, r3, #15
 80046ce:	4996      	ldr	r1, [pc, #600]	; (8004928 <HAL_RCC_ClockConfig+0x284>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_RCC_ClockConfig+0x284>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e1c1      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	4b8c      	ldr	r3, [pc, #560]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004700:	429a      	cmp	r2, r3
 8004702:	d908      	bls.n	8004716 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004704:	4b89      	ldr	r3, [pc, #548]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4986      	ldr	r1, [pc, #536]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004712:	4313      	orrs	r3, r2
 8004714:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d012      	beq.n	8004748 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	4b81      	ldr	r3, [pc, #516]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004730:	429a      	cmp	r2, r3
 8004732:	d909      	bls.n	8004748 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004734:	4b7d      	ldr	r3, [pc, #500]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	497a      	ldr	r1, [pc, #488]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004744:	4313      	orrs	r3, r2
 8004746:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	4b74      	ldr	r3, [pc, #464]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004760:	429a      	cmp	r2, r3
 8004762:	d908      	bls.n	8004776 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b71      	ldr	r3, [pc, #452]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	496e      	ldr	r1, [pc, #440]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004772:	4313      	orrs	r3, r2
 8004774:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	4b69      	ldr	r3, [pc, #420]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	429a      	cmp	r2, r3
 8004790:	d908      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004792:	4b66      	ldr	r3, [pc, #408]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 020f 	bic.w	r2, r3, #15
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4963      	ldr	r1, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d2 	beq.w	8004956 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d143      	bne.n	8004846 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d110      	bne.n	80047ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	4a56      	ldr	r2, [pc, #344]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80047ee:	f7fc fc91 	bl	8001114 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80047f4:	4b4e      	ldr	r3, [pc, #312]	; (8004930 <HAL_RCC_ClockConfig+0x28c>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004802:	f7fc fc87 	bl	8001114 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e12b      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004814:	4b46      	ldr	r3, [pc, #280]	; (8004930 <HAL_RCC_ClockConfig+0x28c>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	4a3f      	ldr	r2, [pc, #252]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d121      	bne.n	8004886 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e112      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d115      	bne.n	8004886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e106      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004866:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0fa      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0f2      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004886:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f023 0203 	bic.w	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4926      	ldr	r1, [pc, #152]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004898:	f7fc fc3c 	bl	8001114 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d112      	bne.n	80048cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc fc34 	bl	8001114 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0d6      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d1ee      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x204>
 80048ca:	e044      	b.n	8004956 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d112      	bne.n	80048fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d6:	f7fc fc1d 	bl	8001114 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e0bf      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d1ee      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x232>
 80048f8:	e02d      	b.n	8004956 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d123      	bne.n	800494a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fc fc06 	bl	8001114 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0a8      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCC_ClockConfig+0x288>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ee      	bne.n	8004904 <HAL_RCC_ClockConfig+0x260>
 8004926:	e016      	b.n	8004956 <HAL_RCC_ClockConfig+0x2b2>
 8004928:	40022000 	.word	0x40022000
 800492c:	46020c00 	.word	0x46020c00
 8004930:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fc fbee 	bl	8001114 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e090      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800494a:	4b4a      	ldr	r3, [pc, #296]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	2b04      	cmp	r3, #4
 8004954:	d1ee      	bne.n	8004934 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b43      	ldr	r3, [pc, #268]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	429a      	cmp	r2, r3
 8004970:	d208      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004972:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	493d      	ldr	r1, [pc, #244]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004980:	4313      	orrs	r3, r2
 8004982:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <HAL_RCC_ClockConfig+0x3d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d210      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <HAL_RCC_ClockConfig+0x3d4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	4937      	ldr	r1, [pc, #220]	; (8004a78 <HAL_RCC_ClockConfig+0x3d4>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <HAL_RCC_ClockConfig+0x3d4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e05b      	b.n	8004a6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d208      	bcs.n	80049e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4925      	ldr	r1, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d012      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d209      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a00:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4919      	ldr	r1, [pc, #100]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d208      	bcs.n	8004a42 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	490d      	ldr	r1, [pc, #52]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCC_ClockConfig+0x3d0>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x3d8>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x3dc>)
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x3e0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fb0d 	bl	8001080 <HAL_InitTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	46020c00 	.word	0x46020c00
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	08009954 	.word	0x08009954
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b08b      	sub	sp, #44	; 0x2c
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a96:	4b78      	ldr	r3, [pc, #480]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa0:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d121      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d11e      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004abc:	4b6e      	ldr	r3, [pc, #440]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ace:	0b1b      	lsrs	r3, r3, #12
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004ad8:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	0f1b      	lsrs	r3, r3, #28
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ae4:	4a65      	ldr	r2, [pc, #404]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d110      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004af8:	e00d      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b06:	4b5e      	ldr	r3, [pc, #376]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	e004      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b12:	4b5b      	ldr	r3, [pc, #364]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	f040 80a5 	bne.w	8004c68 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b1e:	4b56      	ldr	r3, [pc, #344]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004b28:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b36:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b42:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	08db      	lsrs	r3, r3, #3
 8004b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d003      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0xe4>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d022      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x128>
 8004b6a:	e043      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004c84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b92:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004c88 <HAL_RCC_GetSysClockFreq+0x200>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	e046      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004c84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bd2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004bd6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004c88 <HAL_RCC_GetSysClockFreq+0x200>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf2:	e024      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c1c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c20:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004c88 <HAL_RCC_GetSysClockFreq+0x200>
 8004c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	0e1b      	lsrs	r3, r3, #24
 8004c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c48:	3301      	adds	r3, #1
 8004c4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 3a90 	vmov	r3, s15
 8004c66:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004c68:	6a3b      	ldr	r3, [r7, #32]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	372c      	adds	r7, #44	; 0x2c
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	46020c00 	.word	0x46020c00
 8004c7c:	0800996c 	.word	0x0800996c
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	4b742400 	.word	0x4b742400
 8004c88:	46000000 	.word	0x46000000

08004c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c90:	f7ff fefa 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_RCC_GetHCLKFreq+0x28>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	4906      	ldr	r1, [pc, #24]	; (8004cb8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <HAL_RCC_GetHCLKFreq+0x30>)
 8004ca8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <HAL_RCC_GetHCLKFreq+0x30>)
 8004cac:	681b      	ldr	r3, [r3, #0]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	46020c00 	.word	0x46020c00
 8004cb8:	08009954 	.word	0x08009954
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004cc4:	f7ff ffe2 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	46020c00 	.word	0x46020c00
 8004ce4:	08009964 	.word	0x08009964

08004ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004cec:	f7ff ffce 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4903      	ldr	r1, [pc, #12]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	46020c00 	.word	0x46020c00
 8004d0c:	08009964 	.word	0x08009964

08004d10 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004d14:	f7ff ffba 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4903      	ldr	r1, [pc, #12]	; (8004d34 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	46020c00 	.word	0x46020c00
 8004d34:	08009964 	.word	0x08009964

08004d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d4e:	f7fe fd21 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 8004d52:	6178      	str	r0, [r7, #20]
 8004d54:	e019      	b.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5c:	4a37      	ldr	r2, [pc, #220]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d5e:	f043 0304 	orr.w	r3, r3, #4
 8004d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d66:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d74:	f7fe fd0e 	bl	8003794 <HAL_PWREx_GetVoltageRange>
 8004d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d7a:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d80:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d82:	f023 0304 	bic.w	r3, r3, #4
 8004d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d90:	d003      	beq.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d98:	d109      	bne.n	8004dae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da0:	d202      	bcs.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004da2:	2301      	movs	r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004da6:	e033      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004dac:	e030      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db4:	d208      	bcs.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d102      	bne.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e025      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e035      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dce:	d90f      	bls.n	8004df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ddc:	d902      	bls.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e015      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004de4:	2301      	movs	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e012      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e00f      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df6:	d109      	bne.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d102      	bne.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004e00:	2301      	movs	r3, #1
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e004      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004e06:	2302      	movs	r3, #2
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e001      	b.n	8004e10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f023 020f 	bic.w	r2, r3, #15
 8004e18:	4909      	ldr	r1, [pc, #36]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d001      	beq.n	8004e32 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	46020c00 	.word	0x46020c00
 8004e40:	40022000 	.word	0x40022000

08004e44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b0c4      	sub	sp, #272	; 0x110
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 0401 	and.w	r4, r2, #1
 8004e68:	2500      	movs	r5, #0
 8004e6a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e6e:	d00b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004e70:	4bd5      	ldr	r3, [pc, #852]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e76:	f023 0103 	bic.w	r1, r3, #3
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	4ad1      	ldr	r2, [pc, #836]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f002 0802 	and.w	r8, r2, #2
 8004e94:	f04f 0900 	mov.w	r9, #0
 8004e98:	ea58 0309 	orrs.w	r3, r8, r9
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e9e:	4bca      	ldr	r3, [pc, #808]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea4:	f023 010c 	bic.w	r1, r3, #12
 8004ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	4ac6      	ldr	r2, [pc, #792]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f002 0a04 	and.w	sl, r2, #4
 8004ec2:	f04f 0b00 	mov.w	fp, #0
 8004ec6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004eca:	d00b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ecc:	4bbe      	ldr	r3, [pc, #760]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ed2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	4aba      	ldr	r2, [pc, #744]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f002 0308 	and.w	r3, r2, #8
 8004ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004efa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004f04:	4bb0      	ldr	r3, [pc, #704]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	4aac      	ldr	r2, [pc, #688]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f16:	430b      	orrs	r3, r1
 8004f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 0310 	and.w	r3, r2, #16
 8004f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f32:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004f36:	460b      	mov	r3, r1
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f3c:	4ba2      	ldr	r3, [pc, #648]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	4a9e      	ldr	r2, [pc, #632]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4313      	orrs	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004f74:	4b94      	ldr	r3, [pc, #592]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f84:	4a90      	ldr	r2, [pc, #576]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f002 0320 	and.w	r3, r2, #32
 8004f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004fac:	4b86      	ldr	r3, [pc, #536]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fb2:	f023 0107 	bic.w	r1, r3, #7
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fbc:	4a82      	ldr	r2, [pc, #520]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004fe4:	4b78      	ldr	r3, [pc, #480]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fea:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff4:	4a74      	ldr	r2, [pc, #464]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005012:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d00b      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800501c:	4b6a      	ldr	r3, [pc, #424]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800501e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a66      	ldr	r2, [pc, #408]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800502e:	430b      	orrs	r3, r1
 8005030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800504a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d00b      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005054:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800505a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005066:	430b      	orrs	r3, r1
 8005068:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800506c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005082:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d00b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800508c:	4b4e      	ldr	r3, [pc, #312]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800508e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005092:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509c:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800509e:	430b      	orrs	r3, r1
 80050a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80050b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d00b      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80050c4:	4b40      	ldr	r3, [pc, #256]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050ca:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80050ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d4:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80050dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80050e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d00c      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80050fc:	4b32      	ldr	r3, [pc, #200]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005102:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510e:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005110:	430b      	orrs	r3, r1
 8005112:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800512c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d00c      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005136:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800513c:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800514a:	430b      	orrs	r3, r1
 800514c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800515c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005166:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d00c      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005170:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005176:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005184:	430b      	orrs	r3, r1
 8005186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800519a:	2300      	movs	r3, #0
 800519c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d010      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051bc:	4a02      	ldr	r2, [pc, #8]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051be:	430b      	orrs	r3, r1
 80051c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x388>
 80051c6:	bf00      	nop
 80051c8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80051d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d04c      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80051ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f4:	2b80      	cmp	r3, #128	; 0x80
 80051f6:	d02d      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d827      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d02b      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d823      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d006      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d81f      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d011      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005214:	e01a      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005216:	4bbe      	ldr	r3, [pc, #760]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	4abd      	ldr	r2, [pc, #756]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005222:	e01a      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005228:	3308      	adds	r3, #8
 800522a:	4618      	mov	r0, r3
 800522c:	f002 fc32 	bl	8007a94 <RCCEx_PLL2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005236:	e010      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523c:	332c      	adds	r3, #44	; 0x2c
 800523e:	4618      	mov	r0, r3
 8005240:	f002 fcc0 	bl	8007bc4 <RCCEx_PLL3_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800524a:	e006      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005252:	e002      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005254:	bf00      	nop
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005262:	4bab      	ldr	r3, [pc, #684]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005268:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005274:	4aa6      	ldr	r2, [pc, #664]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005276:	430b      	orrs	r3, r1
 8005278:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800527c:	e003      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005282:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800529c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80052a0:	460b      	mov	r3, r1
 80052a2:	4313      	orrs	r3, r2
 80052a4:	d053      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d033      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d82c      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80052ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80052c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c4:	d826      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80052c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ca:	d008      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d820      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d011      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80052dc:	e01a      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052de:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	4a8b      	ldr	r2, [pc, #556]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052ea:	e01a      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f0:	3308      	adds	r3, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 fbce 	bl	8007a94 <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052fe:	e010      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005304:	332c      	adds	r3, #44	; 0x2c
 8005306:	4618      	mov	r0, r3
 8005308:	f002 fc5c 	bl	8007bc4 <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005312:	e006      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800531a:	e002      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800531c:	bf00      	nop
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005322:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800532a:	4b79      	ldr	r3, [pc, #484]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005330:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800533c:	4a74      	ldr	r2, [pc, #464]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	430b      	orrs	r3, r1
 8005340:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800534a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800535a:	67bb      	str	r3, [r7, #120]	; 0x78
 800535c:	2300      	movs	r3, #0
 800535e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005364:	460b      	mov	r3, r1
 8005366:	4313      	orrs	r3, r2
 8005368:	d046      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800536a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005372:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005376:	d028      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005378:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800537c:	d821      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800537e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005382:	d022      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005388:	d81b      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800538a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800538e:	d01c      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005394:	d815      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539a:	d008      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d80f      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x586>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d00e      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x586>
 80053ac:	e009      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b2:	3308      	adds	r3, #8
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fb6d 	bl	8007a94 <RCCEx_PLL2_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80053c0:	e004      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80053d4:	4b4e      	ldr	r3, [pc, #312]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053da:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053e6:	4a4a      	ldr	r2, [pc, #296]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80053f4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80053f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005404:	673b      	str	r3, [r7, #112]	; 0x70
 8005406:	2300      	movs	r3, #0
 8005408:	677b      	str	r3, [r7, #116]	; 0x74
 800540a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800540e:	460b      	mov	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	d03f      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541c:	2b04      	cmp	r3, #4
 800541e:	d81e      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	08005467 	.word	0x08005467
 800542c:	0800543d 	.word	0x0800543d
 8005430:	0800544b 	.word	0x0800544b
 8005434:	08005467 	.word	0x08005467
 8005438:	08005467 	.word	0x08005467
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800543c:	4b34      	ldr	r3, [pc, #208]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	4a33      	ldr	r2, [pc, #204]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005446:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005448:	e00e      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800544a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544e:	332c      	adds	r3, #44	; 0x2c
 8005450:	4618      	mov	r0, r3
 8005452:	f002 fbb7 	bl	8007bc4 <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800545c:	e004      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005466:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005468:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005472:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005476:	f023 0107 	bic.w	r1, r3, #7
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005484:	430b      	orrs	r3, r1
 8005486:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800548a:	e003      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005490:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80054a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a2:	2300      	movs	r3, #0
 80054a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054aa:	460b      	mov	r3, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	d04c      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80054b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054bc:	d02a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80054be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054c2:	d821      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80054c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054c8:	d026      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80054ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ce:	d81b      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80054d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d4:	d00e      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80054d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054da:	d815      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01d      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d110      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80054f2:	e014      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f8:	332c      	adds	r3, #44	; 0x2c
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 fb62 	bl	8007bc4 <RCCEx_PLL3_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005506:	e00a      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800550e:	e006      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005510:	46020c00 	.word	0x46020c00
        break;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800551c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800551e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10d      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005526:	4baf      	ldr	r3, [pc, #700]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800552c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005538:	4aaa      	ldr	r2, [pc, #680]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800553a:	430b      	orrs	r3, r1
 800553c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005540:	e003      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005542:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005546:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005556:	663b      	str	r3, [r7, #96]	; 0x60
 8005558:	2300      	movs	r3, #0
 800555a:	667b      	str	r3, [r7, #100]	; 0x64
 800555c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005560:	460b      	mov	r3, r1
 8005562:	4313      	orrs	r3, r2
 8005564:	f000 80b5 	beq.w	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556e:	4b9d      	ldr	r3, [pc, #628]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557c:	4b99      	ldr	r3, [pc, #612]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	4a98      	ldr	r2, [pc, #608]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800558c:	4b95      	ldr	r3, [pc, #596]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800559a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055a4:	4b90      	ldr	r3, [pc, #576]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	4a8f      	ldr	r2, [pc, #572]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b0:	f7fb fdb0 	bl	8001114 <HAL_GetTick>
 80055b4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055b8:	e00b      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ba:	f7fb fdab 	bl	8001114 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d903      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80055d0:	e005      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055d2:	4b85      	ldr	r3, [pc, #532]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ed      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80055de:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d165      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055e6:	4b7f      	ldr	r3, [pc, #508]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d023      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005600:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005608:	4293      	cmp	r3, r2
 800560a:	d01b      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800560c:	4b75      	ldr	r3, [pc, #468]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800560e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005616:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800561a:	4b72      	ldr	r3, [pc, #456]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800561c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005620:	4a70      	ldr	r2, [pc, #448]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005626:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800562a:	4b6e      	ldr	r3, [pc, #440]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005630:	4a6c      	ldr	r2, [pc, #432]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800563a:	4a6a      	ldr	r2, [pc, #424]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005640:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d019      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fb fd60 	bl	8001114 <HAL_GetTick>
 8005654:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005658:	e00d      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fb fd5b 	bl	8001114 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	f241 3388 	movw	r3, #5000	; 0x1388
 800566a:	429a      	cmp	r2, r3
 800566c:	d903      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005676:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ea      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005684:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10d      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800568c:	4b55      	ldr	r3, [pc, #340]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800568e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800569e:	4a51      	ldr	r2, [pc, #324]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80056ac:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80056b6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ba:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c2:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c8:	4a46      	ldr	r2, [pc, #280]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056ca:	f023 0304 	bic.w	r3, r3, #4
 80056ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80056de:	65bb      	str	r3, [r7, #88]	; 0x58
 80056e0:	2300      	movs	r3, #0
 80056e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d042      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056fa:	d022      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80056fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005700:	d81b      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005706:	d011      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570c:	d815      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005716:	d110      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571c:	3308      	adds	r3, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f002 f9b8 	bl	8007a94 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800572a:	e00d      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572c:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005736:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005738:	e006      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005746:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005748:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10d      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005750:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005756:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800575a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005762:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005764:	430b      	orrs	r3, r1
 8005766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800576a:	e003      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005770:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005780:	653b      	str	r3, [r7, #80]	; 0x50
 8005782:	2300      	movs	r3, #0
 8005784:	657b      	str	r3, [r7, #84]	; 0x54
 8005786:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d031      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d00b      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	d804      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d007      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80057b4:	e004      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80057be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057c0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80057ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057da:	4a02      	ldr	r2, [pc, #8]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80057e2:	e007      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80057e4:	46020c00 	.word	0x46020c00
 80057e8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80057f0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80057f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005800:	64bb      	str	r3, [r7, #72]	; 0x48
 8005802:	2300      	movs	r3, #0
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005806:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d00c      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005810:	4bb2      	ldr	r3, [pc, #712]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005816:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800581e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005822:	4aae      	ldr	r2, [pc, #696]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005824:	430b      	orrs	r3, r1
 8005826:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005836:	643b      	str	r3, [r7, #64]	; 0x40
 8005838:	2300      	movs	r3, #0
 800583a:	647b      	str	r3, [r7, #68]	; 0x44
 800583c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d019      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800584e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005852:	d105      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005854:	4ba1      	ldr	r3, [pc, #644]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	4aa0      	ldr	r2, [pc, #640]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005860:	4b9e      	ldr	r3, [pc, #632]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005866:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005872:	4a9a      	ldr	r2, [pc, #616]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005874:	430b      	orrs	r3, r1
 8005876:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d00c      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005896:	4b91      	ldr	r3, [pc, #580]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800589c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80058a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80058a8:	4a8c      	ldr	r2, [pc, #560]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80058b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
 80058be:	2300      	movs	r3, #0
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
 80058c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d00c      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80058cc:	4b83      	ldr	r3, [pc, #524]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80058de:	4a7f      	ldr	r2, [pc, #508]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f4:	2300      	movs	r3, #0
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d00c      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005902:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005908:	f023 0218 	bic.w	r2, r3, #24
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005914:	4971      	ldr	r1, [pc, #452]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d032      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005944:	d105      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4b65      	ldr	r3, [pc, #404]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	4a64      	ldr	r2, [pc, #400]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005950:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005956:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800595a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800595e:	d108      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005964:	3308      	adds	r3, #8
 8005966:	4618      	mov	r0, r3
 8005968:	f002 f894 	bl	8007a94 <RCCEx_PLL2_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 8005972:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800597c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005988:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800598c:	4953      	ldr	r1, [pc, #332]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005996:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800599a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	2100      	movs	r1, #0
 80059a8:	61b9      	str	r1, [r7, #24]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059c6:	d01e      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80059c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059cc:	d825      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80059ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d2:	d00e      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80059d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d8:	d81f      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d021      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d11a      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ee:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80059f0:	e018      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f6:	3308      	adds	r3, #8
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 f84b 	bl	8007a94 <RCCEx_PLL2_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005a04:	e00e      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0a:	332c      	adds	r3, #44	; 0x2c
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f002 f8d9 	bl	8007bc4 <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005a18:	e004      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005a20:	e000      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a24:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a3e:	4927      	ldr	r1, [pc, #156]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005a4c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d03d      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a78:	d00e      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a7e:	d815      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d017      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a88:	d110      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a94:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005a96:	e00e      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fff8 	bl	8007a94 <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005ab4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ab6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ac4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	4902      	ldr	r1, [pc, #8]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005ada:	bf00      	nop
 8005adc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005ae4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d00c      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b16:	4928      	ldr	r1, [pc, #160]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	2100      	movs	r1, #0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d036      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b42:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005b46:	d00d      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005b4c:	d811      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b52:	d012      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b58:	d80b      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d106      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b64:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005b70:	e004      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005b96:	4908      	ldr	r1, [pc, #32]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005ba4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005ba8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb8:	46020c00 	.word	0x46020c00

08005bbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	; 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bc4:	4ba6      	ldr	r3, [pc, #664]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bcc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bce:	4ba4      	ldr	r3, [pc, #656]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bd8:	4ba1      	ldr	r3, [pc, #644]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	3301      	adds	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005be6:	4b9e      	ldr	r3, [pc, #632]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bf2:	4b9b      	ldr	r3, [pc, #620]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d062      	beq.n	8005cda <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	f200 8081 	bhi.w	8005d1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d024      	beq.n	8005c6c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d17a      	bne.n	8005d1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3a:	4b89      	ldr	r3, [pc, #548]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c4e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6a:	e08f      	b.n	8005d8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c6c:	4b7c      	ldr	r3, [pc, #496]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005c78:	4b79      	ldr	r3, [pc, #484]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	0f1b      	lsrs	r3, r3, #28
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	e006      	b.n	8005c92 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005c84:	4b76      	ldr	r3, [pc, #472]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	0f1b      	lsrs	r3, r3, #28
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	4a76      	ldr	r2, [pc, #472]	; (8005e6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cbc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd8:	e058      	b.n	8005d8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cec:	4b5c      	ldr	r3, [pc, #368]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d00:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d1c:	e036      	b.n	8005d8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d1e:	4b50      	ldr	r3, [pc, #320]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005d2a:	4b4d      	ldr	r3, [pc, #308]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0f1b      	lsrs	r3, r3, #28
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	e006      	b.n	8005d44 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005d36:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	0f1b      	lsrs	r3, r3, #28
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	4a49      	ldr	r2, [pc, #292]	; (8005e6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d6e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005d8c:	4b34      	ldr	r3, [pc, #208]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d98:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	0a5b      	lsrs	r3, r3, #9
 8005d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbe:	ee17 2a90 	vmov	r2, s15
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dce:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dda:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e00:	ee17 2a90 	vmov	r2, s15
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d017      	beq.n	8005e4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	0e1b      	lsrs	r3, r3, #24
 8005e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e4a:	e002      	b.n	8005e52 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	609a      	str	r2, [r3, #8]
}
 8005e52:	bf00      	nop
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	46020c00 	.word	0x46020c00
 8005e64:	4b742400 	.word	0x4b742400
 8005e68:	46000000 	.word	0x46000000
 8005e6c:	0800996c 	.word	0x0800996c

08005e70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005e78:	4ba6      	ldr	r3, [pc, #664]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e80:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005e82:	4ba4      	ldr	r3, [pc, #656]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005e8c:	4ba1      	ldr	r3, [pc, #644]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	3301      	adds	r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005e9a:	4b9e      	ldr	r3, [pc, #632]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ea6:	4b9b      	ldr	r3, [pc, #620]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d062      	beq.n	8005f8e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	f200 8081 	bhi.w	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d024      	beq.n	8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d17a      	bne.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b89      	ldr	r3, [pc, #548]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a86 	vldr	s11, [pc, #536]	; 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f1e:	e08f      	b.n	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f20:	4b7c      	ldr	r3, [pc, #496]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005f2c:	4b79      	ldr	r3, [pc, #484]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	0f1b      	lsrs	r3, r3, #28
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005f38:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	0f1b      	lsrs	r3, r3, #28
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	4a76      	ldr	r2, [pc, #472]	; (8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f70:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f8c:	e058      	b.n	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa0:	4b5c      	ldr	r3, [pc, #368]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd0:	e036      	b.n	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005fd2:	4b50      	ldr	r3, [pc, #320]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005fde:	4b4d      	ldr	r3, [pc, #308]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	0f1b      	lsrs	r3, r3, #28
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005fea:	4b4a      	ldr	r3, [pc, #296]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	0f1b      	lsrs	r3, r3, #28
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	4a49      	ldr	r2, [pc, #292]	; (8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006022:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800603e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006040:	4b34      	ldr	r3, [pc, #208]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800604c:	4b31      	ldr	r3, [pc, #196]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	0a5b      	lsrs	r3, r3, #9
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800605e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006062:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006066:	edd7 6a07 	vldr	s13, [r7, #28]
 800606a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006072:	ee17 2a90 	vmov	r2, s15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800608e:	4b21      	ldr	r3, [pc, #132]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80060a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 2a90 	vmov	r2, s15
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80060c4:	4b13      	ldr	r3, [pc, #76]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060d0:	4b10      	ldr	r3, [pc, #64]	; (8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d4:	0e1b      	lsrs	r3, r3, #24
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80060e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f6:	ee17 2a90 	vmov	r2, s15
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060fe:	e002      	b.n	8006106 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
}
 8006106:	bf00      	nop
 8006108:	3724      	adds	r7, #36	; 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	46020c00 	.word	0x46020c00
 8006118:	4b742400 	.word	0x4b742400
 800611c:	46000000 	.word	0x46000000
 8006120:	0800996c 	.word	0x0800996c

08006124 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800612c:	4ba6      	ldr	r3, [pc, #664]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006134:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006136:	4ba4      	ldr	r3, [pc, #656]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006140:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800614e:	4b9e      	ldr	r3, [pc, #632]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800615a:	4b9b      	ldr	r3, [pc, #620]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800615c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615e:	08db      	lsrs	r3, r3, #3
 8006160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d062      	beq.n	8006242 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b03      	cmp	r3, #3
 8006180:	f200 8081 	bhi.w	8006286 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d024      	beq.n	80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d17a      	bne.n	8006286 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b6:	eddf 5a86 	vldr	s11, [pc, #536]	; 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80061d2:	e08f      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061d4:	4b7c      	ldr	r3, [pc, #496]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80061e0:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	0f1b      	lsrs	r3, r3, #28
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	e006      	b.n	80061fa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80061ec:	4b76      	ldr	r3, [pc, #472]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	0f1b      	lsrs	r3, r3, #28
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	4a76      	ldr	r2, [pc, #472]	; (80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80061fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006220:	ed97 6a02 	vldr	s12, [r7, #8]
 8006224:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006234:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006240:	e058      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006254:	4b5c      	ldr	r3, [pc, #368]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006264:	ed97 6a02 	vldr	s12, [r7, #8]
 8006268:	eddf 5a59 	vldr	s11, [pc, #356]	; 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800626c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006270:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006278:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800627c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006284:	e036      	b.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006286:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006292:	4b4d      	ldr	r3, [pc, #308]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	0f1b      	lsrs	r3, r3, #28
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	e006      	b.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800629e:	4b4a      	ldr	r3, [pc, #296]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	0f1b      	lsrs	r3, r3, #28
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	4a49      	ldr	r2, [pc, #292]	; (80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80062ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062f2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80062f4:	4b34      	ldr	r3, [pc, #208]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d017      	beq.n	8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006300:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	0a5b      	lsrs	r3, r3, #9
 8006306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006316:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800631a:	edd7 6a07 	vldr	s13, [r7, #28]
 800631e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006326:	ee17 2a90 	vmov	r2, s15
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e002      	b.n	8006336 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d017      	beq.n	8006372 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006358:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800635c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006368:	ee17 2a90 	vmov	r2, s15
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	e002      	b.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	0e1b      	lsrs	r3, r3, #24
 800638a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800639a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800639e:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063aa:	ee17 2a90 	vmov	r2, s15
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	609a      	str	r2, [r3, #8]
}
 80063ba:	bf00      	nop
 80063bc:	3724      	adds	r7, #36	; 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	46020c00 	.word	0x46020c00
 80063cc:	4b742400 	.word	0x4b742400
 80063d0:	46000000 	.word	0x46000000
 80063d4:	0800996c 	.word	0x0800996c

080063d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	; 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80063e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80063ea:	430b      	orrs	r3, r1
 80063ec:	d145      	bne.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063ee:	4ba7      	ldr	r3, [pc, #668]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80063fa:	4ba4      	ldr	r3, [pc, #656]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d108      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640e:	d104      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
 8006416:	f001 bb31 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800641a:	4b9c      	ldr	r3, [pc, #624]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800641c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006428:	d114      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006430:	d110      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006432:	4b96      	ldr	r3, [pc, #600]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006440:	d103      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006442:	23fa      	movs	r3, #250	; 0xfa
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006446:	f001 bb19 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800644a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006450:	f001 bb14 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006454:	4b8d      	ldr	r3, [pc, #564]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006460:	d107      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006468:	d103      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800646a:	4b89      	ldr	r3, [pc, #548]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
 800646e:	f001 bb05 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
 8006476:	f001 bb01 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800647a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006482:	430b      	orrs	r3, r1
 8006484:	d151      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006486:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006488:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800648c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006490:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d035      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d841      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b60      	cmp	r3, #96	; 0x60
 80064a2:	d02a      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2b60      	cmp	r3, #96	; 0x60
 80064a8:	d83b      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d009      	beq.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d835      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00c      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d012      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064c2:	e02e      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fb77 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d2:	f001 bad3 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d6:	f107 0318 	add.w	r3, r7, #24
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fcc8 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064e4:	f001 baca 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e8:	f107 030c 	add.w	r3, r7, #12
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fe19 	bl	8006124 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064f6:	f001 bac1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80064fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006500:	f001 babc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006504:	4b61      	ldr	r3, [pc, #388]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d103      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006512:	4b60      	ldr	r3, [pc, #384]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006516:	f001 bab1 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651e:	f001 baad 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006526:	f001 baa9 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800652a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800652e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006532:	430b      	orrs	r3, r1
 8006534:	d158      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006536:	4b55      	ldr	r3, [pc, #340]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800653c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006540:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006548:	d03b      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	d846      	bhi.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006558:	d02e      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006560:	d83e      	bhi.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006568:	d00b      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006570:	d836      	bhi.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657e:	d012      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006580:	e02e      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fb18 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006590:	f001 ba74 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006594:	f107 0318 	add.w	r3, r7, #24
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fc69 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a2:	f001 ba6b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fdba 	bl	8006124 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b4:	f001 ba62 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065be:	f001 ba5d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c2:	4b32      	ldr	r3, [pc, #200]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ce:	d103      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80065d0:	4b30      	ldr	r3, [pc, #192]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065d4:	f001 ba52 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065dc:	f001 ba4e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e4:	f001 ba4a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80065e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ec:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80065f0:	430b      	orrs	r3, r1
 80065f2:	d126      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006600:	4b22      	ldr	r3, [pc, #136]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d106      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
 8006618:	f001 ba30 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d107      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006630:	d103      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006632:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	f001 ba21 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
 800663e:	f001 ba1d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006646:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800664a:	430b      	orrs	r3, r1
 800664c:	d16e      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006654:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006658:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006660:	d03d      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006668:	d85c      	bhi.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006670:	d014      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006678:	d854      	bhi.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01f      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006686:	d012      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006688:	e04c      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800668a:	bf00      	nop
 800668c:	46020c00 	.word	0x46020c00
 8006690:	0007a120 	.word	0x0007a120
 8006694:	00f42400 	.word	0x00f42400
 8006698:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800669c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fa8b 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066aa:	f001 b9e7 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ae:	f107 0318 	add.w	r3, r7, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fbdc 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066bc:	f001 b9de 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80066c0:	4ba7      	ldr	r3, [pc, #668]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066cc:	d103      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80066ce:	4ba5      	ldr	r3, [pc, #660]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066d2:	f001 b9d3 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066da:	f001 b9cf 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066de:	4ba0      	ldr	r3, [pc, #640]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d118      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066ea:	4b9d      	ldr	r3, [pc, #628]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80066f6:	4b9a      	ldr	r3, [pc, #616]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0e1b      	lsrs	r3, r3, #24
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006702:	4b97      	ldr	r3, [pc, #604]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	4a95      	ldr	r2, [pc, #596]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006718:	f001 b9b0 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006720:	f001 b9ac 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006728:	f001 b9a8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800672c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006730:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006734:	430b      	orrs	r3, r1
 8006736:	d17f      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006738:	4b89      	ldr	r3, [pc, #548]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800673a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800673e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006742:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	2b00      	cmp	r3, #0
 8006748:	d165      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800674a:	4b85      	ldr	r3, [pc, #532]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800674c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006750:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006754:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800675c:	d034      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006764:	d853      	bhi.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800676c:	d00b      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006774:	d84b      	bhi.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d016      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006782:	d009      	beq.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006784:	e043      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fa16 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006794:	f001 b972 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006798:	f107 0318 	add.w	r3, r7, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fb67 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067a6:	f001 b969 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80067aa:	4b6d      	ldr	r3, [pc, #436]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d103      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80067b8:	4b6a      	ldr	r3, [pc, #424]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80067bc:	f001 b95e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80067c4:	f001 b95a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067c8:	4b65      	ldr	r3, [pc, #404]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d118      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067d4:	4b62      	ldr	r3, [pc, #392]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80067e0:	4b5f      	ldr	r3, [pc, #380]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	e006      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80067ec:	4b5c      	ldr	r3, [pc, #368]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	4a5b      	ldr	r2, [pc, #364]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80067fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006802:	f001 b93b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800680a:	f001 b937 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006812:	f001 b933 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800681c:	d108      	bne.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800681e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff f9ca 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
 800682c:	f001 b926 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	f001 b922 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683c:	1e51      	subs	r1, r2, #1
 800683e:	430b      	orrs	r3, r1
 8006840:	d136      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006842:	4b47      	ldr	r3, [pc, #284]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fe fa48 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 8006858:	6378      	str	r0, [r7, #52]	; 0x34
 800685a:	f001 b90f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b01      	cmp	r3, #1
 8006862:	d104      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006864:	f7fe f910 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006868:	6378      	str	r0, [r7, #52]	; 0x34
 800686a:	f001 b907 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800686e:	4b3c      	ldr	r3, [pc, #240]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	2b02      	cmp	r3, #2
 8006880:	d103      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006882:	4b3a      	ldr	r3, [pc, #232]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	f001 b8f9 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800688a:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2b03      	cmp	r3, #3
 800689c:	d104      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
 80068a4:	f001 b8ea 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
 80068ac:	f001 b8e6 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80068b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b4:	1e91      	subs	r1, r2, #2
 80068b6:	430b      	orrs	r3, r1
 80068b8:	d136      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80068ba:	4b29      	ldr	r3, [pc, #164]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068cc:	f7fe f9f8 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80068d0:	6378      	str	r0, [r7, #52]	; 0x34
 80068d2:	f001 b8d3 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d104      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068dc:	f7fe f8d4 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 80068e0:	6378      	str	r0, [r7, #52]	; 0x34
 80068e2:	f001 b8cb 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d106      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d103      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
 80068fe:	f001 b8bd 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006902:	4b17      	ldr	r3, [pc, #92]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b02      	cmp	r3, #2
 800690e:	d107      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	2b0c      	cmp	r3, #12
 8006914:	d104      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
 800691c:	f001 b8ae 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	f001 b8aa 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692c:	1f11      	subs	r1, r2, #4
 800692e:	430b      	orrs	r3, r1
 8006930:	d13f      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800693c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006944:	f7fe f9bc 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006948:	6378      	str	r0, [r7, #52]	; 0x34
 800694a:	f001 b897 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2b10      	cmp	r3, #16
 8006952:	d10d      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006954:	f7fe f898 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006958:	6378      	str	r0, [r7, #52]	; 0x34
 800695a:	f001 b88f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800695e:	bf00      	nop
 8006960:	46020c00 	.word	0x46020c00
 8006964:	02dc6c00 	.word	0x02dc6c00
 8006968:	0800996c 	.word	0x0800996c
 800696c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006970:	4ba8      	ldr	r3, [pc, #672]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697c:	d106      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b20      	cmp	r3, #32
 8006982:	d103      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006984:	4ba4      	ldr	r3, [pc, #656]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006986:	637b      	str	r3, [r7, #52]	; 0x34
 8006988:	f001 b878 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800698c:	4ba1      	ldr	r3, [pc, #644]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800698e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b30      	cmp	r3, #48	; 0x30
 800699e:	d104      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80069a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	f001 b869 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
 80069ae:	f001 b865 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80069b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b6:	f1a2 0108 	sub.w	r1, r2, #8
 80069ba:	430b      	orrs	r3, r1
 80069bc:	d136      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80069be:	4b95      	ldr	r3, [pc, #596]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069d0:	f7fe f976 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80069d4:	6378      	str	r0, [r7, #52]	; 0x34
 80069d6:	f001 b851 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d104      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069e0:	f7fe f852 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 80069e4:	6378      	str	r0, [r7, #52]	; 0x34
 80069e6:	f001 b849 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80069ea:	4b8a      	ldr	r3, [pc, #552]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d103      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80069fe:	4b86      	ldr	r3, [pc, #536]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	f001 b83b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006a06:	4b83      	ldr	r3, [pc, #524]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d107      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2bc0      	cmp	r3, #192	; 0xc0
 8006a18:	d104      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a20:	f001 b82c 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
 8006a28:	f001 b828 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a30:	f1a2 0110 	sub.w	r1, r2, #16
 8006a34:	430b      	orrs	r3, r1
 8006a36:	d139      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006a38:	4b76      	ldr	r3, [pc, #472]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a4a:	f7fe f939 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006a4e:	6378      	str	r0, [r7, #52]	; 0x34
 8006a50:	f001 b814 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5a:	d104      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a5c:	f7fe f814 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006a60:	6378      	str	r0, [r7, #52]	; 0x34
 8006a62:	f001 b80b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006a66:	4b6b      	ldr	r3, [pc, #428]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d107      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7a:	d103      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006a7c:	4b66      	ldr	r3, [pc, #408]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a80:	f000 bffc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006a84:	4b63      	ldr	r3, [pc, #396]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d108      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a98:	d104      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa0:	f000 bfec 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	f000 bfe8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	d139      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006ab8:	4b56      	ldr	r3, [pc, #344]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006abe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ac2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006aca:	f7fe f8f9 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006ace:	6378      	str	r0, [r7, #52]	; 0x34
 8006ad0:	f000 bfd4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ada:	d104      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006adc:	f7fd ffd4 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8006ae2:	f000 bfcb 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006ae6:	4b4b      	ldr	r3, [pc, #300]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d107      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afa:	d103      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006afc:	4b46      	ldr	r3, [pc, #280]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006afe:	637b      	str	r3, [r7, #52]	; 0x34
 8006b00:	f000 bfbc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006b04:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d108      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b18:	d104      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b20:	f000 bfac 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	f000 bfa8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b30:	f1a2 0120 	sub.w	r1, r2, #32
 8006b34:	430b      	orrs	r3, r1
 8006b36:	d158      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006b4a:	f7fe f8e1 	bl	8004d10 <HAL_RCC_GetPCLK3Freq>
 8006b4e:	6378      	str	r0, [r7, #52]	; 0x34
 8006b50:	f000 bf94 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d104      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b5a:	f7fd ff95 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006b5e:	6378      	str	r0, [r7, #52]	; 0x34
 8006b60:	f000 bf8c 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b64:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b70:	d106      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d103      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7c:	f000 bf7e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b80:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d104      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	f000 bf6f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d11b      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d118      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006bbc:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	0e1b      	lsrs	r3, r3, #24
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	e006      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	0e1b      	lsrs	r3, r3, #24
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bde:	f000 bf4d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	f000 bf49 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	d172      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006bf6:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bfc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d10a      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c0a:	f7fd ff3d 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006c0e:	6378      	str	r0, [r7, #52]	; 0x34
 8006c10:	f000 bf34 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006c14:	46020c00 	.word	0x46020c00
 8006c18:	00f42400 	.word	0x00f42400
 8006c1c:	0800996c 	.word	0x0800996c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d108      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c28:	f107 0318 	add.w	r3, r7, #24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff f91f 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	f000 bf21 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006c40:	f7fe f824 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8006c44:	6378      	str	r0, [r7, #52]	; 0x34
 8006c46:	f000 bf19 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c50:	d122      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c52:	4bb0      	ldr	r3, [pc, #704]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d118      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c5e:	4bad      	ldr	r3, [pc, #692]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006c6a:	4baa      	ldr	r3, [pc, #680]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0e1b      	lsrs	r3, r3, #24
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	e006      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006c76:	4ba7      	ldr	r3, [pc, #668]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	0e1b      	lsrs	r3, r3, #24
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	4aa4      	ldr	r2, [pc, #656]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8c:	f000 bef6 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
 8006c94:	f000 bef2 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006c98:	4b9e      	ldr	r3, [pc, #632]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cac:	d103      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8006cae:	4b9b      	ldr	r3, [pc, #620]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb2:	f000 bee3 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006cb6:	4b97      	ldr	r3, [pc, #604]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cca:	d103      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006ccc:	4b93      	ldr	r3, [pc, #588]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd0:	f000 bed4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	f000 bed0 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	d158      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006ce8:	4b8a      	ldr	r3, [pc, #552]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d84b      	bhi.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d39 	.word	0x08006d39
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d27 	.word	0x08006d27
 8006d0c:	08006d43 	.word	0x08006d43
 8006d10:	08006d4d 	.word	0x08006d4d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe ff4f 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d22:	f000 beab 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d26:	f107 030c 	add.w	r3, r7, #12
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff f9fa 	bl	8006124 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d34:	f000 bea2 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d38:	f7fd ffa8 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8006d3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d3e:	f000 be9d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d48:	f000 be98 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d4c:	4b71      	ldr	r3, [pc, #452]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d118      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d58:	4b6e      	ldr	r3, [pc, #440]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006d64:	4b6b      	ldr	r3, [pc, #428]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	e006      	b.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006d70:	4b68      	ldr	r3, [pc, #416]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	4a66      	ldr	r2, [pc, #408]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d86:	f000 be79 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d8e:	f000 be75 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d96:	f000 be71 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006da2:	430b      	orrs	r3, r1
 8006da4:	d167      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006da6:	4b5b      	ldr	r3, [pc, #364]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dac:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006db0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006db8:	d036      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc0:	d855      	bhi.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dc8:	d029      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dd0:	d84d      	bhi.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd8:	d013      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de0:	d845      	bhi.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dee:	d13e      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fee1 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dfe:	f000 be3d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff f98c 	bl	8006124 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e10:	f000 be34 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e14:	f7fd ff3a 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8006e18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e1a:	f000 be2f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e1e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e24:	f000 be2a 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e28:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d118      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e34:	4b37      	ldr	r3, [pc, #220]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006e40:	4b34      	ldr	r3, [pc, #208]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	0e1b      	lsrs	r3, r3, #24
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	e006      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006e4c:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	0e1b      	lsrs	r3, r3, #24
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e62:	f000 be0b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e6a:	f000 be07 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e72:	f000 be03 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	d152      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e82:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e94:	f7fd ff14 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006e98:	6378      	str	r0, [r7, #52]	; 0x34
 8006e9a:	f000 bdef 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d104      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ea6:	f7fd fdef 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006eaa:	6378      	str	r0, [r7, #52]	; 0x34
 8006eac:	f000 bde6 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006eb0:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d107      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec4:	d103      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	f000 bdd7 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d122      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee0:	d11e      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	0e1b      	lsrs	r3, r3, #24
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	0e1b      	lsrs	r3, r3, #24
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	4a03      	ldr	r2, [pc, #12]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f10:	f000 bdb4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006f14:	46020c00 	.word	0x46020c00
 8006f18:	0800996c 	.word	0x0800996c
 8006f1c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	637b      	str	r3, [r7, #52]	; 0x34
 8006f24:	f000 bdaa 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006f30:	430b      	orrs	r3, r1
 8006f32:	d14c      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f34:	4ba8      	ldr	r3, [pc, #672]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f46:	f7fd febb 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006f4a:	6378      	str	r0, [r7, #52]	; 0x34
 8006f4c:	f000 bd96 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f56:	d104      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fd fd96 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006f5c:	6378      	str	r0, [r7, #52]	; 0x34
 8006f5e:	f000 bd8d 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006f62:	4b9d      	ldr	r3, [pc, #628]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6e:	d107      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f76:	d103      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8006f78:	4b98      	ldr	r3, [pc, #608]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7c:	f000 bd7e 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006f80:	4b95      	ldr	r3, [pc, #596]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d11c      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f92:	d118      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f94:	4b90      	ldr	r3, [pc, #576]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006fa0:	4b8d      	ldr	r3, [pc, #564]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	0e1b      	lsrs	r3, r3, #24
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	e006      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006fac:	4b8a      	ldr	r3, [pc, #552]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	4a89      	ldr	r2, [pc, #548]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	f000 bd5b 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fca:	f000 bd57 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	d158      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006fda:	4b7f      	ldr	r3, [pc, #508]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fe0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fea:	d028      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	2bc0      	cmp	r3, #192	; 0xc0
 8006ff0:	d848      	bhi.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d00e      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	2b80      	cmp	r3, #128	; 0x80
 8006ffc:	d842      	bhi.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d014      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800700a:	e03b      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800700c:	f7fd fe80 	bl	8004d10 <HAL_RCC_GetPCLK3Freq>
 8007010:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007012:	f000 bd33 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007016:	4b70      	ldr	r3, [pc, #448]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007022:	d103      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8007024:	4b6d      	ldr	r3, [pc, #436]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007028:	f000 bd28 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007030:	f000 bd24 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007034:	f7fd fd28 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007038:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800703a:	f000 bd1f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800703e:	4b66      	ldr	r3, [pc, #408]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b20      	cmp	r3, #32
 8007048:	d118      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800704a:	4b63      	ldr	r3, [pc, #396]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8007056:	4b60      	ldr	r3, [pc, #384]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	e006      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8007062:	4b5d      	ldr	r3, [pc, #372]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	4a5b      	ldr	r2, [pc, #364]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007078:	f000 bd00 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007080:	f000 bcfc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007088:	f000 bcf8 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800708c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007090:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007094:	430b      	orrs	r3, r1
 8007096:	d14c      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007098:	4b4f      	ldr	r3, [pc, #316]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800709a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800709e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070aa:	f7fd fe09 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80070ae:	6378      	str	r0, [r7, #52]	; 0x34
 80070b0:	f000 bce4 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ba:	d104      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070bc:	f7fd fce4 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 80070c0:	6378      	str	r0, [r7, #52]	; 0x34
 80070c2:	f000 bcdb 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80070c6:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d2:	d107      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	d103      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80070dc:	4b3f      	ldr	r3, [pc, #252]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
 80070e0:	f000 bccc 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80070e4:	4b3c      	ldr	r3, [pc, #240]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d11c      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070f6:	d118      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070f8:	4b37      	ldr	r3, [pc, #220]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007104:	4b34      	ldr	r3, [pc, #208]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	e006      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007110:	4b31      	ldr	r3, [pc, #196]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	0e1b      	lsrs	r3, r3, #24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	4a30      	ldr	r2, [pc, #192]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
 8007126:	f000 bca9 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
 800712e:	f000 bca5 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007136:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800713a:	430b      	orrs	r3, r1
 800713c:	d152      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800713e:	4b26      	ldr	r3, [pc, #152]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8007140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007144:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007148:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007150:	f7fd fdb6 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8007154:	6378      	str	r0, [r7, #52]	; 0x34
 8007156:	f000 bc91 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007160:	d104      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007162:	f7fd fc91 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007166:	6378      	str	r0, [r7, #52]	; 0x34
 8007168:	f000 bc88 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d107      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007180:	d103      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8007182:	4b16      	ldr	r3, [pc, #88]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	f000 bc79 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800718a:	4b13      	ldr	r3, [pc, #76]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d11c      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800719c:	d118      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800719e:	4b0e      	ldr	r3, [pc, #56]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80071b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071bc:	041b      	lsls	r3, r3, #16
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a06      	ldr	r2, [pc, #24]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	f000 bc56 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	f000 bc52 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80071d8:	46020c00 	.word	0x46020c00
 80071dc:	00f42400 	.word	0x00f42400
 80071e0:	0800996c 	.word	0x0800996c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80071e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80071ec:	430b      	orrs	r3, r1
 80071ee:	d14a      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80071f0:	4ba5      	ldr	r3, [pc, #660]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80071f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071f6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80071fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fd fd5d 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8007206:	6378      	str	r0, [r7, #52]	; 0x34
 8007208:	f000 bc38 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007212:	d104      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007214:	f7fd fc38 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007218:	6378      	str	r0, [r7, #52]	; 0x34
 800721a:	f000 bc2f 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800721e:	4b9a      	ldr	r3, [pc, #616]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722a:	d107      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007232:	d103      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8007234:	4b95      	ldr	r3, [pc, #596]	; (800748c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
 8007238:	f000 bc20 	b.w	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800723c:	4b92      	ldr	r3, [pc, #584]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b20      	cmp	r3, #32
 8007246:	d11b      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800724e:	d117      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007250:	4b8d      	ldr	r3, [pc, #564]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800725c:	4b8a      	ldr	r3, [pc, #552]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8007268:	4b87      	ldr	r3, [pc, #540]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800726a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a86      	ldr	r2, [pc, #536]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
 800727e:	e3fd      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	e3fa      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800728a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800728e:	430b      	orrs	r3, r1
 8007290:	d164      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007292:	4b7d      	ldr	r3, [pc, #500]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d120      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072a4:	4b78      	ldr	r3, [pc, #480]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d117      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072b0:	4b75      	ldr	r3, [pc, #468]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80072bc:	4b72      	ldr	r3, [pc, #456]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	0e1b      	lsrs	r3, r3, #24
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	e006      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80072c8:	4b6f      	ldr	r3, [pc, #444]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	0e1b      	lsrs	r3, r3, #24
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	4a6e      	ldr	r2, [pc, #440]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80072d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
 80072de:	e3cd      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	e3ca      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80072e6:	4b68      	ldr	r3, [pc, #416]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80072e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f4:	d112      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fc:	d10e      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072fe:	4b62      	ldr	r3, [pc, #392]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730c:	d102      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800730e:	23fa      	movs	r3, #250	; 0xfa
 8007310:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007312:	e3b3      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8007314:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800731a:	e3af      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800731c:	4b5a      	ldr	r3, [pc, #360]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d106      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007330:	d102      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8007332:	4b56      	ldr	r3, [pc, #344]	; (800748c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
 8007336:	e3a1      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007338:	4b53      	ldr	r3, [pc, #332]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800733a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b02      	cmp	r3, #2
 8007344:	d107      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800734c:	d103      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
 8007354:	e392      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
 800735a:	e38f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800735c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007360:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007364:	430b      	orrs	r3, r1
 8007366:	d164      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007368:	4b47      	ldr	r3, [pc, #284]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800736a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800736e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007372:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	2b00      	cmp	r3, #0
 8007378:	d120      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800737a:	4b43      	ldr	r3, [pc, #268]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d117      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007386:	4b40      	ldr	r3, [pc, #256]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8007392:	4b3d      	ldr	r3, [pc, #244]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	0e1b      	lsrs	r3, r3, #24
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	e006      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800739e:	4b3a      	ldr	r3, [pc, #232]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80073a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	0e1b      	lsrs	r3, r3, #24
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	4a38      	ldr	r2, [pc, #224]	; (8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80073ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
 80073b4:	e362      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	e35f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80073bc:	4b32      	ldr	r3, [pc, #200]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80073be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ca:	d112      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d2:	d10e      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80073d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e2:	d102      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80073e4:	23fa      	movs	r3, #250	; 0xfa
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073e8:	e348      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80073ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f0:	e344      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80073f2:	4b25      	ldr	r3, [pc, #148]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fe:	d106      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007406:	d102      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8007408:	4b20      	ldr	r3, [pc, #128]	; (800748c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	e336      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800740e:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d107      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007422:	d103      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8007424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	e327      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
 8007430:	e324      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007436:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800743a:	430b      	orrs	r3, r1
 800743c:	d14e      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007444:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007448:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd fc36 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8007454:	6378      	str	r0, [r7, #52]	; 0x34
 8007456:	e311      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800745a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800745e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007466:	d119      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800746e:	d115      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8007472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800747e:	d109      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8007480:	23fa      	movs	r3, #250	; 0xfa
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007484:	e2fa      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007486:	bf00      	nop
 8007488:	46020c00 	.word	0x46020c00
 800748c:	00f42400 	.word	0x00f42400
 8007490:	0800996c 	.word	0x0800996c
      }
      else
      {
        frequency = LSI_VALUE;
 8007494:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800749a:	e2ef      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800749c:	4ba8      	ldr	r3, [pc, #672]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a8:	d106      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074b0:	d102      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80074b2:	4ba4      	ldr	r3, [pc, #656]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
 80074b6:	e2e1      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80074b8:	4ba1      	ldr	r3, [pc, #644]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d107      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074cc:	d103      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
 80074d4:	e2d2      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
 80074da:	e2cf      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80074dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80074e4:	430b      	orrs	r3, r1
 80074e6:	d12d      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80074e8:	4b95      	ldr	r3, [pc, #596]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ee:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80074f4:	4b92      	ldr	r3, [pc, #584]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007500:	d105      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8007508:	4b8e      	ldr	r3, [pc, #568]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	e2b6      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fb4e 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	e2aa      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fc9c 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
 800753c:	e29e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
 8007542:	e29b      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007548:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800754c:	430b      	orrs	r3, r1
 800754e:	d156      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007550:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007556:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800755a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007562:	d028      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800756a:	d845      	bhi.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007572:	d013      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800757a:	d83d      	bhi.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007588:	d004      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800758a:	e035      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800758c:	f7fd fbac 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 8007590:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007592:	e273      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007594:	f7fd fa78 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007598:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800759a:	e26f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800759c:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a8:	d102      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80075aa:	4b66      	ldr	r3, [pc, #408]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075ae:	e265      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b4:	e262      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075b6:	4b62      	ldr	r3, [pc, #392]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d117      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075c2:	4b5f      	ldr	r3, [pc, #380]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80075ce:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	0e1b      	lsrs	r3, r3, #24
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80075da:	4b59      	ldr	r3, [pc, #356]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80075dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	0e1b      	lsrs	r3, r3, #24
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	4a57      	ldr	r2, [pc, #348]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80075ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075f0:	e244      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075f6:	e241      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075fc:	e23e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80075fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007602:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007606:	430b      	orrs	r3, r1
 8007608:	d156      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800760a:	4b4d      	ldr	r3, [pc, #308]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800760c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800761c:	d028      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007624:	d845      	bhi.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762c:	d013      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007634:	d83d      	bhi.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007642:	d004      	beq.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8007644:	e035      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007646:	f7fd fb3b 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 800764a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800764c:	e216      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800764e:	f7fd fa1b 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007652:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007654:	e212      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007656:	4b3a      	ldr	r3, [pc, #232]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007662:	d102      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8007664:	4b37      	ldr	r3, [pc, #220]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007668:	e208      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800766e:	e205      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007670:	4b33      	ldr	r3, [pc, #204]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d117      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800767c:	4b30      	ldr	r3, [pc, #192]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007688:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	0e1b      	lsrs	r3, r3, #24
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	e006      	b.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8007694:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800769a:	041b      	lsls	r3, r3, #16
 800769c:	0e1b      	lsrs	r3, r3, #24
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	4a29      	ldr	r2, [pc, #164]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80076a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076aa:	e1e7      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b0:	e1e4      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b6:	e1e1      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80076b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076bc:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80076c0:	430b      	orrs	r3, r1
 80076c2:	d17c      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076c4:	4b1e      	ldr	r3, [pc, #120]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80076c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076ca:	f003 0318 	and.w	r3, r3, #24
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	2b18      	cmp	r3, #24
 80076d4:	d870      	bhi.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	0800774d 	.word	0x0800774d
 80076e0:	080077b9 	.word	0x080077b9
 80076e4:	080077b9 	.word	0x080077b9
 80076e8:	080077b9 	.word	0x080077b9
 80076ec:	080077b9 	.word	0x080077b9
 80076f0:	080077b9 	.word	0x080077b9
 80076f4:	080077b9 	.word	0x080077b9
 80076f8:	080077b9 	.word	0x080077b9
 80076fc:	08007755 	.word	0x08007755
 8007700:	080077b9 	.word	0x080077b9
 8007704:	080077b9 	.word	0x080077b9
 8007708:	080077b9 	.word	0x080077b9
 800770c:	080077b9 	.word	0x080077b9
 8007710:	080077b9 	.word	0x080077b9
 8007714:	080077b9 	.word	0x080077b9
 8007718:	080077b9 	.word	0x080077b9
 800771c:	0800775d 	.word	0x0800775d
 8007720:	080077b9 	.word	0x080077b9
 8007724:	080077b9 	.word	0x080077b9
 8007728:	080077b9 	.word	0x080077b9
 800772c:	080077b9 	.word	0x080077b9
 8007730:	080077b9 	.word	0x080077b9
 8007734:	080077b9 	.word	0x080077b9
 8007738:	080077b9 	.word	0x080077b9
 800773c:	08007777 	.word	0x08007777
 8007740:	46020c00 	.word	0x46020c00
 8007744:	00f42400 	.word	0x00f42400
 8007748:	0800996c 	.word	0x0800996c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800774c:	f7fd fae0 	bl	8004d10 <HAL_RCC_GetPCLK3Freq>
 8007750:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007752:	e193      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007754:	f7fd f998 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007758:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800775a:	e18f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800775c:	4b9f      	ldr	r3, [pc, #636]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007768:	d102      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800776a:	4b9d      	ldr	r3, [pc, #628]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800776e:	e185      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007774:	e182      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007776:	4b99      	ldr	r3, [pc, #612]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b20      	cmp	r3, #32
 8007780:	d117      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007782:	4b96      	ldr	r3, [pc, #600]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800778e:	4b93      	ldr	r3, [pc, #588]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	0e1b      	lsrs	r3, r3, #24
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	e006      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800779a:	4b90      	ldr	r3, [pc, #576]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800779c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077a0:	041b      	lsls	r3, r3, #16
 80077a2:	0e1b      	lsrs	r3, r3, #24
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	4a8e      	ldr	r2, [pc, #568]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077b0:	e164      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b6:	e161      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077bc:	e15e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80077be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80077c6:	430b      	orrs	r3, r1
 80077c8:	d155      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80077ca:	4b84      	ldr	r3, [pc, #528]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80077cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077dc:	d013      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e4:	d844      	bhi.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ec:	d013      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f4:	d83c      	bhi.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d014      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007802:	d014      	beq.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007804:	e034      	b.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007806:	f107 0318 	add.w	r3, r7, #24
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fb30 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007814:	e132      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe f9ce 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007824:	e12a      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007826:	f7fd f92f 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800782a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800782c:	e126      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800782e:	4b6b      	ldr	r3, [pc, #428]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b20      	cmp	r3, #32
 8007838:	d117      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800783a:	4b68      	ldr	r3, [pc, #416]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8007846:	4b65      	ldr	r3, [pc, #404]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	0e1b      	lsrs	r3, r3, #24
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	e006      	b.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8007852:	4b62      	ldr	r3, [pc, #392]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	4a60      	ldr	r2, [pc, #384]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007868:	e108      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800786e:	e105      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007874:	e102      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	1e59      	subs	r1, r3, #1
 800787c:	ea52 0301 	orrs.w	r3, r2, r1
 8007880:	d13c      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007882:	4b56      	ldr	r3, [pc, #344]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007888:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800788c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007894:	d027      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800789c:	d82b      	bhi.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078a4:	d017      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078ac:	d823      	bhi.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ba:	d004      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80078bc:	e01b      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80078be:	f7fd f8e3 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 80078c2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80078c4:	e0da      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f976 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d4:	e0d2      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d6:	f107 0318 	add.w	r3, r7, #24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fac8 	bl	8005e70 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078e4:	e0ca      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e6:	f107 030c 	add.w	r3, r7, #12
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fc1a 	bl	8006124 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f4:	e0c2      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078fa:	e0bf      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80078fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007900:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007904:	430b      	orrs	r3, r1
 8007906:	d131      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007908:	4b34      	ldr	r3, [pc, #208]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800790a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800790e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007912:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007914:	4b31      	ldr	r3, [pc, #196]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b02      	cmp	r3, #2
 8007920:	d106      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8007928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
 800792e:	e0a5      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007930:	4b2a      	ldr	r3, [pc, #168]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800793a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800793e:	d112      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007946:	d10e      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007948:	4b24      	ldr	r3, [pc, #144]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800794a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800794e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007956:	d102      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8007958:	23fa      	movs	r3, #250	; 0xfa
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800795c:	e08e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800795e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007964:	e08a      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
 800796a:	e087      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800796c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007970:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007974:	430b      	orrs	r3, r1
 8007976:	d13b      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007978:	4b18      	ldr	r3, [pc, #96]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800797a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800797e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007982:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007984:	4b15      	ldr	r3, [pc, #84]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800798c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007990:	d105      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
 800799c:	e06e      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079aa:	d106      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b2:	d102      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80079b4:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
 80079b8:	e060      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c6:	d106      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ce:	d102      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80079d0:	4b03      	ldr	r3, [pc, #12]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
 80079d4:	e052      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
 80079da:	e04f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80079dc:	46020c00 	.word	0x46020c00
 80079e0:	00f42400 	.word	0x00f42400
 80079e4:	0800996c 	.word	0x0800996c
 80079e8:	02dc6c00 	.word	0x02dc6c00
 80079ec:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80079f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f4:	f1a3 0108 	sub.w	r1, r3, #8
 80079f8:	ea52 0301 	orrs.w	r3, r2, r1
 80079fc:	d13c      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80079fe:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007a00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a04:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007a0a:	4b1f      	ldr	r3, [pc, #124]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a16:	d105      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8007a1e:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	e02b      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007a24:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a30:	d106      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a38:	d102      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	e01d      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a46:	d107      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe f8b5 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
 8007a56:	e011      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007a5e:	d108      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe f8a9 	bl	8005bbc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a70:	e004      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
 8007a76:	e001      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3738      	adds	r7, #56	; 0x38
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	46020c00 	.word	0x46020c00
 8007a8c:	00f42400 	.word	0x00f42400
 8007a90:	007a1200 	.word	0x007a1200

08007a94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007a9c:	4b47      	ldr	r3, [pc, #284]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a46      	ldr	r2, [pc, #280]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aa6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aa8:	f7f9 fb34 	bl	8001114 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aae:	e008      	b.n	8007ac2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ab0:	f7f9 fb30 	bl	8001114 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e077      	b.n	8007bb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac2:	4b3e      	ldr	r3, [pc, #248]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ace:	4b3b      	ldr	r3, [pc, #236]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6852      	ldr	r2, [r2, #4]
 8007ae2:	3a01      	subs	r2, #1
 8007ae4:	0212      	lsls	r2, r2, #8
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	4934      	ldr	r1, [pc, #208]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007aee:	4b33      	ldr	r3, [pc, #204]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af2:	4b33      	ldr	r3, [pc, #204]	; (8007bc0 <RCCEx_PLL2_Config+0x12c>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6892      	ldr	r2, [r2, #8]
 8007afa:	3a01      	subs	r2, #1
 8007afc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68d2      	ldr	r2, [r2, #12]
 8007b04:	3a01      	subs	r2, #1
 8007b06:	0252      	lsls	r2, r2, #9
 8007b08:	b292      	uxth	r2, r2
 8007b0a:	4311      	orrs	r1, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6912      	ldr	r2, [r2, #16]
 8007b10:	3a01      	subs	r2, #1
 8007b12:	0412      	lsls	r2, r2, #16
 8007b14:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007b18:	4311      	orrs	r1, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6952      	ldr	r2, [r2, #20]
 8007b1e:	3a01      	subs	r2, #1
 8007b20:	0612      	lsls	r2, r2, #24
 8007b22:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007b26:	430a      	orrs	r2, r1
 8007b28:	4924      	ldr	r1, [pc, #144]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f023 020c 	bic.w	r2, r3, #12
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4920      	ldr	r1, [pc, #128]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b40:	4b1e      	ldr	r3, [pc, #120]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	491c      	ldr	r1, [pc, #112]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a1a      	ldr	r2, [pc, #104]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b54:	f023 0310 	bic.w	r3, r3, #16
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b5a:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	69d2      	ldr	r2, [r2, #28]
 8007b6a:	00d2      	lsls	r2, r2, #3
 8007b6c:	4913      	ldr	r1, [pc, #76]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	4a11      	ldr	r2, [pc, #68]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b78:	f043 0310 	orr.w	r3, r3, #16
 8007b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a0e      	ldr	r2, [pc, #56]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b8a:	f7f9 fac3 	bl	8001114 <HAL_GetTick>
 8007b8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b90:	e008      	b.n	8007ba4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b92:	f7f9 fabf 	bl	8001114 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e006      	b.n	8007bb2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <RCCEx_PLL2_Config+0x128>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0

}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	46020c00 	.word	0x46020c00
 8007bc0:	80800000 	.word	0x80800000

08007bc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bcc:	4b47      	ldr	r3, [pc, #284]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a46      	ldr	r2, [pc, #280]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bd8:	f7f9 fa9c 	bl	8001114 <HAL_GetTick>
 8007bdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bde:	e008      	b.n	8007bf2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007be0:	f7f9 fa98 	bl	8001114 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e077      	b.n	8007ce2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bf2:	4b3e      	ldr	r3, [pc, #248]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007bfe:	4b3b      	ldr	r3, [pc, #236]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6852      	ldr	r2, [r2, #4]
 8007c12:	3a01      	subs	r2, #1
 8007c14:	0212      	lsls	r2, r2, #8
 8007c16:	430a      	orrs	r2, r1
 8007c18:	4934      	ldr	r1, [pc, #208]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	630b      	str	r3, [r1, #48]	; 0x30
 8007c1e:	4b33      	ldr	r3, [pc, #204]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c22:	4b33      	ldr	r3, [pc, #204]	; (8007cf0 <RCCEx_PLL3_Config+0x12c>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6892      	ldr	r2, [r2, #8]
 8007c2a:	3a01      	subs	r2, #1
 8007c2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	68d2      	ldr	r2, [r2, #12]
 8007c34:	3a01      	subs	r2, #1
 8007c36:	0252      	lsls	r2, r2, #9
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	4311      	orrs	r1, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6912      	ldr	r2, [r2, #16]
 8007c40:	3a01      	subs	r2, #1
 8007c42:	0412      	lsls	r2, r2, #16
 8007c44:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007c48:	4311      	orrs	r1, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6952      	ldr	r2, [r2, #20]
 8007c4e:	3a01      	subs	r2, #1
 8007c50:	0612      	lsls	r2, r2, #24
 8007c52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c56:	430a      	orrs	r2, r1
 8007c58:	4924      	ldr	r1, [pc, #144]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c5e:	4b23      	ldr	r3, [pc, #140]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	f023 020c 	bic.w	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	4920      	ldr	r1, [pc, #128]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c70:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	491c      	ldr	r1, [pc, #112]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c7e:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c84:	f023 0310 	bic.w	r3, r3, #16
 8007c88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	69d2      	ldr	r2, [r2, #28]
 8007c9a:	00d2      	lsls	r2, r2, #3
 8007c9c:	4913      	ldr	r1, [pc, #76]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	4a11      	ldr	r2, [pc, #68]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007ca8:	f043 0310 	orr.w	r3, r3, #16
 8007cac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a0e      	ldr	r2, [pc, #56]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cba:	f7f9 fa2b 	bl	8001114 <HAL_GetTick>
 8007cbe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc0:	e008      	b.n	8007cd4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cc2:	f7f9 fa27 	bl	8001114 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d901      	bls.n	8007cd4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e006      	b.n	8007ce2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <RCCEx_PLL3_Config+0x128>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f0      	beq.n	8007cc2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	46020c00 	.word	0x46020c00
 8007cf0:	80800000 	.word	0x80800000

08007cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e042      	b.n	8007d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7f8 ffdf 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2224      	movs	r2, #36	; 0x24
 8007d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0201 	bic.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa64 	bl	800820c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8b3 	bl	8007eb0 <UART_SetConfig>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e01b      	b.n	8007d8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fae3 	bl	8008350 <UART_CheckIdleState>
 8007d8a:	4603      	mov	r3, r0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d17b      	bne.n	8007ea6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_UART_Transmit+0x26>
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e074      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2221      	movs	r2, #33	; 0x21
 8007dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dce:	f7f9 f9a1 	bl	8001114 <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	88fa      	ldrh	r2, [r7, #6]
 8007dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d108      	bne.n	8007e00 <HAL_UART_Transmit+0x6c>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e003      	b.n	8007e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e08:	e030      	b.n	8007e6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2180      	movs	r1, #128	; 0x80
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fb45 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e03d      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	3302      	adds	r3, #2
 8007e46:	61bb      	str	r3, [r7, #24]
 8007e48:	e007      	b.n	8007e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	3301      	adds	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1c8      	bne.n	8007e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2140      	movs	r1, #64	; 0x40
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fb0e 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e006      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b094      	sub	sp, #80	; 0x50
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b83      	ldr	r3, [pc, #524]	; (80080d4 <UART_SetConfig+0x224>)
 8007ec6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	497c      	ldr	r1, [pc, #496]	; (80080d8 <UART_SetConfig+0x228>)
 8007ee8:	4019      	ands	r1, r3
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	68d9      	ldr	r1, [r3, #12]
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	ea40 0301 	orr.w	r3, r0, r1
 8007f0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	4b6f      	ldr	r3, [pc, #444]	; (80080d4 <UART_SetConfig+0x224>)
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d009      	beq.n	8007f30 <UART_SetConfig+0x80>
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b6e      	ldr	r3, [pc, #440]	; (80080dc <UART_SetConfig+0x22c>)
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d004      	beq.n	8007f30 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	6a1a      	ldr	r2, [r3, #32]
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007f3a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f44:	430b      	orrs	r3, r1
 8007f46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	f023 000f 	bic.w	r0, r3, #15
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	ea40 0301 	orr.w	r3, r0, r1
 8007f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4b5e      	ldr	r3, [pc, #376]	; (80080e0 <UART_SetConfig+0x230>)
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d102      	bne.n	8007f70 <UART_SetConfig+0xc0>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6e:	e032      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4b5b      	ldr	r3, [pc, #364]	; (80080e4 <UART_SetConfig+0x234>)
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d102      	bne.n	8007f80 <UART_SetConfig+0xd0>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7e:	e02a      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4b58      	ldr	r3, [pc, #352]	; (80080e8 <UART_SetConfig+0x238>)
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d102      	bne.n	8007f90 <UART_SetConfig+0xe0>
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8e:	e022      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b55      	ldr	r3, [pc, #340]	; (80080ec <UART_SetConfig+0x23c>)
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d102      	bne.n	8007fa0 <UART_SetConfig+0xf0>
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9e:	e01a      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b52      	ldr	r3, [pc, #328]	; (80080f0 <UART_SetConfig+0x240>)
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d102      	bne.n	8007fb0 <UART_SetConfig+0x100>
 8007faa:	2310      	movs	r3, #16
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	e012      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b4f      	ldr	r3, [pc, #316]	; (80080f4 <UART_SetConfig+0x244>)
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d103      	bne.n	8007fc2 <UART_SetConfig+0x112>
 8007fba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc0:	e009      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4b43      	ldr	r3, [pc, #268]	; (80080d4 <UART_SetConfig+0x224>)
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d102      	bne.n	8007fd2 <UART_SetConfig+0x122>
 8007fcc:	2320      	movs	r3, #32
 8007fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd0:	e001      	b.n	8007fd6 <UART_SetConfig+0x126>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b3e      	ldr	r3, [pc, #248]	; (80080d4 <UART_SetConfig+0x224>)
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d005      	beq.n	8007fec <UART_SetConfig+0x13c>
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	4b3d      	ldr	r3, [pc, #244]	; (80080dc <UART_SetConfig+0x22c>)
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	f040 8088 	bne.w	80080fc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fee:	2200      	movs	r2, #0
 8007ff0:	623b      	str	r3, [r7, #32]
 8007ff2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ff4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ff8:	f7fe f9ee 	bl	80063d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ffc:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80eb 	beq.w	80081dc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	4a3b      	ldr	r2, [pc, #236]	; (80080f8 <UART_SetConfig+0x248>)
 800800c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008010:	461a      	mov	r2, r3
 8008012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008014:	fbb3 f3f2 	udiv	r3, r3, r2
 8008018:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008026:	429a      	cmp	r2, r3
 8008028:	d305      	bcc.n	8008036 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008032:	429a      	cmp	r2, r3
 8008034:	d903      	bls.n	800803e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800803c:	e048      	b.n	80080d0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	2200      	movs	r2, #0
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	61fa      	str	r2, [r7, #28]
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <UART_SetConfig+0x248>)
 800804c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008050:	b29b      	uxth	r3, r3
 8008052:	2200      	movs	r2, #0
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	617a      	str	r2, [r7, #20]
 8008058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800805c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008060:	f7f8 f91e 	bl	80002a0 <__aeabi_uldivmod>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4610      	mov	r0, r2
 800806a:	4619      	mov	r1, r3
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	020b      	lsls	r3, r1, #8
 8008076:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800807a:	0202      	lsls	r2, r0, #8
 800807c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	0849      	lsrs	r1, r1, #1
 8008082:	2000      	movs	r0, #0
 8008084:	460c      	mov	r4, r1
 8008086:	4605      	mov	r5, r0
 8008088:	eb12 0804 	adds.w	r8, r2, r4
 800808c:	eb43 0905 	adc.w	r9, r3, r5
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	60bb      	str	r3, [r7, #8]
 8008098:	60fa      	str	r2, [r7, #12]
 800809a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 f8fd 	bl	80002a0 <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4613      	mov	r3, r2
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b4:	d308      	bcc.n	80080c8 <UART_SetConfig+0x218>
 80080b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080bc:	d204      	bcs.n	80080c8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e003      	b.n	80080d0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80080ce:	e085      	b.n	80081dc <UART_SetConfig+0x32c>
 80080d0:	e084      	b.n	80081dc <UART_SetConfig+0x32c>
 80080d2:	bf00      	nop
 80080d4:	46002400 	.word	0x46002400
 80080d8:	cfff69f3 	.word	0xcfff69f3
 80080dc:	56002400 	.word	0x56002400
 80080e0:	40013800 	.word	0x40013800
 80080e4:	40004400 	.word	0x40004400
 80080e8:	40004800 	.word	0x40004800
 80080ec:	40004c00 	.word	0x40004c00
 80080f0:	40005000 	.word	0x40005000
 80080f4:	40006400 	.word	0x40006400
 80080f8:	08009a2c 	.word	0x08009a2c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008104:	d13c      	bne.n	8008180 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008108:	2200      	movs	r2, #0
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008112:	f7fe f961 	bl	80063d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008116:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d05e      	beq.n	80081dc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	4a39      	ldr	r2, [pc, #228]	; (8008208 <UART_SetConfig+0x358>)
 8008124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008128:	461a      	mov	r2, r3
 800812a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008130:	005a      	lsls	r2, r3, #1
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	441a      	add	r2, r3
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	2b0f      	cmp	r3, #15
 8008148:	d916      	bls.n	8008178 <UART_SetConfig+0x2c8>
 800814a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008150:	d212      	bcs.n	8008178 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008154:	b29b      	uxth	r3, r3
 8008156:	f023 030f 	bic.w	r3, r3, #15
 800815a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	b29a      	uxth	r2, r3
 8008168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800816a:	4313      	orrs	r3, r2
 800816c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e031      	b.n	80081dc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800817e:	e02d      	b.n	80081dc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008182:	2200      	movs	r2, #0
 8008184:	469a      	mov	sl, r3
 8008186:	4693      	mov	fp, r2
 8008188:	4650      	mov	r0, sl
 800818a:	4659      	mov	r1, fp
 800818c:	f7fe f924 	bl	80063d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008190:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d021      	beq.n	80081dc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <UART_SetConfig+0x358>)
 800819e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	441a      	add	r2, r3
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081be:	2b0f      	cmp	r3, #15
 80081c0:	d909      	bls.n	80081d6 <UART_SetConfig+0x326>
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c8:	d205      	bcs.n	80081d6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
 80081d4:	e002      	b.n	80081dc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	2201      	movs	r2, #1
 80081e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	2201      	movs	r2, #1
 80081e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	2200      	movs	r2, #0
 80081f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	2200      	movs	r2, #0
 80081f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80081f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3750      	adds	r7, #80	; 0x50
 8008200:	46bd      	mov	sp, r7
 8008202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008206:	bf00      	nop
 8008208:	08009a2c 	.word	0x08009a2c

0800820c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01a      	beq.n	8008322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d10a      	bne.n	8008322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  }
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b098      	sub	sp, #96	; 0x60
 8008354:	af02      	add	r7, sp, #8
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008360:	f7f8 fed8 	bl	8001114 <HAL_GetTick>
 8008364:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b08      	cmp	r3, #8
 8008372:	d12f      	bne.n	80083d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800837c:	2200      	movs	r2, #0
 800837e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f88e 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d022      	beq.n	80083d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a2:	653b      	str	r3, [r7, #80]	; 0x50
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ac:	647b      	str	r3, [r7, #68]	; 0x44
 80083ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e6      	bne.n	800838e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e063      	b.n	800849c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d149      	bne.n	8008476 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ea:	2200      	movs	r2, #0
 80083ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f857 	bl	80084a4 <UART_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d03c      	beq.n	8008476 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	623b      	str	r3, [r7, #32]
   return(result);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841a:	633b      	str	r3, [r7, #48]	; 0x30
 800841c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	60fb      	str	r3, [r7, #12]
   return(result);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	64bb      	str	r3, [r7, #72]	; 0x48
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844e:	61fa      	str	r2, [r7, #28]
 8008450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	69b9      	ldr	r1, [r7, #24]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	617b      	str	r3, [r7, #20]
   return(result);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e012      	b.n	800849c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3758      	adds	r7, #88	; 0x58
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b4:	e049      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084bc:	d045      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084be:	f7f8 fe29 	bl	8001114 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e048      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d031      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d110      	bne.n	8008516 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2208      	movs	r2, #8
 80084fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f838 	bl	8008572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2208      	movs	r2, #8
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e029      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008524:	d111      	bne.n	800854a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800852e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f81e 	bl	8008572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e00f      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4013      	ands	r3, r2
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	429a      	cmp	r2, r3
 8008566:	d0a6      	beq.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008572:	b480      	push	{r7}
 8008574:	b095      	sub	sp, #84	; 0x54
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800858e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008598:	643b      	str	r3, [r7, #64]	; 0x40
 800859a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800859e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3308      	adds	r3, #8
 80085ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e3      	bne.n	80085ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d118      	bne.n	800861e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f023 0310 	bic.w	r3, r3, #16
 8008600:	647b      	str	r3, [r7, #68]	; 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6979      	ldr	r1, [r7, #20]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	613b      	str	r3, [r7, #16]
   return(result);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e6      	bne.n	80085ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008632:	bf00      	nop
 8008634:	3754      	adds	r7, #84	; 0x54
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_UARTEx_DisableFifoMode+0x16>
 8008650:	2302      	movs	r3, #2
 8008652:	e027      	b.n	80086a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2224      	movs	r2, #36	; 0x24
 8008660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008682:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e02d      	b.n	8008724 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	; 0x24
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f84f 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008740:	2302      	movs	r3, #2
 8008742:	e02d      	b.n	80087a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	; 0x24
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f811 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d108      	bne.n	80087ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087c8:	e031      	b.n	800882e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ca:	2308      	movs	r3, #8
 80087cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ce:	2308      	movs	r3, #8
 80087d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0e5b      	lsrs	r3, r3, #25
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	0f5b      	lsrs	r3, r3, #29
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	7b3a      	ldrb	r2, [r7, #12]
 80087f6:	4911      	ldr	r1, [pc, #68]	; (800883c <UARTEx_SetNbDataToProcess+0x94>)
 80087f8:	5c8a      	ldrb	r2, [r1, r2]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087fe:	7b3a      	ldrb	r2, [r7, #12]
 8008800:	490f      	ldr	r1, [pc, #60]	; (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008804:	fb93 f3f2 	sdiv	r3, r3, r2
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	7b7a      	ldrb	r2, [r7, #13]
 8008814:	4909      	ldr	r1, [pc, #36]	; (800883c <UARTEx_SetNbDataToProcess+0x94>)
 8008816:	5c8a      	ldrb	r2, [r1, r2]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800881c:	7b7a      	ldrb	r2, [r7, #13]
 800881e:	4908      	ldr	r1, [pc, #32]	; (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008822:	fb93 f3f2 	sdiv	r3, r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	08009a44 	.word	0x08009a44
 8008840:	08009a4c 	.word	0x08009a4c

08008844 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008844:	b480      	push	{r7}
 8008846:	b08b      	sub	sp, #44	; 0x2c
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	fa93 f3a3 	rbit	r3, r3
 800885e:	613b      	str	r3, [r7, #16]
  return result;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800886a:	2320      	movs	r3, #32
 800886c:	e003      	b.n	8008876 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	fab3 f383 	clz	r3, r3
 8008874:	b2db      	uxtb	r3, r3
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	2103      	movs	r1, #3
 800887a:	fa01 f303 	lsl.w	r3, r1, r3
 800887e:	43db      	mvns	r3, r3
 8008880:	401a      	ands	r2, r3
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	fa93 f3a3 	rbit	r3, r3
 800888c:	61fb      	str	r3, [r7, #28]
  return result;
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008898:	2320      	movs	r3, #32
 800889a:	e003      	b.n	80088a4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	fab3 f383 	clz	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ac:	431a      	orrs	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bf00      	nop
 80088b4:	372c      	adds	r7, #44	; 0x2c
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	401a      	ands	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b08b      	sub	sp, #44	; 0x2c
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	fa93 f3a3 	rbit	r3, r3
 8008908:	613b      	str	r3, [r7, #16]
  return result;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008914:	2320      	movs	r3, #32
 8008916:	e003      	b.n	8008920 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	fab3 f383 	clz	r3, r3
 800891e:	b2db      	uxtb	r3, r3
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	2103      	movs	r1, #3
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	401a      	ands	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	fa93 f3a3 	rbit	r3, r3
 8008936:	61fb      	str	r3, [r7, #28]
  return result;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008942:	2320      	movs	r3, #32
 8008944:	e003      	b.n	800894e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	fab3 f383 	clz	r3, r3
 800894c:	b2db      	uxtb	r3, r3
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	fa01 f303 	lsl.w	r3, r1, r3
 8008956:	431a      	orrs	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800895c:	bf00      	nop
 800895e:	372c      	adds	r7, #44	; 0x2c
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008968:	b480      	push	{r7}
 800896a:	b08b      	sub	sp, #44	; 0x2c
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	fa93 f3a3 	rbit	r3, r3
 8008982:	613b      	str	r3, [r7, #16]
  return result;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800898e:	2320      	movs	r3, #32
 8008990:	e003      	b.n	800899a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	fab3 f383 	clz	r3, r3
 8008998:	b2db      	uxtb	r3, r3
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	2103      	movs	r1, #3
 800899e:	fa01 f303 	lsl.w	r3, r1, r3
 80089a2:	43db      	mvns	r3, r3
 80089a4:	401a      	ands	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	fa93 f3a3 	rbit	r3, r3
 80089b0:	61fb      	str	r3, [r7, #28]
  return result;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80089bc:	2320      	movs	r3, #32
 80089be:	e003      	b.n	80089c8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	fab3 f383 	clz	r3, r3
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	fa01 f303 	lsl.w	r3, r1, r3
 80089d0:	431a      	orrs	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	60da      	str	r2, [r3, #12]
}
 80089d6:	bf00      	nop
 80089d8:	372c      	adds	r7, #44	; 0x2c
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b08b      	sub	sp, #44	; 0x2c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1a      	ldr	r2, [r3, #32]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	fa93 f3a3 	rbit	r3, r3
 80089fc:	613b      	str	r3, [r7, #16]
  return result;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008a08:	2320      	movs	r3, #32
 8008a0a:	e003      	b.n	8008a14 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	fab3 f383 	clz	r3, r3
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	210f      	movs	r1, #15
 8008a18:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	401a      	ands	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	fa93 f3a3 	rbit	r3, r3
 8008a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008a36:	2320      	movs	r3, #32
 8008a38:	e003      	b.n	8008a42 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	fab3 f383 	clz	r3, r3
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008a50:	bf00      	nop
 8008a52:	372c      	adds	r7, #44	; 0x2c
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b08b      	sub	sp, #44	; 0x2c
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	fa93 f3a3 	rbit	r3, r3
 8008a78:	613b      	str	r3, [r7, #16]
  return result;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008a84:	2320      	movs	r3, #32
 8008a86:	e003      	b.n	8008a90 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	fab3 f383 	clz	r3, r3
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	210f      	movs	r1, #15
 8008a94:	fa01 f303 	lsl.w	r3, r1, r3
 8008a98:	43db      	mvns	r3, r3
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	fa93 f3a3 	rbit	r3, r3
 8008aa8:	61fb      	str	r3, [r7, #28]
  return result;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	e003      	b.n	8008ac0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	fab3 f383 	clz	r3, r3
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008ace:	bf00      	nop
 8008ad0:	372c      	adds	r7, #44	; 0x2c
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08a      	sub	sp, #40	; 0x28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	fa93 f3a3 	rbit	r3, r3
 8008af0:	617b      	str	r3, [r7, #20]
  return result;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <LL_GPIO_Init+0x26>
    return 32U;
 8008afc:	2320      	movs	r3, #32
 8008afe:	e003      	b.n	8008b08 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	fab3 f383 	clz	r3, r3
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008b0a:	e058      	b.n	8008bbe <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2101      	movs	r1, #1
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	fa01 f303 	lsl.w	r3, r1, r3
 8008b18:	4013      	ands	r3, r2
 8008b1a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d04a      	beq.n	8008bb8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d003      	beq.n	8008b32 <LL_GPIO_Init+0x58>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d10e      	bne.n	8008b50 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6a39      	ldr	r1, [r7, #32]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff fed7 	bl	80088ee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff feb7 	bl	80088be <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6a39      	ldr	r1, [r7, #32]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff05 	bl	8008968 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d121      	bne.n	8008baa <LL_GPIO_Init+0xd0>
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	fa93 f3a3 	rbit	r3, r3
 8008b70:	60bb      	str	r3, [r7, #8]
  return result;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <LL_GPIO_Init+0xa6>
    return 32U;
 8008b7c:	2320      	movs	r3, #32
 8008b7e:	e003      	b.n	8008b88 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	fab3 f383 	clz	r3, r3
 8008b86:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008b88:	2b07      	cmp	r3, #7
 8008b8a:	d807      	bhi.n	8008b9c <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6a39      	ldr	r1, [r7, #32]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff ff24 	bl	80089e2 <LL_GPIO_SetAFPin_0_7>
 8008b9a:	e006      	b.n	8008baa <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6a39      	ldr	r1, [r7, #32]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff ff59 	bl	8008a5c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6a39      	ldr	r1, [r7, #32]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fe46 	bl	8008844 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	3301      	adds	r3, #1
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d19f      	bne.n	8008b0c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	f107 001c 	add.w	r0, r7, #28
 8008be4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d105      	bne.n	8008bfa <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8e8 	bl	8008dd0 <USB_CoreReset>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d10b      	bne.n	8008c22 <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f043 0208 	orr.w	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c2e:	b004      	add	sp, #16
 8008c30:	4770      	bx	lr

08008c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d115      	bne.n	8008ca2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c82:	2001      	movs	r0, #1
 8008c84:	f7f8 fa52 	bl	800112c <HAL_Delay>
      ms++;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f890 	bl	8008db4 <USB_GetMode>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d01e      	beq.n	8008cd8 <USB_SetCurrentMode+0x84>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b31      	cmp	r3, #49	; 0x31
 8008c9e:	d9f0      	bls.n	8008c82 <USB_SetCurrentMode+0x2e>
 8008ca0:	e01a      	b.n	8008cd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d115      	bne.n	8008cd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	f7f8 fa39 	bl	800112c <HAL_Delay>
      ms++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f877 	bl	8008db4 <USB_GetMode>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d005      	beq.n	8008cd8 <USB_SetCurrentMode+0x84>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b31      	cmp	r3, #49	; 0x31
 8008cd0:	d9f0      	bls.n	8008cb4 <USB_SetCurrentMode+0x60>
 8008cd2:	e001      	b.n	8008cd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e005      	b.n	8008ce4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b32      	cmp	r3, #50	; 0x32
 8008cdc:	d101      	bne.n	8008ce2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <USB_FlushTxFifo+0x64>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d901      	bls.n	8008d0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e01b      	b.n	8008d44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	daf2      	bge.n	8008cfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	019b      	lsls	r3, r3, #6
 8008d1c:	f043 0220 	orr.w	r2, r3, #32
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <USB_FlushTxFifo+0x64>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e006      	b.n	8008d44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	d0f0      	beq.n	8008d24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	00030d40 	.word	0x00030d40

08008d54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3301      	adds	r3, #1
 8008d64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4a11      	ldr	r2, [pc, #68]	; (8008db0 <USB_FlushRxFifo+0x5c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d901      	bls.n	8008d72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e018      	b.n	8008da4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	daf2      	bge.n	8008d60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2210      	movs	r2, #16
 8008d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a08      	ldr	r2, [pc, #32]	; (8008db0 <USB_FlushRxFifo+0x5c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d901      	bls.n	8008d96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e006      	b.n	8008da4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d0f0      	beq.n	8008d84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	00030d40 	.word	0x00030d40

08008db4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <USB_CoreReset+0x64>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d901      	bls.n	8008dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e01b      	b.n	8008e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	daf2      	bge.n	8008ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f043 0201 	orr.w	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <USB_CoreReset+0x64>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d901      	bls.n	8008e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e006      	b.n	8008e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d0f0      	beq.n	8008e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	00030d40 	.word	0x00030d40

08008e38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e38:	b084      	sub	sp, #16
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#else
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d018      	beq.n	8008ed8 <USB_HostInit+0xa0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d10a      	bne.n	8008ec2 <USB_HostInit+0x8a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eba:	f043 0304 	orr.w	r3, r3, #4
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e014      	b.n	8008eec <USB_HostInit+0xb4>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ed0:	f023 0304 	bic.w	r3, r3, #4
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	e009      	b.n	8008eec <USB_HostInit+0xb4>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ee6:	f023 0304 	bic.w	r3, r3, #4
 8008eea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eec:	2110      	movs	r1, #16
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fefc 	bl	8008cec <USB_FlushTxFifo>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <USB_HostInit+0xc6>
  {
    ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff ff28 	bl	8008d54 <USB_FlushRxFifo>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <USB_HostInit+0xd6>
  {
    ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f0e:	2300      	movs	r3, #0
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e015      	b.n	8008f40 <USB_HostInit+0x108>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f20:	461a      	mov	r2, r3
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295
 8008f26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f34:	461a      	mov	r2, r3
 8008f36:	2300      	movs	r3, #0
 8008f38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3e5      	bcc.n	8008f14 <USB_HostInit+0xdc>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <USB_HostInit+0x142>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <USB_HostInit+0x184>)
 8008f6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <USB_HostInit+0x188>)
 8008f74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008f78:	e009      	b.n	8008f8e <USB_HostInit+0x156>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2280      	movs	r2, #128	; 0x80
 8008f7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <USB_HostInit+0x18c>)
 8008f84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a0f      	ldr	r2, [pc, #60]	; (8008fc8 <USB_HostInit+0x190>)
 8008f8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <USB_HostInit+0x168>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 0210 	orr.w	r2, r3, #16
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <USB_HostInit+0x194>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb8:	b004      	add	sp, #16
 8008fba:	4770      	bx	lr
 8008fbc:	01000200 	.word	0x01000200
 8008fc0:	00e00300 	.word	0x00e00300
 8008fc4:	00600080 	.word	0x00600080
 8008fc8:	004000e0 	.word	0x004000e0
 8008fcc:	a3200008 	.word	0xa3200008

08008fd0 <siprintf>:
 8008fd0:	b40e      	push	{r1, r2, r3}
 8008fd2:	b500      	push	{lr}
 8008fd4:	b09c      	sub	sp, #112	; 0x70
 8008fd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fda:	ab1d      	add	r3, sp, #116	; 0x74
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	9006      	str	r0, [sp, #24]
 8008fe0:	9107      	str	r1, [sp, #28]
 8008fe2:	9104      	str	r1, [sp, #16]
 8008fe4:	4808      	ldr	r0, [pc, #32]	; (8009008 <siprintf+0x38>)
 8008fe6:	4909      	ldr	r1, [pc, #36]	; (800900c <siprintf+0x3c>)
 8008fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fec:	9105      	str	r1, [sp, #20]
 8008fee:	a902      	add	r1, sp, #8
 8008ff0:	6800      	ldr	r0, [r0, #0]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	f000 f992 	bl	800931c <_svfiprintf_r>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	b01c      	add	sp, #112	; 0x70
 8009000:	f85d eb04 	ldr.w	lr, [sp], #4
 8009004:	b003      	add	sp, #12
 8009006:	4770      	bx	lr
 8009008:	20000058 	.word	0x20000058
 800900c:	ffff0208 	.word	0xffff0208

08009010 <memset>:
 8009010:	4402      	add	r2, r0
 8009012:	4603      	mov	r3, r0
 8009014:	4293      	cmp	r3, r2
 8009016:	d100      	bne.n	800901a <memset+0xa>
 8009018:	4770      	bx	lr
 800901a:	f803 1b01 	strb.w	r1, [r3], #1
 800901e:	e7f9      	b.n	8009014 <memset+0x4>

08009020 <__errno>:
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <__errno+0x8>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000058 	.word	0x20000058

0800902c <__libc_init_array>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4d0d      	ldr	r5, [pc, #52]	; (8009064 <__libc_init_array+0x38>)
 8009030:	2600      	movs	r6, #0
 8009032:	4c0d      	ldr	r4, [pc, #52]	; (8009068 <__libc_init_array+0x3c>)
 8009034:	1b64      	subs	r4, r4, r5
 8009036:	10a4      	asrs	r4, r4, #2
 8009038:	42a6      	cmp	r6, r4
 800903a:	d109      	bne.n	8009050 <__libc_init_array+0x24>
 800903c:	4d0b      	ldr	r5, [pc, #44]	; (800906c <__libc_init_array+0x40>)
 800903e:	2600      	movs	r6, #0
 8009040:	4c0b      	ldr	r4, [pc, #44]	; (8009070 <__libc_init_array+0x44>)
 8009042:	f000 fc77 	bl	8009934 <_init>
 8009046:	1b64      	subs	r4, r4, r5
 8009048:	10a4      	asrs	r4, r4, #2
 800904a:	42a6      	cmp	r6, r4
 800904c:	d105      	bne.n	800905a <__libc_init_array+0x2e>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	f855 3b04 	ldr.w	r3, [r5], #4
 8009054:	3601      	adds	r6, #1
 8009056:	4798      	blx	r3
 8009058:	e7ee      	b.n	8009038 <__libc_init_array+0xc>
 800905a:	f855 3b04 	ldr.w	r3, [r5], #4
 800905e:	3601      	adds	r6, #1
 8009060:	4798      	blx	r3
 8009062:	e7f2      	b.n	800904a <__libc_init_array+0x1e>
 8009064:	08009a90 	.word	0x08009a90
 8009068:	08009a90 	.word	0x08009a90
 800906c:	08009a90 	.word	0x08009a90
 8009070:	08009a94 	.word	0x08009a94

08009074 <__retarget_lock_acquire_recursive>:
 8009074:	4770      	bx	lr

08009076 <__retarget_lock_release_recursive>:
 8009076:	4770      	bx	lr

08009078 <_free_r>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	2900      	cmp	r1, #0
 800907c:	d043      	beq.n	8009106 <_free_r+0x8e>
 800907e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009082:	1f0c      	subs	r4, r1, #4
 8009084:	9001      	str	r0, [sp, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfb8      	it	lt
 800908a:	18e4      	addlt	r4, r4, r3
 800908c:	f000 f8e0 	bl	8009250 <__malloc_lock>
 8009090:	4a1e      	ldr	r2, [pc, #120]	; (800910c <_free_r+0x94>)
 8009092:	9801      	ldr	r0, [sp, #4]
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	b933      	cbnz	r3, 80090a6 <_free_r+0x2e>
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	6014      	str	r4, [r2, #0]
 800909c:	b003      	add	sp, #12
 800909e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a2:	f000 b8db 	b.w	800925c <__malloc_unlock>
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	d908      	bls.n	80090bc <_free_r+0x44>
 80090aa:	6825      	ldr	r5, [r4, #0]
 80090ac:	1961      	adds	r1, r4, r5
 80090ae:	428b      	cmp	r3, r1
 80090b0:	bf01      	itttt	eq
 80090b2:	6819      	ldreq	r1, [r3, #0]
 80090b4:	685b      	ldreq	r3, [r3, #4]
 80090b6:	1949      	addeq	r1, r1, r5
 80090b8:	6021      	streq	r1, [r4, #0]
 80090ba:	e7ed      	b.n	8009098 <_free_r+0x20>
 80090bc:	461a      	mov	r2, r3
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	b10b      	cbz	r3, 80090c6 <_free_r+0x4e>
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	d9fa      	bls.n	80090bc <_free_r+0x44>
 80090c6:	6811      	ldr	r1, [r2, #0]
 80090c8:	1855      	adds	r5, r2, r1
 80090ca:	42a5      	cmp	r5, r4
 80090cc:	d10b      	bne.n	80090e6 <_free_r+0x6e>
 80090ce:	6824      	ldr	r4, [r4, #0]
 80090d0:	4421      	add	r1, r4
 80090d2:	1854      	adds	r4, r2, r1
 80090d4:	6011      	str	r1, [r2, #0]
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d1e0      	bne.n	800909c <_free_r+0x24>
 80090da:	681c      	ldr	r4, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	440c      	add	r4, r1
 80090e0:	6053      	str	r3, [r2, #4]
 80090e2:	6014      	str	r4, [r2, #0]
 80090e4:	e7da      	b.n	800909c <_free_r+0x24>
 80090e6:	d902      	bls.n	80090ee <_free_r+0x76>
 80090e8:	230c      	movs	r3, #12
 80090ea:	6003      	str	r3, [r0, #0]
 80090ec:	e7d6      	b.n	800909c <_free_r+0x24>
 80090ee:	6825      	ldr	r5, [r4, #0]
 80090f0:	1961      	adds	r1, r4, r5
 80090f2:	428b      	cmp	r3, r1
 80090f4:	bf02      	ittt	eq
 80090f6:	6819      	ldreq	r1, [r3, #0]
 80090f8:	685b      	ldreq	r3, [r3, #4]
 80090fa:	1949      	addeq	r1, r1, r5
 80090fc:	6063      	str	r3, [r4, #4]
 80090fe:	bf08      	it	eq
 8009100:	6021      	streq	r1, [r4, #0]
 8009102:	6054      	str	r4, [r2, #4]
 8009104:	e7ca      	b.n	800909c <_free_r+0x24>
 8009106:	b003      	add	sp, #12
 8009108:	bd30      	pop	{r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	200006e4 	.word	0x200006e4

08009110 <sbrk_aligned>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0e      	ldr	r6, [pc, #56]	; (800914c <sbrk_aligned+0x3c>)
 8009114:	460c      	mov	r4, r1
 8009116:	4605      	mov	r5, r0
 8009118:	6831      	ldr	r1, [r6, #0]
 800911a:	b911      	cbnz	r1, 8009122 <sbrk_aligned+0x12>
 800911c:	f000 fba8 	bl	8009870 <_sbrk_r>
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fba3 	bl	8009870 <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d00a      	beq.n	8009144 <sbrk_aligned+0x34>
 800912e:	1cc4      	adds	r4, r0, #3
 8009130:	f024 0403 	bic.w	r4, r4, #3
 8009134:	42a0      	cmp	r0, r4
 8009136:	d007      	beq.n	8009148 <sbrk_aligned+0x38>
 8009138:	1a21      	subs	r1, r4, r0
 800913a:	4628      	mov	r0, r5
 800913c:	f000 fb98 	bl	8009870 <_sbrk_r>
 8009140:	3001      	adds	r0, #1
 8009142:	d101      	bne.n	8009148 <sbrk_aligned+0x38>
 8009144:	f04f 34ff 	mov.w	r4, #4294967295
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	200006e8 	.word	0x200006e8

08009150 <_malloc_r>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	4607      	mov	r7, r0
 8009158:	f025 0503 	bic.w	r5, r5, #3
 800915c:	3508      	adds	r5, #8
 800915e:	2d0c      	cmp	r5, #12
 8009160:	bf38      	it	cc
 8009162:	250c      	movcc	r5, #12
 8009164:	2d00      	cmp	r5, #0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d905      	bls.n	8009178 <_malloc_r+0x28>
 800916c:	230c      	movs	r3, #12
 800916e:	2600      	movs	r6, #0
 8009170:	603b      	str	r3, [r7, #0]
 8009172:	4630      	mov	r0, r6
 8009174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009178:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800924c <_malloc_r+0xfc>
 800917c:	f000 f868 	bl	8009250 <__malloc_lock>
 8009180:	f8d8 3000 	ldr.w	r3, [r8]
 8009184:	461c      	mov	r4, r3
 8009186:	bb5c      	cbnz	r4, 80091e0 <_malloc_r+0x90>
 8009188:	4629      	mov	r1, r5
 800918a:	4638      	mov	r0, r7
 800918c:	f7ff ffc0 	bl	8009110 <sbrk_aligned>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	4604      	mov	r4, r0
 8009194:	d155      	bne.n	8009242 <_malloc_r+0xf2>
 8009196:	f8d8 4000 	ldr.w	r4, [r8]
 800919a:	4626      	mov	r6, r4
 800919c:	2e00      	cmp	r6, #0
 800919e:	d145      	bne.n	800922c <_malloc_r+0xdc>
 80091a0:	2c00      	cmp	r4, #0
 80091a2:	d048      	beq.n	8009236 <_malloc_r+0xe6>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	4631      	mov	r1, r6
 80091a8:	4638      	mov	r0, r7
 80091aa:	eb04 0903 	add.w	r9, r4, r3
 80091ae:	f000 fb5f 	bl	8009870 <_sbrk_r>
 80091b2:	4581      	cmp	r9, r0
 80091b4:	d13f      	bne.n	8009236 <_malloc_r+0xe6>
 80091b6:	6821      	ldr	r1, [r4, #0]
 80091b8:	4638      	mov	r0, r7
 80091ba:	1a6d      	subs	r5, r5, r1
 80091bc:	4629      	mov	r1, r5
 80091be:	f7ff ffa7 	bl	8009110 <sbrk_aligned>
 80091c2:	3001      	adds	r0, #1
 80091c4:	d037      	beq.n	8009236 <_malloc_r+0xe6>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	442b      	add	r3, r5
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	f8d8 3000 	ldr.w	r3, [r8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d038      	beq.n	8009246 <_malloc_r+0xf6>
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	42a2      	cmp	r2, r4
 80091d8:	d12b      	bne.n	8009232 <_malloc_r+0xe2>
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	e00f      	b.n	8009200 <_malloc_r+0xb0>
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	1b52      	subs	r2, r2, r5
 80091e4:	d41f      	bmi.n	8009226 <_malloc_r+0xd6>
 80091e6:	2a0b      	cmp	r2, #11
 80091e8:	d917      	bls.n	800921a <_malloc_r+0xca>
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	6025      	str	r5, [r4, #0]
 80091f0:	bf18      	it	ne
 80091f2:	6059      	strne	r1, [r3, #4]
 80091f4:	6863      	ldr	r3, [r4, #4]
 80091f6:	bf08      	it	eq
 80091f8:	f8c8 1000 	streq.w	r1, [r8]
 80091fc:	5162      	str	r2, [r4, r5]
 80091fe:	604b      	str	r3, [r1, #4]
 8009200:	f104 060b 	add.w	r6, r4, #11
 8009204:	4638      	mov	r0, r7
 8009206:	f000 f829 	bl	800925c <__malloc_unlock>
 800920a:	1d23      	adds	r3, r4, #4
 800920c:	f026 0607 	bic.w	r6, r6, #7
 8009210:	1af2      	subs	r2, r6, r3
 8009212:	d0ae      	beq.n	8009172 <_malloc_r+0x22>
 8009214:	1b9b      	subs	r3, r3, r6
 8009216:	50a3      	str	r3, [r4, r2]
 8009218:	e7ab      	b.n	8009172 <_malloc_r+0x22>
 800921a:	42a3      	cmp	r3, r4
 800921c:	6862      	ldr	r2, [r4, #4]
 800921e:	d1dd      	bne.n	80091dc <_malloc_r+0x8c>
 8009220:	f8c8 2000 	str.w	r2, [r8]
 8009224:	e7ec      	b.n	8009200 <_malloc_r+0xb0>
 8009226:	4623      	mov	r3, r4
 8009228:	6864      	ldr	r4, [r4, #4]
 800922a:	e7ac      	b.n	8009186 <_malloc_r+0x36>
 800922c:	4634      	mov	r4, r6
 800922e:	6876      	ldr	r6, [r6, #4]
 8009230:	e7b4      	b.n	800919c <_malloc_r+0x4c>
 8009232:	4613      	mov	r3, r2
 8009234:	e7cc      	b.n	80091d0 <_malloc_r+0x80>
 8009236:	230c      	movs	r3, #12
 8009238:	4638      	mov	r0, r7
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	f000 f80e 	bl	800925c <__malloc_unlock>
 8009240:	e797      	b.n	8009172 <_malloc_r+0x22>
 8009242:	6025      	str	r5, [r4, #0]
 8009244:	e7dc      	b.n	8009200 <_malloc_r+0xb0>
 8009246:	605b      	str	r3, [r3, #4]
 8009248:	deff      	udf	#255	; 0xff
 800924a:	bf00      	nop
 800924c:	200006e4 	.word	0x200006e4

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__malloc_lock+0x8>)
 8009252:	f7ff bf0f 	b.w	8009074 <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	200006e0 	.word	0x200006e0

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__malloc_unlock+0x8>)
 800925e:	f7ff bf0a 	b.w	8009076 <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	200006e0 	.word	0x200006e0

08009268 <__ssputs_r>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	461f      	mov	r7, r3
 800926e:	688e      	ldr	r6, [r1, #8]
 8009270:	4682      	mov	sl, r0
 8009272:	460c      	mov	r4, r1
 8009274:	42be      	cmp	r6, r7
 8009276:	4690      	mov	r8, r2
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	d82c      	bhi.n	80092d6 <__ssputs_r+0x6e>
 800927c:	898a      	ldrh	r2, [r1, #12]
 800927e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009282:	d026      	beq.n	80092d2 <__ssputs_r+0x6a>
 8009284:	6965      	ldr	r5, [r4, #20]
 8009286:	6909      	ldr	r1, [r1, #16]
 8009288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800928c:	eba3 0901 	sub.w	r9, r3, r1
 8009290:	1c7b      	adds	r3, r7, #1
 8009292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009296:	444b      	add	r3, r9
 8009298:	106d      	asrs	r5, r5, #1
 800929a:	429d      	cmp	r5, r3
 800929c:	bf38      	it	cc
 800929e:	461d      	movcc	r5, r3
 80092a0:	0553      	lsls	r3, r2, #21
 80092a2:	d527      	bpl.n	80092f4 <__ssputs_r+0x8c>
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7ff ff53 	bl	8009150 <_malloc_r>
 80092aa:	4606      	mov	r6, r0
 80092ac:	b360      	cbz	r0, 8009308 <__ssputs_r+0xa0>
 80092ae:	464a      	mov	r2, r9
 80092b0:	6921      	ldr	r1, [r4, #16]
 80092b2:	f000 fafb 	bl	80098ac <memcpy>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	6126      	str	r6, [r4, #16]
 80092c4:	444e      	add	r6, r9
 80092c6:	6165      	str	r5, [r4, #20]
 80092c8:	eba5 0509 	sub.w	r5, r5, r9
 80092cc:	6026      	str	r6, [r4, #0]
 80092ce:	463e      	mov	r6, r7
 80092d0:	60a5      	str	r5, [r4, #8]
 80092d2:	42be      	cmp	r6, r7
 80092d4:	d900      	bls.n	80092d8 <__ssputs_r+0x70>
 80092d6:	463e      	mov	r6, r7
 80092d8:	4632      	mov	r2, r6
 80092da:	4641      	mov	r1, r8
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	f000 faad 	bl	800983c <memmove>
 80092e2:	68a3      	ldr	r3, [r4, #8]
 80092e4:	2000      	movs	r0, #0
 80092e6:	1b9b      	subs	r3, r3, r6
 80092e8:	60a3      	str	r3, [r4, #8]
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	4433      	add	r3, r6
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	462a      	mov	r2, r5
 80092f6:	f000 fae6 	bl	80098c6 <_realloc_r>
 80092fa:	4606      	mov	r6, r0
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1e0      	bne.n	80092c2 <__ssputs_r+0x5a>
 8009300:	6921      	ldr	r1, [r4, #16]
 8009302:	4650      	mov	r0, sl
 8009304:	f7ff feb8 	bl	8009078 <_free_r>
 8009308:	230c      	movs	r3, #12
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	f8ca 3000 	str.w	r3, [sl]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	e7e9      	b.n	80092f0 <__ssputs_r+0x88>

0800931c <_svfiprintf_r>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	4698      	mov	r8, r3
 8009322:	898b      	ldrh	r3, [r1, #12]
 8009324:	b09d      	sub	sp, #116	; 0x74
 8009326:	4607      	mov	r7, r0
 8009328:	061b      	lsls	r3, r3, #24
 800932a:	460d      	mov	r5, r1
 800932c:	4614      	mov	r4, r2
 800932e:	d50e      	bpl.n	800934e <_svfiprintf_r+0x32>
 8009330:	690b      	ldr	r3, [r1, #16]
 8009332:	b963      	cbnz	r3, 800934e <_svfiprintf_r+0x32>
 8009334:	2140      	movs	r1, #64	; 0x40
 8009336:	f7ff ff0b 	bl	8009150 <_malloc_r>
 800933a:	6028      	str	r0, [r5, #0]
 800933c:	6128      	str	r0, [r5, #16]
 800933e:	b920      	cbnz	r0, 800934a <_svfiprintf_r+0x2e>
 8009340:	230c      	movs	r3, #12
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e0d0      	b.n	80094ec <_svfiprintf_r+0x1d0>
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	616b      	str	r3, [r5, #20]
 800934e:	2300      	movs	r3, #0
 8009350:	f8cd 800c 	str.w	r8, [sp, #12]
 8009354:	f04f 0901 	mov.w	r9, #1
 8009358:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009504 <_svfiprintf_r+0x1e8>
 800935c:	9309      	str	r3, [sp, #36]	; 0x24
 800935e:	2320      	movs	r3, #32
 8009360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009364:	2330      	movs	r3, #48	; 0x30
 8009366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800936a:	4623      	mov	r3, r4
 800936c:	469a      	mov	sl, r3
 800936e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009372:	b10a      	cbz	r2, 8009378 <_svfiprintf_r+0x5c>
 8009374:	2a25      	cmp	r2, #37	; 0x25
 8009376:	d1f9      	bne.n	800936c <_svfiprintf_r+0x50>
 8009378:	ebba 0b04 	subs.w	fp, sl, r4
 800937c:	d00b      	beq.n	8009396 <_svfiprintf_r+0x7a>
 800937e:	465b      	mov	r3, fp
 8009380:	4622      	mov	r2, r4
 8009382:	4629      	mov	r1, r5
 8009384:	4638      	mov	r0, r7
 8009386:	f7ff ff6f 	bl	8009268 <__ssputs_r>
 800938a:	3001      	adds	r0, #1
 800938c:	f000 80a9 	beq.w	80094e2 <_svfiprintf_r+0x1c6>
 8009390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009392:	445a      	add	r2, fp
 8009394:	9209      	str	r2, [sp, #36]	; 0x24
 8009396:	f89a 3000 	ldrb.w	r3, [sl]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80a1 	beq.w	80094e2 <_svfiprintf_r+0x1c6>
 80093a0:	2300      	movs	r3, #0
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295
 80093a6:	f10a 0a01 	add.w	sl, sl, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	9307      	str	r3, [sp, #28]
 80093ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093b2:	931a      	str	r3, [sp, #104]	; 0x68
 80093b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093b8:	4654      	mov	r4, sl
 80093ba:	2205      	movs	r2, #5
 80093bc:	4851      	ldr	r0, [pc, #324]	; (8009504 <_svfiprintf_r+0x1e8>)
 80093be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c2:	f000 fa65 	bl	8009890 <memchr>
 80093c6:	9a04      	ldr	r2, [sp, #16]
 80093c8:	b9d8      	cbnz	r0, 8009402 <_svfiprintf_r+0xe6>
 80093ca:	06d0      	lsls	r0, r2, #27
 80093cc:	bf44      	itt	mi
 80093ce:	2320      	movmi	r3, #32
 80093d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d4:	0711      	lsls	r1, r2, #28
 80093d6:	bf44      	itt	mi
 80093d8:	232b      	movmi	r3, #43	; 0x2b
 80093da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b2a      	cmp	r3, #42	; 0x2a
 80093e4:	d015      	beq.n	8009412 <_svfiprintf_r+0xf6>
 80093e6:	9a07      	ldr	r2, [sp, #28]
 80093e8:	4654      	mov	r4, sl
 80093ea:	2000      	movs	r0, #0
 80093ec:	f04f 0c0a 	mov.w	ip, #10
 80093f0:	4621      	mov	r1, r4
 80093f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f6:	3b30      	subs	r3, #48	; 0x30
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d94d      	bls.n	8009498 <_svfiprintf_r+0x17c>
 80093fc:	b1b0      	cbz	r0, 800942c <_svfiprintf_r+0x110>
 80093fe:	9207      	str	r2, [sp, #28]
 8009400:	e014      	b.n	800942c <_svfiprintf_r+0x110>
 8009402:	eba0 0308 	sub.w	r3, r0, r8
 8009406:	46a2      	mov	sl, r4
 8009408:	fa09 f303 	lsl.w	r3, r9, r3
 800940c:	4313      	orrs	r3, r2
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	e7d2      	b.n	80093b8 <_svfiprintf_r+0x9c>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	1d19      	adds	r1, r3, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	9103      	str	r1, [sp, #12]
 800941c:	bfbb      	ittet	lt
 800941e:	425b      	neglt	r3, r3
 8009420:	f042 0202 	orrlt.w	r2, r2, #2
 8009424:	9307      	strge	r3, [sp, #28]
 8009426:	9307      	strlt	r3, [sp, #28]
 8009428:	bfb8      	it	lt
 800942a:	9204      	strlt	r2, [sp, #16]
 800942c:	7823      	ldrb	r3, [r4, #0]
 800942e:	2b2e      	cmp	r3, #46	; 0x2e
 8009430:	d10c      	bne.n	800944c <_svfiprintf_r+0x130>
 8009432:	7863      	ldrb	r3, [r4, #1]
 8009434:	2b2a      	cmp	r3, #42	; 0x2a
 8009436:	d134      	bne.n	80094a2 <_svfiprintf_r+0x186>
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	3402      	adds	r4, #2
 800943c:	1d1a      	adds	r2, r3, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	9203      	str	r2, [sp, #12]
 8009444:	bfb8      	it	lt
 8009446:	f04f 33ff 	movlt.w	r3, #4294967295
 800944a:	9305      	str	r3, [sp, #20]
 800944c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009514 <_svfiprintf_r+0x1f8>
 8009450:	2203      	movs	r2, #3
 8009452:	7821      	ldrb	r1, [r4, #0]
 8009454:	4650      	mov	r0, sl
 8009456:	f000 fa1b 	bl	8009890 <memchr>
 800945a:	b138      	cbz	r0, 800946c <_svfiprintf_r+0x150>
 800945c:	eba0 000a 	sub.w	r0, r0, sl
 8009460:	2240      	movs	r2, #64	; 0x40
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	3401      	adds	r4, #1
 8009466:	4082      	lsls	r2, r0
 8009468:	4313      	orrs	r3, r2
 800946a:	9304      	str	r3, [sp, #16]
 800946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009470:	2206      	movs	r2, #6
 8009472:	4825      	ldr	r0, [pc, #148]	; (8009508 <_svfiprintf_r+0x1ec>)
 8009474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009478:	f000 fa0a 	bl	8009890 <memchr>
 800947c:	2800      	cmp	r0, #0
 800947e:	d038      	beq.n	80094f2 <_svfiprintf_r+0x1d6>
 8009480:	4b22      	ldr	r3, [pc, #136]	; (800950c <_svfiprintf_r+0x1f0>)
 8009482:	bb1b      	cbnz	r3, 80094cc <_svfiprintf_r+0x1b0>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	3307      	adds	r3, #7
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	3308      	adds	r3, #8
 800948e:	9303      	str	r3, [sp, #12]
 8009490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009492:	4433      	add	r3, r6
 8009494:	9309      	str	r3, [sp, #36]	; 0x24
 8009496:	e768      	b.n	800936a <_svfiprintf_r+0x4e>
 8009498:	fb0c 3202 	mla	r2, ip, r2, r3
 800949c:	460c      	mov	r4, r1
 800949e:	2001      	movs	r0, #1
 80094a0:	e7a6      	b.n	80093f0 <_svfiprintf_r+0xd4>
 80094a2:	2300      	movs	r3, #0
 80094a4:	3401      	adds	r4, #1
 80094a6:	f04f 0c0a 	mov.w	ip, #10
 80094aa:	4619      	mov	r1, r3
 80094ac:	9305      	str	r3, [sp, #20]
 80094ae:	4620      	mov	r0, r4
 80094b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b4:	3a30      	subs	r2, #48	; 0x30
 80094b6:	2a09      	cmp	r2, #9
 80094b8:	d903      	bls.n	80094c2 <_svfiprintf_r+0x1a6>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0c6      	beq.n	800944c <_svfiprintf_r+0x130>
 80094be:	9105      	str	r1, [sp, #20]
 80094c0:	e7c4      	b.n	800944c <_svfiprintf_r+0x130>
 80094c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c6:	4604      	mov	r4, r0
 80094c8:	2301      	movs	r3, #1
 80094ca:	e7f0      	b.n	80094ae <_svfiprintf_r+0x192>
 80094cc:	ab03      	add	r3, sp, #12
 80094ce:	462a      	mov	r2, r5
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	4638      	mov	r0, r7
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <_svfiprintf_r+0x1f4>)
 80094d8:	f3af 8000 	nop.w
 80094dc:	1c42      	adds	r2, r0, #1
 80094de:	4606      	mov	r6, r0
 80094e0:	d1d6      	bne.n	8009490 <_svfiprintf_r+0x174>
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	065b      	lsls	r3, r3, #25
 80094e6:	f53f af2d 	bmi.w	8009344 <_svfiprintf_r+0x28>
 80094ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ec:	b01d      	add	sp, #116	; 0x74
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	ab03      	add	r3, sp, #12
 80094f4:	462a      	mov	r2, r5
 80094f6:	a904      	add	r1, sp, #16
 80094f8:	4638      	mov	r0, r7
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <_svfiprintf_r+0x1f4>)
 80094fe:	f000 f87d 	bl	80095fc <_printf_i>
 8009502:	e7eb      	b.n	80094dc <_svfiprintf_r+0x1c0>
 8009504:	08009a54 	.word	0x08009a54
 8009508:	08009a5e 	.word	0x08009a5e
 800950c:	00000000 	.word	0x00000000
 8009510:	08009269 	.word	0x08009269
 8009514:	08009a5a 	.word	0x08009a5a

08009518 <_printf_common>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	4616      	mov	r6, r2
 800951e:	4699      	mov	r9, r3
 8009520:	688a      	ldr	r2, [r1, #8]
 8009522:	4607      	mov	r7, r0
 8009524:	690b      	ldr	r3, [r1, #16]
 8009526:	460c      	mov	r4, r1
 8009528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800952c:	4293      	cmp	r3, r2
 800952e:	bfb8      	it	lt
 8009530:	4613      	movlt	r3, r2
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009538:	b10a      	cbz	r2, 800953e <_printf_common+0x26>
 800953a:	3301      	adds	r3, #1
 800953c:	6033      	str	r3, [r6, #0]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	0699      	lsls	r1, r3, #26
 8009542:	bf42      	ittt	mi
 8009544:	6833      	ldrmi	r3, [r6, #0]
 8009546:	3302      	addmi	r3, #2
 8009548:	6033      	strmi	r3, [r6, #0]
 800954a:	6825      	ldr	r5, [r4, #0]
 800954c:	f015 0506 	ands.w	r5, r5, #6
 8009550:	d106      	bne.n	8009560 <_printf_common+0x48>
 8009552:	f104 0a19 	add.w	sl, r4, #25
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	6832      	ldr	r2, [r6, #0]
 800955a:	1a9b      	subs	r3, r3, r2
 800955c:	42ab      	cmp	r3, r5
 800955e:	dc2b      	bgt.n	80095b8 <_printf_common+0xa0>
 8009560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009564:	1e13      	subs	r3, r2, #0
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	bf18      	it	ne
 800956a:	2301      	movne	r3, #1
 800956c:	0692      	lsls	r2, r2, #26
 800956e:	d430      	bmi.n	80095d2 <_printf_common+0xba>
 8009570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009574:	4649      	mov	r1, r9
 8009576:	4638      	mov	r0, r7
 8009578:	47c0      	blx	r8
 800957a:	3001      	adds	r0, #1
 800957c:	d023      	beq.n	80095c6 <_printf_common+0xae>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	341a      	adds	r4, #26
 8009582:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009586:	f003 0306 	and.w	r3, r3, #6
 800958a:	2b04      	cmp	r3, #4
 800958c:	bf0a      	itet	eq
 800958e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009592:	2500      	movne	r5, #0
 8009594:	6833      	ldreq	r3, [r6, #0]
 8009596:	f04f 0600 	mov.w	r6, #0
 800959a:	bf08      	it	eq
 800959c:	1aed      	subeq	r5, r5, r3
 800959e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80095a2:	bf08      	it	eq
 80095a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095a8:	4293      	cmp	r3, r2
 80095aa:	bfc4      	itt	gt
 80095ac:	1a9b      	subgt	r3, r3, r2
 80095ae:	18ed      	addgt	r5, r5, r3
 80095b0:	42b5      	cmp	r5, r6
 80095b2:	d11a      	bne.n	80095ea <_printf_common+0xd2>
 80095b4:	2000      	movs	r0, #0
 80095b6:	e008      	b.n	80095ca <_printf_common+0xb2>
 80095b8:	2301      	movs	r3, #1
 80095ba:	4652      	mov	r2, sl
 80095bc:	4649      	mov	r1, r9
 80095be:	4638      	mov	r0, r7
 80095c0:	47c0      	blx	r8
 80095c2:	3001      	adds	r0, #1
 80095c4:	d103      	bne.n	80095ce <_printf_common+0xb6>
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	3501      	adds	r5, #1
 80095d0:	e7c1      	b.n	8009556 <_printf_common+0x3e>
 80095d2:	18e1      	adds	r1, r4, r3
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	2030      	movs	r0, #48	; 0x30
 80095d8:	3302      	adds	r3, #2
 80095da:	4422      	add	r2, r4
 80095dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095e8:	e7c2      	b.n	8009570 <_printf_common+0x58>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4622      	mov	r2, r4
 80095ee:	4649      	mov	r1, r9
 80095f0:	4638      	mov	r0, r7
 80095f2:	47c0      	blx	r8
 80095f4:	3001      	adds	r0, #1
 80095f6:	d0e6      	beq.n	80095c6 <_printf_common+0xae>
 80095f8:	3601      	adds	r6, #1
 80095fa:	e7d9      	b.n	80095b0 <_printf_common+0x98>

080095fc <_printf_i>:
 80095fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	7e0f      	ldrb	r7, [r1, #24]
 8009602:	4691      	mov	r9, r2
 8009604:	4680      	mov	r8, r0
 8009606:	460c      	mov	r4, r1
 8009608:	2f78      	cmp	r7, #120	; 0x78
 800960a:	469a      	mov	sl, r3
 800960c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800960e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009612:	d807      	bhi.n	8009624 <_printf_i+0x28>
 8009614:	2f62      	cmp	r7, #98	; 0x62
 8009616:	d80a      	bhi.n	800962e <_printf_i+0x32>
 8009618:	2f00      	cmp	r7, #0
 800961a:	f000 80d3 	beq.w	80097c4 <_printf_i+0x1c8>
 800961e:	2f58      	cmp	r7, #88	; 0x58
 8009620:	f000 80bf 	beq.w	80097a2 <_printf_i+0x1a6>
 8009624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800962c:	e03a      	b.n	80096a4 <_printf_i+0xa8>
 800962e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009632:	2b15      	cmp	r3, #21
 8009634:	d8f6      	bhi.n	8009624 <_printf_i+0x28>
 8009636:	a101      	add	r1, pc, #4	; (adr r1, 800963c <_printf_i+0x40>)
 8009638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800963c:	08009695 	.word	0x08009695
 8009640:	080096a9 	.word	0x080096a9
 8009644:	08009625 	.word	0x08009625
 8009648:	08009625 	.word	0x08009625
 800964c:	08009625 	.word	0x08009625
 8009650:	08009625 	.word	0x08009625
 8009654:	080096a9 	.word	0x080096a9
 8009658:	08009625 	.word	0x08009625
 800965c:	08009625 	.word	0x08009625
 8009660:	08009625 	.word	0x08009625
 8009664:	08009625 	.word	0x08009625
 8009668:	080097ab 	.word	0x080097ab
 800966c:	080096d5 	.word	0x080096d5
 8009670:	08009767 	.word	0x08009767
 8009674:	08009625 	.word	0x08009625
 8009678:	08009625 	.word	0x08009625
 800967c:	080097cd 	.word	0x080097cd
 8009680:	08009625 	.word	0x08009625
 8009684:	080096d5 	.word	0x080096d5
 8009688:	08009625 	.word	0x08009625
 800968c:	08009625 	.word	0x08009625
 8009690:	0800976f 	.word	0x0800976f
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	1d1a      	adds	r2, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	602a      	str	r2, [r5, #0]
 800969c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096a4:	2301      	movs	r3, #1
 80096a6:	e09e      	b.n	80097e6 <_printf_i+0x1ea>
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	0607      	lsls	r7, r0, #24
 80096ae:	f103 0104 	add.w	r1, r3, #4
 80096b2:	6029      	str	r1, [r5, #0]
 80096b4:	d501      	bpl.n	80096ba <_printf_i+0xbe>
 80096b6:	681e      	ldr	r6, [r3, #0]
 80096b8:	e003      	b.n	80096c2 <_printf_i+0xc6>
 80096ba:	0646      	lsls	r6, r0, #25
 80096bc:	d5fb      	bpl.n	80096b6 <_printf_i+0xba>
 80096be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	da03      	bge.n	80096ce <_printf_i+0xd2>
 80096c6:	232d      	movs	r3, #45	; 0x2d
 80096c8:	4276      	negs	r6, r6
 80096ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ce:	4859      	ldr	r0, [pc, #356]	; (8009834 <_printf_i+0x238>)
 80096d0:	230a      	movs	r3, #10
 80096d2:	e012      	b.n	80096fa <_printf_i+0xfe>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	1d19      	adds	r1, r3, #4
 80096da:	6029      	str	r1, [r5, #0]
 80096dc:	0605      	lsls	r5, r0, #24
 80096de:	d501      	bpl.n	80096e4 <_printf_i+0xe8>
 80096e0:	681e      	ldr	r6, [r3, #0]
 80096e2:	e002      	b.n	80096ea <_printf_i+0xee>
 80096e4:	0641      	lsls	r1, r0, #25
 80096e6:	d5fb      	bpl.n	80096e0 <_printf_i+0xe4>
 80096e8:	881e      	ldrh	r6, [r3, #0]
 80096ea:	2f6f      	cmp	r7, #111	; 0x6f
 80096ec:	4851      	ldr	r0, [pc, #324]	; (8009834 <_printf_i+0x238>)
 80096ee:	bf0c      	ite	eq
 80096f0:	2308      	moveq	r3, #8
 80096f2:	230a      	movne	r3, #10
 80096f4:	2100      	movs	r1, #0
 80096f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096fa:	6865      	ldr	r5, [r4, #4]
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	60a5      	str	r5, [r4, #8]
 8009700:	bfa2      	ittt	ge
 8009702:	6821      	ldrge	r1, [r4, #0]
 8009704:	f021 0104 	bicge.w	r1, r1, #4
 8009708:	6021      	strge	r1, [r4, #0]
 800970a:	b90e      	cbnz	r6, 8009710 <_printf_i+0x114>
 800970c:	2d00      	cmp	r5, #0
 800970e:	d04a      	beq.n	80097a6 <_printf_i+0x1aa>
 8009710:	4615      	mov	r5, r2
 8009712:	fbb6 f1f3 	udiv	r1, r6, r3
 8009716:	fb03 6711 	mls	r7, r3, r1, r6
 800971a:	5dc7      	ldrb	r7, [r0, r7]
 800971c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009720:	4637      	mov	r7, r6
 8009722:	460e      	mov	r6, r1
 8009724:	42bb      	cmp	r3, r7
 8009726:	d9f4      	bls.n	8009712 <_printf_i+0x116>
 8009728:	2b08      	cmp	r3, #8
 800972a:	d10b      	bne.n	8009744 <_printf_i+0x148>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	07de      	lsls	r6, r3, #31
 8009730:	d508      	bpl.n	8009744 <_printf_i+0x148>
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	6861      	ldr	r1, [r4, #4]
 8009736:	4299      	cmp	r1, r3
 8009738:	bfde      	ittt	le
 800973a:	2330      	movle	r3, #48	; 0x30
 800973c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009744:	1b52      	subs	r2, r2, r5
 8009746:	6122      	str	r2, [r4, #16]
 8009748:	464b      	mov	r3, r9
 800974a:	aa03      	add	r2, sp, #12
 800974c:	4621      	mov	r1, r4
 800974e:	4640      	mov	r0, r8
 8009750:	f8cd a000 	str.w	sl, [sp]
 8009754:	f7ff fee0 	bl	8009518 <_printf_common>
 8009758:	3001      	adds	r0, #1
 800975a:	d149      	bne.n	80097f0 <_printf_i+0x1f4>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	b004      	add	sp, #16
 8009762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	f043 0320 	orr.w	r3, r3, #32
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	2778      	movs	r7, #120	; 0x78
 8009770:	4831      	ldr	r0, [pc, #196]	; (8009838 <_printf_i+0x23c>)
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009778:	061f      	lsls	r7, r3, #24
 800977a:	6829      	ldr	r1, [r5, #0]
 800977c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009780:	d402      	bmi.n	8009788 <_printf_i+0x18c>
 8009782:	065f      	lsls	r7, r3, #25
 8009784:	bf48      	it	mi
 8009786:	b2b6      	uxthmi	r6, r6
 8009788:	07df      	lsls	r7, r3, #31
 800978a:	6029      	str	r1, [r5, #0]
 800978c:	bf44      	itt	mi
 800978e:	f043 0320 	orrmi.w	r3, r3, #32
 8009792:	6023      	strmi	r3, [r4, #0]
 8009794:	b91e      	cbnz	r6, 800979e <_printf_i+0x1a2>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	f023 0320 	bic.w	r3, r3, #32
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	2310      	movs	r3, #16
 80097a0:	e7a8      	b.n	80096f4 <_printf_i+0xf8>
 80097a2:	4824      	ldr	r0, [pc, #144]	; (8009834 <_printf_i+0x238>)
 80097a4:	e7e5      	b.n	8009772 <_printf_i+0x176>
 80097a6:	4615      	mov	r5, r2
 80097a8:	e7be      	b.n	8009728 <_printf_i+0x12c>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	6826      	ldr	r6, [r4, #0]
 80097ae:	1d18      	adds	r0, r3, #4
 80097b0:	6961      	ldr	r1, [r4, #20]
 80097b2:	6028      	str	r0, [r5, #0]
 80097b4:	0635      	lsls	r5, r6, #24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	d501      	bpl.n	80097be <_printf_i+0x1c2>
 80097ba:	6019      	str	r1, [r3, #0]
 80097bc:	e002      	b.n	80097c4 <_printf_i+0x1c8>
 80097be:	0670      	lsls	r0, r6, #25
 80097c0:	d5fb      	bpl.n	80097ba <_printf_i+0x1be>
 80097c2:	8019      	strh	r1, [r3, #0]
 80097c4:	2300      	movs	r3, #0
 80097c6:	4615      	mov	r5, r2
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	e7bd      	b.n	8009748 <_printf_i+0x14c>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	2100      	movs	r1, #0
 80097d0:	1d1a      	adds	r2, r3, #4
 80097d2:	602a      	str	r2, [r5, #0]
 80097d4:	681d      	ldr	r5, [r3, #0]
 80097d6:	6862      	ldr	r2, [r4, #4]
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 f859 	bl	8009890 <memchr>
 80097de:	b108      	cbz	r0, 80097e4 <_printf_i+0x1e8>
 80097e0:	1b40      	subs	r0, r0, r5
 80097e2:	6060      	str	r0, [r4, #4]
 80097e4:	6863      	ldr	r3, [r4, #4]
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	2300      	movs	r3, #0
 80097ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ee:	e7ab      	b.n	8009748 <_printf_i+0x14c>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4649      	mov	r1, r9
 80097f6:	4640      	mov	r0, r8
 80097f8:	47d0      	blx	sl
 80097fa:	3001      	adds	r0, #1
 80097fc:	d0ae      	beq.n	800975c <_printf_i+0x160>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	079b      	lsls	r3, r3, #30
 8009802:	d413      	bmi.n	800982c <_printf_i+0x230>
 8009804:	68e0      	ldr	r0, [r4, #12]
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	4298      	cmp	r0, r3
 800980a:	bfb8      	it	lt
 800980c:	4618      	movlt	r0, r3
 800980e:	e7a7      	b.n	8009760 <_printf_i+0x164>
 8009810:	2301      	movs	r3, #1
 8009812:	4632      	mov	r2, r6
 8009814:	4649      	mov	r1, r9
 8009816:	4640      	mov	r0, r8
 8009818:	47d0      	blx	sl
 800981a:	3001      	adds	r0, #1
 800981c:	d09e      	beq.n	800975c <_printf_i+0x160>
 800981e:	3501      	adds	r5, #1
 8009820:	68e3      	ldr	r3, [r4, #12]
 8009822:	9903      	ldr	r1, [sp, #12]
 8009824:	1a5b      	subs	r3, r3, r1
 8009826:	42ab      	cmp	r3, r5
 8009828:	dcf2      	bgt.n	8009810 <_printf_i+0x214>
 800982a:	e7eb      	b.n	8009804 <_printf_i+0x208>
 800982c:	2500      	movs	r5, #0
 800982e:	f104 0619 	add.w	r6, r4, #25
 8009832:	e7f5      	b.n	8009820 <_printf_i+0x224>
 8009834:	08009a65 	.word	0x08009a65
 8009838:	08009a76 	.word	0x08009a76

0800983c <memmove>:
 800983c:	4288      	cmp	r0, r1
 800983e:	b510      	push	{r4, lr}
 8009840:	eb01 0402 	add.w	r4, r1, r2
 8009844:	d902      	bls.n	800984c <memmove+0x10>
 8009846:	4284      	cmp	r4, r0
 8009848:	4623      	mov	r3, r4
 800984a:	d807      	bhi.n	800985c <memmove+0x20>
 800984c:	1e43      	subs	r3, r0, #1
 800984e:	42a1      	cmp	r1, r4
 8009850:	d008      	beq.n	8009864 <memmove+0x28>
 8009852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800985a:	e7f8      	b.n	800984e <memmove+0x12>
 800985c:	4402      	add	r2, r0
 800985e:	4601      	mov	r1, r0
 8009860:	428a      	cmp	r2, r1
 8009862:	d100      	bne.n	8009866 <memmove+0x2a>
 8009864:	bd10      	pop	{r4, pc}
 8009866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800986a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800986e:	e7f7      	b.n	8009860 <memmove+0x24>

08009870 <_sbrk_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	2300      	movs	r3, #0
 8009874:	4d05      	ldr	r5, [pc, #20]	; (800988c <_sbrk_r+0x1c>)
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f7 fb3a 	bl	8000ef4 <_sbrk>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_sbrk_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_sbrk_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	200006dc 	.word	0x200006dc

08009890 <memchr>:
 8009890:	b2c9      	uxtb	r1, r1
 8009892:	4402      	add	r2, r0
 8009894:	b510      	push	{r4, lr}
 8009896:	4290      	cmp	r0, r2
 8009898:	4603      	mov	r3, r0
 800989a:	d101      	bne.n	80098a0 <memchr+0x10>
 800989c:	2300      	movs	r3, #0
 800989e:	e003      	b.n	80098a8 <memchr+0x18>
 80098a0:	781c      	ldrb	r4, [r3, #0]
 80098a2:	3001      	adds	r0, #1
 80098a4:	428c      	cmp	r4, r1
 80098a6:	d1f6      	bne.n	8009896 <memchr+0x6>
 80098a8:	4618      	mov	r0, r3
 80098aa:	bd10      	pop	{r4, pc}

080098ac <memcpy>:
 80098ac:	440a      	add	r2, r1
 80098ae:	1e43      	subs	r3, r0, #1
 80098b0:	4291      	cmp	r1, r2
 80098b2:	d100      	bne.n	80098b6 <memcpy+0xa>
 80098b4:	4770      	bx	lr
 80098b6:	b510      	push	{r4, lr}
 80098b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098bc:	4291      	cmp	r1, r2
 80098be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c2:	d1f9      	bne.n	80098b8 <memcpy+0xc>
 80098c4:	bd10      	pop	{r4, pc}

080098c6 <_realloc_r>:
 80098c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	4680      	mov	r8, r0
 80098cc:	4614      	mov	r4, r2
 80098ce:	460e      	mov	r6, r1
 80098d0:	b921      	cbnz	r1, 80098dc <_realloc_r+0x16>
 80098d2:	4611      	mov	r1, r2
 80098d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	f7ff bc3a 	b.w	8009150 <_malloc_r>
 80098dc:	b92a      	cbnz	r2, 80098ea <_realloc_r+0x24>
 80098de:	4625      	mov	r5, r4
 80098e0:	f7ff fbca 	bl	8009078 <_free_r>
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ea:	f000 f81b 	bl	8009924 <_malloc_usable_size_r>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4607      	mov	r7, r0
 80098f2:	d802      	bhi.n	80098fa <_realloc_r+0x34>
 80098f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098f8:	d812      	bhi.n	8009920 <_realloc_r+0x5a>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4640      	mov	r0, r8
 80098fe:	f7ff fc27 	bl	8009150 <_malloc_r>
 8009902:	4605      	mov	r5, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d0ed      	beq.n	80098e4 <_realloc_r+0x1e>
 8009908:	42bc      	cmp	r4, r7
 800990a:	4622      	mov	r2, r4
 800990c:	4631      	mov	r1, r6
 800990e:	bf28      	it	cs
 8009910:	463a      	movcs	r2, r7
 8009912:	f7ff ffcb 	bl	80098ac <memcpy>
 8009916:	4631      	mov	r1, r6
 8009918:	4640      	mov	r0, r8
 800991a:	f7ff fbad 	bl	8009078 <_free_r>
 800991e:	e7e1      	b.n	80098e4 <_realloc_r+0x1e>
 8009920:	4635      	mov	r5, r6
 8009922:	e7df      	b.n	80098e4 <_realloc_r+0x1e>

08009924 <_malloc_usable_size_r>:
 8009924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009928:	1f18      	subs	r0, r3, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	bfbc      	itt	lt
 800992e:	580b      	ldrlt	r3, [r1, r0]
 8009930:	18c0      	addlt	r0, r0, r3
 8009932:	4770      	bx	lr

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
