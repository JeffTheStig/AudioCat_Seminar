
STM32-SDcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e33c  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033b  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e8c8  0800e8c8  0001e8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e8d0  0800e8d0  0001e8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e8d4  0800e8d4  0001e8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800e8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000860  20000074  0800e94c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008d4  0800e94c  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ec2d  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003e7a  00000000  00000000  0003ed1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000018a8  00000000  00000000  00042b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012e3  00000000  00000000  00044440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e167  00000000  00000000  00045723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021750  00000000  00000000  0008388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fc80  00000000  00000000  000a4fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006f3c  00000000  00000000  00224c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0022bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000074 	.word	0x20000074
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e574 	.word	0x0800e574

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000078 	.word	0x20000078
 800028c:	0800e574 	.word	0x0800e574

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000628:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 b982 	b.w	8000934 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800064c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800064e:	460d      	mov	r5, r1
 8000650:	4604      	mov	r4, r0
 8000652:	460f      	mov	r7, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d146      	bne.n	80006e6 <__udivmoddi4+0x9e>
 8000658:	428a      	cmp	r2, r1
 800065a:	4694      	mov	ip, r2
 800065c:	d95e      	bls.n	800071c <__udivmoddi4+0xd4>
 800065e:	fab2 f382 	clz	r3, r2
 8000662:	b143      	cbz	r3, 8000676 <__udivmoddi4+0x2e>
 8000664:	fa02 fc03 	lsl.w	ip, r2, r3
 8000668:	f1c3 0220 	rsb	r2, r3, #32
 800066c:	409f      	lsls	r7, r3
 800066e:	409c      	lsls	r4, r3
 8000670:	fa20 f202 	lsr.w	r2, r0, r2
 8000674:	4317      	orrs	r7, r2
 8000676:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800067a:	fa1f f58c 	uxth.w	r5, ip
 800067e:	0c22      	lsrs	r2, r4, #16
 8000680:	fbb7 f1fe 	udiv	r1, r7, lr
 8000684:	fb0e 7711 	mls	r7, lr, r1, r7
 8000688:	fb01 f005 	mul.w	r0, r1, r5
 800068c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000690:	4290      	cmp	r0, r2
 8000692:	d908      	bls.n	80006a6 <__udivmoddi4+0x5e>
 8000694:	eb1c 0202 	adds.w	r2, ip, r2
 8000698:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800069c:	d202      	bcs.n	80006a4 <__udivmoddi4+0x5c>
 800069e:	4290      	cmp	r0, r2
 80006a0:	f200 8134 	bhi.w	800090c <__udivmoddi4+0x2c4>
 80006a4:	4639      	mov	r1, r7
 80006a6:	1a12      	subs	r2, r2, r0
 80006a8:	b2a4      	uxth	r4, r4
 80006aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80006ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80006b2:	fb00 f505 	mul.w	r5, r0, r5
 80006b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ba:	42a5      	cmp	r5, r4
 80006bc:	d908      	bls.n	80006d0 <__udivmoddi4+0x88>
 80006be:	eb1c 0404 	adds.w	r4, ip, r4
 80006c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80006c6:	d202      	bcs.n	80006ce <__udivmoddi4+0x86>
 80006c8:	42a5      	cmp	r5, r4
 80006ca:	f200 8119 	bhi.w	8000900 <__udivmoddi4+0x2b8>
 80006ce:	4610      	mov	r0, r2
 80006d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006d4:	1b64      	subs	r4, r4, r5
 80006d6:	2100      	movs	r1, #0
 80006d8:	b11e      	cbz	r6, 80006e2 <__udivmoddi4+0x9a>
 80006da:	40dc      	lsrs	r4, r3
 80006dc:	2300      	movs	r3, #0
 80006de:	e9c6 4300 	strd	r4, r3, [r6]
 80006e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0xb4>
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	f000 80fc 	beq.w	80008e8 <__udivmoddi4+0x2a0>
 80006f0:	2100      	movs	r1, #0
 80006f2:	e9c6 0500 	strd	r0, r5, [r6]
 80006f6:	4608      	mov	r0, r1
 80006f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006fc:	fab3 f183 	clz	r1, r3
 8000700:	2900      	cmp	r1, #0
 8000702:	d14c      	bne.n	800079e <__udivmoddi4+0x156>
 8000704:	42ab      	cmp	r3, r5
 8000706:	f0c0 80f2 	bcc.w	80008ee <__udivmoddi4+0x2a6>
 800070a:	4282      	cmp	r2, r0
 800070c:	f240 80ef 	bls.w	80008ee <__udivmoddi4+0x2a6>
 8000710:	4608      	mov	r0, r1
 8000712:	2e00      	cmp	r6, #0
 8000714:	d0e5      	beq.n	80006e2 <__udivmoddi4+0x9a>
 8000716:	e9c6 4700 	strd	r4, r7, [r6]
 800071a:	e7e2      	b.n	80006e2 <__udivmoddi4+0x9a>
 800071c:	b902      	cbnz	r2, 8000720 <__udivmoddi4+0xd8>
 800071e:	deff      	udf	#255	; 0xff
 8000720:	fab2 f382 	clz	r3, r2
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 809f 	bne.w	8000868 <__udivmoddi4+0x220>
 800072a:	1a8a      	subs	r2, r1, r2
 800072c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000730:	fa1f f78c 	uxth.w	r7, ip
 8000734:	2101      	movs	r1, #1
 8000736:	fbb2 f5fe 	udiv	r5, r2, lr
 800073a:	fb0e 2015 	mls	r0, lr, r5, r2
 800073e:	0c22      	lsrs	r2, r4, #16
 8000740:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000744:	fb07 f005 	mul.w	r0, r7, r5
 8000748:	4290      	cmp	r0, r2
 800074a:	d90f      	bls.n	800076c <__udivmoddi4+0x124>
 800074c:	eb1c 0202 	adds.w	r2, ip, r2
 8000750:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000754:	bf2c      	ite	cs
 8000756:	f04f 0901 	movcs.w	r9, #1
 800075a:	f04f 0900 	movcc.w	r9, #0
 800075e:	4290      	cmp	r0, r2
 8000760:	d903      	bls.n	800076a <__udivmoddi4+0x122>
 8000762:	f1b9 0f00 	cmp.w	r9, #0
 8000766:	f000 80ce 	beq.w	8000906 <__udivmoddi4+0x2be>
 800076a:	4645      	mov	r5, r8
 800076c:	1a12      	subs	r2, r2, r0
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb2 f0fe 	udiv	r0, r2, lr
 8000774:	fb0e 2210 	mls	r2, lr, r0, r2
 8000778:	fb00 f707 	mul.w	r7, r0, r7
 800077c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000780:	42a7      	cmp	r7, r4
 8000782:	d908      	bls.n	8000796 <__udivmoddi4+0x14e>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800078c:	d202      	bcs.n	8000794 <__udivmoddi4+0x14c>
 800078e:	42a7      	cmp	r7, r4
 8000790:	f200 80b3 	bhi.w	80008fa <__udivmoddi4+0x2b2>
 8000794:	4610      	mov	r0, r2
 8000796:	1be4      	subs	r4, r4, r7
 8000798:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800079c:	e79c      	b.n	80006d8 <__udivmoddi4+0x90>
 800079e:	f1c1 0420 	rsb	r4, r1, #32
 80007a2:	408b      	lsls	r3, r1
 80007a4:	fa05 fc01 	lsl.w	ip, r5, r1
 80007a8:	fa22 f704 	lsr.w	r7, r2, r4
 80007ac:	40e5      	lsrs	r5, r4
 80007ae:	408a      	lsls	r2, r1
 80007b0:	431f      	orrs	r7, r3
 80007b2:	fa20 f304 	lsr.w	r3, r0, r4
 80007b6:	4088      	lsls	r0, r1
 80007b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007bc:	ea43 030c 	orr.w	r3, r3, ip
 80007c0:	fa1f fc87 	uxth.w	ip, r7
 80007c4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c8:	fbb5 fef8 	udiv	lr, r5, r8
 80007cc:	fb08 551e 	mls	r5, r8, lr, r5
 80007d0:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a9      	cmp	r9, r5
 80007da:	d90e      	bls.n	80007fa <__udivmoddi4+0x1b2>
 80007dc:	197d      	adds	r5, r7, r5
 80007de:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 80007e2:	bf2c      	ite	cs
 80007e4:	f04f 0b01 	movcs.w	fp, #1
 80007e8:	f04f 0b00 	movcc.w	fp, #0
 80007ec:	45a9      	cmp	r9, r5
 80007ee:	d903      	bls.n	80007f8 <__udivmoddi4+0x1b0>
 80007f0:	f1bb 0f00 	cmp.w	fp, #0
 80007f4:	f000 808d 	beq.w	8000912 <__udivmoddi4+0x2ca>
 80007f8:	46d6      	mov	lr, sl
 80007fa:	eba5 0509 	sub.w	r5, r5, r9
 80007fe:	fa1f f983 	uxth.w	r9, r3
 8000802:	fbb5 f3f8 	udiv	r3, r5, r8
 8000806:	fb08 5513 	mls	r5, r8, r3, r5
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000812:	45ac      	cmp	ip, r5
 8000814:	d906      	bls.n	8000824 <__udivmoddi4+0x1dc>
 8000816:	197d      	adds	r5, r7, r5
 8000818:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800081c:	d201      	bcs.n	8000822 <__udivmoddi4+0x1da>
 800081e:	45ac      	cmp	ip, r5
 8000820:	d87e      	bhi.n	8000920 <__udivmoddi4+0x2d8>
 8000822:	4643      	mov	r3, r8
 8000824:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000828:	eba5 050c 	sub.w	r5, r5, ip
 800082c:	fba3 9802 	umull	r9, r8, r3, r2
 8000830:	4545      	cmp	r5, r8
 8000832:	46ce      	mov	lr, r9
 8000834:	46c4      	mov	ip, r8
 8000836:	d302      	bcc.n	800083e <__udivmoddi4+0x1f6>
 8000838:	d106      	bne.n	8000848 <__udivmoddi4+0x200>
 800083a:	4548      	cmp	r0, r9
 800083c:	d204      	bcs.n	8000848 <__udivmoddi4+0x200>
 800083e:	3b01      	subs	r3, #1
 8000840:	ebb9 0e02 	subs.w	lr, r9, r2
 8000844:	eb68 0c07 	sbc.w	ip, r8, r7
 8000848:	2e00      	cmp	r6, #0
 800084a:	d06f      	beq.n	800092c <__udivmoddi4+0x2e4>
 800084c:	ebb0 020e 	subs.w	r2, r0, lr
 8000850:	eb65 050c 	sbc.w	r5, r5, ip
 8000854:	40ca      	lsrs	r2, r1
 8000856:	fa05 f404 	lsl.w	r4, r5, r4
 800085a:	40cd      	lsrs	r5, r1
 800085c:	4618      	mov	r0, r3
 800085e:	4314      	orrs	r4, r2
 8000860:	2100      	movs	r1, #0
 8000862:	e9c6 4500 	strd	r4, r5, [r6]
 8000866:	e73c      	b.n	80006e2 <__udivmoddi4+0x9a>
 8000868:	fa02 fc03 	lsl.w	ip, r2, r3
 800086c:	f1c3 0220 	rsb	r2, r3, #32
 8000870:	4099      	lsls	r1, r3
 8000872:	409c      	lsls	r4, r3
 8000874:	40d5      	lsrs	r5, r2
 8000876:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800087a:	fa20 f202 	lsr.w	r2, r0, r2
 800087e:	fa1f f78c 	uxth.w	r7, ip
 8000882:	fbb5 f0fe 	udiv	r0, r5, lr
 8000886:	430a      	orrs	r2, r1
 8000888:	fb0e 5510 	mls	r5, lr, r0, r5
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000892:	fb00 f507 	mul.w	r5, r0, r7
 8000896:	428d      	cmp	r5, r1
 8000898:	d90e      	bls.n	80008b8 <__udivmoddi4+0x270>
 800089a:	eb1c 0101 	adds.w	r1, ip, r1
 800089e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008a2:	bf2c      	ite	cs
 80008a4:	f04f 0901 	movcs.w	r9, #1
 80008a8:	f04f 0900 	movcc.w	r9, #0
 80008ac:	428d      	cmp	r5, r1
 80008ae:	d902      	bls.n	80008b6 <__udivmoddi4+0x26e>
 80008b0:	f1b9 0f00 	cmp.w	r9, #0
 80008b4:	d031      	beq.n	800091a <__udivmoddi4+0x2d2>
 80008b6:	4640      	mov	r0, r8
 80008b8:	1b49      	subs	r1, r1, r5
 80008ba:	b292      	uxth	r2, r2
 80008bc:	fbb1 f5fe 	udiv	r5, r1, lr
 80008c0:	fb0e 1115 	mls	r1, lr, r5, r1
 80008c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c8:	fb05 f107 	mul.w	r1, r5, r7
 80008cc:	4291      	cmp	r1, r2
 80008ce:	d907      	bls.n	80008e0 <__udivmoddi4+0x298>
 80008d0:	eb1c 0202 	adds.w	r2, ip, r2
 80008d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008d8:	d201      	bcs.n	80008de <__udivmoddi4+0x296>
 80008da:	4291      	cmp	r1, r2
 80008dc:	d823      	bhi.n	8000926 <__udivmoddi4+0x2de>
 80008de:	4645      	mov	r5, r8
 80008e0:	1a52      	subs	r2, r2, r1
 80008e2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008e6:	e726      	b.n	8000736 <__udivmoddi4+0xee>
 80008e8:	4631      	mov	r1, r6
 80008ea:	4630      	mov	r0, r6
 80008ec:	e6f9      	b.n	80006e2 <__udivmoddi4+0x9a>
 80008ee:	1a84      	subs	r4, r0, r2
 80008f0:	eb65 0203 	sbc.w	r2, r5, r3
 80008f4:	2001      	movs	r0, #1
 80008f6:	4617      	mov	r7, r2
 80008f8:	e70b      	b.n	8000712 <__udivmoddi4+0xca>
 80008fa:	4464      	add	r4, ip
 80008fc:	3802      	subs	r0, #2
 80008fe:	e74a      	b.n	8000796 <__udivmoddi4+0x14e>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	e6e4      	b.n	80006d0 <__udivmoddi4+0x88>
 8000906:	3d02      	subs	r5, #2
 8000908:	4462      	add	r2, ip
 800090a:	e72f      	b.n	800076c <__udivmoddi4+0x124>
 800090c:	3902      	subs	r1, #2
 800090e:	4462      	add	r2, ip
 8000910:	e6c9      	b.n	80006a6 <__udivmoddi4+0x5e>
 8000912:	f1ae 0e02 	sub.w	lr, lr, #2
 8000916:	443d      	add	r5, r7
 8000918:	e76f      	b.n	80007fa <__udivmoddi4+0x1b2>
 800091a:	3802      	subs	r0, #2
 800091c:	4461      	add	r1, ip
 800091e:	e7cb      	b.n	80008b8 <__udivmoddi4+0x270>
 8000920:	3b02      	subs	r3, #2
 8000922:	443d      	add	r5, r7
 8000924:	e77e      	b.n	8000824 <__udivmoddi4+0x1dc>
 8000926:	3d02      	subs	r5, #2
 8000928:	4462      	add	r2, ip
 800092a:	e7d9      	b.n	80008e0 <__udivmoddi4+0x298>
 800092c:	4618      	mov	r0, r3
 800092e:	4631      	mov	r1, r6
 8000930:	e6d7      	b.n	80006e2 <__udivmoddi4+0x9a>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <disk_status+0x30>)
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	4905      	ldr	r1, [pc, #20]	; (8000968 <disk_status+0x30>)
 8000952:	440a      	add	r2, r1
 8000954:	7a12      	ldrb	r2, [r2, #8]
 8000956:	4610      	mov	r0, r2
 8000958:	4798      	blx	r3
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b8 	.word	0x200000b8

0800096c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <disk_initialize+0x48>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d111      	bne.n	80009a8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <disk_initialize+0x48>)
 8000988:	2101      	movs	r1, #1
 800098a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <disk_initialize+0x48>)
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	4906      	ldr	r1, [pc, #24]	; (80009b4 <disk_initialize+0x48>)
 800099c:	440a      	add	r2, r1
 800099e:	7a12      	ldrb	r2, [r2, #8]
 80009a0:	4610      	mov	r0, r2
 80009a2:	4798      	blx	r3
 80009a4:	4603      	mov	r3, r0
 80009a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000b8 	.word	0x200000b8

080009b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <disk_read+0x3c>)
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	689c      	ldr	r4, [r3, #8]
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <disk_read+0x3c>)
 80009d8:	4413      	add	r3, r2
 80009da:	7a18      	ldrb	r0, [r3, #8]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	47a0      	blx	r4
 80009e4:	4603      	mov	r3, r0
 80009e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000b8 	.word	0x200000b8

080009f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <disk_write+0x3c>)
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	68dc      	ldr	r4, [r3, #12]
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <disk_write+0x3c>)
 8000a18:	4413      	add	r3, r2
 8000a1a:	7a18      	ldrb	r0, [r3, #8]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	47a0      	blx	r4
 8000a24:	4603      	mov	r3, r0
 8000a26:	75fb      	strb	r3, [r7, #23]
  return res;
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	371c      	adds	r7, #28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000b8 	.word	0x200000b8

08000a38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	603a      	str	r2, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	460b      	mov	r3, r1
 8000a46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <disk_ioctl+0x38>)
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	4906      	ldr	r1, [pc, #24]	; (8000a70 <disk_ioctl+0x38>)
 8000a58:	440a      	add	r2, r1
 8000a5a:	7a10      	ldrb	r0, [r2, #8]
 8000a5c:	79b9      	ldrb	r1, [r7, #6]
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	4798      	blx	r3
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]
  return res;
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000b8 	.word	0x200000b8

08000a74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <MX_FATFS_Init+0x18>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_FATFS_Init+0x1c>)
 8000a7c:	f002 fc80 	bl	8003380 <FATFS_LinkDriver>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <MX_FATFS_Init+0x20>)
 8000a86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000094 	.word	0x20000094
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000090 	.word	0x20000090

08000a98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000a9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8000abc:	e007      	b.n	8000ace <mem_cpy+0x26>
		*d++ = *s++;
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	1c53      	adds	r3, r2, #1
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	6179      	str	r1, [r7, #20]
 8000aca:	7812      	ldrb	r2, [r2, #0]
 8000acc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f2      	bne.n	8000abe <mem_cpy+0x16>
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000ae6:	b480      	push	{r7}
 8000ae8:	b087      	sub	sp, #28
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8000af6:	e005      	b.n	8000b04 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	617a      	str	r2, [r7, #20]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f4      	bne.n	8000af8 <mem_set+0x12>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8000b34:	bf00      	nop
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00d      	beq.n	8000b5c <mem_cmp+0x40>
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	61fa      	str	r2, [r7, #28]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	61ba      	str	r2, [r7, #24]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	1acb      	subs	r3, r1, r3
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0ec      	beq.n	8000b36 <mem_cmp+0x1a>
	return r;
 8000b5c:	697b      	ldr	r3, [r7, #20]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000b74:	e002      	b.n	8000b7c <chk_chr+0x12>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <chk_chr+0x26>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d1f2      	bne.n	8000b76 <chk_chr+0xc>
	return *str;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e038      	b.n	8000c26 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8000bb4:	4930      	ldr	r1, [pc, #192]	; (8000c78 <chk_lock+0xd8>)
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d029      	beq.n	8000c1c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000bc8:	492b      	ldr	r1, [pc, #172]	; (8000c78 <chk_lock+0xd8>)
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d11e      	bne.n	8000c20 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8000be2:	4925      	ldr	r1, [pc, #148]	; (8000c78 <chk_lock+0xd8>)
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d110      	bne.n	8000c20 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8000bfe:	491e      	ldr	r1, [pc, #120]	; (8000c78 <chk_lock+0xd8>)
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d102      	bne.n	8000c20 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8000c1a:	e007      	b.n	8000c2c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d9c3      	bls.n	8000bb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d109      	bne.n	8000c46 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <chk_lock+0x9e>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d101      	bne.n	8000c42 <chk_lock+0xa2>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e013      	b.n	8000c6a <chk_lock+0xca>
 8000c42:	2312      	movs	r3, #18
 8000c44:	e011      	b.n	8000c6a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10b      	bne.n	8000c64 <chk_lock+0xc4>
 8000c4c:	490a      	ldr	r1, [pc, #40]	; (8000c78 <chk_lock+0xd8>)
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	330a      	adds	r3, #10
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c62:	d101      	bne.n	8000c68 <chk_lock+0xc8>
 8000c64:	2310      	movs	r3, #16
 8000c66:	e000      	b.n	8000c6a <chk_lock+0xca>
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200000a0 	.word	0x200000a0

08000c7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e002      	b.n	8000c8e <enq_lock+0x12>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d809      	bhi.n	8000ca8 <enq_lock+0x2c>
 8000c94:	490a      	ldr	r1, [pc, #40]	; (8000cc0 <enq_lock+0x44>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1ef      	bne.n	8000c88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	200000a0 	.word	0x200000a0

08000cc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e02b      	b.n	8000d2c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8000cd4:	4956      	ldr	r1, [pc, #344]	; (8000e30 <inc_lock+0x16c>)
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d11b      	bne.n	8000d26 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8000cee:	4950      	ldr	r1, [pc, #320]	; (8000e30 <inc_lock+0x16c>)
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d10d      	bne.n	8000d26 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8000d0a:	4949      	ldr	r1, [pc, #292]	; (8000e30 <inc_lock+0x16c>)
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	3308      	adds	r3, #8
 8000d1a:	881a      	ldrh	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d006      	beq.n	8000d34 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d9d0      	bls.n	8000cd4 <inc_lock+0x10>
 8000d32:	e000      	b.n	8000d36 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8000d34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d145      	bne.n	8000dc8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e002      	b.n	8000d48 <inc_lock+0x84>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d809      	bhi.n	8000d62 <inc_lock+0x9e>
 8000d4e:	4938      	ldr	r1, [pc, #224]	; (8000e30 <inc_lock+0x16c>)
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1ef      	bne.n	8000d42 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d101      	bne.n	8000d6c <inc_lock+0xa8>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e05a      	b.n	8000e22 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8000d72:	482f      	ldr	r0, [pc, #188]	; (8000e30 <inc_lock+0x16c>)
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4403      	add	r3, r0
 8000d80:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8000d88:	4829      	ldr	r0, [pc, #164]	; (8000e30 <inc_lock+0x16c>)
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4403      	add	r3, r0
 8000d96:	3304      	adds	r3, #4
 8000d98:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8000da0:	4923      	ldr	r1, [pc, #140]	; (8000e30 <inc_lock+0x16c>)
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	3308      	adds	r3, #8
 8000db0:	4602      	mov	r2, r0
 8000db2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8000db4:	491e      	ldr	r1, [pc, #120]	; (8000e30 <inc_lock+0x16c>)
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	330a      	adds	r3, #10
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00c      	beq.n	8000de8 <inc_lock+0x124>
 8000dce:	4918      	ldr	r1, [pc, #96]	; (8000e30 <inc_lock+0x16c>)
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	330a      	adds	r3, #10
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <inc_lock+0x124>
 8000de4:	2300      	movs	r3, #0
 8000de6:	e01c      	b.n	8000e22 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10b      	bne.n	8000e06 <inc_lock+0x142>
 8000dee:	4910      	ldr	r1, [pc, #64]	; (8000e30 <inc_lock+0x16c>)
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	330a      	adds	r3, #10
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	b299      	uxth	r1, r3
 8000e04:	e001      	b.n	8000e0a <inc_lock+0x146>
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <inc_lock+0x16c>)
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4403      	add	r3, r0
 8000e18:	330a      	adds	r3, #10
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200000a0 	.word	0x200000a0

08000e34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d82e      	bhi.n	8000ea6 <dec_lock+0x72>
		n = Files[i].ctr;
 8000e48:	491b      	ldr	r1, [pc, #108]	; (8000eb8 <dec_lock+0x84>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	330a      	adds	r3, #10
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e62:	d101      	bne.n	8000e68 <dec_lock+0x34>
 8000e64:	2300      	movs	r3, #0
 8000e66:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <dec_lock+0x40>
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8000e74:	4910      	ldr	r1, [pc, #64]	; (8000eb8 <dec_lock+0x84>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	330a      	adds	r3, #10
 8000e84:	89fa      	ldrh	r2, [r7, #14]
 8000e86:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d108      	bne.n	8000ea0 <dec_lock+0x6c>
 8000e8e:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <dec_lock+0x84>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	737b      	strb	r3, [r7, #13]
 8000ea4:	e001      	b.n	8000eaa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200000a0 	.word	0x200000a0

08000ebc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e016      	b.n	8000ef8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8000eca:	4910      	ldr	r1, [pc, #64]	; (8000f0c <clear_lock+0x50>)
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d108      	bne.n	8000ef2 <clear_lock+0x36>
 8000ee0:	490a      	ldr	r1, [pc, #40]	; (8000f0c <clear_lock+0x50>)
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d9e5      	bls.n	8000eca <clear_lock+0xe>
	}
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200000a0 	.word	0x200000a0

08000f10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d038      	beq.n	8000f98 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000f2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	2301      	movs	r3, #1
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f7ff fd5d 	bl	80009f8 <disk_write>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e026      	b.n	8000f98 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d218      	bcs.n	8000f98 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	e010      	b.n	8000f92 <sync_window+0x82>
					wsect += fs->fsize;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2301      	movs	r3, #1
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f7ff fd36 	bl	80009f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d8eb      	bhi.n	8000f70 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d01b      	beq.n	8000ff4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffa7 	bl	8000f10 <sync_window>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d113      	bne.n	8000ff4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f7ff fcee 	bl	80009b8 <disk_read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff82 	bl	8000f10 <sync_window>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 809b 	bne.w	800114e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800101e:	2b03      	cmp	r3, #3
 8001020:	f040 8088 	bne.w	8001134 <sync_fs+0x136>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 8082 	bne.w	8001134 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fd54 	bl	8000ae6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2255      	movs	r2, #85	; 0x55
 8001042:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	22aa      	movs	r2, #170	; 0xaa
 800104a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2252      	movs	r2, #82	; 0x52
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2252      	movs	r2, #82	; 0x52
 8001058:	705a      	strb	r2, [r3, #1]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2261      	movs	r2, #97	; 0x61
 800105e:	709a      	strb	r2, [r3, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2241      	movs	r2, #65	; 0x41
 8001064:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2272      	movs	r2, #114	; 0x72
 800106a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2272      	movs	r2, #114	; 0x72
 8001072:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2241      	movs	r2, #65	; 0x41
 800107a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2261      	movs	r2, #97	; 0x61
 8001082:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800108c:	b2da      	uxtb	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800109a:	b29b      	uxth	r3, r3
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80010be:	0e1b      	lsrs	r3, r3, #24
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80010dc:	b29b      	uxth	r3, r3
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001100:	0e1b      	lsrs	r3, r3, #24
 8001102:	b2da      	uxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8001126:	2301      	movs	r3, #1
 8001128:	f7ff fc66 	bl	80009f8 <disk_write>
			fs->fsi_flag = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc7a 	bl	8000a38 <disk_ioctl>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3b02      	subs	r3, #2
 8001166:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800116e:	3b02      	subs	r3, #2
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d301      	bcc.n	800117a <clust2sect+0x22>
 8001176:	2300      	movs	r3, #0
 8001178:	e00a      	b.n	8001190 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001180:	461a      	mov	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	fb03 f202 	mul.w	r2, r3, r2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800118e:	4413      	add	r3, r2
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d905      	bls.n	80011b8 <get_fat+0x1c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d302      	bcc.n	80011be <get_fat+0x22>
		val = 1;	/* Internal error */
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e0a3      	b.n	8001306 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d068      	beq.n	80012a0 <get_fat+0x104>
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f300 808f 	bgt.w	80012f2 <get_fat+0x156>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d002      	beq.n	80011de <get_fat+0x42>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d040      	beq.n	800125e <get_fat+0xc2>
 80011dc:	e089      	b.n	80012f2 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	0a5b      	lsrs	r3, r3, #9
 80011f6:	4413      	add	r3, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fed1 	bl	8000fa2 <move_window>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d178      	bne.n	80012f8 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60fa      	str	r2, [r7, #12]
 800120c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	0a5b      	lsrs	r3, r3, #9
 8001220:	4413      	add	r3, r2
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff febc 	bl	8000fa2 <move_window>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d165      	bne.n	80012fc <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4313      	orrs	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <get_fat+0xb8>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	e002      	b.n	800125a <get_fat+0xbe>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125a:	617b      	str	r3, [r7, #20]
			break;
 800125c:	e053      	b.n	8001306 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	4413      	add	r3, r2
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fe98 	bl	8000fa2 <move_window>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d143      	bne.n	8001300 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	3301      	adds	r3, #1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	617b      	str	r3, [r7, #20]
			break;
 800129e:	e032      	b.n	8001306 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	09db      	lsrs	r3, r3, #7
 80012aa:	4413      	add	r3, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe77 	bl	8000fa2 <move_window>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d124      	bne.n	8001304 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	3303      	adds	r3, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	061a      	lsls	r2, r3, #24
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	3302      	adds	r3, #2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	4313      	orrs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	3201      	adds	r2, #1
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	0212      	lsls	r2, r2, #8
 80012e2:	4313      	orrs	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012ee:	617b      	str	r3, [r7, #20]
			break;
 80012f0:	e009      	b.n	8001306 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e006      	b.n	8001306 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80012f8:	bf00      	nop
 80012fa:	e004      	b.n	8001306 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80012fc:	bf00      	nop
 80012fe:	e002      	b.n	8001306 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001304:	bf00      	nop
		}
	}

	return val;
 8001306:	697b      	ldr	r3, [r7, #20]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d905      	bls.n	800132e <put_fat+0x1e>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	429a      	cmp	r2, r3
 800132c:	d302      	bcc.n	8001334 <put_fat+0x24>
		res = FR_INT_ERR;
 800132e:	2302      	movs	r3, #2
 8001330:	77fb      	strb	r3, [r7, #31]
 8001332:	e0f6      	b.n	8001522 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800133a:	2b03      	cmp	r3, #3
 800133c:	f000 809e 	beq.w	800147c <put_fat+0x16c>
 8001340:	2b03      	cmp	r3, #3
 8001342:	f300 80e4 	bgt.w	800150e <put_fat+0x1fe>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d002      	beq.n	8001350 <put_fat+0x40>
 800134a:	2b02      	cmp	r3, #2
 800134c:	d06f      	beq.n	800142e <put_fat+0x11e>
 800134e:	e0de      	b.n	800150e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	0a5b      	lsrs	r3, r3, #9
 8001368:	4413      	add	r3, r2
 800136a:	4619      	mov	r1, r3
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fe18 	bl	8000fa2 <move_window>
 8001372:	4603      	mov	r3, r0
 8001374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 80cb 	bne.w	8001514 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	617a      	str	r2, [r7, #20]
 8001384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00d      	beq.n	80013b4 <put_fat+0xa4>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e001      	b.n	80013b8 <put_fat+0xa8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	0a5b      	lsrs	r3, r3, #9
 80013ce:	4413      	add	r3, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff fde5 	bl	8000fa2 <move_window>
 80013d8:	4603      	mov	r3, r0
 80013da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 809a 	bne.w	8001518 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <put_fat+0xf2>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	e00e      	b.n	8001420 <put_fat+0x110>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f023 030f 	bic.w	r3, r3, #15
 800140c:	b25a      	sxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b25b      	sxtb	r3, r3
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b25b      	sxtb	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b25b      	sxtb	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800142c:	e079      	b.n	8001522 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	4413      	add	r3, r2
 800143a:	4619      	mov	r1, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fdb0 	bl	8000fa2 <move_window>
 8001442:	4603      	mov	r3, r0
 8001444:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d167      	bne.n	800151c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	b29b      	uxth	r3, r3
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	3301      	adds	r3, #1
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800147a:	e052      	b.n	8001522 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	09db      	lsrs	r3, r3, #7
 8001486:	4413      	add	r3, r2
 8001488:	4619      	mov	r1, r3
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff fd89 	bl	8000fa2 <move_window>
 8001490:	4603      	mov	r3, r0
 8001492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d142      	bne.n	8001520 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	3303      	adds	r3, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	061a      	lsls	r2, r3, #24
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	3302      	adds	r3, #2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	4313      	orrs	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	3201      	adds	r2, #1
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	0212      	lsls	r2, r2, #8
 80014c2:	4313      	orrs	r3, r2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0c1a      	lsrs	r2, r3, #16
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3302      	adds	r3, #2
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0e1a      	lsrs	r2, r3, #24
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	3303      	adds	r3, #3
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800150c:	e009      	b.n	8001522 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800150e:	2302      	movs	r3, #2
 8001510:	77fb      	strb	r3, [r7, #31]
 8001512:	e006      	b.n	8001522 <put_fat+0x212>
			if (res != FR_OK) break;
 8001514:	bf00      	nop
 8001516:	e004      	b.n	8001522 <put_fat+0x212>
			if (res != FR_OK) break;
 8001518:	bf00      	nop
 800151a:	e002      	b.n	8001522 <put_fat+0x212>
			if (res != FR_OK) break;
 800151c:	bf00      	nop
 800151e:	e000      	b.n	8001522 <put_fat+0x212>
			if (res != FR_OK) break;
 8001520:	bf00      	nop
		}
	}

	return res;
 8001522:	7ffb      	ldrb	r3, [r7, #31]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d905      	bls.n	8001548 <remove_chain+0x1c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d302      	bcc.n	800154e <remove_chain+0x22>
		res = FR_INT_ERR;
 8001548:	2302      	movs	r3, #2
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e043      	b.n	80015d6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001552:	e036      	b.n	80015c2 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe20 	bl	800119c <get_fat>
 800155c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d035      	beq.n	80015d0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <remove_chain+0x44>
 800156a:	2302      	movs	r3, #2
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e032      	b.n	80015d6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001576:	d102      	bne.n	800157e <remove_chain+0x52>
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e02b      	b.n	80015d6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800157e:	2200      	movs	r2, #0
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fec4 	bl	8001310 <put_fat>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d120      	bne.n	80015d4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800159c:	d00f      	beq.n	80015be <remove_chain+0x92>
				fs->free_clust++;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3c2      	bcc.n	8001554 <remove_chain+0x28>
 80015ce:	e002      	b.n	80015d6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80015d4:	bf00      	nop
		}
	}

	return res;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10f      	bne.n	8001610 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80015f6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <create_chain+0x2a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	429a      	cmp	r2, r3
 8001608:	d31c      	bcc.n	8001644 <create_chain+0x64>
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e019      	b.n	8001644 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001610:	6839      	ldr	r1, [r7, #0]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fdc2 	bl	800119c <get_fat>
 8001618:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d801      	bhi.n	8001624 <create_chain+0x44>
 8001620:	2301      	movs	r3, #1
 8001622:	e076      	b.n	8001712 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800162a:	d101      	bne.n	8001630 <create_chain+0x50>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	e070      	b.n	8001712 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d201      	bcs.n	8001640 <create_chain+0x60>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	e068      	b.n	8001712 <create_chain+0x132>
		scl = clst;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	429a      	cmp	r2, r3
 8001658:	d307      	bcc.n	800166a <create_chain+0x8a>
			ncl = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	429a      	cmp	r2, r3
 8001664:	d901      	bls.n	800166a <create_chain+0x8a>
 8001666:	2300      	movs	r3, #0
 8001668:	e053      	b.n	8001712 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd95 	bl	800119c <get_fat>
 8001672:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00e      	beq.n	8001698 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001680:	d002      	beq.n	8001688 <create_chain+0xa8>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <create_chain+0xac>
			return cs;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	e042      	b.n	8001712 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d1d9      	bne.n	8001648 <create_chain+0x68>
 8001694:	2300      	movs	r3, #0
 8001696:	e03c      	b.n	8001712 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8001698:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800169a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800169e:	6979      	ldr	r1, [r7, #20]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe35 	bl	8001310 <put_fat>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <create_chain+0xe4>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe28 	bl	8001310 <put_fat>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11a      	bne.n	8001700 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016dc:	d018      	beq.n	8001710 <create_chain+0x130>
			fs->free_clust--;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80016fe:	e007      	b.n	8001710 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <create_chain+0x12c>
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170a:	e000      	b.n	800170e <create_chain+0x12e>
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8001710:	697b      	ldr	r3, [r7, #20]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800171a:	b480      	push	{r7}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800172a:	3304      	adds	r3, #4
 800172c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	0a5b      	lsrs	r3, r3, #9
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001738:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800173c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001740:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1d1a      	adds	r2, r3, #4
 8001746:	613a      	str	r2, [r7, #16]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <clmt_clust+0x3c>
 8001752:	2300      	movs	r3, #0
 8001754:	e010      	b.n	8001778 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	429a      	cmp	r2, r3
 800175c:	d307      	bcc.n	800176e <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3304      	adds	r3, #4
 800176a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800176c:	e7e9      	b.n	8001742 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800176e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4413      	add	r3, r2
}
 8001778:	4618      	mov	r0, r3
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800179e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d007      	beq.n	80017b6 <dir_sdi+0x32>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d301      	bcc.n	80017ba <dir_sdi+0x36>
		return FR_INT_ERR;
 80017b6:	2302      	movs	r3, #2
 80017b8:	e074      	b.n	80018a4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <dir_sdi+0x56>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d105      	bne.n	80017da <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80017d8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d301      	bcc.n	80017f6 <dir_sdi+0x72>
			return FR_INT_ERR;
 80017f2:	2302      	movs	r3, #2
 80017f4:	e056      	b.n	80018a4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e032      	b.n	800186a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800180a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8001812:	e01e      	b.n	8001852 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800181a:	6979      	ldr	r1, [r7, #20]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fcbd 	bl	800119c <get_fat>
 8001822:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182a:	d101      	bne.n	8001830 <dir_sdi+0xac>
 800182c:	2301      	movs	r3, #1
 800182e:	e039      	b.n	80018a4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d907      	bls.n	8001846 <dir_sdi+0xc2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800183c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d301      	bcc.n	800184a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8001846:	2302      	movs	r3, #2
 8001848:	e02c      	b.n	80018a4 <dir_sdi+0x120>
			idx -= ic;
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d2dc      	bcs.n	8001814 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fc78 	bl	8001158 <clust2sect>
 8001868:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <dir_sdi+0xf8>
 8001878:	2302      	movs	r3, #2
 800187a:	e013      	b.n	80018a4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	091a      	lsrs	r2, r3, #4
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	441a      	add	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001890:	461a      	mov	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	015b      	lsls	r3, r3, #5
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <dir_next+0x26>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <dir_next+0x2a>
		return FR_NO_FILE;
 80018d2:	2304      	movs	r3, #4
 80018d4:	e0dd      	b.n	8001a92 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 80c6 	bne.w	8001a6e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10b      	bne.n	8001912 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001900:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4293      	cmp	r3, r2
 800190a:	f0c0 80b0 	bcc.w	8001a6e <dir_next+0x1c2>
				return FR_NO_FILE;
 800190e:	2304      	movs	r3, #4
 8001910:	e0bf      	b.n	8001a92 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800191c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001920:	3a01      	subs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 80a2 	bne.w	8001a6e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f7ff fc2f 	bl	800119c <get_fat>
 800193e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d801      	bhi.n	800194a <dir_next+0x9e>
 8001946:	2302      	movs	r3, #2
 8001948:	e0a3      	b.n	8001a92 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001950:	d101      	bne.n	8001956 <dir_next+0xaa>
 8001952:	2301      	movs	r3, #1
 8001954:	e09d      	b.n	8001a92 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800195c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	429a      	cmp	r2, r3
 8001964:	d374      	bcc.n	8001a50 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <dir_next+0xc4>
 800196c:	2304      	movs	r3, #4
 800196e:	e090      	b.n	8001a92 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f7ff fe2e 	bl	80015e0 <create_chain>
 8001984:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <dir_next+0xe4>
 800198c:	2307      	movs	r3, #7
 800198e:	e080      	b.n	8001a92 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <dir_next+0xee>
 8001996:	2302      	movs	r3, #2
 8001998:	e07b      	b.n	8001a92 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d101      	bne.n	80019a6 <dir_next+0xfa>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e075      	b.n	8001a92 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff faaf 	bl	8000f10 <sync_window>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <dir_next+0x110>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e06a      	b.n	8001a92 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f88c 	bl	8000ae6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	4610      	mov	r0, r2
 80019de:	f7ff fbbb 	bl	8001158 <clust2sect>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	e01b      	b.n	8001a26 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fa85 	bl	8000f10 <sync_window>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <dir_next+0x164>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e040      	b.n	8001a92 <dir_next+0x1e6>
						dp->fs->winsect++;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a16:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	3301      	adds	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001a30:	461a      	mov	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d3da      	bcc.n	80019ee <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a3e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	1a8a      	subs	r2, r1, r2
 8001a4c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a5e:	6979      	ldr	r1, [r7, #20]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb79 	bl	8001158 <clust2sect>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}

08001a9a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fe6c 	bl	8001784 <dir_sdi>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d131      	bne.n	8001b1a <dir_alloc+0x80>
		n = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7ff fa6a 	bl	8000fa2 <move_window>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11f      	bne.n	8001b18 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2be5      	cmp	r3, #229	; 0xe5
 8001ae2:	d005      	beq.n	8001af0 <dir_alloc+0x56>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d102      	bne.n	8001b04 <dir_alloc+0x6a>
 8001afe:	e00c      	b.n	8001b1a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8001b04:	2101      	movs	r1, #1
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fed0 	bl	80018ac <dir_next>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0d1      	beq.n	8001aba <dir_alloc+0x20>
 8001b16:	e000      	b.n	8001b1a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8001b18:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d101      	bne.n	8001b24 <dir_alloc+0x8a>
 8001b20:	2307      	movs	r3, #7
 8001b22:	73fb      	strb	r3, [r7, #15]
	return res;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	331b      	adds	r3, #27
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	331a      	adds	r3, #26
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d10f      	bne.n	8001b7c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	3315      	adds	r3, #21
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	3314      	adds	r3, #20
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

	return cl;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	331a      	adds	r3, #26
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	331b      	adds	r3, #27
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	0c1a      	lsrs	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3315      	adds	r3, #21
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001be0:	2100      	movs	r1, #0
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fdce 	bl	8001784 <dir_sdi>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <dir_find+0x1e>
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	e03b      	b.n	8001c6e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff f9cc 	bl	8000fa2 <move_window>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d128      	bne.n	8001c66 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c1a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <dir_find+0x56>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	75fb      	strb	r3, [r7, #23]
 8001c2c:	e01e      	b.n	8001c6c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	330b      	adds	r3, #11
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <dir_find+0x7a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001c42:	220b      	movs	r2, #11
 8001c44:	4619      	mov	r1, r3
 8001c46:	6938      	ldr	r0, [r7, #16]
 8001c48:	f7fe ff68 	bl	8000b1c <mem_cmp>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8001c52:	2100      	movs	r1, #0
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fe29 	bl	80018ac <dir_next>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0c8      	beq.n	8001bf6 <dir_find+0x1e>
 8001c64:	e002      	b.n	8001c6c <dir_find+0x94>
		if (res != FR_OK) break;
 8001c66:	bf00      	nop
 8001c68:	e000      	b.n	8001c6c <dir_find+0x94>
			break;
 8001c6a:	bf00      	nop

	return res;
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001c7e:	2101      	movs	r1, #1
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff0a 	bl	8001a9a <dir_alloc>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d126      	bne.n	8001cde <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f7ff f97f 	bl	8000fa2 <move_window>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d117      	bne.n	8001cde <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ff14 	bl	8000ae6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001cca:	220b      	movs	r2, #11
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe feeb 	bl	8000aa8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <create_name+0x18>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b2f      	cmp	r3, #47	; 0x2f
 8001d06:	d0f8      	beq.n	8001cfa <create_name+0x12>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b5c      	cmp	r3, #92	; 0x5c
 8001d0e:	d0f4      	beq.n	8001cfa <create_name+0x12>
	sfn = dp->fn;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001d16:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8001d18:	220b      	movs	r2, #11
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f7fe fee2 	bl	8000ae6 <mem_set>
	si = i = b = 0; ni = 8;
 8001d22:	2300      	movs	r3, #0
 8001d24:	77fb      	strb	r3, [r7, #31]
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	2308      	movs	r3, #8
 8001d30:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	617a      	str	r2, [r7, #20]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8001d40:	7fbb      	ldrb	r3, [r7, #30]
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d953      	bls.n	8001dee <create_name+0x106>
 8001d46:	7fbb      	ldrb	r3, [r7, #30]
 8001d48:	2b2f      	cmp	r3, #47	; 0x2f
 8001d4a:	d050      	beq.n	8001dee <create_name+0x106>
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	2b5c      	cmp	r3, #92	; 0x5c
 8001d50:	d04d      	beq.n	8001dee <create_name+0x106>
		if (c == '.' || i >= ni) {
 8001d52:	7fbb      	ldrb	r3, [r7, #30]
 8001d54:	2b2e      	cmp	r3, #46	; 0x2e
 8001d56:	d003      	beq.n	8001d60 <create_name+0x78>
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d30f      	bcc.n	8001d80 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d102      	bne.n	8001d6c <create_name+0x84>
 8001d66:	7fbb      	ldrb	r3, [r7, #30]
 8001d68:	2b2e      	cmp	r3, #46	; 0x2e
 8001d6a:	d001      	beq.n	8001d70 <create_name+0x88>
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	e073      	b.n	8001e58 <create_name+0x170>
			i = 8; ni = 11;
 8001d70:	2308      	movs	r3, #8
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	230b      	movs	r3, #11
 8001d76:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	77fb      	strb	r3, [r7, #31]
 8001d7e:	e035      	b.n	8001dec <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8001d80:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da08      	bge.n	8001d9a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	f043 0303 	orr.w	r3, r3, #3
 8001d8e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001d90:	7fbb      	ldrb	r3, [r7, #30]
 8001d92:	3b80      	subs	r3, #128	; 0x80
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <create_name+0x178>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001d9a:	7fbb      	ldrb	r3, [r7, #30]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4831      	ldr	r0, [pc, #196]	; (8001e64 <create_name+0x17c>)
 8001da0:	f7fe fee3 	bl	8000b6a <chk_chr>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <create_name+0xc6>
				return FR_INVALID_NAME;
 8001daa:	2306      	movs	r3, #6
 8001dac:	e054      	b.n	8001e58 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001dae:	7fbb      	ldrb	r3, [r7, #30]
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d907      	bls.n	8001dc4 <create_name+0xdc>
 8001db4:	7fbb      	ldrb	r3, [r7, #30]
 8001db6:	2b5a      	cmp	r3, #90	; 0x5a
 8001db8:	d804      	bhi.n	8001dc4 <create_name+0xdc>
				b |= 2;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	77fb      	strb	r3, [r7, #31]
 8001dc2:	e00c      	b.n	8001dde <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8001dc4:	7fbb      	ldrb	r3, [r7, #30]
 8001dc6:	2b60      	cmp	r3, #96	; 0x60
 8001dc8:	d909      	bls.n	8001dde <create_name+0xf6>
 8001dca:	7fbb      	ldrb	r3, [r7, #30]
 8001dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8001dce:	d806      	bhi.n	8001dde <create_name+0xf6>
					b |= 1; c -= 0x20;
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
 8001dd8:	7fbb      	ldrb	r3, [r7, #30]
 8001dda:	3b20      	subs	r3, #32
 8001ddc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	613a      	str	r2, [r7, #16]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	4413      	add	r3, r2
 8001de8:	7fba      	ldrb	r2, [r7, #30]
 8001dea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001dec:	e7a1      	b.n	8001d32 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	441a      	add	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001df8:	7fbb      	ldrb	r3, [r7, #30]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d801      	bhi.n	8001e02 <create_name+0x11a>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e000      	b.n	8001e04 <create_name+0x11c>
 8001e02:	2300      	movs	r3, #0
 8001e04:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <create_name+0x128>
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	e023      	b.n	8001e58 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2be5      	cmp	r3, #229	; 0xe5
 8001e16:	d102      	bne.n	8001e1e <create_name+0x136>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d102      	bne.n	8001e2a <create_name+0x142>
 8001e24:	7ffb      	ldrb	r3, [r7, #31]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d103      	bne.n	8001e3c <create_name+0x154>
 8001e34:	7fbb      	ldrb	r3, [r7, #30]
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001e3c:	7ffb      	ldrb	r3, [r7, #31]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d103      	bne.n	8001e4e <create_name+0x166>
 8001e46:	7fbb      	ldrb	r3, [r7, #30]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	330b      	adds	r3, #11
 8001e52:	7fba      	ldrb	r2, [r7, #30]
 8001e54:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001e56:	2300      	movs	r3, #0
#endif
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	0800e714 	.word	0x0800e714
 8001e64:	0800e58c 	.word	0x0800e58c

08001e68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b2f      	cmp	r3, #47	; 0x2f
 8001e78:	d003      	beq.n	8001e82 <follow_path+0x1a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b5c      	cmp	r3, #92	; 0x5c
 8001e80:	d102      	bne.n	8001e88 <follow_path+0x20>
		path++;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b1f      	cmp	r3, #31
 8001e96:	d80a      	bhi.n	8001eae <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fc72 	bl	8001784 <dir_sdi>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001eac:	e045      	b.n	8001f3a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff18 	bl	8001ce8 <create_name>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d136      	bne.n	8001f30 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe88 	bl	8001bd8 <dir_find>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001ed2:	7adb      	ldrb	r3, [r3, #11]
 8001ed4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d128      	bne.n	8001f34 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d123      	bne.n	8001f34 <follow_path+0xcc>
 8001eec:	2305      	movs	r3, #5
 8001eee:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8001ef0:	e020      	b.n	8001f34 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11d      	bne.n	8001f38 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f02:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	330b      	adds	r3, #11
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8001f12:	2305      	movs	r3, #5
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e010      	b.n	8001f3a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe04 	bl	8001b2e <ld_clust>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001f2e:	e7be      	b.n	8001eae <follow_path+0x46>
			if (res != FR_OK) break;
 8001f30:	bf00      	nop
 8001f32:	e002      	b.n	8001f3a <follow_path+0xd2>
				break;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001f38:	bf00      	nop
		}
	}

	return res;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d031      	beq.n	8001fbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e002      	b.n	8001f68 <get_ldnumber+0x24>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d903      	bls.n	8001f78 <get_ldnumber+0x34>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b3a      	cmp	r3, #58	; 0x3a
 8001f76:	d1f4      	bne.n	8001f62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b3a      	cmp	r3, #58	; 0x3a
 8001f7e:	d11c      	bne.n	8001fba <get_ldnumber+0x76>
			tp = *path;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3b30      	subs	r3, #48	; 0x30
 8001f90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b09      	cmp	r3, #9
 8001f96:	d80e      	bhi.n	8001fb6 <get_ldnumber+0x72>
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10a      	bne.n	8001fb6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <get_ldnumber+0x72>
					vol = (int)i;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	e002      	b.n	8001fc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8001fbe:	693b      	ldr	r3, [r7, #16]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe ffd9 	bl	8000fa2 <move_window>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <check_fs+0x2e>
		return 3;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04a      	b.n	8002090 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002000:	3301      	adds	r3, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <check_fs+0xcc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d001      	beq.n	800201e <check_fs+0x52>
		return 2;
 800201a:	2302      	movs	r3, #2
 800201c:	e038      	b.n	8002090 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3336      	adds	r3, #54	; 0x36
 8002022:	3303      	adds	r3, #3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	061a      	lsls	r2, r3, #24
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3336      	adds	r3, #54	; 0x36
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4313      	orrs	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	3236      	adds	r2, #54	; 0x36
 8002038:	3201      	adds	r2, #1
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	0212      	lsls	r2, r2, #8
 800203e:	4313      	orrs	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002046:	4313      	orrs	r3, r2
 8002048:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800204c:	4a13      	ldr	r2, [pc, #76]	; (800209c <check_fs+0xd0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <check_fs+0x8a>
		return 0;
 8002052:	2300      	movs	r3, #0
 8002054:	e01c      	b.n	8002090 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3352      	adds	r3, #82	; 0x52
 800205a:	3303      	adds	r3, #3
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	061a      	lsls	r2, r3, #24
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3352      	adds	r3, #82	; 0x52
 8002064:	3302      	adds	r3, #2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	4313      	orrs	r3, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	3252      	adds	r2, #82	; 0x52
 8002070:	3201      	adds	r2, #1
 8002072:	7812      	ldrb	r2, [r2, #0]
 8002074:	0212      	lsls	r2, r2, #8
 8002076:	4313      	orrs	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800207e:	4313      	orrs	r3, r2
 8002080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002084:	4a05      	ldr	r2, [pc, #20]	; (800209c <check_fs+0xd0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <check_fs+0xc2>
		return 0;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <check_fs+0xc4>

	return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffffaa55 	.word	0xffffaa55
 800209c:	00544146 	.word	0x00544146

080020a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b096      	sub	sp, #88	; 0x58
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80020b4:	68b8      	ldr	r0, [r7, #8]
 80020b6:	f7ff ff45 	bl	8001f44 <get_ldnumber>
 80020ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80020bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da01      	bge.n	80020c6 <find_volume+0x26>
 80020c2:	230b      	movs	r3, #11
 80020c4:	e2ac      	b.n	8002620 <find_volume+0x580>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80020c6:	4a9e      	ldr	r2, [pc, #632]	; (8002340 <find_volume+0x2a0>)
 80020c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <find_volume+0x3a>
 80020d6:	230c      	movs	r3, #12
 80020d8:	e2a2      	b.n	8002620 <find_volume+0x580>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01e      	beq.n	8002128 <find_volume+0x88>
		myprintf("disk status started");/* If the volume has been mounted */
 80020ea:	4896      	ldr	r0, [pc, #600]	; (8002344 <find_volume+0x2a4>)
 80020ec:	f001 f990 	bl	8003410 <myprintf>
		stat = disk_status(fs->drv);
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fc1e 	bl	8000938 <disk_status>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <find_volume+0x84>
 8002114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8002120:	230a      	movs	r3, #10
 8002122:	e27d      	b.n	8002620 <find_volume+0x580>
			return FR_OK;				/* The file system object is valid */
 8002124:	2300      	movs	r3, #0
 8002126:	e27b      	b.n	8002620 <find_volume+0x580>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002132:	b2da      	uxtb	r2, r3
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fc13 	bl	800096c <disk_initialize>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)
 800214c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <find_volume+0xbc>
//		myprintf("checking init");/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002158:	2303      	movs	r3, #3
 800215a:	e261      	b.n	8002620 <find_volume+0x580>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <find_volume+0xd2>
 8002162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <find_volume+0xd2>
		return FR_WRITE_PROTECTED;
 800216e:	230a      	movs	r3, #10
 8002170:	e256      	b.n	8002620 <find_volume+0x580>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800217a:	f7ff ff27 	bl	8001fcc <check_fs>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002188:	2b01      	cmp	r3, #1
 800218a:	d153      	bne.n	8002234 <find_volume+0x194>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
 8002190:	e028      	b.n	80021e4 <find_volume+0x144>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8002192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800219c:	4413      	add	r3, r2
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	3304      	adds	r3, #4
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d012      	beq.n	80021d0 <find_volume+0x130>
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	330b      	adds	r3, #11
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	330a      	adds	r3, #10
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	4313      	orrs	r3, r2
 80021bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021be:	3209      	adds	r2, #9
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	0212      	lsls	r2, r2, #8
 80021c4:	4313      	orrs	r3, r2
 80021c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c8:	3208      	adds	r2, #8
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	e000      	b.n	80021d2 <find_volume+0x132>
 80021d0:	2200      	movs	r2, #0
 80021d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	3358      	adds	r3, #88	; 0x58
 80021d8:	443b      	add	r3, r7
 80021da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	3301      	adds	r3, #1
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d9d3      	bls.n	8002192 <find_volume+0xf2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80021ea:	2300      	movs	r3, #0
 80021ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80021ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <find_volume+0x15a>
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	3b01      	subs	r3, #1
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80021fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3358      	adds	r3, #88	; 0x58
 8002200:	443b      	add	r3, r7
 8002202:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002206:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <find_volume+0x17a>
 800220e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002212:	f7ff fedb 	bl	8001fcc <check_fs>
 8002216:	4603      	mov	r3, r0
 8002218:	e000      	b.n	800221c <find_volume+0x17c>
 800221a:	2302      	movs	r3, #2
 800221c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <find_volume+0x194>
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	3301      	adds	r3, #1
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
 800222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002230:	2b03      	cmp	r3, #3
 8002232:	d9e2      	bls.n	80021fa <find_volume+0x15a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002238:	2b03      	cmp	r3, #3
 800223a:	d101      	bne.n	8002240 <find_volume+0x1a0>
 800223c:	2301      	movs	r3, #1
 800223e:	e1ef      	b.n	8002620 <find_volume+0x580>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <find_volume+0x1ac>
 8002248:	230d      	movs	r3, #13
 800224a:	e1e9      	b.n	8002620 <find_volume+0x580>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	7b1b      	ldrb	r3, [r3, #12]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	7adb      	ldrb	r3, [r3, #11]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21b      	sxth	r3, r3
 800225e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002262:	d001      	beq.n	8002268 <find_volume+0x1c8>
		return FR_NO_FILESYSTEM;
 8002264:	230d      	movs	r3, #13
 8002266:	e1db      	b.n	8002620 <find_volume+0x580>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	7ddb      	ldrb	r3, [r3, #23]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b21a      	sxth	r2, r3
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	7d9b      	ldrb	r3, [r3, #22]
 8002274:	b21b      	sxth	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b21b      	sxth	r3, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d112      	bne.n	80022aa <find_volume+0x20a>
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800228a:	061a      	lsls	r2, r3, #24
 800228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	4313      	orrs	r3, r2
 8002296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002298:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800229c:	0212      	lsls	r2, r2, #8
 800229e:	4313      	orrs	r3, r2
 80022a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80022a6:	4313      	orrs	r3, r2
 80022a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80022b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b4:	7c1a      	ldrb	r2, [r3, #16]
 80022b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b8:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80022bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022be:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d006      	beq.n	80022d4 <find_volume+0x234>
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d001      	beq.n	80022d4 <find_volume+0x234>
		return FR_NO_FILESYSTEM;
 80022d0:	230d      	movs	r3, #13
 80022d2:	e1a5      	b.n	8002620 <find_volume+0x580>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80022da:	461a      	mov	r2, r3
 80022dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	7b5a      	ldrb	r2, [r3, #13]
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <find_volume+0x26e>
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80022fe:	461a      	mov	r2, r3
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002306:	3b01      	subs	r3, #1
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <find_volume+0x272>
		return FR_NO_FILESYSTEM;
 800230e:	230d      	movs	r3, #13
 8002310:	e186      	b.n	8002620 <find_volume+0x580>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	7c9b      	ldrb	r3, [r3, #18]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	b21a      	sxth	r2, r3
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	7c5b      	ldrb	r3, [r3, #17]
 800231e:	b21b      	sxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b21b      	sxth	r3, r3
 8002324:	b29a      	uxth	r2, r3
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <find_volume+0x2a8>
		return FR_NO_FILESYSTEM;
 800233c:	230d      	movs	r3, #13
 800233e:	e16f      	b.n	8002620 <find_volume+0x580>
 8002340:	20000098 	.word	0x20000098
 8002344:	0800e59c 	.word	0x0800e59c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	7d1b      	ldrb	r3, [r3, #20]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21a      	sxth	r2, r3
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	7cdb      	ldrb	r3, [r3, #19]
 8002354:	b21b      	sxth	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b21b      	sxth	r3, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800235e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002360:	2b00      	cmp	r3, #0
 8002362:	d112      	bne.n	800238a <find_volume+0x2ea>
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800236a:	061a      	lsls	r2, r3, #24
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	4313      	orrs	r3, r2
 8002376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002378:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800237c:	0212      	lsls	r2, r2, #8
 800237e:	4313      	orrs	r3, r2
 8002380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002382:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002386:	4313      	orrs	r3, r2
 8002388:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	7bdb      	ldrb	r3, [r3, #15]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b21a      	sxth	r2, r3
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	7b9b      	ldrb	r3, [r3, #14]
 8002396:	b21b      	sxth	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	b21b      	sxth	r3, r3
 800239c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800239e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <find_volume+0x308>
 80023a4:	230d      	movs	r3, #13
 80023a6:	e13b      	b.n	8002620 <find_volume+0x580>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80023a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	4413      	add	r3, r2
 80023ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80023b4:	0912      	lsrs	r2, r2, #4
 80023b6:	b292      	uxth	r2, r2
 80023b8:	4413      	add	r3, r2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80023bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d201      	bcs.n	80023c8 <find_volume+0x328>
 80023c4:	230d      	movs	r3, #13
 80023c6:	e12b      	b.n	8002620 <find_volume+0x580>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80023c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80023d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <find_volume+0x344>
 80023e0:	230d      	movs	r3, #13
 80023e2:	e11d      	b.n	8002620 <find_volume+0x580>
	fmt = FS_FAT12;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d902      	bls.n	80023fa <find_volume+0x35a>
 80023f4:	2302      	movs	r3, #2
 80023f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002400:	4293      	cmp	r3, r2
 8002402:	d902      	bls.n	800240a <find_volume+0x36a>
 8002404:	2303      	movs	r3, #3
 8002406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	1c9a      	adds	r2, r3, #2
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002418:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800241c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002420:	441a      	add	r2, r3
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8002428:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	441a      	add	r2, r3
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8002434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002438:	2b03      	cmp	r3, #3
 800243a:	d121      	bne.n	8002480 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <find_volume+0x3aa>
 8002446:	230d      	movs	r3, #13
 8002448:	e0ea      	b.n	8002620 <find_volume+0x580>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002450:	061a      	lsls	r2, r3, #24
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	4313      	orrs	r3, r2
 800245c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8002462:	0212      	lsls	r2, r2, #8
 8002464:	4313      	orrs	r3, r2
 8002466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002468:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800246c:	431a      	orrs	r2, r3
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
 800247e:	e025      	b.n	80024cc <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <find_volume+0x3ee>
 800248a:	230d      	movs	r3, #13
 800248c:	e0c8      	b.n	8002620 <find_volume+0x580>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	441a      	add	r2, r3
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800249e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d104      	bne.n	80024b0 <find_volume+0x410>
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	e00c      	b.n	80024ca <find_volume+0x42a>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	085a      	lsrs	r2, r3, #1
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80024ca:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80024d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024d8:	0a5b      	lsrs	r3, r3, #9
 80024da:	429a      	cmp	r2, r3
 80024dc:	d201      	bcs.n	80024e2 <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 80024de:	230d      	movs	r3, #13
 80024e0:	e09e      	b.n	8002620 <find_volume+0x580>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002504:	2b03      	cmp	r3, #3
 8002506:	d177      	bne.n	80025f8 <find_volume+0x558>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b21a      	sxth	r2, r3
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b21b      	sxth	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d16a      	bne.n	80025f8 <find_volume+0x558>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002524:	3301      	adds	r3, #1
 8002526:	4619      	mov	r1, r3
 8002528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800252a:	f7fe fd3a 	bl	8000fa2 <move_window>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d161      	bne.n	80025f8 <find_volume+0x558>
	{
		fs->fsi_flag = 0;
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	b21a      	sxth	r2, r3
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b21b      	sxth	r3, r3
 8002552:	4a35      	ldr	r2, [pc, #212]	; (8002628 <find_volume+0x588>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d14f      	bne.n	80025f8 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002560:	789b      	ldrb	r3, [r3, #2]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	4313      	orrs	r3, r2
 8002566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002568:	7852      	ldrb	r2, [r2, #1]
 800256a:	0212      	lsls	r2, r2, #8
 800256c:	4313      	orrs	r3, r2
 800256e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	4a2d      	ldr	r2, [pc, #180]	; (800262c <find_volume+0x58c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d13e      	bne.n	80025f8 <find_volume+0x558>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8002580:	061a      	lsls	r2, r3, #24
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	4313      	orrs	r3, r2
 800258c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002598:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800259c:	4313      	orrs	r3, r2
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <find_volume+0x590>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d129      	bne.n	80025f8 <find_volume+0x558>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80025aa:	061a      	lsls	r2, r3, #24
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	4313      	orrs	r3, r2
 80025b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80025bc:	0212      	lsls	r2, r2, #8
 80025be:	4313      	orrs	r3, r2
 80025c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80025c6:	431a      	orrs	r2, r3
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80025d4:	061a      	lsls	r2, r3, #24
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	4313      	orrs	r3, r2
 80025e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025e2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ec:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80025f0:	431a      	orrs	r2, r3
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80025fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <find_volume+0x594>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <find_volume+0x594>)
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <find_volume+0x594>)
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8002618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261a:	f7fe fc4f 	bl	8000ebc <clear_lock>
#endif

	return FR_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3758      	adds	r7, #88	; 0x58
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	ffffaa55 	.word	0xffffaa55
 800262c:	41615252 	.word	0x41615252
 8002630:	61417272 	.word	0x61417272
 8002634:	2000009c 	.word	0x2000009c

08002638 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d022      	beq.n	8002690 <validate+0x58>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01d      	beq.n	8002690 <validate+0x58>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800265a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <validate+0x58>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002668:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8002672:	429a      	cmp	r2, r3
 8002674:	d10c      	bne.n	8002690 <validate+0x58>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800267c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe f959 	bl	8000938 <disk_status>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8002690:	2309      	movs	r3, #9
 8002692:	e000      	b.n	8002696 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fc44 	bl	8001f44 <get_ldnumber>
 80026bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da01      	bge.n	80026c8 <f_mount+0x28>
 80026c4:	230b      	movs	r3, #11
 80026c6:	e031      	b.n	800272c <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <f_mount+0x94>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
	myprintf("inside cfs (%i)", cfs);
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	4818      	ldr	r0, [pc, #96]	; (8002738 <f_mount+0x98>)
 80026d6:	f000 fe9b 	bl	8003410 <myprintf>
	if (cfs) {
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <f_mount+0x4e>

#if _FS_LOCK
		clear_lock(cfs);
 80026e0:	69b8      	ldr	r0, [r7, #24]
 80026e2:	f7fe fbeb 	bl	8000ebc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	490d      	ldr	r1, [pc, #52]	; (8002734 <f_mount+0x94>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <f_mount+0x72>
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <f_mount+0x76>
 8002712:	2300      	movs	r3, #0
 8002714:	e00a      	b.n	800272c <f_mount+0x8c>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8002716:	f107 0108 	add.w	r1, r7, #8
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2200      	movs	r2, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fcbd 	bl	80020a0 <find_volume>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000098 	.word	0x20000098
 8002738:	0800e5b0 	.word	0x0800e5b0

0800273c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8002742:	af00      	add	r7, sp, #0
 8002744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002748:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002752:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8002756:	6019      	str	r1, [r3, #0]
 8002758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800275c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002760:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8002762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002766:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <f_open+0x38>
 8002770:	2309      	movs	r3, #9
 8002772:	e257      	b.n	8002c24 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8002774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002778:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8002784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002788:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800278c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002790:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800279c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027a0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	f107 0108 	add.w	r1, r7, #8
 80027b0:	f107 0320 	add.w	r3, r7, #32
 80027b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fc71 	bl	80020a0 <find_volume>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80027c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 8229 	bne.w	8002c20 <f_open+0x4e4>
		INIT_BUF(dj);
 80027ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80027d6:	f107 0214 	add.w	r2, r7, #20
 80027da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80027de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027e2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fb3a 	bl	8001e68 <follow_path>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80027fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80027fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002806:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800280a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11d      	bne.n	800284e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8002812:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800281a:	2306      	movs	r3, #6
 800281c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002820:	e015      	b.n	800284e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002826:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe f9ac 	bl	8000ba0 <chk_lock>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800284e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002852:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80e6 	beq.w	8002a2e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8002862:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002866:	2b00      	cmp	r3, #0
 8002868:	d027      	beq.n	80028ba <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800286a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800286e:	2b04      	cmp	r3, #4
 8002870:	d10e      	bne.n	8002890 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002872:	f7fe fa03 	bl	8000c7c <enq_lock>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <f_open+0x14e>
 800287c:	f107 0320 	add.w	r3, r7, #32
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f9f8 	bl	8001c76 <dir_register>
 8002886:	4603      	mov	r3, r0
 8002888:	e000      	b.n	800288c <f_open+0x150>
 800288a:	2312      	movs	r3, #18
 800288c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002894:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002898:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800289c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80028a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80028ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80028b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80028b8:	e017      	b.n	80028ea <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80028ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80028be:	330b      	adds	r3, #11
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f003 0311 	and.w	r3, r3, #17
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <f_open+0x196>
					res = FR_DENIED;
 80028ca:	2307      	movs	r3, #7
 80028cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80028d0:	e00b      	b.n	80028ea <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80028d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80028d6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <f_open+0x1ae>
						res = FR_EXIST;
 80028e4:	2308      	movs	r3, #8
 80028e6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80028ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 80c1 	bne.w	8002a76 <f_open+0x33a>
 80028f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80028f8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80b7 	beq.w	8002a76 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8002908:	f7fe f8c6 	bl	8000a98 <get_fattime>
 800290c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8002910:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002914:	330e      	adds	r3, #14
 8002916:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002922:	b29b      	uxth	r3, r3
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29a      	uxth	r2, r3
 8002928:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800292c:	330f      	adds	r3, #15
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002936:	0c1a      	lsrs	r2, r3, #16
 8002938:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800293c:	3310      	adds	r3, #16
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002946:	0e1a      	lsrs	r2, r3, #24
 8002948:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800294c:	3311      	adds	r3, #17
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8002952:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002956:	330b      	adds	r3, #11
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800295c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002960:	331c      	adds	r3, #28
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800296a:	331d      	adds	r3, #29
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002974:	331e      	adds	r3, #30
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800297e:	331f      	adds	r3, #31
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8002984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002988:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800298c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002990:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f8ca 	bl	8001b2e <ld_clust>
 800299a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800299e:	2100      	movs	r1, #0
 80029a0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80029a4:	f7ff f8f1 	bl	8001b8a <st_clust>
				dj.fs->wflag = 1;
 80029a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80029ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80029b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80029ba:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d059      	beq.n	8002a76 <f_open+0x33a>
					dw = dj.fs->winsect;
 80029c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80029c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80029ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ce:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80029d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80029d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80029da:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80029de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029e2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fda0 	bl	800152c <remove_chain>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80029f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d13d      	bne.n	8002a76 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80029fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80029fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a06:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8002a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002a14:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a1c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fabe 	bl	8000fa2 <move_window>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002a2c:	e023      	b.n	8002a76 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8002a2e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8002a36:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002a3a:	330b      	adds	r3, #11
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <f_open+0x312>
					res = FR_NO_FILE;
 8002a46:	2304      	movs	r3, #4
 8002a48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8002a4c:	e013      	b.n	8002a76 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8002a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002a52:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <f_open+0x33a>
 8002a60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002a64:	330b      	adds	r3, #11
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <f_open+0x33a>
						res = FR_DENIED;
 8002a70:	2307      	movs	r3, #7
 8002a72:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8002a76:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d153      	bne.n	8002b26 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002a82:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8002a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002a94:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002a98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002a9c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8002aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002aac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ab4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002abc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8002ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002aca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002ad4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002ad8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002adc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f8e3 	bl	8000cc4 <inc_lock>
 8002afe:	4602      	mov	r2, r0
 8002b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b04:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8002b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b12:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <f_open+0x3ea>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8002b26:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d178      	bne.n	8002c20 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8002b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b32:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002b3c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8002b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b4a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8002b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b5a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b62:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe ffe1 	bl	8001b2e <ld_clust>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002b72:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8002b7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002b80:	331f      	adds	r3, #31
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	061a      	lsls	r2, r3, #24
 8002b86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002b8a:	331e      	adds	r3, #30
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002b96:	321d      	adds	r2, #29
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	0212      	lsls	r2, r2, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8002ba2:	321c      	adds	r2, #28
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bac:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8002bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8002bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8002bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bda:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8002be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002bee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002bf6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8002c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002c04:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c0e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8002c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002c16:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8002c20:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	; 0x28
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fcf6 	bl	8002638 <validate>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <f_write+0x2c>
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	e192      	b.n	8002f80 <f_write+0x352>
	if (fp->err)							/* Check error */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8002c6a:	e189      	b.n	8002f80 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e180      	b.n	8002f80 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	f080 8158 	bcs.w	8002f44 <f_write+0x316>
 8002c94:	2300      	movs	r3, #0
 8002c96:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8002c98:	e154      	b.n	8002f44 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8114 	bne.w	8002ed2 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8002cc6:	7dbb      	ldrb	r3, [r7, #22]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d151      	bne.n	8002d70 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d121      	bne.n	8002d28 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fc77 	bl	80015e0 <create_chain>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8002cf4:	e018      	b.n	8002d28 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7fe fd06 	bl	800171a <clmt_clust>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8002d10:	e00a      	b.n	8002d28 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7fe fc5d 	bl	80015e0 <create_chain>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 810f 	beq.w	8002f4e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <f_write+0x114>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e11e      	b.n	8002f80 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d48:	d105      	bne.n	8002d56 <f_write+0x128>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002d52:	2301      	movs	r3, #1
 8002d54:	e114      	b.n	8002f80 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <f_write+0x142>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01d      	beq.n	8002dba <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d84:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002d88:	68f9      	ldr	r1, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002d90:	2301      	movs	r3, #1
 8002d92:	f7fd fe31 	bl	80009f8 <disk_write>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0eb      	b.n	8002f80 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f7fe f9c5 	bl	8001158 <clust2sect>
 8002dce:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <f_write+0x1b4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ce      	b.n	8002f80 <f_write+0x352>
			sect += csect;
 8002de2:	7dbb      	ldrb	r3, [r7, #22]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d048      	beq.n	8002e88 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8002df6:	7dba      	ldrb	r2, [r7, #22]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002e02:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d908      	bls.n	8002e1c <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e10:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002e14:	461a      	mov	r2, r3
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f7fd fde4 	bl	80009f8 <disk_write>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e09e      	b.n	8002f80 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d916      	bls.n	8002e80 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	025b      	lsls	r3, r3, #9
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fe1d 	bl	8000aa8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	623b      	str	r3, [r7, #32]
				continue;
 8002e86:	e047      	b.n	8002f18 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d01a      	beq.n	8002eca <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d212      	bcs.n	8002eca <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	f7fd fd80 	bl	80009b8 <disk_read>
 8002eb8:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e05a      	b.n	8002f80 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ee0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8002ee2:	6a3a      	ldr	r2, [r7, #32]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d901      	bls.n	8002eee <f_write+0x2c0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fdd1 	bl	8000aa8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	441a      	add	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	441a      	add	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f aea7 	bne.w	8002c9a <f_write+0x6c>
 8002f4c:	e000      	b.n	8002f50 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002f4e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d905      	bls.n	8002f6c <f_write+0x33e>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fb51 	bl	8002638 <validate>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 80a8 	bne.w	80030f2 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a0 	beq.w	80030f2 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d019      	beq.n	8002ff4 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fc6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f7fd fd10 	bl	80009f8 <disk_write>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e088      	b.n	80030f4 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8002fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7fd ffcd 	bl	8000fa2 <move_window>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d16f      	bne.n	80030f2 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003018:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	330b      	adds	r3, #11
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	330b      	adds	r3, #11
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	331c      	adds	r3, #28
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003040:	b29b      	uxth	r3, r3
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b29a      	uxth	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	331d      	adds	r3, #29
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003054:	0c1a      	lsrs	r2, r3, #16
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	331e      	adds	r3, #30
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003064:	0e1a      	lsrs	r2, r3, #24
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	331f      	adds	r3, #31
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003074:	4619      	mov	r1, r3
 8003076:	6938      	ldr	r0, [r7, #16]
 8003078:	f7fe fd87 	bl	8001b8a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800307c:	f7fd fd0c 	bl	8000a98 <get_fattime>
 8003080:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3316      	adds	r3, #22
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	b29a      	uxth	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	3317      	adds	r3, #23
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	0c1a      	lsrs	r2, r3, #16
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3318      	adds	r3, #24
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	0e1a      	lsrs	r2, r3, #24
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3319      	adds	r3, #25
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3312      	adds	r3, #18
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	3313      	adds	r3, #19
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd ff88 	bl	8000ffe <sync_fs>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff3f 	bl	8002f88 <f_sync>
 800310a:	4603      	mov	r3, r0
 800310c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fa8f 	bl	8002638 <validate>
 800311a:	4603      	mov	r3, r0
 800311c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10e      	bne.n	8003142 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fe82 	bl	8000e34 <dec_lock>
 8003130:	4603      	mov	r3, r0
 8003132:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08e      	sub	sp, #56	; 0x38
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	2200      	movs	r2, #0
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe ff9d 	bl	80020a0 <find_volume>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8003172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80af 	bne.w	80032da <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003188:	3b02      	subs	r3, #2
 800318a:	429a      	cmp	r2, r3
 800318c:	d805      	bhi.n	800319a <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e09f      	b.n	80032da <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80031a0:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d125      	bne.n	80031f8 <f_getfree+0xac>
				clst = 2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80031b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b2:	69f8      	ldr	r0, [r7, #28]
 80031b4:	f7fd fff2 	bl	800119c <get_fat>
 80031b8:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c0:	d103      	bne.n	80031ca <f_getfree+0x7e>
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80031c8:	e077      	b.n	80032ba <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d103      	bne.n	80031d8 <f_getfree+0x8c>
 80031d0:	2302      	movs	r3, #2
 80031d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80031d6:	e070      	b.n	80032ba <f_getfree+0x16e>
					if (stat == 0) n++;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <f_getfree+0x98>
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	3301      	adds	r3, #1
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3301      	adds	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3dc      	bcc.n	80031b0 <f_getfree+0x64>
 80031f6:	e060      	b.n	80032ba <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d112      	bne.n	800323c <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	62ba      	str	r2, [r7, #40]	; 0x28
 800321c:	4619      	mov	r1, r3
 800321e:	69f8      	ldr	r0, [r7, #28]
 8003220:	f7fd febf 	bl	8000fa2 <move_window>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800322a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800322e:	2b00      	cmp	r3, #0
 8003230:	d142      	bne.n	80032b8 <f_getfree+0x16c>
						p = fs->win.d8;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8003236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800323c:	7efb      	ldrb	r3, [r7, #27]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d115      	bne.n	800326e <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	3301      	adds	r3, #1
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	b21a      	sxth	r2, r3
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b21b      	sxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b21b      	sxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <f_getfree+0x114>
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	3301      	adds	r3, #1
 800325e:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	3302      	adds	r3, #2
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	3b02      	subs	r3, #2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e01d      	b.n	80032aa <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	3303      	adds	r3, #3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	061a      	lsls	r2, r3, #24
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	3302      	adds	r3, #2
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	4313      	orrs	r3, r2
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	3201      	adds	r2, #1
 8003284:	7812      	ldrb	r2, [r2, #0]
 8003286:	0212      	lsls	r2, r2, #8
 8003288:	4313      	orrs	r3, r2
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <f_getfree+0x152>
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	3301      	adds	r3, #1
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	3304      	adds	r3, #4
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	3b04      	subs	r3, #4
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	3b01      	subs	r3, #1
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ac      	bne.n	8003210 <f_getfree+0xc4>
 80032b6:	e000      	b.n	80032ba <f_getfree+0x16e>
						if (res != FR_OK) break;
 80032b8:	bf00      	nop
			}
			fs->free_clust = n;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d8:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80032da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3738      	adds	r7, #56	; 0x38
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003300:	7a5b      	ldrb	r3, [r3, #9]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d831      	bhi.n	800336c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <FATFS_LinkDriverEx+0x94>)
 800330a:	7a5b      	ldrb	r3, [r3, #9]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003318:	7a5b      	ldrb	r3, [r3, #9]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <FATFS_LinkDriverEx+0x94>)
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003328:	7a5b      	ldrb	r3, [r3, #9]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003330:	4413      	add	r3, r2
 8003332:	79fa      	ldrb	r2, [r7, #7]
 8003334:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003338:	7a5b      	ldrb	r3, [r3, #9]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	b2d1      	uxtb	r1, r2
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <FATFS_LinkDriverEx+0x94>)
 8003342:	7251      	strb	r1, [r2, #9]
 8003344:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003346:	7dbb      	ldrb	r3, [r7, #22]
 8003348:	3330      	adds	r3, #48	; 0x30
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3301      	adds	r3, #1
 8003354:	223a      	movs	r2, #58	; 0x3a
 8003356:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3302      	adds	r3, #2
 800335c:	222f      	movs	r2, #47	; 0x2f
 800335e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3303      	adds	r3, #3
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
}
 800336e:	4618      	mov	r0, r3
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	200000b8 	.word	0x200000b8

08003380 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffaa 	bl	80032e8 <FATFS_LinkDriverEx>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80033aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033ae:	4909      	ldr	r1, [pc, #36]	; (80033d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80033ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033c4:	68fb      	ldr	r3, [r7, #12]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	46020c00 	.word	0x46020c00

080033d8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <LL_APB1_GRP2_EnableClock+0x34>)
 80033e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <LL_APB1_GRP2_EnableClock+0x34>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <LL_APB1_GRP2_EnableClock+0x34>)
 80033f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	46020c00 	.word	0x46020c00

08003410 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...){
 8003410:	b40f      	push	{r0, r1, r2, r3}
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;

	va_start(args, fmt);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003426:	480b      	ldr	r0, [pc, #44]	; (8003454 <myprintf+0x44>)
 8003428:	f00a fbea 	bl	800dc00 <vsniprintf>
	va_end(args);

	int len= strlen(buffer);
 800342c:	4809      	ldr	r0, [pc, #36]	; (8003454 <myprintf+0x44>)
 800342e:	f7fc ff2f 	bl	8000290 <strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	b29a      	uxth	r2, r3
 800343a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343e:	4905      	ldr	r1, [pc, #20]	; (8003454 <myprintf+0x44>)
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <myprintf+0x48>)
 8003442:	f009 fa73 	bl	800c92c <HAL_UART_Transmit>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003450:	b004      	add	sp, #16
 8003452:	4770      	bx	lr
 8003454:	20000678 	.word	0x20000678
 8003458:	200001e0 	.word	0x200001e0

0800345c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	f5ad 3d44 	sub.w	sp, sp, #200704	; 0x31000
 8003462:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint16_t count=0;
 8003468:	2300      	movs	r3, #0
 800346a:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800346e:	f202 3206 	addw	r2, r2, #774	; 0x306
 8003472:	8013      	strh	r3, [r2, #0]
	  uint32_t readBuf[50000];
	  char filename[256];
	  uint16_t raw;
    char msg[10];
    uint8_t header_size=8;
 8003474:	2308      	movs	r3, #8
 8003476:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800347a:	f202 22ff 	addw	r2, r2, #767	; 0x2ff
 800347e:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003480:	f001 fcf4 	bl	8004e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003484:	f000 f9ca 	bl	800381c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8003488:	f000 fa29 	bl	80038de <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800348c:	f000 fbd8 	bl	8003c40 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003490:	f000 fa34 	bl	80038fc <MX_ADC1_Init>
  MX_ICACHE_Init();
 8003494:	f000 faa2 	bl	80039dc <MX_ICACHE_Init>
  MX_UCPD1_Init();
 8003498:	f000 fb28 	bl	8003aec <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 800349c:	f000 fb5c 	bl	8003b58 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80034a0:	f000 fba6 	bl	8003bf0 <MX_USB_OTG_HS_HCD_Init>
  MX_MEMORYMAP_Init();
 80034a4:	f000 faad 	bl	8003a02 <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80034a8:	f000 fab2 	bl	8003a10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_FATFS_Init();
 80034ac:	f7fd fae2 	bl	8000a74 <MX_FATFS_Init>
  myprintf("\r\n~ SD card demo ~\r \n\r\n");
 80034b0:	48c8      	ldr	r0, [pc, #800]	; (80037d4 <main+0x378>)
 80034b2:	f7ff ffad 	bl	8003410 <myprintf>
  HAL_Delay(1000);
 80034b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034ba:	f001 fd5b 	bl	8004f74 <HAL_Delay>

  FATFS FatFs;
  FIL fil;
  FRESULT fres;

  fres= f_mount(&FatFs, "/", 1);
 80034be:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80034c2:	3b9c      	subs	r3, #156	; 0x9c
 80034c4:	2201      	movs	r2, #1
 80034c6:	49c4      	ldr	r1, [pc, #784]	; (80037d8 <main+0x37c>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff f8e9 	bl	80026a0 <f_mount>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 80034d4:	f202 22fe 	addw	r2, r2, #766	; 0x2fe
 80034d8:	7013      	strb	r3, [r2, #0]
  if(fres!= FR_OK)
 80034da:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80034de:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <main+0xa0>
  {
	  myprintf("f_mount error (%i) \r\n", fres);
 80034e8:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80034ec:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	48b9      	ldr	r0, [pc, #740]	; (80037dc <main+0x380>)
 80034f6:	f7ff ff8b 	bl	8003410 <myprintf>
	  while(1);
 80034fa:	e7fe      	b.n	80034fa <main+0x9e>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres= f_getfree("", &free_clusters, &getFreeFs);
 80034fc:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8003500:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8003504:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003508:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800350c:	4619      	mov	r1, r3
 800350e:	48b4      	ldr	r0, [pc, #720]	; (80037e0 <main+0x384>)
 8003510:	f7ff fe1c 	bl	800314c <f_getfree>
 8003514:	4603      	mov	r3, r0
 8003516:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800351a:	f202 22fe 	addw	r2, r2, #766	; 0x2fe
 800351e:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK) {
 8003520:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003524:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <main+0xe6>
	  myprintf("f_getfree error (%i)\r\n",fres);
 800352e:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003532:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	48aa      	ldr	r0, [pc, #680]	; (80037e4 <main+0x388>)
 800353c:	f7ff ff68 	bl	8003410 <myprintf>
	  while(1);
 8003540:	e7fe      	b.n	8003540 <main+0xe4>
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8003542:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003546:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003550:	3b02      	subs	r3, #2
 8003552:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8003556:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 8003568:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
 800356c:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 800356e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003572:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800357c:	461a      	mov	r2, r3
 800357e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003582:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 8003590:	f502 723d 	add.w	r2, r2, #756	; 0x2f4
 8003594:	6013      	str	r3, [r2, #0]

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8003596:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 800359a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0859      	lsrs	r1, r3, #1
 80035a2:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80035a6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	461a      	mov	r2, r3
 80035b0:	488d      	ldr	r0, [pc, #564]	; (80037e8 <main+0x38c>)
 80035b2:	f7ff ff2d 	bl	8003410 <myprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80035b6:	2200      	movs	r2, #0
 80035b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035bc:	488b      	ldr	r0, [pc, #556]	; (80037ec <main+0x390>)
 80035be:	f003 fee3 	bl	8007388 <HAL_GPIO_WritePin>
	  sprintf(msg, "%hu\r\n", raw);
 80035c2:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80035c6:	f203 23f2 	addw	r3, r3, #754	; 0x2f2
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80035d0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80035d4:	4986      	ldr	r1, [pc, #536]	; (80037f0 <main+0x394>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00a fac6 	bl	800db68 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80035dc:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80035e0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc fe53 	bl	8000290 <strlen>
 80035ea:	4603      	mov	r3, r0
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 80035f2:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fa:	487e      	ldr	r0, [pc, #504]	; (80037f4 <main+0x398>)
 80035fc:	f009 f996 	bl	800c92c <HAL_UART_Transmit>
	  HAL_Delay(1);
 8003600:	2001      	movs	r0, #1
 8003602:	f001 fcb7 	bl	8004f74 <HAL_Delay>
    
    if (count<20) {
 8003606:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 800360a:	f203 3306 	addw	r3, r3, #774	; 0x306
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	2b13      	cmp	r3, #19
 8003612:	d8d0      	bhi.n	80035b6 <main+0x15a>
	  sprintf(filename, "r_%05d.wav",  count++);
 8003614:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003618:	f203 3306 	addw	r3, r3, #774	; 0x306
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	f507 3144 	add.w	r1, r7, #200704	; 0x31000
 8003624:	f201 3106 	addw	r1, r1, #774	; 0x306
 8003628:	800a      	strh	r2, [r1, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8003630:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003634:	4970      	ldr	r1, [pc, #448]	; (80037f8 <main+0x39c>)
 8003636:	4618      	mov	r0, r3
 8003638:	f00a fa96 	bl	800db68 <siprintf>
	  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800363c:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8003640:	f5a1 7118 	sub.w	r1, r1, #608	; 0x260
 8003644:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003648:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800364c:	221a      	movs	r2, #26
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f874 	bl	800273c <f_open>
 8003654:	4603      	mov	r3, r0
 8003656:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800365a:	f202 22fe 	addw	r2, r2, #766	; 0x2fe
 800365e:	7013      	strb	r3, [r2, #0]

	  if (fres == FR_OK) {
 8003660:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003664:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <main+0x224>
		  myprintf("I was able to open %s for writing\r\n",filename);
 800366e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8003672:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003676:	4619      	mov	r1, r3
 8003678:	4860      	ldr	r0, [pc, #384]	; (80037fc <main+0x3a0>)
 800367a:	f7ff fec9 	bl	8003410 <myprintf>
 800367e:	e008      	b.n	8003692 <main+0x236>
	  } else {
		  myprintf("f_open error (%i)\r\n", fres);
 8003680:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003684:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	485c      	ldr	r0, [pc, #368]	; (8003800 <main+0x3a4>)
 800368e:	f7ff febf 	bl	8003410 <myprintf>
	  }

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	485b      	ldr	r0, [pc, #364]	; (8003804 <main+0x3a8>)
 8003696:	f003 fe8f 	bl	80073b8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800369a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369e:	f001 fc69 	bl	8004f74 <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 80036a2:	4859      	ldr	r0, [pc, #356]	; (8003808 <main+0x3ac>)
 80036a4:	f002 facc 	bl	8005c40 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ac:	4856      	ldr	r0, [pc, #344]	; (8003808 <main+0x3ac>)
 80036ae:	f002 fba5 	bl	8005dfc <HAL_ADC_PollForConversion>

	  wav_header header = create_PCM_SC_header_correct(50000);
 80036b2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80036b6:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80036ba:	f24c 3150 	movw	r1, #50000	; 0xc350
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fb87 	bl	8004dd2 <create_PCM_SC_header_correct>
	  UINT bw;
	  fres = f_write(&fil, ((char*)&header), 8, &bw);
 80036c4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80036c8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80036cc:	f507 7142 	add.w	r1, r7, #776	; 0x308
 80036d0:	f5a1 7141 	sub.w	r1, r1, #772	; 0x304
 80036d4:	f507 7042 	add.w	r0, r7, #776	; 0x308
 80036d8:	f5a0 7032 	sub.w	r0, r0, #712	; 0x2c8
 80036dc:	2208      	movs	r2, #8
 80036de:	f7ff faa6 	bl	8002c2e <f_write>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 80036e8:	f202 22fe 	addw	r2, r2, #766	; 0x2fe
 80036ec:	7013      	strb	r3, [r2, #0]
	  
	  clock_t start = clock();
 80036ee:	f00a fa9d 	bl	800dc2c <clock>
 80036f2:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80036f6:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80036fa:	6018      	str	r0, [r3, #0]
	  for (int i=0; i<50000; i++) { // Used to be i+=2. Changed it to i+=1. Also increased size from 5 to 25000, changed buffer to 32 bit
 80036fc:	2300      	movs	r3, #0
 80036fe:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 8003702:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e00a      	b.n	8003720 <main+0x2c4>
 800370a:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 800370e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800371a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003724:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800372e:	4293      	cmp	r3, r2
 8003730:	ddeb      	ble.n	800370a <main+0x2ae>
		endian_swap(&(readBuf[i]), HAL_ADC_GetValue(&hadc1));
	  }
	  clock_t end = clock();
 8003732:	f00a fa7b 	bl	800dc2c <clock>
 8003736:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 800373a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800373e:	6018      	str	r0, [r3, #0]

	  myprintf("Record time: %d ms\n", (double) (end - start));
 8003740:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003744:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 800374e:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc fee4 	bl	8000524 <__aeabi_ui2d>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	482a      	ldr	r0, [pc, #168]	; (800380c <main+0x3b0>)
 8003762:	f7ff fe55 	bl	8003410 <myprintf>

	  fres = f_write(&fil,&readBuf, 50000 * 4, &bytesWrote);
 8003766:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800376a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800376e:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8003772:	f5a1 71b0 	sub.w	r1, r1, #352	; 0x160
 8003776:	f507 7042 	add.w	r0, r7, #776	; 0x308
 800377a:	f5a0 7032 	sub.w	r0, r0, #712	; 0x2c8
 800377e:	4a24      	ldr	r2, [pc, #144]	; (8003810 <main+0x3b4>)
 8003780:	f7ff fa55 	bl	8002c2e <f_write>
 8003784:	4603      	mov	r3, r0
 8003786:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 800378a:	f202 22fe 	addw	r2, r2, #766	; 0x2fe
 800378e:	7013      	strb	r3, [r2, #0]
	  count++;
 8003790:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 8003794:	f203 3306 	addw	r3, r3, #774	; 0x306
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	f507 3244 	add.w	r2, r7, #200704	; 0x31000
 80037a0:	f202 3206 	addw	r2, r2, #774	; 0x306
 80037a4:	8013      	strh	r3, [r2, #0]

	  if(fres == FR_OK) {
 80037a6:	f507 3344 	add.w	r3, r7, #200704	; 0x31000
 80037aa:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <main+0x360>
			myprintf("written to file");
 80037b4:	4817      	ldr	r0, [pc, #92]	; (8003814 <main+0x3b8>)
 80037b6:	f7ff fe2b 	bl	8003410 <myprintf>
 80037ba:	e002      	b.n	80037c2 <main+0x366>
	  } else {
			myprintf("f_write error (%i)\r\n");
 80037bc:	4816      	ldr	r0, [pc, #88]	; (8003818 <main+0x3bc>)
 80037be:	f7ff fe27 	bl	8003410 <myprintf>
	  }

	  f_close(&fil);
 80037c2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80037c6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fc96 	bl	80030fc <f_close>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80037d0:	e6f1      	b.n	80035b6 <main+0x15a>
 80037d2:	bf00      	nop
 80037d4:	0800e5f4 	.word	0x0800e5f4
 80037d8:	0800e60c 	.word	0x0800e60c
 80037dc:	0800e610 	.word	0x0800e610
 80037e0:	0800e628 	.word	0x0800e628
 80037e4:	0800e62c 	.word	0x0800e62c
 80037e8:	0800e644 	.word	0x0800e644
 80037ec:	42020000 	.word	0x42020000
 80037f0:	0800e68c 	.word	0x0800e68c
 80037f4:	200001e0 	.word	0x200001e0
 80037f8:	0800e694 	.word	0x0800e694
 80037fc:	0800e6a0 	.word	0x0800e6a0
 8003800:	0800e6c4 	.word	0x0800e6c4
 8003804:	42020400 	.word	0x42020400
 8003808:	200000c4 	.word	0x200000c4
 800380c:	0800e6d8 	.word	0x0800e6d8
 8003810:	00030d40 	.word	0x00030d40
 8003814:	0800e6ec 	.word	0x0800e6ec
 8003818:	0800e6fc 	.word	0x0800e6fc

0800381c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b09e      	sub	sp, #120	; 0x78
 8003820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	2260      	movs	r2, #96	; 0x60
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f00a f9f6 	bl	800dc1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003830:	463b      	mov	r3, r7
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8003840:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003844:	f003 fe58 	bl	80074f8 <HAL_PWREx_ControlVoltageScaling>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800384e:	f000 fad5 	bl	8003dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8003852:	2312      	movs	r3, #18
 8003854:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800385c:	2310      	movs	r3, #16
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003860:	2301      	movs	r3, #1
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003864:	2310      	movs	r3, #16
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8003868:	2300      	movs	r3, #0
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800386c:	2302      	movs	r3, #2
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003870:	2301      	movs	r3, #1
 8003872:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8003874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800387a:	2303      	movs	r3, #3
 800387c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800387e:	2308      	movs	r3, #8
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8003882:	2308      	movs	r3, #8
 8003884:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003886:	2302      	movs	r3, #2
 8003888:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800388a:	2302      	movs	r3, #2
 800388c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800388e:	230c      	movs	r3, #12
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003896:	f107 0318 	add.w	r3, r7, #24
 800389a:	4618      	mov	r0, r3
 800389c:	f003 ff56 	bl	800774c <HAL_RCC_OscConfig>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80038a6:	f000 faa9 	bl	8003dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038aa:	231f      	movs	r3, #31
 80038ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038c2:	463b      	mov	r3, r7
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fe1c 	bl	8008504 <HAL_RCC_ClockConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80038d2:	f000 fa93 	bl	8003dfc <Error_Handler>
  }
}
 80038d6:	bf00      	nop
 80038d8:	3778      	adds	r7, #120	; 0x78
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80038e2:	f003 fef5 	bl	80076d0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80038e6:	2002      	movs	r0, #2
 80038e8:	f003 fe92 	bl	8007610 <HAL_PWREx_ConfigSupply>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80038f2:	f000 fa83 	bl	8003dfc <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003902:	463b      	mov	r3, r7
 8003904:	2220      	movs	r2, #32
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f00a f987 	bl	800dc1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003910:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <MX_ADC1_Init+0xd8>)
 8003912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003914:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800391a:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003934:	2204      	movs	r2, #4
 8003936:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800393a:	2200      	movs	r2, #0
 800393c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003948:	2201      	movs	r2, #1
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800394e:	2200      	movs	r2, #0
 8003950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800395c:	2200      	movs	r2, #0
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800396a:	2200      	movs	r2, #0
 800396c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <MX_ADC1_Init+0xd4>)
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003988:	4811      	ldr	r0, [pc, #68]	; (80039d0 <MX_ADC1_Init+0xd4>)
 800398a:	f001 fe71 	bl	8005670 <HAL_ADC_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8003994:	f000 fa32 	bl	8003dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_ADC1_Init+0xdc>)
 800399a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800399c:	2306      	movs	r3, #6
 800399e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039aa:	2304      	movs	r3, #4
 80039ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039b2:	463b      	mov	r3, r7
 80039b4:	4619      	mov	r1, r3
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <MX_ADC1_Init+0xd4>)
 80039b8:	f002 fb72 	bl	80060a0 <HAL_ADC_ConfigChannel>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80039c2:	f000 fa1b 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200000c4 	.word	0x200000c4
 80039d4:	42028000 	.word	0x42028000
 80039d8:	0c000008 	.word	0x0c000008

080039dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80039e0:	2000      	movs	r0, #0
 80039e2:	f003 fd59 	bl	8007498 <HAL_ICACHE_ConfigAssociativityMode>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80039ec:	f000 fa06 	bl	8003dfc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80039f0:	f003 fd72 	bl	80074d8 <HAL_ICACHE_Enable>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80039fa:	f000 f9ff 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a20:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a22:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <MX_SPI1_Init+0xd8>)
 8003a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a36:	2207      	movs	r2, #7
 8003a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a50:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a6a:	2207      	movs	r2, #7
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003a86:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003aaa:	480e      	ldr	r0, [pc, #56]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003aac:	f008 f852 	bl	800bb54 <HAL_SPI_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8003ab6:	f000 f9a1 	bl	8003dfc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003abe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_SPI1_Init+0xd4>)
 8003ace:	f008 fe9c 	bl	800c80a <HAL_SPIEx_SetConfigAutonomousMode>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8003ad8:	f000 f990 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000150 	.word	0x20000150
 8003ae8:	40013000 	.word	0x40013000

08003aec <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af2:	463b      	mov	r3, r7
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
 8003b00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003b02:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b06:	f7ff fc67 	bl	80033d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f7ff fc48 	bl	80033a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7ff fc45 	bl	80033a0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b24:	463b      	mov	r3, r7
 8003b26:	4619      	mov	r1, r3
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <MX_UCPD1_Init+0x64>)
 8003b2a:	f009 fda2 	bl	800d672 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b34:	2303      	movs	r3, #3
 8003b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4804      	ldr	r0, [pc, #16]	; (8003b54 <MX_UCPD1_Init+0x68>)
 8003b42:	f009 fd96 	bl	800d672 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	42020400 	.word	0x42020400
 8003b54:	42020000 	.word	0x42020000

08003b58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b5e:	4a23      	ldr	r2, [pc, #140]	; (8003bec <MX_USART1_UART_Init+0x94>)
 8003b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b62:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b7e:	220c      	movs	r2, #12
 8003b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ba0:	4811      	ldr	r0, [pc, #68]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003ba2:	f008 fe73 	bl	800c88c <HAL_UART_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003bac:	f000 f926 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003bb4:	f009 fb48 	bl	800d248 <HAL_UARTEx_SetTxFifoThreshold>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003bbe:	f000 f91d 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4808      	ldr	r0, [pc, #32]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003bc6:	f009 fb7d 	bl	800d2c4 <HAL_UARTEx_SetRxFifoThreshold>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003bd0:	f000 f914 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003bd4:	4804      	ldr	r0, [pc, #16]	; (8003be8 <MX_USART1_UART_Init+0x90>)
 8003bd6:	f009 fafe 	bl	800d1d6 <HAL_UARTEx_DisableFifoMode>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003be0:	f000 f90c 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200001e0 	.word	0x200001e0
 8003bec:	40013800 	.word	0x40013800

08003bf0 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003bf6:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c0e:	2203      	movs	r2, #3
 8003c10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8003c24:	4804      	ldr	r0, [pc, #16]	; (8003c38 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8003c26:	f003 fbe1 	bl	80073ec <HAL_HCD_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8003c30:	f000 f8e4 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000274 	.word	0x20000274
 8003c3c:	42040000 	.word	0x42040000

08003c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c46:	f107 031c 	add.w	r3, r7, #28
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	4a61      	ldr	r2, [pc, #388]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	4b54      	ldr	r3, [pc, #336]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb6:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cce:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd4:	4a43      	ldr	r2, [pc, #268]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cd6:	f043 0308 	orr.w	r3, r3, #8
 8003cda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cec:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <MX_GPIO_Init+0x1a4>)
 8003cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d10:	4835      	ldr	r0, [pc, #212]	; (8003de8 <MX_GPIO_Init+0x1a8>)
 8003d12:	f003 fb39 	bl	8007388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2104      	movs	r1, #4
 8003d1a:	4834      	ldr	r0, [pc, #208]	; (8003dec <MX_GPIO_Init+0x1ac>)
 8003d1c:	f003 fb34 	bl	8007388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003d20:	2200      	movs	r2, #0
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	4832      	ldr	r0, [pc, #200]	; (8003df0 <MX_GPIO_Init+0x1b0>)
 8003d26:	f003 fb2f 	bl	8007388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	21a0      	movs	r1, #160	; 0xa0
 8003d2e:	4831      	ldr	r0, [pc, #196]	; (8003df4 <MX_GPIO_Init+0x1b4>)
 8003d30:	f003 fb2a 	bl	8007388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <MX_GPIO_Init+0x1b8>)
 8003d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	4619      	mov	r1, r3
 8003d48:	4829      	ldr	r0, [pc, #164]	; (8003df0 <MX_GPIO_Init+0x1b0>)
 8003d4a:	f003 f945 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	4619      	mov	r1, r3
 8003d62:	4824      	ldr	r0, [pc, #144]	; (8003df4 <MX_GPIO_Init+0x1b4>)
 8003d64:	f003 f938 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4819      	ldr	r0, [pc, #100]	; (8003de8 <MX_GPIO_Init+0x1a8>)
 8003d82:	f003 f929 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003d86:	2304      	movs	r3, #4
 8003d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 031c 	add.w	r3, r7, #28
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <MX_GPIO_Init+0x1ac>)
 8003d9e:	f003 f91b 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da6:	2301      	movs	r3, #1
 8003da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	2300      	movs	r3, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	4619      	mov	r1, r3
 8003db8:	480d      	ldr	r0, [pc, #52]	; (8003df0 <MX_GPIO_Init+0x1b0>)
 8003dba:	f003 f90d 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4807      	ldr	r0, [pc, #28]	; (8003df4 <MX_GPIO_Init+0x1b4>)
 8003dd6:	f003 f8ff 	bl	8006fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dda:	bf00      	nop
 8003ddc:	3730      	adds	r7, #48	; 0x30
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	46020c00 	.word	0x46020c00
 8003de8:	42020c00 	.word	0x42020c00
 8003dec:	42021800 	.word	0x42021800
 8003df0:	42020800 	.word	0x42020800
 8003df4:	42020400 	.word	0x42020400
 8003df8:	10110000 	.word	0x10110000

08003dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
}
 8003e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <Error_Handler+0x8>
	...

08003e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_MspInit+0x30>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_MspInit+0x30>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_MspInit+0x30>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8003e2c:	f003 fc60 	bl	80076f0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	46020c00 	.word	0x46020c00

08003e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b0c0      	sub	sp, #256	; 0x100
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	22d8      	movs	r2, #216	; 0xd8
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f009 fedd 	bl	800dc1c <memset>
  if(hadc->Instance==ADC1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <HAL_ADC_MspInit+0xbc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d140      	bne.n	8003eee <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003e6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8003e78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e80:	f107 0310 	add.w	r3, r7, #16
 8003e84:	4618      	mov	r0, r3
 8003e86:	f004 ff0d 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8003e90:	f7ff ffb4 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ea0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ea4:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <HAL_ADC_MspInit+0xc0>)
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4805      	ldr	r0, [pc, #20]	; (8003f00 <HAL_ADC_MspInit+0xc4>)
 8003eea:	f003 f875 	bl	8006fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003eee:	bf00      	nop
 8003ef0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	42028000 	.word	0x42028000
 8003efc:	46020c00 	.word	0x46020c00
 8003f00:	42020800 	.word	0x42020800

08003f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0c0      	sub	sp, #256	; 0x100
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f1c:	f107 0310 	add.w	r3, r7, #16
 8003f20:	22d8      	movs	r2, #216	; 0xd8
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f009 fe79 	bl	800dc1c <memset>
  if(hspi->Instance==SPI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_SPI_MspInit+0xc8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d146      	bne.n	8003fc2 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003f34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 fea9 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003f58:	f7ff ff50 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_SPI_MspInit+0xcc>)
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f98:	23e0      	movs	r3, #224	; 0xe0
 8003f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fb0:	2305      	movs	r3, #5
 8003fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <HAL_SPI_MspInit+0xd0>)
 8003fbe:	f003 f80b 	bl	8006fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fc2:	bf00      	nop
 8003fc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40013000 	.word	0x40013000
 8003fd0:	46020c00 	.word	0x46020c00
 8003fd4:	42020000 	.word	0x42020000

08003fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b0c0      	sub	sp, #256	; 0x100
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	22d8      	movs	r2, #216	; 0xd8
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f009 fe0f 	bl	800dc1c <memset>
  if(huart->Instance==USART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <HAL_UART_MspInit+0xc8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d145      	bne.n	8004094 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004008:	f04f 0201 	mov.w	r2, #1
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004014:	2300      	movs	r3, #0
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	4618      	mov	r0, r3
 800401e:	f004 fe41 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8004028:	f7ff fee8 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 800402e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 8004034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004038:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 800403e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_UART_MspInit+0xcc>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800406c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004082:	2307      	movs	r3, #7
 8004084:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800408c:	4619      	mov	r1, r3
 800408e:	4806      	ldr	r0, [pc, #24]	; (80040a8 <HAL_UART_MspInit+0xd0>)
 8004090:	f002 ffa2 	bl	8006fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004094:	bf00      	nop
 8004096:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40013800 	.word	0x40013800
 80040a4:	46020c00 	.word	0x46020c00
 80040a8:	42020000 	.word	0x42020000

080040ac <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0bc      	sub	sp, #240	; 0xf0
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040b4:	f107 0318 	add.w	r3, r7, #24
 80040b8:	22d8      	movs	r2, #216	; 0xd8
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f009 fdad 	bl	800dc1c <memset>
  if(hhcd->Instance==USB_OTG_HS)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_HCD_MspInit+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d15e      	bne.n	800418a <HAL_HCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0308 	mov.w	r3, #8
 80040d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80040d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040e0:	f107 0318 	add.w	r3, r7, #24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f004 fddd 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 80040f0:	f7ff fe84 	bl	8003dfc <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80040f4:	200c      	movs	r0, #12
 80040f6:	f000 ff75 	bl	8004fe4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_HCD_MspInit+0xec>)
 80040fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_HCD_MspInit+0xec>)
 800410c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_HCD_MspInit+0xec>)
 800411a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_HCD_MspInit+0xec>)
 800412a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d11b      	bne.n	800417c <HAL_HCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	4a13      	ldr	r2, [pc, #76]	; (8004198 <HAL_HCD_MspInit+0xec>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8004162:	f003 faa5 	bl	80076b0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8004166:	f003 fad3 	bl	8007710 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_HCD_MspInit+0xec>)
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_HCD_MspInit+0xec>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800417a:	e003      	b.n	8004184 <HAL_HCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800417c:	f003 fa98 	bl	80076b0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8004180:	f003 fac6 	bl	8007710 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8004184:	2001      	movs	r0, #1
 8004186:	f000 ff19 	bl	8004fbc <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	37f0      	adds	r7, #240	; 0xf0
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	42040000 	.word	0x42040000
 8004198:	46020c00 	.word	0x46020c00

0800419c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041a0:	e7fe      	b.n	80041a0 <NMI_Handler+0x4>

080041a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a6:	e7fe      	b.n	80041a6 <HardFault_Handler+0x4>

080041a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041ac:	e7fe      	b.n	80041ac <MemManage_Handler+0x4>

080041ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b2:	e7fe      	b.n	80041b2 <BusFault_Handler+0x4>

080041b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b8:	e7fe      	b.n	80041b8 <UsageFault_Handler+0x4>

080041ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041e8:	f000 fea4 	bl	8004f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_times>:
  errno = ENOENT;
  return -1;
}

int _times(struct tms *buf)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <_sbrk+0x5c>)
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <_sbrk+0x60>)
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <_sbrk+0x64>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <_sbrk+0x64>)
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <_sbrk+0x68>)
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <_sbrk+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	d207      	bcs.n	8004248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004238:	f009 fd10 	bl	800dc5c <__errno>
 800423c:	4603      	mov	r3, r0
 800423e:	220c      	movs	r2, #12
 8004240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004246:	e009      	b.n	800425c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <_sbrk+0x64>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <_sbrk+0x64>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <_sbrk+0x64>)
 8004258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20270000 	.word	0x20270000
 8004268:	00000400 	.word	0x00000400
 800426c:	20000778 	.word	0x20000778
 8004270:	200008d8 	.word	0x200008d8

08004274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <SystemInit+0x68>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <SystemInit+0x68>)
 8004280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <SystemInit+0x6c>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <SystemInit+0x6c>)
 8004290:	2200      	movs	r2, #0
 8004292:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <SystemInit+0x6c>)
 8004296:	2200      	movs	r2, #0
 8004298:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <SystemInit+0x6c>)
 800429c:	2200      	movs	r2, #0
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <SystemInit+0x6c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <SystemInit+0x6c>)
 80042a6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80042aa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80042ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <SystemInit+0x6c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <SystemInit+0x6c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <SystemInit+0x6c>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <SystemInit+0x6c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <SystemInit+0x68>)
 80042ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042ce:	609a      	str	r2, [r3, #8]
  #endif
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000ed00 	.word	0xe000ed00
 80042e0:	46020c00 	.word	0x46020c00

080042e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f9d7 	bl	80046a4 <USER_SPI_initialize>
 80042f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fab5 	bl	800487c <USER_SPI_status>
 8004312:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 800432c:	7bf8      	ldrb	r0, [r7, #15]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	f000 fab8 	bl	80048a8 <USER_SPI_read>
 8004338:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004352:	7bf8      	ldrb	r0, [r7, #15]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	f000 fb0b 	bl	8004974 <USER_SPI_write>
 800435e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	603a      	str	r2, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
 8004374:	460b      	mov	r3, r1
 8004376:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004378:	79b9      	ldrb	r1, [r7, #6]
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb74 	bl	8004a6c <USER_SPI_ioctl>
 8004384:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004398:	f000 fde0 	bl	8004f5c <HAL_GetTick>
 800439c:	4603      	mov	r3, r0
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <SPI_Timer_On+0x20>)
 80043a0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <SPI_Timer_On+0x24>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6013      	str	r3, [r2, #0]
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000780 	.word	0x20000780
 80043b4:	20000784 	.word	0x20000784

080043b8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80043bc:	f000 fdce 	bl	8004f5c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <SPI_Timer_Status+0x24>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <SPI_Timer_Status+0x28>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	bf34      	ite	cc
 80043d0:	2301      	movcc	r3, #1
 80043d2:	2300      	movcs	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000780 	.word	0x20000780
 80043e0:	20000784 	.word	0x20000784

080043e4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80043ee:	f107 020f 	add.w	r2, r7, #15
 80043f2:	1df9      	adds	r1, r7, #7
 80043f4:	2332      	movs	r3, #50	; 0x32
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2301      	movs	r3, #1
 80043fa:	4804      	ldr	r0, [pc, #16]	; (800440c <xchg_spi+0x28>)
 80043fc:	f007 fede 	bl	800c1bc <HAL_SPI_TransmitReceive>
    return rxDat;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000150 	.word	0x20000150

08004410 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e00a      	b.n	8004436 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	18d4      	adds	r4, r2, r3
 8004426:	20ff      	movs	r0, #255	; 0xff
 8004428:	f7ff ffdc 	bl	80043e4 <xchg_spi>
 800442c:	4603      	mov	r3, r0
 800442e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3f0      	bcc.n	8004420 <rcvr_spi_multi+0x10>
	}
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bd90      	pop	{r4, r7, pc}

08004448 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	b29a      	uxth	r2, r3
 8004456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4803      	ldr	r0, [pc, #12]	; (800446c <xmit_spi_multi+0x24>)
 800445e:	f007 fc8f 	bl	800bd80 <HAL_SPI_Transmit>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000150 	.word	0x20000150

08004470 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004478:	f000 fd70 	bl	8004f5c <HAL_GetTick>
 800447c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004482:	20ff      	movs	r0, #255	; 0xff
 8004484:	f7ff ffae 	bl	80043e4 <xchg_spi>
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d007      	beq.n	80044a2 <wait_ready+0x32>
 8004492:	f000 fd63 	bl	8004f5c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d8ef      	bhi.n	8004482 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2bff      	cmp	r3, #255	; 0xff
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80044bc:	2201      	movs	r2, #1
 80044be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044c2:	4804      	ldr	r0, [pc, #16]	; (80044d4 <despiselect+0x1c>)
 80044c4:	f002 ff60 	bl	8007388 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80044c8:	20ff      	movs	r0, #255	; 0xff
 80044ca:	f7ff ff8b 	bl	80043e4 <xchg_spi>

}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	42020c00 	.word	0x42020c00

080044d8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80044dc:	2200      	movs	r2, #0
 80044de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044e2:	480a      	ldr	r0, [pc, #40]	; (800450c <spiselect+0x34>)
 80044e4:	f002 ff50 	bl	8007388 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80044e8:	20ff      	movs	r0, #255	; 0xff
 80044ea:	f7ff ff7b 	bl	80043e4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80044ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044f2:	f7ff ffbd 	bl	8004470 <wait_ready>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <spiselect+0x28>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e002      	b.n	8004506 <spiselect+0x2e>

	despiselect();
 8004500:	f7ff ffda 	bl	80044b8 <despiselect>
	return 0;	/* Timeout */
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	42020c00 	.word	0x42020c00

08004510 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800451a:	20c8      	movs	r0, #200	; 0xc8
 800451c:	f7ff ff38 	bl	8004390 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004520:	20ff      	movs	r0, #255	; 0xff
 8004522:	f7ff ff5f 	bl	80043e4 <xchg_spi>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2bff      	cmp	r3, #255	; 0xff
 800452e:	d104      	bne.n	800453a <rcvr_datablock+0x2a>
 8004530:	f7ff ff42 	bl	80043b8 <SPI_Timer_Status>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f2      	bne.n	8004520 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2bfe      	cmp	r3, #254	; 0xfe
 800453e:	d001      	beq.n	8004544 <rcvr_datablock+0x34>
 8004540:	2300      	movs	r3, #0
 8004542:	e00a      	b.n	800455a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff62 	bl	8004410 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800454c:	20ff      	movs	r0, #255	; 0xff
 800454e:	f7ff ff49 	bl	80043e4 <xchg_spi>
 8004552:	20ff      	movs	r0, #255	; 0xff
 8004554:	f7ff ff46 	bl	80043e4 <xchg_spi>

	return 1;						/* Function succeeded */
 8004558:	2301      	movs	r3, #1
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800456e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004572:	f7ff ff7d 	bl	8004470 <wait_ready>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <xmit_datablock+0x1e>
 800457c:	2300      	movs	r3, #0
 800457e:	e01e      	b.n	80045be <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff2e 	bl	80043e4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	2bfd      	cmp	r3, #253	; 0xfd
 800458c:	d016      	beq.n	80045bc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800458e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ff58 	bl	8004448 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004598:	20ff      	movs	r0, #255	; 0xff
 800459a:	f7ff ff23 	bl	80043e4 <xchg_spi>
 800459e:	20ff      	movs	r0, #255	; 0xff
 80045a0:	f7ff ff20 	bl	80043e4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80045a4:	20ff      	movs	r0, #255	; 0xff
 80045a6:	f7ff ff1d 	bl	80043e4 <xchg_spi>
 80045aa:	4603      	mov	r3, r0
 80045ac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d001      	beq.n	80045bc <xmit_datablock+0x5a>
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <xmit_datablock+0x5c>
	}
	return 1;
 80045bc:	2301      	movs	r3, #1
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	6039      	str	r1, [r7, #0]
 80045d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	da0e      	bge.n	80045f8 <send_cmd+0x32>
		cmd &= 0x7F;
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80045e2:	2100      	movs	r1, #0
 80045e4:	2037      	movs	r0, #55	; 0x37
 80045e6:	f7ff ffee 	bl	80045c6 <send_cmd>
 80045ea:	4603      	mov	r3, r0
 80045ec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d901      	bls.n	80045f8 <send_cmd+0x32>
 80045f4:	7bbb      	ldrb	r3, [r7, #14]
 80045f6:	e051      	b.n	800469c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d008      	beq.n	8004610 <send_cmd+0x4a>
		despiselect();
 80045fe:	f7ff ff5b 	bl	80044b8 <despiselect>
		if (!spiselect()) return 0xFF;
 8004602:	f7ff ff69 	bl	80044d8 <spiselect>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <send_cmd+0x4a>
 800460c:	23ff      	movs	r3, #255	; 0xff
 800460e:	e045      	b.n	800469c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fee3 	bl	80043e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	0e1b      	lsrs	r3, r3, #24
 8004622:	b2db      	uxtb	r3, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fedd 	bl	80043e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	b2db      	uxtb	r3, r3
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fed7 	bl	80043e4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fed1 	bl	80043e4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fecc 	bl	80043e4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <send_cmd+0x94>
 8004656:	2395      	movs	r3, #149	; 0x95
 8004658:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d101      	bne.n	8004664 <send_cmd+0x9e>
 8004660:	2387      	movs	r3, #135	; 0x87
 8004662:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff febc 	bl	80043e4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d102      	bne.n	8004678 <send_cmd+0xb2>
 8004672:	20ff      	movs	r0, #255	; 0xff
 8004674:	f7ff feb6 	bl	80043e4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004678:	230a      	movs	r3, #10
 800467a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800467c:	20ff      	movs	r0, #255	; 0xff
 800467e:	f7ff feb1 	bl	80043e4 <xchg_spi>
 8004682:	4603      	mov	r3, r0
 8004684:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da05      	bge.n	800469a <send_cmd+0xd4>
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	3b01      	subs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <send_cmd+0xb6>

	return res;							/* Return received response */
 800469a:	7bbb      	ldrb	r3, [r7, #14]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <USER_SPI_initialize+0x14>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d6      	b.n	8004866 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80046b8:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <USER_SPI_initialize+0x1cc>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <USER_SPI_initialize+0x2a>
 80046c6:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <USER_SPI_initialize+0x1cc>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e0cb      	b.n	8004866 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80046ce:	4b69      	ldr	r3, [pc, #420]	; (8004874 <USER_SPI_initialize+0x1d0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046d8:	4b66      	ldr	r3, [pc, #408]	; (8004874 <USER_SPI_initialize+0x1d0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80046e0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80046e2:	230a      	movs	r3, #10
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	e005      	b.n	80046f4 <USER_SPI_initialize+0x50>
 80046e8:	20ff      	movs	r0, #255	; 0xff
 80046ea:	f7ff fe7b 	bl	80043e4 <xchg_spi>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f6      	bne.n	80046e8 <USER_SPI_initialize+0x44>

	ty = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80046fe:	2100      	movs	r1, #0
 8004700:	2000      	movs	r0, #0
 8004702:	f7ff ff60 	bl	80045c6 <send_cmd>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	f040 808b 	bne.w	8004824 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800470e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004712:	f7ff fe3d 	bl	8004390 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004716:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800471a:	2008      	movs	r0, #8
 800471c:	f7ff ff53 	bl	80045c6 <send_cmd>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d151      	bne.n	80047ca <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e00d      	b.n	8004748 <USER_SPI_initialize+0xa4>
 800472c:	7bfc      	ldrb	r4, [r7, #15]
 800472e:	20ff      	movs	r0, #255	; 0xff
 8004730:	f7ff fe58 	bl	80043e4 <xchg_spi>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	f104 0310 	add.w	r3, r4, #16
 800473c:	443b      	add	r3, r7
 800473e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	3301      	adds	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d9ee      	bls.n	800472c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800474e:	7abb      	ldrb	r3, [r7, #10]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d167      	bne.n	8004824 <USER_SPI_initialize+0x180>
 8004754:	7afb      	ldrb	r3, [r7, #11]
 8004756:	2baa      	cmp	r3, #170	; 0xaa
 8004758:	d164      	bne.n	8004824 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800475a:	bf00      	nop
 800475c:	f7ff fe2c 	bl	80043b8 <SPI_Timer_Status>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <USER_SPI_initialize+0xd2>
 8004766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800476a:	20a9      	movs	r0, #169	; 0xa9
 800476c:	f7ff ff2b 	bl	80045c6 <send_cmd>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f2      	bne.n	800475c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004776:	f7ff fe1f 	bl	80043b8 <SPI_Timer_Status>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d051      	beq.n	8004824 <USER_SPI_initialize+0x180>
 8004780:	2100      	movs	r1, #0
 8004782:	203a      	movs	r0, #58	; 0x3a
 8004784:	f7ff ff1f 	bl	80045c6 <send_cmd>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14a      	bne.n	8004824 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e00d      	b.n	80047b0 <USER_SPI_initialize+0x10c>
 8004794:	7bfc      	ldrb	r4, [r7, #15]
 8004796:	20ff      	movs	r0, #255	; 0xff
 8004798:	f7ff fe24 	bl	80043e4 <xchg_spi>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	f104 0310 	add.w	r3, r4, #16
 80047a4:	443b      	add	r3, r7
 80047a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	3301      	adds	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d9ee      	bls.n	8004794 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80047b6:	7a3b      	ldrb	r3, [r7, #8]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <USER_SPI_initialize+0x120>
 80047c0:	230c      	movs	r3, #12
 80047c2:	e000      	b.n	80047c6 <USER_SPI_initialize+0x122>
 80047c4:	2304      	movs	r3, #4
 80047c6:	737b      	strb	r3, [r7, #13]
 80047c8:	e02c      	b.n	8004824 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80047ca:	2100      	movs	r1, #0
 80047cc:	20a9      	movs	r0, #169	; 0xa9
 80047ce:	f7ff fefa 	bl	80045c6 <send_cmd>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d804      	bhi.n	80047e2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80047d8:	2302      	movs	r3, #2
 80047da:	737b      	strb	r3, [r7, #13]
 80047dc:	23a9      	movs	r3, #169	; 0xa9
 80047de:	73bb      	strb	r3, [r7, #14]
 80047e0:	e003      	b.n	80047ea <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80047e2:	2301      	movs	r3, #1
 80047e4:	737b      	strb	r3, [r7, #13]
 80047e6:	2301      	movs	r3, #1
 80047e8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80047ea:	bf00      	nop
 80047ec:	f7ff fde4 	bl	80043b8 <SPI_Timer_Status>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <USER_SPI_initialize+0x162>
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fee3 	bl	80045c6 <send_cmd>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f2      	bne.n	80047ec <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004806:	f7ff fdd7 	bl	80043b8 <SPI_Timer_Status>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <USER_SPI_initialize+0x17c>
 8004810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004814:	2010      	movs	r0, #16
 8004816:	f7ff fed6 	bl	80045c6 <send_cmd>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <USER_SPI_initialize+0x180>
				ty = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <USER_SPI_initialize+0x1d4>)
 8004826:	7b7b      	ldrb	r3, [r7, #13]
 8004828:	7013      	strb	r3, [r2, #0]
	despiselect();
 800482a:	f7ff fe45 	bl	80044b8 <despiselect>

	if (ty) {			/* OK */
 800482e:	7b7b      	ldrb	r3, [r7, #13]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <USER_SPI_initialize+0x1d0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <USER_SPI_initialize+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004846:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <USER_SPI_initialize+0x1cc>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <USER_SPI_initialize+0x1cc>)
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e002      	b.n	8004860 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <USER_SPI_initialize+0x1cc>)
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <USER_SPI_initialize+0x1cc>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	20000018 	.word	0x20000018
 8004874:	20000150 	.word	0x20000150
 8004878:	2000077c 	.word	0x2000077c

0800487c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <USER_SPI_status+0x14>
 800488c:	2301      	movs	r3, #1
 800488e:	e002      	b.n	8004896 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <USER_SPI_status+0x28>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000018 	.word	0x20000018

080048a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <USER_SPI_read+0x1c>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <USER_SPI_read+0x20>
 80048c4:	2304      	movs	r3, #4
 80048c6:	e04d      	b.n	8004964 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <USER_SPI_read+0xc4>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <USER_SPI_read+0x32>
 80048d6:	2303      	movs	r3, #3
 80048d8:	e044      	b.n	8004964 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80048da:	4b25      	ldr	r3, [pc, #148]	; (8004970 <USER_SPI_read+0xc8>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <USER_SPI_read+0x44>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	025b      	lsls	r3, r3, #9
 80048ea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d111      	bne.n	8004916 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	2011      	movs	r0, #17
 80048f6:	f7ff fe66 	bl	80045c6 <send_cmd>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d129      	bne.n	8004954 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f7ff fe03 	bl	8004510 <rcvr_datablock>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <USER_SPI_read+0xac>
			count = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	e01e      	b.n	8004954 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	2012      	movs	r0, #18
 800491a:	f7ff fe54 	bl	80045c6 <send_cmd>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d117      	bne.n	8004954 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f7ff fdf1 	bl	8004510 <rcvr_datablock>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <USER_SPI_read+0xa2>
				buff += 512;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800493a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ed      	bne.n	8004924 <USER_SPI_read+0x7c>
 8004948:	e000      	b.n	800494c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800494a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800494c:	2100      	movs	r1, #0
 800494e:	200c      	movs	r0, #12
 8004950:	f7ff fe39 	bl	80045c6 <send_cmd>
		}
	}
	despiselect();
 8004954:	f7ff fdb0 	bl	80044b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000018 	.word	0x20000018
 8004970:	2000077c 	.word	0x2000077c

08004974 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <USER_SPI_write+0x1c>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <USER_SPI_write+0x20>
 8004990:	2304      	movs	r3, #4
 8004992:	e063      	b.n	8004a5c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <USER_SPI_write+0xf0>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <USER_SPI_write+0x32>
 80049a2:	2303      	movs	r3, #3
 80049a4:	e05a      	b.n	8004a5c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <USER_SPI_write+0xf0>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <USER_SPI_write+0x44>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e051      	b.n	8004a5c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <USER_SPI_write+0xf4>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <USER_SPI_write+0x56>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	025b      	lsls	r3, r3, #9
 80049c8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d110      	bne.n	80049f2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	2018      	movs	r0, #24
 80049d4:	f7ff fdf7 	bl	80045c6 <send_cmd>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d136      	bne.n	8004a4c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80049de:	21fe      	movs	r1, #254	; 0xfe
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f7ff fdbe 	bl	8004562 <xmit_datablock>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02f      	beq.n	8004a4c <USER_SPI_write+0xd8>
			count = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	e02c      	b.n	8004a4c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <USER_SPI_write+0xf4>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f003 0306 	and.w	r3, r3, #6
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <USER_SPI_write+0x92>
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	2097      	movs	r0, #151	; 0x97
 8004a02:	f7ff fde0 	bl	80045c6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	2019      	movs	r0, #25
 8004a0a:	f7ff fddc 	bl	80045c6 <send_cmd>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11b      	bne.n	8004a4c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a14:	21fc      	movs	r1, #252	; 0xfc
 8004a16:	68b8      	ldr	r0, [r7, #8]
 8004a18:	f7ff fda3 	bl	8004562 <xmit_datablock>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <USER_SPI_write+0xc4>
				buff += 512;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ee      	bne.n	8004a14 <USER_SPI_write+0xa0>
 8004a36:	e000      	b.n	8004a3a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a38:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004a3a:	21fd      	movs	r1, #253	; 0xfd
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7ff fd90 	bl	8004562 <xmit_datablock>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <USER_SPI_write+0xd8>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004a4c:	f7ff fd34 	bl	80044b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000018 	.word	0x20000018
 8004a68:	2000077c 	.word	0x2000077c

08004a6c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	; 0x30
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	603a      	str	r2, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <USER_SPI_ioctl+0x1a>
 8004a82:	2304      	movs	r3, #4
 8004a84:	e15a      	b.n	8004d3c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004a86:	4baf      	ldr	r3, [pc, #700]	; (8004d44 <USER_SPI_ioctl+0x2d8>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <USER_SPI_ioctl+0x2c>
 8004a94:	2303      	movs	r3, #3
 8004a96:	e151      	b.n	8004d3c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004a9e:	79bb      	ldrb	r3, [r7, #6]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	f200 8136 	bhi.w	8004d12 <USER_SPI_ioctl+0x2a6>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <USER_SPI_ioctl+0x40>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ac1 	.word	0x08004ac1
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004d13 	.word	0x08004d13
 8004ab8:	08004b81 	.word	0x08004b81
 8004abc:	08004c77 	.word	0x08004c77
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004ac0:	f7ff fd0a 	bl	80044d8 <spiselect>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8127 	beq.w	8004d1a <USER_SPI_ioctl+0x2ae>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ad2:	e122      	b.n	8004d1a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	2009      	movs	r0, #9
 8004ad8:	f7ff fd75 	bl	80045c6 <send_cmd>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 811d 	bne.w	8004d1e <USER_SPI_ioctl+0x2b2>
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	2110      	movs	r1, #16
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fd10 	bl	8004510 <rcvr_datablock>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8113 	beq.w	8004d1e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004af8:	7b3b      	ldrb	r3, [r7, #12]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d111      	bne.n	8004b26 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004b02:	7d7b      	ldrb	r3, [r7, #21]
 8004b04:	461a      	mov	r2, r3
 8004b06:	7d3b      	ldrb	r3, [r7, #20]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	4413      	add	r3, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004b16:	4413      	add	r3, r2
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	029a      	lsls	r2, r3, #10
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e028      	b.n	8004b78 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b26:	7c7b      	ldrb	r3, [r7, #17]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	7dbb      	ldrb	r3, [r7, #22]
 8004b30:	09db      	lsrs	r3, r3, #7
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	7d7b      	ldrb	r3, [r7, #21]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0306 	and.w	r3, r3, #6
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3302      	adds	r3, #2
 8004b4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004b4e:	7d3b      	ldrb	r3, [r7, #20]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	7cbb      	ldrb	r3, [r7, #18]
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b64:	4413      	add	r3, r2
 8004b66:	3301      	adds	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004b6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b6e:	3b09      	subs	r3, #9
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	409a      	lsls	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b7e:	e0ce      	b.n	8004d1e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004b80:	4b71      	ldr	r3, [pc, #452]	; (8004d48 <USER_SPI_ioctl+0x2dc>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d031      	beq.n	8004bf0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	208d      	movs	r0, #141	; 0x8d
 8004b90:	f7ff fd19 	bl	80045c6 <send_cmd>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80c3 	bne.w	8004d22 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004b9c:	20ff      	movs	r0, #255	; 0xff
 8004b9e:	f7ff fc21 	bl	80043e4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fcb1 	bl	8004510 <rcvr_datablock>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80b6 	beq.w	8004d22 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004bb6:	2330      	movs	r3, #48	; 0x30
 8004bb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004bbc:	e007      	b.n	8004bce <USER_SPI_ioctl+0x162>
 8004bbe:	20ff      	movs	r0, #255	; 0xff
 8004bc0:	f7ff fc10 	bl	80043e4 <xchg_spi>
 8004bc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004bce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f3      	bne.n	8004bbe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2310      	movs	r3, #16
 8004be0:	fa03 f202 	lsl.w	r2, r3, r2
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004bee:	e098      	b.n	8004d22 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	2009      	movs	r0, #9
 8004bf4:	f7ff fce7 	bl	80045c6 <send_cmd>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8091 	bne.w	8004d22 <USER_SPI_ioctl+0x2b6>
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	2110      	movs	r1, #16
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fc82 	bl	8004510 <rcvr_datablock>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8087 	beq.w	8004d22 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004c14:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <USER_SPI_ioctl+0x2dc>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004c20:	7dbb      	ldrb	r3, [r7, #22]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004c28:	7dfa      	ldrb	r2, [r7, #23]
 8004c2a:	09d2      	lsrs	r2, r2, #7
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	4413      	add	r3, r2
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	7e7b      	ldrb	r3, [r7, #25]
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e013      	b.n	8004c6e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004c46:	7dbb      	ldrb	r3, [r7, #22]
 8004c48:	109b      	asrs	r3, r3, #2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	3301      	adds	r3, #1
 8004c52:	7dfa      	ldrb	r2, [r7, #23]
 8004c54:	00d2      	lsls	r2, r2, #3
 8004c56:	f002 0218 	and.w	r2, r2, #24
 8004c5a:	7df9      	ldrb	r1, [r7, #23]
 8004c5c:	0949      	lsrs	r1, r1, #5
 8004c5e:	b2c9      	uxtb	r1, r1
 8004c60:	440a      	add	r2, r1
 8004c62:	3201      	adds	r2, #1
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004c74:	e055      	b.n	8004d22 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <USER_SPI_ioctl+0x2dc>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f003 0306 	and.w	r3, r3, #6
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d051      	beq.n	8004d26 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004c82:	f107 020c 	add.w	r2, r7, #12
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	210b      	movs	r1, #11
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff feee 	bl	8004a6c <USER_SPI_ioctl>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d149      	bne.n	8004d2a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004c96:	7b3b      	ldrb	r3, [r7, #12]
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <USER_SPI_ioctl+0x23e>
 8004ca0:	7dbb      	ldrb	r3, [r7, #22]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d041      	beq.n	8004d2e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <USER_SPI_ioctl+0x2dc>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	025b      	lsls	r3, r3, #9
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	025b      	lsls	r3, r3, #9
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd4:	2020      	movs	r0, #32
 8004cd6:	f7ff fc76 	bl	80045c6 <send_cmd>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d128      	bne.n	8004d32 <USER_SPI_ioctl+0x2c6>
 8004ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce2:	2021      	movs	r0, #33	; 0x21
 8004ce4:	f7ff fc6f 	bl	80045c6 <send_cmd>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d121      	bne.n	8004d32 <USER_SPI_ioctl+0x2c6>
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2026      	movs	r0, #38	; 0x26
 8004cf2:	f7ff fc68 	bl	80045c6 <send_cmd>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d11a      	bne.n	8004d32 <USER_SPI_ioctl+0x2c6>
 8004cfc:	f247 5030 	movw	r0, #30000	; 0x7530
 8004d00:	f7ff fbb6 	bl	8004470 <wait_ready>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d013      	beq.n	8004d32 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004d10:	e00f      	b.n	8004d32 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004d12:	2304      	movs	r3, #4
 8004d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d18:	e00c      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		break;
 8004d1a:	bf00      	nop
 8004d1c:	e00a      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		break;
 8004d1e:	bf00      	nop
 8004d20:	e008      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		break;
 8004d22:	bf00      	nop
 8004d24:	e006      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d26:	bf00      	nop
 8004d28:	e004      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <USER_SPI_ioctl+0x2c8>
		break;
 8004d32:	bf00      	nop
	}

	despiselect();
 8004d34:	f7ff fbc0 	bl	80044b8 <despiselect>

	return res;
 8004d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3730      	adds	r7, #48	; 0x30
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000018 	.word	0x20000018
 8004d48:	2000077c 	.word	0x2000077c

08004d4c <create_header>:
#include "wav_header.h"
#include <string.h>

wav_header create_header(uint32_t wav_size, uint32_t sample_rate, uint32_t bytes_per_sample, uint16_t bit_depth, uint32_t fmt_chunk_size, uint16_t audio_fmt, uint16_t num_channels, uint32_t data_bytes) {
 8004d4c:	b4b0      	push	{r4, r5, r7}
 8004d4e:	b091      	sub	sp, #68	; 0x44
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
    wav_header head;
    strncpy(head.riff_header, "RIFF", 4);
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <create_header+0x40>)
 8004d5c:	617b      	str	r3, [r7, #20]
    endian_swap(&(head.size), wav_size);
    strncpy(head.wave_header, "WAVE", 4);
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <create_header+0x44>)
 8004d60:	61fb      	str	r3, [r7, #28]

    strncpy(head.fmt_header, "fmt ", 4);
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <create_header+0x48>)
 8004d64:	623b      	str	r3, [r7, #32]
    endian_swap(&(head.sample_rate), sample_rate);
    endian_swap(&(head.byte_rate), (sample_rate * num_channels * bytes_per_sample));
    endian_swap(&(head.sample_alignment), (num_channels * bytes_per_sample));
    endian_swap(&(head.bit_depth), bit_depth);

    strncpy(head.data_header, "data", 4);
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <create_header+0x4c>)
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
    endian_swap(&(head.data_bytes), data_bytes);

    return head;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	f107 0414 	add.w	r4, r7, #20
 8004d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004d7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	3744      	adds	r7, #68	; 0x44
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bcb0      	pop	{r4, r5, r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	46464952 	.word	0x46464952
 8004d90:	45564157 	.word	0x45564157
 8004d94:	20746d66 	.word	0x20746d66
 8004d98:	61746164 	.word	0x61746164

08004d9c <create_PCM_SC_header>:

wav_header create_PCM_SC_header(uint32_t wav_size, uint32_t sample_rate, uint32_t bytes_per_sample, uint16_t bit_depth, uint32_t data_bytes) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af06      	add	r7, sp, #24
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
    return create_header(wav_size, sample_rate, bytes_per_sample, bit_depth, 16, 1, 1, data_bytes);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	2301      	movs	r3, #1
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	2301      	movs	r3, #1
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	2310      	movs	r3, #16
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	8b3b      	ldrh	r3, [r7, #24]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	f7ff ffc1 	bl	8004d4c <create_header>
}
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <create_PCM_SC_header_correct>:

wav_header create_PCM_SC_header_correct(uint32_t num_samples) {
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b08a      	sub	sp, #40	; 0x28
 8004dd6:	af02      	add	r7, sp, #8
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
    uint32_t sample_rate = 16000;
 8004ddc:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004de0:	61fb      	str	r3, [r7, #28]
    uint32_t bytes_per_sample = 4;
 8004de2:	2304      	movs	r3, #4
 8004de4:	61bb      	str	r3, [r7, #24]
    uint16_t bit_depth = 32;
 8004de6:	2320      	movs	r3, #32
 8004de8:	82fb      	strh	r3, [r7, #22]
    uint32_t data_bytes = 1 * num_samples * bytes_per_sample; // Number of bytes in data. Number of samples * num_channels * sample byte size
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	613b      	str	r3, [r7, #16]
    uint32_t wav_size = data_bytes + 36; // Amount of data bytes + 36 header bytes.
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	60fb      	str	r3, [r7, #12]

    return create_PCM_SC_header(wav_size, sample_rate, bytes_per_sample, bit_depth, data_bytes);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	8afb      	ldrh	r3, [r7, #22]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	f7ff ffc7 	bl	8004d9c <create_PCM_SC_header>
}
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e50 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e1c:	f7ff fa2a 	bl	8004274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e22:	e003      	b.n	8004e2c <LoopCopyDataInit>

08004e24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e2a:	3104      	adds	r1, #4

08004e2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e2c:	480a      	ldr	r0, [pc, #40]	; (8004e58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004e30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004e32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004e34:	d3f6      	bcc.n	8004e24 <CopyDataInit>
	ldr	r2, =_sbss
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004e38:	e002      	b.n	8004e40 <LoopFillZerobss>

08004e3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004e3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004e3c:	f842 3b04 	str.w	r3, [r2], #4

08004e40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <LoopForever+0x16>)
	cmp	r2, r3
 8004e42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004e44:	d3f9      	bcc.n	8004e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e46:	f008 ff0f 	bl	800dc68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e4a:	f7fe fb07 	bl	800345c <main>

08004e4e <LoopForever>:

LoopForever:
    b LoopForever
 8004e4e:	e7fe      	b.n	8004e4e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004e50:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8004e54:	0800e8d8 	.word	0x0800e8d8
	ldr	r0, =_sdata
 8004e58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004e5c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004e60:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004e64:	200008d4 	.word	0x200008d4

08004e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e68:	e7fe      	b.n	8004e68 <ADC1_2_IRQHandler>
	...

08004e6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <HAL_Init+0x4c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <HAL_Init+0x4c>)
 8004e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e7c:	2003      	movs	r0, #3
 8004e7e:	f002 f879 	bl	8006f74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e82:	f003 fd31 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_Init+0x50>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <HAL_Init+0x54>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_Init+0x58>)
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e9c:	200f      	movs	r0, #15
 8004e9e:	f000 f813 	bl	8004ec8 <HAL_InitTick>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e002      	b.n	8004eb2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004eac:	f7fe ffac 	bl	8003e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40022000 	.word	0x40022000
 8004ebc:	46020c00 	.word	0x46020c00
 8004ec0:	0800e794 	.word	0x0800e794
 8004ec4:	20000000 	.word	0x20000000

08004ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_InitTick+0x60>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e021      	b.n	8004f20 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_InitTick+0x64>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_InitTick+0x60>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f002 f863 	bl	8006fbe <HAL_SYSTICK_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00e      	b.n	8004f20 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d80a      	bhi.n	8004f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	f002 f83b 	bl	8006f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <HAL_InitTick+0x68>)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000020 	.word	0x20000020
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	2000001c 	.word	0x2000001c

08004f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_IncTick+0x20>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_IncTick+0x24>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <HAL_IncTick+0x24>)
 8004f46:	6013      	str	r3, [r2, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000020 	.word	0x20000020
 8004f58:	20000788 	.word	0x20000788

08004f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <HAL_GetTick+0x14>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000788 	.word	0x20000788

08004f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7ff ffee 	bl	8004f5c <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8c:	d005      	beq.n	8004f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_Delay+0x44>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f9a:	bf00      	nop
 8004f9c:	f7ff ffde 	bl	8004f5c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d8f7      	bhi.n	8004f9c <HAL_Delay+0x28>
  {
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000020 	.word	0x20000020

08004fbc <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f023 0201 	bic.w	r2, r3, #1
 8004fcc:	4904      	ldr	r1, [pc, #16]	; (8004fe0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	46000400 	.word	0x46000400

08004fe4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff0:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	674b      	str	r3, [r1, #116]	; 0x74
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	46000400 	.word	0x46000400

0800500c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	609a      	str	r2, [r3, #8]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <LL_ADC_SetResolution+0x3c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d104      	bne.n	8005094 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b01      	subs	r3, #1
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f023 020c 	bic.w	r2, r3, #12
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	46021000 	.word	0x46021000

080050b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3360      	adds	r3, #96	; 0x60
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	430b      	orrs	r3, r1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3360      	adds	r3, #96	; 0x60
 8005104:	461a      	mov	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005122:	b480      	push	{r7}
 8005124:	b087      	sub	sp, #28
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3360      	adds	r3, #96	; 0x60
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	431a      	orrs	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	601a      	str	r2, [r3, #0]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3360      	adds	r3, #96	; 0x60
 8005168:	461a      	mov	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3360      	adds	r3, #96	; 0x60
 800519e:	461a      	mov	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	601a      	str	r2, [r3, #0]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d002      	beq.n	80051f6 <LL_ADC_SetGainCompensation+0x32>
 80051f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051f4:	e000      	b.n	80051f8 <LL_ADC_SetGainCompensation+0x34>
 80051f6:	2200      	movs	r2, #0
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2107      	movs	r1, #7
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	401a      	ands	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	431a      	orrs	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a2b      	ldr	r2, [pc, #172]	; (800532c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d020      	beq.n	80052c6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3330      	adds	r3, #48	; 0x30
 8005288:	461a      	mov	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	4413      	add	r3, r2
 8005296:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	211f      	movs	r1, #31
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0e9b      	lsrs	r3, r3, #26
 80052b0:	f003 011f 	and.w	r1, r3, #31
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	431a      	orrs	r2, r3
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80052c4:	e02b      	b.n	800531e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	210f      	movs	r1, #15
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	401a      	ands	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <LL_ADC_REG_SetSequencerRanks+0x7e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0e9b      	lsrs	r3, r3, #26
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	e010      	b.n	8005310 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	fa93 f3a3 	rbit	r3, r3
 80052f8:	613b      	str	r3, [r7, #16]
  return result;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8005304:	2320      	movs	r3, #32
 8005306:	e003      	b.n	8005310 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fab3 f383 	clz	r3, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	f001 011f 	and.w	r1, r1, #31
 8005316:	408b      	lsls	r3, r1
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800531e:	bf00      	nop
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	46021000 	.word	0x46021000

08005330 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	0e9b      	lsrs	r3, r3, #26
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2201      	movs	r2, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	e015      	b.n	8005380 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	60fb      	str	r3, [r7, #12]
  return result;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800536a:	2320      	movs	r3, #32
 800536c:	e003      	b.n	8005376 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2201      	movs	r2, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	0e9b      	lsrs	r3, r3, #26
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	401a      	ands	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b08b      	sub	sp, #44	; 0x2c
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a2d      	ldr	r2, [pc, #180]	; (800548c <LL_ADC_SetChannelSamplingTime+0xc4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d042      	beq.n	8005462 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <LL_ADC_SetChannelSamplingTime+0x28>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	0e9b      	lsrs	r3, r3, #26
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	e011      	b.n	8005414 <LL_ADC_SetChannelSamplingTime+0x4c>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	617b      	str	r3, [r7, #20]
  return result;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8005406:	2320      	movs	r3, #32
 8005408:	e003      	b.n	8005412 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	0e5b      	lsrs	r3, r3, #25
 8005418:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800541c:	460b      	mov	r3, r1
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3314      	adds	r3, #20
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0e5b      	lsrs	r3, r3, #25
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	4413      	add	r3, r2
 8005440:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2107      	movs	r1, #7
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	401a      	ands	r2, r3
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	431a      	orrs	r2, r3
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8005460:	e00e      	b.n	8005480 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	43db      	mvns	r3, r3
 800546c:	401a      	ands	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	0219      	lsls	r1, r3, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	400b      	ands	r3, r1
 8005476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547a:	431a      	orrs	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	615a      	str	r2, [r3, #20]
}
 8005480:	bf00      	nop
 8005482:	372c      	adds	r7, #44	; 0x2c
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	46021000 	.word	0x46021000

08005490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	43db      	mvns	r3, r3
 80054aa:	401a      	ands	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0318 	and.w	r3, r3, #24
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80054b4:	40d9      	lsrs	r1, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	400b      	ands	r3, r1
 80054ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054be:	431a      	orrs	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	000fffff 	.word	0x000fffff

080054d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 031f 	and.w	r3, r3, #31
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6093      	str	r3, [r2, #8]
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005548:	d101      	bne.n	800554e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800556c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005570:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	609a      	str	r2, [r3, #8]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005598:	d101      	bne.n	800559e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055c0:	f043 0201 	orr.w	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <LL_ADC_IsEnabled+0x18>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <LL_ADC_IsEnabled+0x1a>
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800560e:	f043 0204 	orr.w	r2, r3, #4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	609a      	str	r2, [r3, #8]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d101      	bne.n	800563a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d101      	bne.n	8005660 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b08b      	sub	sp, #44	; 0x2c
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e2ce      	b.n	8005c2e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a95      	ldr	r2, [pc, #596]	; (80058f4 <HAL_ADC_Init+0x284>)
 800569e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fe fbc7 	bl	8003e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff37 	bl	8005534 <LL_ADC_IsDeepPowerDownEnabled>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ff1d 	bl	8005510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff52 	bl	8005584 <LL_ADC_IsInternalRegulatorEnabled>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d115      	bne.n	8005712 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff36 	bl	800555c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056f0:	4b81      	ldr	r3, [pc, #516]	; (80058f8 <HAL_ADC_Init+0x288>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	4a81      	ldr	r2, [pc, #516]	; (80058fc <HAL_ADC_Init+0x28c>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	099b      	lsrs	r3, r3, #6
 80056fe:	3301      	adds	r3, #1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005704:	e002      	b.n	800570c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b01      	subs	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f9      	bne.n	8005706 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff ff34 	bl	8005584 <LL_ADC_IsInternalRegulatorEnabled>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10e      	bne.n	8005740 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005726:	f043 0210 	orr.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	f043 0201 	orr.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff6c 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 800574a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	f040 825f 	bne.w	8005c18 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 825b 	bne.w	8005c18 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005766:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff2c 	bl	80055d4 <LL_ADC_IsEnabled>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d14f      	bne.n	8005822 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a5b      	ldr	r2, [pc, #364]	; (80058f4 <HAL_ADC_Init+0x284>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d037      	beq.n	80057fc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5b      	ldr	r2, [pc, #364]	; (8005900 <HAL_ADC_Init+0x290>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_ADC_Init+0x130>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_ADC_Init+0x294>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10e      	bne.n	80057be <HAL_ADC_Init+0x14e>
 80057a0:	4857      	ldr	r0, [pc, #348]	; (8005900 <HAL_ADC_Init+0x290>)
 80057a2:	f7ff ff17 	bl	80055d4 <LL_ADC_IsEnabled>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4856      	ldr	r0, [pc, #344]	; (8005904 <HAL_ADC_Init+0x294>)
 80057aa:	f7ff ff13 	bl	80055d4 <LL_ADC_IsEnabled>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4323      	orrs	r3, r4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	e008      	b.n	80057d0 <HAL_ADC_Init+0x160>
 80057be:	484d      	ldr	r0, [pc, #308]	; (80058f4 <HAL_ADC_Init+0x284>)
 80057c0:	f7ff ff08 	bl	80055d4 <LL_ADC_IsEnabled>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d026      	beq.n	8005822 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a49      	ldr	r2, [pc, #292]	; (8005900 <HAL_ADC_Init+0x290>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_ADC_Init+0x178>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_ADC_Init+0x294>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_Init+0x17c>
 80057e8:	4a47      	ldr	r2, [pc, #284]	; (8005908 <HAL_ADC_Init+0x298>)
 80057ea:	e000      	b.n	80057ee <HAL_ADC_Init+0x17e>
 80057ec:	4a47      	ldr	r2, [pc, #284]	; (800590c <HAL_ADC_Init+0x29c>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f7ff fc09 	bl	800500c <LL_ADC_SetCommonClock>
 80057fa:	e012      	b.n	8005822 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7ff fc34 	bl	8005074 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800580c:	4b3f      	ldr	r3, [pc, #252]	; (800590c <HAL_ADC_Init+0x29c>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800581c:	493b      	ldr	r1, [pc, #236]	; (800590c <HAL_ADC_Init+0x29c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <HAL_ADC_Init+0x284>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d010      	beq.n	800584e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005832:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005838:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800583e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005846:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8005848:	4313      	orrs	r3, r2
 800584a:	623b      	str	r3, [r7, #32]
 800584c:	e035      	b.n	80058ba <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7f1b      	ldrb	r3, [r3, #28]
 8005852:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800585a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800585c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005862:	2a00      	cmp	r2, #0
 8005864:	d002      	beq.n	800586c <HAL_ADC_Init+0x1fc>
 8005866:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800586a:	e000      	b.n	800586e <HAL_ADC_Init+0x1fe>
 800586c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800586e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8005874:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da04      	bge.n	8005888 <HAL_ADC_Init+0x218>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005886:	e001      	b.n	800588c <HAL_ADC_Init+0x21c>
 8005888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800588c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	491b      	ldr	r1, [pc, #108]	; (8005900 <HAL_ADC_Init+0x290>)
 8005894:	428b      	cmp	r3, r1
 8005896:	d004      	beq.n	80058a2 <HAL_ADC_Init+0x232>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4919      	ldr	r1, [pc, #100]	; (8005904 <HAL_ADC_Init+0x294>)
 800589e:	428b      	cmp	r3, r1
 80058a0:	d103      	bne.n	80058aa <HAL_ADC_Init+0x23a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058a8:	e003      	b.n	80058b2 <HAL_ADC_Init+0x242>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80058b2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d131      	bne.n	8005928 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <HAL_ADC_Init+0x284>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	3b01      	subs	r3, #1
 80058d4:	045b      	lsls	r3, r3, #17
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	4313      	orrs	r3, r2
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	e024      	b.n	8005928 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d113      	bne.n	8005910 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ee:	623b      	str	r3, [r7, #32]
 80058f0:	e01a      	b.n	8005928 <HAL_ADC_Init+0x2b8>
 80058f2:	bf00      	nop
 80058f4:	46021000 	.word	0x46021000
 80058f8:	20000000 	.word	0x20000000
 80058fc:	053e2d63 	.word	0x053e2d63
 8005900:	42028000 	.word	0x42028000
 8005904:	42028100 	.word	0x42028100
 8005908:	42028300 	.word	0x42028300
 800590c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005920:	f043 0201 	orr.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a75      	ldr	r2, [pc, #468]	; (8005b04 <HAL_ADC_Init+0x494>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	4313      	orrs	r3, r2
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	4313      	orrs	r3, r2
 800594c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <HAL_ADC_Init+0x498>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	6a39      	ldr	r1, [r7, #32]
 800595e:	430b      	orrs	r3, r1
 8005960:	60d3      	str	r3, [r2, #12]
 8005962:	e031      	b.n	80059c8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	4313      	orrs	r3, r2
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	4313      	orrs	r3, r2
 800597e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	4b61      	ldr	r3, [pc, #388]	; (8005b0c <HAL_ADC_Init+0x49c>)
 8005988:	4013      	ands	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	6a39      	ldr	r1, [r7, #32]
 8005990:	430b      	orrs	r3, r1
 8005992:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1a      	ldr	r2, [r3, #32]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4d      	ldr	r2, [pc, #308]	; (8005b04 <HAL_ADC_Init+0x494>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f000 80a4 	beq.w	8005b1c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff fe22 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 80059de:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fe2f 	bl	8005648 <LL_ADC_INJ_IsConversionOngoing>
 80059ea:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d166      	bne.n	8005ac0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d163      	bne.n	8005ac0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7f1b      	ldrb	r3, [r3, #28]
 80059fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4943      	ldr	r1, [pc, #268]	; (8005b10 <HAL_ADC_Init+0x4a0>)
 8005a04:	428b      	cmp	r3, r1
 8005a06:	d004      	beq.n	8005a12 <HAL_ADC_Init+0x3a2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4941      	ldr	r1, [pc, #260]	; (8005b14 <HAL_ADC_Init+0x4a4>)
 8005a0e:	428b      	cmp	r3, r1
 8005a10:	d102      	bne.n	8005a18 <HAL_ADC_Init+0x3a8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	e002      	b.n	8005a1e <HAL_ADC_Init+0x3ae>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	430b      	orrs	r3, r1
 8005a38:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7ff fbb9 	bl	80051c4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d11e      	bne.n	8005a9a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <HAL_ADC_Init+0x4a8>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a70:	0411      	lsls	r1, r2, #16
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a76:	4311      	orrs	r1, r2
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005a82:	4311      	orrs	r1, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a88:	0892      	lsrs	r2, r2, #2
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]
 8005a98:	e007      	b.n	8005aaa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d10c      	bne.n	8005ae2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f023 010f 	bic.w	r1, r3, #15
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae0:	e007      	b.n	8005af2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 020f 	bic.w	r2, r2, #15
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005b02:	e092      	b.n	8005c2a <HAL_ADC_Init+0x5ba>
 8005b04:	46021000 	.word	0x46021000
 8005b08:	fff0c013 	.word	0xfff0c013
 8005b0c:	ffde800d 	.word	0xffde800d
 8005b10:	42028000 	.word	0x42028000
 8005b14:	42028100 	.word	0x42028100
 8005b18:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d111      	bne.n	8005b4a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005b2e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8005b34:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8005b3a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <HAL_ADC_Init+0x5c8>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b66:	461a      	mov	r2, r3
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f7ff fb4e 	bl	800520a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b76:	461a      	mov	r2, r3
 8005b78:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8005b7c:	f7ff fb45 	bl	800520a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f062 020f 	orn	r2, r2, #15
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
 8005b98:	e018      	b.n	8005bcc <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba2:	d113      	bne.n	8005bcc <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	f003 031c 	and.w	r3, r3, #28
 8005bb6:	f06f 020f 	mvn.w	r2, #15
 8005bba:	fa02 f103 	lsl.w	r1, r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <HAL_ADC_Init+0x5cc>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d10b      	bne.n	8005bf4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005bf2:	e01a      	b.n	8005c2a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf8:	f023 0312 	bic.w	r3, r3, #18
 8005bfc:	f043 0210 	orr.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005c16:	e008      	b.n	8005c2a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1c:	f043 0210 	orr.w	r2, r3, #16
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8005c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	372c      	adds	r7, #44	; 0x2c
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	f7fffc02 	.word	0xf7fffc02
 8005c3c:	833ffff3 	.word	0x833ffff3

08005c40 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef       *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a66      	ldr	r2, [pc, #408]	; (8005de8 <HAL_ADC_Start+0x1a8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_ADC_Start+0x1c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a65      	ldr	r2, [pc, #404]	; (8005dec <HAL_ADC_Start+0x1ac>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d101      	bne.n	8005c60 <HAL_ADC_Start+0x20>
 8005c5c:	4b64      	ldr	r3, [pc, #400]	; (8005df0 <HAL_ADC_Start+0x1b0>)
 8005c5e:	e000      	b.n	8005c62 <HAL_ADC_Start+0x22>
 8005c60:	4b64      	ldr	r3, [pc, #400]	; (8005df4 <HAL_ADC_Start+0x1b4>)
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fc38 	bl	80054d8 <LL_ADC_GetMultimode>
 8005c68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fcd7 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 80af 	bne.w	8005dda <HAL_ADC_Start+0x19a>
  {
    __HAL_LOCK(hadc);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_ADC_Start+0x4a>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e0aa      	b.n	8005de0 <HAL_ADC_Start+0x1a0>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f822 	bl	8006cdc <ADC_Enable>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 8096 	bne.w	8005dd0 <HAL_ADC_Start+0x190>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a4e      	ldr	r2, [pc, #312]	; (8005df8 <HAL_ADC_Start+0x1b8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d027      	beq.n	8005d12 <HAL_ADC_Start+0xd2>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - by default if ADC is Master or Independent or if multimode feature is not available
          - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a49      	ldr	r2, [pc, #292]	; (8005dec <HAL_ADC_Start+0x1ac>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d002      	beq.n	8005cd2 <HAL_ADC_Start+0x92>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	e000      	b.n	8005cd4 <HAL_ADC_Start+0x94>
 8005cd2:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <HAL_ADC_Start+0x1a8>)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d002      	beq.n	8005ce2 <HAL_ADC_Start+0xa2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_ADC_Start+0xae>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfa:	d106      	bne.n	8005d0a <HAL_ADC_Start+0xca>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d00:	f023 0206 	bic.w	r2, r3, #6
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	67da      	str	r2, [r3, #124]	; 0x7c
 8005d08:	e006      	b.n	8005d18 <HAL_ADC_Start+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	67da      	str	r2, [r3, #124]	; 0x7c
 8005d10:	e002      	b.n	8005d18 <HAL_ADC_Start+0xd8>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	221c      	movs	r2, #28
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a32      	ldr	r2, [pc, #200]	; (8005df8 <HAL_ADC_Start+0x1b8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d048      	beq.n	8005dc4 <HAL_ADC_Start+0x184>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <HAL_ADC_Start+0x1ac>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d002      	beq.n	8005d42 <HAL_ADC_Start+0x102>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	e000      	b.n	8005d44 <HAL_ADC_Start+0x104>
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <HAL_ADC_Start+0x1a8>)
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d008      	beq.n	8005d5e <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d002      	beq.n	8005d5e <HAL_ADC_Start+0x11e>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d114      	bne.n	8005d88 <HAL_ADC_Start+0x148>
           )
        {
          /* Multimode feature is not available or ADC Instance is Independent or Master,
             or is not Slave ADC with dual regular conversions enabled.
             Then, set HAL_ADC_STATE_INJ_BUSY bit and reset HAL_ADC_STATE_INJ_EOC bit if JAUTO is set. */
          if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <HAL_ADC_Start+0x13c>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	679a      	str	r2, [r3, #120]	; 0x78
          }

          /* Start ADC group regular conversion */
          LL_ADC_REG_StartConversion(hadc->Instance);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fc3a 	bl	80055fa <LL_ADC_REG_StartConversion>
 8005d86:	e01d      	b.n	8005dc4 <HAL_ADC_Start+0x184>
        }
        else
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	679a      	str	r2, [r3, #120]	; 0x78
          /* if Master ADC JAUTO bit is set, update Slave State in setting
             HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <HAL_ADC_Start+0x1ac>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d002      	beq.n	8005da4 <HAL_ADC_Start+0x164>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	e000      	b.n	8005da6 <HAL_ADC_Start+0x166>
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <HAL_ADC_Start+0x1a8>)
 8005da6:	60fb      	str	r3, [r7, #12]
          if (READ_BIT(tmp_adc_master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <HAL_ADC_Start+0x184>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fc16 	bl	80055fa <LL_ADC_REG_StartConversion>
 8005dce:	e006      	b.n	8005dde <HAL_ADC_Start+0x19e>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8005dd8:	e001      	b.n	8005dde <HAL_ADC_Start+0x19e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
 8005ddc:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	42028000 	.word	0x42028000
 8005dec:	42028100 	.word	0x42028100
 8005df0:	42028300 	.word	0x42028300
 8005df4:	46021300 	.word	0x46021300
 8005df8:	46021000 	.word	0x46021000

08005dfc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_flag_end;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a82      	ldr	r2, [pc, #520]	; (8006014 <HAL_ADC_PollForConversion+0x218>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_ADC_PollForConversion+0x1e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a80      	ldr	r2, [pc, #512]	; (8006018 <HAL_ADC_PollForConversion+0x21c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_ADC_PollForConversion+0x22>
 8005e1a:	4b80      	ldr	r3, [pc, #512]	; (800601c <HAL_ADC_PollForConversion+0x220>)
 8005e1c:	e000      	b.n	8005e20 <HAL_ADC_PollForConversion+0x24>
 8005e1e:	4b80      	ldr	r3, [pc, #512]	; (8006020 <HAL_ADC_PollForConversion+0x224>)
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fb59 	bl	80054d8 <LL_ADC_GetMultimode>
 8005e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d102      	bne.n	8005e36 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005e30:	2308      	movs	r3, #8
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e04e      	b.n	8005ed4 <HAL_ADC_PollForConversion+0xd8>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7a      	ldr	r2, [pc, #488]	; (8006024 <HAL_ADC_PollForConversion+0x228>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d038      	beq.n	8005eb2 <HAL_ADC_PollForConversion+0xb6>
    {
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d002      	beq.n	8005e52 <HAL_ADC_PollForConversion+0x56>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d111      	bne.n	8005e76 <HAL_ADC_PollForConversion+0x7a>
         )
      {
        /* Check ADC DMA mode */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_ADC_PollForConversion+0x74>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e112      	b.n	8006096 <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8005e70:	2304      	movs	r3, #4
 8005e72:	61fb      	str	r3, [r7, #28]
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8005e74:	e02e      	b.n	8005ed4 <HAL_ADC_PollForConversion+0xd8>
        }
      }
      else
      {
        /* Check ADC DMA mode in multimode */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a66      	ldr	r2, [pc, #408]	; (8006014 <HAL_ADC_PollForConversion+0x218>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_ADC_PollForConversion+0x8e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a64      	ldr	r2, [pc, #400]	; (8006018 <HAL_ADC_PollForConversion+0x21c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d101      	bne.n	8005e8e <HAL_ADC_PollForConversion+0x92>
 8005e8a:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_ADC_PollForConversion+0x220>)
 8005e8c:	e000      	b.n	8005e90 <HAL_ADC_PollForConversion+0x94>
 8005e8e:	4b64      	ldr	r3, [pc, #400]	; (8006020 <HAL_ADC_PollForConversion+0x224>)
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fb2f 	bl	80054f4 <LL_ADC_GetMultiDMATransfer>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_ADC_PollForConversion+0xb0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	679a      	str	r2, [r3, #120]	; 0x78
          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0f4      	b.n	8006096 <HAL_ADC_PollForConversion+0x29a>
        }
        else
        {
          tmp_flag_end = (ADC_FLAG_EOC);
 8005eac:	2304      	movs	r3, #4
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	e010      	b.n	8005ed4 <HAL_ADC_PollForConversion+0xd8>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_ADC_PollForConversion+0xd4>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0e2      	b.n	8006096 <HAL_ADC_PollForConversion+0x29a>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005ed4:	f7ff f842 	bl	8004f5c <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005eda:	e021      	b.n	8005f20 <HAL_ADC_PollForConversion+0x124>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d01d      	beq.n	8005f20 <HAL_ADC_PollForConversion+0x124>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ee4:	f7ff f83a 	bl	8004f5c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <HAL_ADC_PollForConversion+0xfe>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d112      	bne.n	8005f20 <HAL_ADC_PollForConversion+0x124>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <HAL_ADC_PollForConversion+0x124>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0c:	f043 0204 	orr.w	r2, r3, #4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0ba      	b.n	8006096 <HAL_ADC_PollForConversion+0x29a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0d6      	beq.n	8005edc <HAL_ADC_PollForConversion+0xe0>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff f982 	bl	8005248 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80a4 	beq.w	8006094 <HAL_ADC_PollForConversion+0x298>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 809e 	bne.w	8006094 <HAL_ADC_PollForConversion+0x298>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a31      	ldr	r2, [pc, #196]	; (8006024 <HAL_ADC_PollForConversion+0x228>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d062      	beq.n	8006028 <HAL_ADC_PollForConversion+0x22c>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d111      	bne.n	8005f94 <HAL_ADC_PollForConversion+0x198>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <HAL_ADC_PollForConversion+0x198>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8c:	f043 0201 	orr.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Get relevant register CFGR in ADC instance of ADC master or slave        */
      /* in function of multimode state (for devices with multimode               */
      /* available).                                                              */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1f      	ldr	r2, [pc, #124]	; (8006018 <HAL_ADC_PollForConversion+0x21c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d002      	beq.n	8005fa4 <HAL_ADC_PollForConversion+0x1a8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	e000      	b.n	8005fa6 <HAL_ADC_PollForConversion+0x1aa>
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_ADC_PollForConversion+0x218>)
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d008      	beq.n	8005fc0 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d002      	beq.n	8005fc0 <HAL_ADC_PollForConversion+0x1c4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d104      	bne.n	8005fca <HAL_ADC_PollForConversion+0x1ce>
         )
      {
        /* Retrieve handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e011      	b.n	8005fee <HAL_ADC_PollForConversion+0x1f2>
      }
      else
      {
        /* Retrieve Master ADC CFGR register */
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <HAL_ADC_PollForConversion+0x218>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_ADC_PollForConversion+0x1e2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_ADC_PollForConversion+0x228>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d102      	bne.n	8005fe4 <HAL_ADC_PollForConversion+0x1e8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	e000      	b.n	8005fe6 <HAL_ADC_PollForConversion+0x1ea>
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_ADC_PollForConversion+0x218>)
 8005fe6:	60fb      	str	r3, [r7, #12]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d104      	bne.n	8005ffe <HAL_ADC_PollForConversion+0x202>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e04a      	b.n	8006094 <HAL_ADC_PollForConversion+0x298>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d145      	bne.n	8006094 <HAL_ADC_PollForConversion+0x298>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	220c      	movs	r2, #12
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e040      	b.n	8006094 <HAL_ADC_PollForConversion+0x298>
 8006012:	bf00      	nop
 8006014:	42028000 	.word	0x42028000
 8006018:	42028100 	.word	0x42028100
 800601c:	42028300 	.word	0x42028300
 8006020:	46021300 	.word	0x46021300
 8006024:	46021000 	.word	0x46021000
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b08      	cmp	r3, #8
 8006034:	d126      	bne.n	8006084 <HAL_ADC_PollForConversion+0x288>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff faf1 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d112      	bne.n	800606c <HAL_ADC_PollForConversion+0x270>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 020c 	bic.w	r2, r2, #12
 8006054:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	679a      	str	r2, [r3, #120]	; 0x78
 800606a:	e00b      	b.n	8006084 <HAL_ADC_PollForConversion+0x288>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7f1b      	ldrb	r3, [r3, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <HAL_ADC_PollForConversion+0x298>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	220c      	movs	r2, #12
 8006092:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop

080060a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b0b7      	sub	sp, #220	; 0xdc
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4aa8      	ldr	r2, [pc, #672]	; (800635c <HAL_ADC_ConfigChannel+0x2bc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d103      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d102      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x36>
 80060d0:	2302      	movs	r3, #2
 80060d2:	f000 bdfe 	b.w	8006cd2 <HAL_ADC_ConfigChannel+0xc32>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fa9d 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 85c1 	bne.w	8006c72 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a99      	ldr	r2, [pc, #612]	; (800635c <HAL_ADC_ConfigChannel+0x2bc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f000 8409 	beq.w	800690e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <HAL_ADC_ConfigChannel+0x7a>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0e9b      	lsrs	r3, r3, #26
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2201      	movs	r2, #1
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	e01d      	b.n	8006156 <HAL_ADC_ConfigChannel+0xb6>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006126:	fa93 f3a3 	rbit	r3, r3
 800612a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800612e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8006136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800613e:	2320      	movs	r3, #32
 8006140:	e004      	b.n	800614c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8006142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2201      	movs	r2, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	69d1      	ldr	r1, [r2, #28]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	430b      	orrs	r3, r1
 8006162:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6859      	ldr	r1, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	f7ff f87d 	bl	8005270 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fa51 	bl	8005622 <LL_ADC_REG_IsConversionOngoing>
 8006180:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fa5d 	bl	8005648 <LL_ADC_INJ_IsConversionOngoing>
 800618e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 81df 	bne.w	800655a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800619c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 81da 	bne.w	800655a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f7ff f908 	bl	80053c8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d046      	beq.n	8006268 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6919      	ldr	r1, [r3, #16]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061ea:	f7fe ff63 	bl	80050b4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6919      	ldr	r1, [r3, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f7fe ff91 	bl	8005122 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	7e9b      	ldrb	r3, [r3, #26]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d11e      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_ADC_ConfigChannel+0x17e>
 8006218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800621c:	e000      	b.n	8006220 <HAL_ADC_ConfigChannel+0x180>
 800621e:	2300      	movs	r3, #0
 8006220:	461a      	mov	r2, r3
 8006222:	f7fe ffb4 	bl	800518e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_ADC_ConfigChannel+0x19c>
 8006236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800623a:	e000      	b.n	800623e <HAL_ADC_ConfigChannel+0x19e>
 800623c:	2300      	movs	r3, #0
 800623e:	461a      	mov	r2, r3
 8006240:	f7fe ff8a 	bl	8005158 <LL_ADC_SetOffsetSignedSaturation>
 8006244:	e189      	b.n	800655a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2200      	movs	r2, #0
 8006250:	4619      	mov	r1, r3
 8006252:	f7fe ff9c 	bl	800518e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2200      	movs	r2, #0
 8006260:	4619      	mov	r1, r3
 8006262:	f7fe ff79 	bl	8005158 <LL_ADC_SetOffsetSignedSaturation>
 8006266:	e178      	b.n	800655a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe ff41 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 8006274:	4603      	mov	r3, r0
 8006276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x1f4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ff36 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 800628a:	4603      	mov	r3, r0
 800628c:	0e9b      	lsrs	r3, r3, #26
 800628e:	f003 021f 	and.w	r2, r3, #31
 8006292:	e01e      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x232>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe ff2b 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80062b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80062ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80062c2:	2320      	movs	r3, #32
 80062c4:	e004      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80062c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x24a>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	e018      	b.n	800631c <HAL_ADC_ConfigChannel+0x27c>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80062fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800630e:	2320      	movs	r3, #32
 8006310:	e004      	b.n	800631c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8006312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006316:	fab3 f383 	clz	r3, r3
 800631a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800631c:	429a      	cmp	r2, r3
 800631e:	d107      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	2300      	movs	r3, #0
 800632a:	2100      	movs	r1, #0
 800632c:	f7fe fec2 	bl	80050b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2101      	movs	r1, #1
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fedd 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 800633c:	4603      	mov	r3, r0
 800633e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10c      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x2c0>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe fed2 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 8006352:	4603      	mov	r3, r0
 8006354:	0e9b      	lsrs	r3, r3, #26
 8006356:	f003 021f 	and.w	r2, r3, #31
 800635a:	e020      	b.n	800639e <HAL_ADC_ConfigChannel+0x2fe>
 800635c:	46021000 	.word	0x46021000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fec5 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 800636c:	4603      	mov	r3, r0
 800636e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006376:	fa93 f3a3 	rbit	r3, r3
 800637a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800637e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800638e:	2320      	movs	r3, #32
 8006390:	e004      	b.n	800639c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8006392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006396:	fab3 f383 	clz	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x316>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	0e9b      	lsrs	r3, r3, #26
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	e018      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x348>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063c2:	fa93 f3a3 	rbit	r3, r3
 80063c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80063ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80063d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80063da:	2320      	movs	r3, #32
 80063dc:	e004      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80063de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d107      	bne.n	80063fc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	2101      	movs	r1, #1
 80063f8:	f7fe fe5c 	bl	80050b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe77 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 8006408:	4603      	mov	r3, r0
 800640a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x388>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2102      	movs	r1, #2
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fe6c 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 800641e:	4603      	mov	r3, r0
 8006420:	0e9b      	lsrs	r3, r3, #26
 8006422:	f003 021f 	and.w	r2, r3, #31
 8006426:	e01a      	b.n	800645e <HAL_ADC_ConfigChannel+0x3be>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fe61 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 8006434:	4603      	mov	r3, r0
 8006436:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800644e:	2320      	movs	r3, #32
 8006450:	e004      	b.n	800645c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8006452:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006456:	fab3 f383 	clz	r3, r3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x3d6>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	0e9b      	lsrs	r3, r3, #26
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	e011      	b.n	800649a <HAL_ADC_ConfigChannel+0x3fa>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647e:	fa93 f3a3 	rbit	r3, r3
 8006482:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006486:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800648e:	2320      	movs	r3, #32
 8006490:	e003      	b.n	800649a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006494:	fab3 f383 	clz	r3, r3
 8006498:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800649a:	429a      	cmp	r2, r3
 800649c:	d107      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	2102      	movs	r1, #2
 80064aa:	f7fe fe03 	bl	80050b4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2103      	movs	r1, #3
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe fe1e 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <HAL_ADC_ConfigChannel+0x43a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2103      	movs	r1, #3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fe13 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 80064d0:	4603      	mov	r3, r0
 80064d2:	0e9b      	lsrs	r3, r3, #26
 80064d4:	f003 021f 	and.w	r2, r3, #31
 80064d8:	e017      	b.n	800650a <HAL_ADC_ConfigChannel+0x46a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2103      	movs	r1, #3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fe08 	bl	80050f6 <LL_ADC_GetOffsetChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80064f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80064f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80064fc:	2320      	movs	r3, #32
 80064fe:	e003      	b.n	8006508 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8006500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006502:	fab3 f383 	clz	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x482>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	0e9b      	lsrs	r3, r3, #26
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	e011      	b.n	8006546 <HAL_ADC_ConfigChannel+0x4a6>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800652a:	fa93 f3a3 	rbit	r3, r3
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006532:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800653a:	2320      	movs	r3, #32
 800653c:	e003      	b.n	8006546 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800653e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006540:	fab3 f383 	clz	r3, r3
 8006544:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006546:	429a      	cmp	r2, r3
 8006548:	d107      	bne.n	800655a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	2103      	movs	r1, #3
 8006556:	f7fe fdad 	bl	80050b4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff f838 	bl	80055d4 <LL_ADC_IsEnabled>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 83ad 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	461a      	mov	r2, r3
 800657a:	f7fe ff89 	bl	8005490 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006586:	f040 80d6 	bne.w	8006736 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x50e>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	0e9b      	lsrs	r3, r3, #26
 800659c:	3301      	adds	r3, #1
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2b09      	cmp	r3, #9
 80065a4:	bf94      	ite	ls
 80065a6:	2301      	movls	r3, #1
 80065a8:	2300      	movhi	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e019      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x542>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b6:	fa93 f3a3 	rbit	r3, r3
 80065ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80065bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065be:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80065c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80065c6:	2320      	movs	r3, #32
 80065c8:	e003      	b.n	80065d2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80065ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	3301      	adds	r3, #1
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2b09      	cmp	r3, #9
 80065da:	bf94      	ite	ls
 80065dc:	2301      	movls	r3, #1
 80065de:	2300      	movhi	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d04d      	beq.n	8006682 <HAL_ADC_ConfigChannel+0x5e2>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d107      	bne.n	8006602 <HAL_ADC_ConfigChannel+0x562>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	0e9b      	lsrs	r3, r3, #26
 80065f8:	3301      	adds	r3, #1
 80065fa:	069b      	lsls	r3, r3, #26
 80065fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006600:	e015      	b.n	800662e <HAL_ADC_ConfigChannel+0x58e>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	fa93 f3a3 	rbit	r3, r3
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800661a:	2320      	movs	r3, #32
 800661c:	e003      	b.n	8006626 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800661e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006620:	fab3 f383 	clz	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	3301      	adds	r3, #1
 8006628:	069b      	lsls	r3, r3, #26
 800662a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_ADC_ConfigChannel+0x5ae>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	0e9b      	lsrs	r3, r3, #26
 8006640:	3301      	adds	r3, #1
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2101      	movs	r1, #1
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	e017      	b.n	800667e <HAL_ADC_ConfigChannel+0x5de>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	fa93 f3a3 	rbit	r3, r3
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8006666:	2320      	movs	r3, #32
 8006668:	e003      	b.n	8006672 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	fab3 f383 	clz	r3, r3
 8006670:	b2db      	uxtb	r3, r3
 8006672:	3301      	adds	r3, #1
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2101      	movs	r1, #1
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	e04e      	b.n	8006720 <HAL_ADC_ConfigChannel+0x680>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d107      	bne.n	800669e <HAL_ADC_ConfigChannel+0x5fe>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	0e9b      	lsrs	r3, r3, #26
 8006694:	3301      	adds	r3, #1
 8006696:	069b      	lsls	r3, r3, #26
 8006698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800669c:	e015      	b.n	80066ca <HAL_ADC_ConfigChannel+0x62a>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	fa93 f3a3 	rbit	r3, r3
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80066b6:	2320      	movs	r3, #32
 80066b8:	e003      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	fab3 f383 	clz	r3, r3
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	3301      	adds	r3, #1
 80066c4:	069b      	lsls	r3, r3, #26
 80066c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_ADC_ConfigChannel+0x64a>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	3301      	adds	r3, #1
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2101      	movs	r1, #1
 80066e4:	fa01 f303 	lsl.w	r3, r1, r3
 80066e8:	e017      	b.n	800671a <HAL_ADC_ConfigChannel+0x67a>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	fa93 f3a3 	rbit	r3, r3
 80066f6:	61bb      	str	r3, [r7, #24]
  return result;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8006702:	2320      	movs	r3, #32
 8006704:	e003      	b.n	800670e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	fab3 f383 	clz	r3, r3
 800670c:	b2db      	uxtb	r3, r3
 800670e:	3301      	adds	r3, #1
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006732:	f7fe fe49 	bl	80053c8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f280 82c3 	bge.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a92      	ldr	r2, [pc, #584]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_ADC_ConfigChannel+0x6b4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a91      	ldr	r2, [pc, #580]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d101      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x6b8>
 8006754:	4b90      	ldr	r3, [pc, #576]	; (8006998 <HAL_ADC_ConfigChannel+0x8f8>)
 8006756:	e000      	b.n	800675a <HAL_ADC_ConfigChannel+0x6ba>
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <HAL_ADC_ConfigChannel+0x8fc>)
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fc7c 	bl	8005058 <LL_ADC_GetCommonPathInternalCh>
 8006760:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a89      	ldr	r2, [pc, #548]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_ADC_ConfigChannel+0x6d8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a88      	ldr	r2, [pc, #544]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10e      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x6f6>
 8006778:	4885      	ldr	r0, [pc, #532]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 800677a:	f7fe ff2b 	bl	80055d4 <LL_ADC_IsEnabled>
 800677e:	4604      	mov	r4, r0
 8006780:	4884      	ldr	r0, [pc, #528]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 8006782:	f7fe ff27 	bl	80055d4 <LL_ADC_IsEnabled>
 8006786:	4603      	mov	r3, r0
 8006788:	4323      	orrs	r3, r4
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e008      	b.n	80067a8 <HAL_ADC_ConfigChannel+0x708>
 8006796:	4882      	ldr	r0, [pc, #520]	; (80069a0 <HAL_ADC_ConfigChannel+0x900>)
 8006798:	f7fe ff1c 	bl	80055d4 <LL_ADC_IsEnabled>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bf0c      	ite	eq
 80067a2:	2301      	moveq	r3, #1
 80067a4:	2300      	movne	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80a6 	beq.w	80068fa <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a7c      	ldr	r2, [pc, #496]	; (80069a4 <HAL_ADC_ConfigChannel+0x904>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d13c      	bne.n	8006832 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d136      	bne.n	8006832 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a71      	ldr	r2, [pc, #452]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00a      	beq.n	80067e4 <HAL_ADC_ConfigChannel+0x744>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a70      	ldr	r2, [pc, #448]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d005      	beq.n	80067e4 <HAL_ADC_ConfigChannel+0x744>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a70      	ldr	r2, [pc, #448]	; (80069a0 <HAL_ADC_ConfigChannel+0x900>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f040 826e 	bne.w	8006cc0 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a69      	ldr	r2, [pc, #420]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_ADC_ConfigChannel+0x758>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a68      	ldr	r2, [pc, #416]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <HAL_ADC_ConfigChannel+0x75c>
 80067f8:	4a67      	ldr	r2, [pc, #412]	; (8006998 <HAL_ADC_ConfigChannel+0x8f8>)
 80067fa:	e000      	b.n	80067fe <HAL_ADC_ConfigChannel+0x75e>
 80067fc:	4a67      	ldr	r2, [pc, #412]	; (800699c <HAL_ADC_ConfigChannel+0x8fc>)
 80067fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7fe fc12 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800680e:	4b66      	ldr	r3, [pc, #408]	; (80069a8 <HAL_ADC_ConfigChannel+0x908>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	4a65      	ldr	r2, [pc, #404]	; (80069ac <HAL_ADC_ConfigChannel+0x90c>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	099b      	lsrs	r3, r3, #6
 800681c:	3301      	adds	r3, #1
 800681e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8006820:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8006822:	e002      	b.n	800682a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f9      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006830:	e246      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5e      	ldr	r2, [pc, #376]	; (80069b0 <HAL_ADC_ConfigChannel+0x910>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d12b      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800683c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8006844:	2b00      	cmp	r3, #0
 8006846:	d125      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a50      	ldr	r2, [pc, #320]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00a      	beq.n	8006868 <HAL_ADC_ConfigChannel+0x7c8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a4f      	ldr	r2, [pc, #316]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d005      	beq.n	8006868 <HAL_ADC_ConfigChannel+0x7c8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4f      	ldr	r2, [pc, #316]	; (80069a0 <HAL_ADC_ConfigChannel+0x900>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 822e 	bne.w	8006cc4 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a48      	ldr	r2, [pc, #288]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_ADC_ConfigChannel+0x7dc>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a47      	ldr	r2, [pc, #284]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x7e0>
 800687c:	4a46      	ldr	r2, [pc, #280]	; (8006998 <HAL_ADC_ConfigChannel+0x8f8>)
 800687e:	e000      	b.n	8006882 <HAL_ADC_ConfigChannel+0x7e2>
 8006880:	4a46      	ldr	r2, [pc, #280]	; (800699c <HAL_ADC_ConfigChannel+0x8fc>)
 8006882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fe fbd0 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006892:	e217      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <HAL_ADC_ConfigChannel+0x914>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f040 8213 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 820c 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00a      	beq.n	80068ce <HAL_ADC_ConfigChannel+0x82e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a35      	ldr	r2, [pc, #212]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d005      	beq.n	80068ce <HAL_ADC_ConfigChannel+0x82e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a36      	ldr	r2, [pc, #216]	; (80069a0 <HAL_ADC_ConfigChannel+0x900>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	f040 81fc 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2f      	ldr	r2, [pc, #188]	; (8006990 <HAL_ADC_ConfigChannel+0x8f0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_ADC_ConfigChannel+0x842>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <HAL_ADC_ConfigChannel+0x8f4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <HAL_ADC_ConfigChannel+0x846>
 80068e2:	4a2d      	ldr	r2, [pc, #180]	; (8006998 <HAL_ADC_ConfigChannel+0x8f8>)
 80068e4:	e000      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x848>
 80068e6:	4a2d      	ldr	r2, [pc, #180]	; (800699c <HAL_ADC_ConfigChannel+0x8fc>)
 80068e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f7fe fb9d 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
 80068f8:	e1e5      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800690c:	e1db      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	f000 811b 	beq.w	8006b56 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006928:	d004      	beq.n	8006934 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800692e:	4a22      	ldr	r2, [pc, #136]	; (80069b8 <HAL_ADC_ConfigChannel+0x918>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d107      	bne.n	8006944 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fcf7 	bl	8005330 <LL_ADC_REG_SetSequencerChAdd>
 8006942:	e059      	b.n	80069f8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	210f      	movs	r1, #15
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <HAL_ADC_ConfigChannel+0x8d4>
 8006968:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800696c:	0e9b      	lsrs	r3, r3, #26
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	e027      	b.n	80069c4 <HAL_ADC_ConfigChannel+0x924>
 8006974:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006978:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	fa93 f3a3 	rbit	r3, r3
 8006980:	60fb      	str	r3, [r7, #12]
  return result;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d117      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800698c:	2320      	movs	r3, #32
 800698e:	e019      	b.n	80069c4 <HAL_ADC_ConfigChannel+0x924>
 8006990:	42028000 	.word	0x42028000
 8006994:	42028100 	.word	0x42028100
 8006998:	42028300 	.word	0x42028300
 800699c:	46021300 	.word	0x46021300
 80069a0:	46021000 	.word	0x46021000
 80069a4:	ce080000 	.word	0xce080000
 80069a8:	20000000 	.word	0x20000000
 80069ac:	053e2d63 	.word	0x053e2d63
 80069b0:	ca040000 	.word	0xca040000
 80069b4:	80000001 	.word	0x80000001
 80069b8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	fab3 f383 	clz	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6849      	ldr	r1, [r1, #4]
 80069c8:	f001 011f 	and.w	r1, r1, #31
 80069cc:	408b      	lsls	r3, r1
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	089b      	lsrs	r3, r3, #2
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d808      	bhi.n	80069f8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7fe fc3c 	bl	8005270 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006a06:	f7fe fcdf 	bl	80053c8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f280 8159 	bge.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a9b      	ldr	r2, [pc, #620]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_ADC_ConfigChannel+0x988>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a9a      	ldr	r2, [pc, #616]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d101      	bne.n	8006a2c <HAL_ADC_ConfigChannel+0x98c>
 8006a28:	4b99      	ldr	r3, [pc, #612]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006a2a:	e000      	b.n	8006a2e <HAL_ADC_ConfigChannel+0x98e>
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fb12 	bl	8005058 <LL_ADC_GetCommonPathInternalCh>
 8006a34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a96      	ldr	r2, [pc, #600]	; (8006c98 <HAL_ADC_ConfigChannel+0xbf8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d12b      	bne.n	8006a9a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d125      	bne.n	8006a9a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a8d      	ldr	r2, [pc, #564]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_ADC_ConfigChannel+0x9c2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a8b      	ldr	r2, [pc, #556]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x9c6>
 8006a62:	4a8b      	ldr	r2, [pc, #556]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006a64:	e000      	b.n	8006a68 <HAL_ADC_ConfigChannel+0x9c8>
 8006a66:	4a8b      	ldr	r2, [pc, #556]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7fe fadd 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006a78:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_ADC_ConfigChannel+0xbfc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	099b      	lsrs	r3, r3, #6
 8006a7e:	4a88      	ldr	r2, [pc, #544]	; (8006ca0 <HAL_ADC_ConfigChannel+0xc00>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	099b      	lsrs	r3, r3, #6
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8006a8a:	e002      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1f9      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8006a98:	e045      	b.n	8006b26 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a81      	ldr	r2, [pc, #516]	; (8006ca4 <HAL_ADC_ConfigChannel+0xc04>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d11b      	bne.n	8006adc <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d115      	bne.n	8006adc <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a74      	ldr	r2, [pc, #464]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_ADC_ConfigChannel+0xa24>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a73      	ldr	r2, [pc, #460]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_ADC_ConfigChannel+0xa28>
 8006ac4:	4a72      	ldr	r2, [pc, #456]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006ac6:	e000      	b.n	8006aca <HAL_ADC_ConfigChannel+0xa2a>
 8006ac8:	4a72      	ldr	r2, [pc, #456]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fe faac 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
 8006ada:	e024      	b.n	8006b26 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <HAL_ADC_ConfigChannel+0xc08>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d11f      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d115      	bne.n	8006b1e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a64      	ldr	r2, [pc, #400]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d004      	beq.n	8006b06 <HAL_ADC_ConfigChannel+0xa66>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a62      	ldr	r2, [pc, #392]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d101      	bne.n	8006b0a <HAL_ADC_ConfigChannel+0xa6a>
 8006b06:	4a62      	ldr	r2, [pc, #392]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006b08:	e000      	b.n	8006b0c <HAL_ADC_ConfigChannel+0xa6c>
 8006b0a:	4a62      	ldr	r2, [pc, #392]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe fa8b 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
 8006b1c:	e003      	b.n	8006b26 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a62      	ldr	r2, [pc, #392]	; (8006cac <HAL_ADC_ConfigChannel+0xc0c>)
 8006b24:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a61      	ldr	r2, [pc, #388]	; (8006cb0 <HAL_ADC_ConfigChannel+0xc10>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	f040 80ca 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 80c3 	bne.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006b54:	e0b7      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5e:	d004      	beq.n	8006b6a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8006b64:	4a53      	ldr	r2, [pc, #332]	; (8006cb4 <HAL_ADC_ConfigChannel+0xc14>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d106      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fc0f 	bl	8005396 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f280 80a2 	bge.w	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a40      	ldr	r2, [pc, #256]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_ADC_ConfigChannel+0xaf6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3e      	ldr	r2, [pc, #248]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_ADC_ConfigChannel+0xafa>
 8006b96:	4b3e      	ldr	r3, [pc, #248]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006b98:	e000      	b.n	8006b9c <HAL_ADC_ConfigChannel+0xafc>
 8006b9a:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fa5b 	bl	8005058 <LL_ADC_GetCommonPathInternalCh>
 8006ba2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a43      	ldr	r2, [pc, #268]	; (8006cb8 <HAL_ADC_ConfigChannel+0xc18>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d115      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a34      	ldr	r2, [pc, #208]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_ADC_ConfigChannel+0xb24>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a33      	ldr	r2, [pc, #204]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0xb28>
 8006bc4:	4a32      	ldr	r2, [pc, #200]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006bc6:	e000      	b.n	8006bca <HAL_ADC_ConfigChannel+0xb2a>
 8006bc8:	4a32      	ldr	r2, [pc, #200]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006bca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fe fa2c 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
 8006bda:	e034      	b.n	8006c46 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a36      	ldr	r2, [pc, #216]	; (8006cbc <HAL_ADC_ConfigChannel+0xc1c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d115      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_ADC_ConfigChannel+0xb5a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d101      	bne.n	8006bfe <HAL_ADC_ConfigChannel+0xb5e>
 8006bfa:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006bfc:	e000      	b.n	8006c00 <HAL_ADC_ConfigChannel+0xb60>
 8006bfe:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe fa11 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
 8006c10:	e019      	b.n	8006c46 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <HAL_ADC_ConfigChannel+0xc08>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d114      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <HAL_ADC_ConfigChannel+0xbe8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_ADC_ConfigChannel+0xb90>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_ADC_ConfigChannel+0xbec>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <HAL_ADC_ConfigChannel+0xb94>
 8006c30:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <HAL_ADC_ConfigChannel+0xbf0>)
 8006c32:	e000      	b.n	8006c36 <HAL_ADC_ConfigChannel+0xb96>
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <HAL_ADC_ConfigChannel+0xbf4>)
 8006c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4610      	mov	r0, r2
 8006c42:	f7fe f9f6 	bl	8005032 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <HAL_ADC_ConfigChannel+0xc10>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d13a      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d134      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006c70:	e029      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c76:	f043 0220 	orr.w	r2, r3, #32
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006c84:	e01f      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
 8006c86:	bf00      	nop
 8006c88:	42028000 	.word	0x42028000
 8006c8c:	42028100 	.word	0x42028100
 8006c90:	42028300 	.word	0x42028300
 8006c94:	46021300 	.word	0x46021300
 8006c98:	b6002000 	.word	0xb6002000
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	053e2d63 	.word	0x053e2d63
 8006ca4:	ba004000 	.word	0xba004000
 8006ca8:	80000001 	.word	0x80000001
 8006cac:	b2001000 	.word	0xb2001000
 8006cb0:	d7200000 	.word	0xd7200000
 8006cb4:	80000010 	.word	0x80000010
 8006cb8:	ce080000 	.word	0xce080000
 8006cbc:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cc0:	bf00      	nop
 8006cc2:	e000      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cc4:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8006cce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	37dc      	adds	r7, #220	; 0xdc
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	bf00      	nop

08006cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fc73 	bl	80055d4 <LL_ADC_IsEnabled>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d17b      	bne.n	8006dec <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	4b3f      	ldr	r3, [pc, #252]	; (8006df8 <ADC_Enable+0x11c>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d06:	f043 0210 	orr.w	r2, r3, #16
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d12:	f043 0201 	orr.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e067      	b.n	8006dee <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fc3e 	bl	80055ac <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <ADC_Enable+0x66>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2f      	ldr	r2, [pc, #188]	; (8006dfc <ADC_Enable+0x120>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d054      	beq.n	8006dec <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006d42:	f7fe f90b 	bl	8004f5c <HAL_GetTick>
 8006d46:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <ADC_Enable+0x124>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <ADC_Enable+0x80>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <ADC_Enable+0x128>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d101      	bne.n	8006d60 <ADC_Enable+0x84>
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <ADC_Enable+0x12c>)
 8006d5e:	e000      	b.n	8006d62 <ADC_Enable+0x86>
 8006d60:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <ADC_Enable+0x130>)
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fbb8 	bl	80054d8 <LL_ADC_GetMultimode>
 8006d68:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a25      	ldr	r2, [pc, #148]	; (8006e04 <ADC_Enable+0x128>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d002      	beq.n	8006d7a <ADC_Enable+0x9e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	e000      	b.n	8006d7c <ADC_Enable+0xa0>
 8006d7a:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <ADC_Enable+0x124>)
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d130      	bne.n	8006dec <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d8a:	e028      	b.n	8006dde <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fc1f 	bl	80055d4 <LL_ADC_IsEnabled>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fc03 	bl	80055ac <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006da6:	f7fe f8d9 	bl	8004f5c <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d914      	bls.n	8006dde <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d00d      	beq.n	8006dde <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc6:	f043 0210 	orr.w	r2, r3, #16
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd2:	f043 0201 	orr.w	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e007      	b.n	8006dee <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d1cf      	bne.n	8006d8c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	8000003f 	.word	0x8000003f
 8006dfc:	46021000 	.word	0x46021000
 8006e00:	42028000 	.word	0x42028000
 8006e04:	42028100 	.word	0x42028100
 8006e08:	42028300 	.word	0x42028300
 8006e0c:	46021300 	.word	0x46021300

08006e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <__NVIC_SetPriorityGrouping+0x44>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e42:	4a04      	ldr	r2, [pc, #16]	; (8006e54 <__NVIC_SetPriorityGrouping+0x44>)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	60d3      	str	r3, [r2, #12]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	e000ed00 	.word	0xe000ed00

08006e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <__NVIC_GetPriorityGrouping+0x18>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	f003 0307 	and.w	r3, r3, #7
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	e000ed00 	.word	0xe000ed00

08006e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db0a      	blt.n	8006e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	490c      	ldr	r1, [pc, #48]	; (8006ec0 <__NVIC_SetPriority+0x4c>)
 8006e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e92:	0112      	lsls	r2, r2, #4
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	440b      	add	r3, r1
 8006e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e9c:	e00a      	b.n	8006eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	4908      	ldr	r1, [pc, #32]	; (8006ec4 <__NVIC_SetPriority+0x50>)
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	0112      	lsls	r2, r2, #4
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	761a      	strb	r2, [r3, #24]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	e000e100 	.word	0xe000e100
 8006ec4:	e000ed00 	.word	0xe000ed00

08006ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f1c3 0307 	rsb	r3, r3, #7
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	bf28      	it	cs
 8006ee6:	2304      	movcs	r3, #4
 8006ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3304      	adds	r3, #4
 8006eee:	2b06      	cmp	r3, #6
 8006ef0:	d902      	bls.n	8006ef8 <NVIC_EncodePriority+0x30>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3b03      	subs	r3, #3
 8006ef6:	e000      	b.n	8006efa <NVIC_EncodePriority+0x32>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43da      	mvns	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	43d9      	mvns	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f20:	4313      	orrs	r3, r2
         );
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3724      	adds	r7, #36	; 0x24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f40:	d301      	bcc.n	8006f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f42:	2301      	movs	r3, #1
 8006f44:	e00f      	b.n	8006f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <SysTick_Config+0x40>)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f4e:	210f      	movs	r1, #15
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f54:	f7ff ff8e 	bl	8006e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <SysTick_Config+0x40>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <SysTick_Config+0x40>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000e010 	.word	0xe000e010

08006f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff47 	bl	8006e10 <__NVIC_SetPriorityGrouping>
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	4603      	mov	r3, r0
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
 8006f96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f98:	f7ff ff5e 	bl	8006e58 <__NVIC_GetPriorityGrouping>
 8006f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff ff90 	bl	8006ec8 <NVIC_EncodePriority>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff5f 	bl	8006e74 <__NVIC_SetPriority>
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ffb2 	bl	8006f30 <SysTick_Config>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b089      	sub	sp, #36	; 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006fea:	e1ba      	b.n	8007362 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 81aa 	beq.w	800735c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a55      	ldr	r2, [pc, #340]	; (8007160 <HAL_GPIO_Init+0x188>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d15d      	bne.n	80070cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007016:	2201      	movs	r2, #1
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	43db      	mvns	r3, r3
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	4013      	ands	r3, r2
 8007024:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 0201 	and.w	r2, r3, #1
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	4313      	orrs	r3, r2
 8007038:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007040:	4a48      	ldr	r2, [pc, #288]	; (8007164 <HAL_GPIO_Init+0x18c>)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007048:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800704a:	4a46      	ldr	r2, [pc, #280]	; (8007164 <HAL_GPIO_Init+0x18c>)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	08da      	lsrs	r2, r3, #3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3208      	adds	r2, #8
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	220f      	movs	r2, #15
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	4013      	ands	r3, r2
 8007078:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	220b      	movs	r2, #11
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	4313      	orrs	r3, r2
 800708c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	08da      	lsrs	r2, r3, #3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3208      	adds	r2, #8
 8007096:	69f9      	ldr	r1, [r7, #28]
 8007098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	2203      	movs	r2, #3
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	2202      	movs	r2, #2
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e067      	b.n	800719c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x104>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b12      	cmp	r3, #18
 80070da:	d145      	bne.n	8007168 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	08da      	lsrs	r2, r3, #3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3208      	adds	r2, #8
 80070e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	220f      	movs	r2, #15
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	43db      	mvns	r3, r3
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	4013      	ands	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	4313      	orrs	r3, r2
 8007118:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	08da      	lsrs	r2, r3, #3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3208      	adds	r2, #8
 8007122:	69f9      	ldr	r1, [r7, #28]
 8007124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	2203      	movs	r2, #3
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	4013      	ands	r3, r2
 800713e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 0203 	and.w	r2, r3, #3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	4313      	orrs	r3, r2
 8007154:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e01e      	b.n	800719c <HAL_GPIO_Init+0x1c4>
 800715e:	bf00      	nop
 8007160:	46020000 	.word	0x46020000
 8007164:	0800e7ec 	.word	0x0800e7ec
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	2203      	movs	r2, #3
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	4013      	ands	r3, r2
 800717e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 0203 	and.w	r2, r3, #3
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	4313      	orrs	r3, r2
 8007194:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d00b      	beq.n	80071bc <HAL_GPIO_Init+0x1e4>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d007      	beq.n	80071bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071b0:	2b11      	cmp	r3, #17
 80071b2:	d003      	beq.n	80071bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b12      	cmp	r3, #18
 80071ba:	d130      	bne.n	800721e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	2203      	movs	r2, #3
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	43db      	mvns	r3, r3
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	4013      	ands	r3, r2
 80071d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80071f2:	2201      	movs	r2, #1
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	43db      	mvns	r3, r3
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	4013      	ands	r3, r2
 8007200:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	f003 0201 	and.w	r2, r3, #1
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	4313      	orrs	r3, r2
 8007216:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b03      	cmp	r3, #3
 8007224:	d017      	beq.n	8007256 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	2203      	movs	r2, #3
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	43db      	mvns	r3, r3
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	4013      	ands	r3, r2
 800723c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	4313      	orrs	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d07c      	beq.n	800735c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007262:	4a47      	ldr	r2, [pc, #284]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	3318      	adds	r3, #24
 800726a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	220f      	movs	r2, #15
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43db      	mvns	r3, r3
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	4013      	ands	r3, r2
 8007284:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	0a9a      	lsrs	r2, r3, #10
 800728a:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <HAL_GPIO_Init+0x3ac>)
 800728c:	4013      	ands	r3, r2
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	f002 0203 	and.w	r2, r2, #3
 8007294:	00d2      	lsls	r2, r2, #3
 8007296:	4093      	lsls	r3, r2
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	4313      	orrs	r3, r2
 800729c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800729e:	4938      	ldr	r1, [pc, #224]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	089b      	lsrs	r3, r3, #2
 80072a4:	3318      	adds	r3, #24
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80072ac:	4b34      	ldr	r3, [pc, #208]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80072d0:	4a2b      	ldr	r2, [pc, #172]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80072d6:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	43db      	mvns	r3, r3
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80072fa:	4a21      	ldr	r2, [pc, #132]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007300:	4b1f      	ldr	r3, [pc, #124]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 8007302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007306:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	43db      	mvns	r3, r3
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	4013      	ands	r3, r2
 8007310:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 8007330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007334:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	43db      	mvns	r3, r3
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	4013      	ands	r3, r2
 800733e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007354:	4a0a      	ldr	r2, [pc, #40]	; (8007380 <HAL_GPIO_Init+0x3a8>)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3301      	adds	r3, #1
 8007360:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	f47f ae3d 	bne.w	8006fec <HAL_GPIO_Init+0x14>
  }
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	3724      	adds	r7, #36	; 0x24
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	46022000 	.word	0x46022000
 8007384:	002f7f7f 	.word	0x002f7f7f

08007388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
 8007394:	4613      	mov	r3, r2
 8007396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007398:	787b      	ldrb	r3, [r7, #1]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800739e:	887a      	ldrh	r2, [r7, #2]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80073a4:	e002      	b.n	80073ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4013      	ands	r3, r2
 80073d0:	041a      	lsls	r2, r3, #16
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	43d9      	mvns	r1, r3
 80073d6:	887b      	ldrh	r3, [r7, #2]
 80073d8:	400b      	ands	r3, r1
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80073ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ee:	b08d      	sub	sp, #52	; 0x34
 80073f0:	af0a      	add	r7, sp, #40	; 0x28
 80073f2:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e048      	b.n	8007490 <HAL_HCD_Init+0xa4>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fc fe4a 	bl	80040ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2203      	movs	r2, #3
 800741c:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
  {
    hhcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f006 f9d0 	bl	800d7ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	687e      	ldr	r6, [r7, #4]
 8007432:	466d      	mov	r5, sp
 8007434:	f106 0410 	add.w	r4, r6, #16
 8007438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800743a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800743c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800743e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007440:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007444:	e885 0003 	stmia.w	r5, {r0, r1}
 8007448:	1d33      	adds	r3, r6, #4
 800744a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800744c:	6838      	ldr	r0, [r7, #0]
 800744e:	f006 f98e 	bl	800d76e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f006 f9c7 	bl	800d7ec <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	687e      	ldr	r6, [r7, #4]
 8007466:	466d      	mov	r5, sp
 8007468:	f106 0410 	add.w	r4, r6, #16
 800746c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800746e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007478:	e885 0003 	stmia.w	r5, {r0, r1}
 800747c:	1d33      	adds	r3, r6, #4
 800747e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	f006 faa5 	bl	800d9d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007498 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e007      	b.n	80074c6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f023 0204 	bic.w	r2, r3, #4
 80074be:	4905      	ldr	r1, [pc, #20]	; (80074d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40030400 	.word	0x40030400

080074d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_ICACHE_Enable+0x1c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <HAL_ICACHE_Enable+0x1c>)
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40030400 	.word	0x40030400

080074f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007500:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007508:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d10b      	bne.n	800752a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007518:	d905      	bls.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800751a:	4b33      	ldr	r3, [pc, #204]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	4a32      	ldr	r2, [pc, #200]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007524:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	e057      	b.n	80075da <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007530:	d90a      	bls.n	8007548 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007532:	4b2d      	ldr	r3, [pc, #180]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4313      	orrs	r3, r2
 800753e:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007544:	60d3      	str	r3, [r2, #12]
 8007546:	e007      	b.n	8007558 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007548:	4b27      	ldr	r3, [pc, #156]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007550:	4925      	ldr	r1, [pc, #148]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4313      	orrs	r3, r2
 8007556:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007558:	4b24      	ldr	r3, [pc, #144]	; (80075ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a24      	ldr	r2, [pc, #144]	; (80075f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	099b      	lsrs	r3, r3, #6
 8007564:	2232      	movs	r2, #50	; 0x32
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	099b      	lsrs	r3, r3, #6
 8007572:	3301      	adds	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007576:	e002      	b.n	800757e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3b01      	subs	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800757e:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_PWREx_ControlVoltageScaling+0x98>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f3      	bne.n	8007578 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007596:	4b15      	ldr	r3, [pc, #84]	; (80075ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800759c:	fba2 2303 	umull	r2, r3, r2, r3
 80075a0:	099b      	lsrs	r3, r3, #6
 80075a2:	2232      	movs	r2, #50	; 0x32
 80075a4:	fb02 f303 	mul.w	r3, r2, r3
 80075a8:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80075aa:	fba2 2303 	umull	r2, r3, r2, r3
 80075ae:	099b      	lsrs	r3, r3, #6
 80075b0:	3301      	adds	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80075b4:	e002      	b.n	80075bc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_PWREx_ControlVoltageScaling+0xd6>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f3      	bne.n	80075b6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e000      	b.n	80075da <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	46020800 	.word	0x46020800
 80075ec:	20000000 	.word	0x20000000
 80075f0:	10624dd3 	.word	0x10624dd3

080075f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <HAL_PWREx_GetVoltageRange+0x18>)
 80075fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	46020800 	.word	0x46020800

08007610 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007618:	4b22      	ldr	r3, [pc, #136]	; (80076a4 <HAL_PWREx_ConfigSupply+0x94>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <HAL_PWREx_ConfigSupply+0x98>)
 800761e:	fba2 2303 	umull	r2, r3, r2, r3
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	2232      	movs	r2, #50	; 0x32
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_PWREx_ConfigSupply+0x98>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	099b      	lsrs	r3, r3, #6
 8007632:	3301      	adds	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d113      	bne.n	8007664 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4a1a      	ldr	r2, [pc, #104]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 8007642:	f023 0302 	bic.w	r3, r3, #2
 8007646:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007648:	e002      	b.n	8007650 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b01      	subs	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d116      	bne.n	800768a <HAL_PWREx_ConfigSupply+0x7a>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f3      	bne.n	800764a <HAL_PWREx_ConfigSupply+0x3a>
 8007662:	e012      	b.n	800768a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a10      	ldr	r2, [pc, #64]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 800766a:	f043 0302 	orr.w	r3, r3, #2
 800766e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007670:	e002      	b.n	8007678 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3b01      	subs	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <HAL_PWREx_ConfigSupply+0x9c>)
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <HAL_PWREx_ConfigSupply+0x7a>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f3      	bne.n	8007672 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e000      	b.n	8007696 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000000 	.word	0x20000000
 80076a8:	10624dd3 	.word	0x10624dd3
 80076ac:	46020800 	.word	0x46020800

080076b0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	4a04      	ldr	r2, [pc, #16]	; (80076cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076be:	6113      	str	r3, [r2, #16]
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	46020800 	.word	0x46020800

080076d0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	4a04      	ldr	r2, [pc, #16]	; (80076ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80076da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076de:	6113      	str	r3, [r2, #16]
}
 80076e0:	bf00      	nop
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	46020800 	.word	0x46020800

080076f0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_PWREx_EnableVddA+0x1c>)
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <HAL_PWREx_EnableVddA+0x1c>)
 80076fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076fe:	6113      	str	r3, [r2, #16]
}
 8007700:	bf00      	nop
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	46020800 	.word	0x46020800

08007710 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8007716:	f7ff ff6d 	bl	80075f4 <HAL_PWREx_GetVoltageRange>
 800771a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007722:	d003      	beq.n	800772c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800772a:	d107      	bne.n	800773c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a05      	ldr	r2, [pc, #20]	; (8007748 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8007732:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8007736:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	46020800 	.word	0x46020800

0800774c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	; 0x38
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f000 bec8 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007766:	4b99      	ldr	r3, [pc, #612]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007770:	4b96      	ldr	r3, [pc, #600]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 816c 	beq.w	8007a60 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <HAL_RCC_OscConfig+0x52>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b0c      	cmp	r3, #12
 8007792:	f040 80de 	bne.w	8007952 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b01      	cmp	r3, #1
 800779a:	f040 80da 	bne.w	8007952 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f000 bea5 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077b0:	4b86      	ldr	r3, [pc, #536]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <HAL_RCC_OscConfig+0x7a>
 80077bc:	4b83      	ldr	r3, [pc, #524]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077c4:	e005      	b.n	80077d2 <HAL_RCC_OscConfig+0x86>
 80077c6:	4b81      	ldr	r3, [pc, #516]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80077c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d255      	bcs.n	8007882 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f9d9 	bl	8008b98 <RCC_SetFlashLatencyFromMSIRange>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f000 be82 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80077f2:	4b76      	ldr	r3, [pc, #472]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	4a75      	ldr	r2, [pc, #468]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80077f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077fc:	6093      	str	r3, [r2, #8]
 80077fe:	4b73      	ldr	r3, [pc, #460]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	4970      	ldr	r1, [pc, #448]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800780c:	4313      	orrs	r3, r2
 800780e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007818:	d309      	bcc.n	800782e <HAL_RCC_OscConfig+0xe2>
 800781a:	4b6c      	ldr	r3, [pc, #432]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f023 021f 	bic.w	r2, r3, #31
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	4969      	ldr	r1, [pc, #420]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007828:	4313      	orrs	r3, r2
 800782a:	60cb      	str	r3, [r1, #12]
 800782c:	e07e      	b.n	800792c <HAL_RCC_OscConfig+0x1e0>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	da0a      	bge.n	800784c <HAL_RCC_OscConfig+0x100>
 8007836:	4b65      	ldr	r3, [pc, #404]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	015b      	lsls	r3, r3, #5
 8007844:	4961      	ldr	r1, [pc, #388]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007846:	4313      	orrs	r3, r2
 8007848:	60cb      	str	r3, [r1, #12]
 800784a:	e06f      	b.n	800792c <HAL_RCC_OscConfig+0x1e0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d30a      	bcc.n	800786c <HAL_RCC_OscConfig+0x120>
 8007856:	4b5d      	ldr	r3, [pc, #372]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	029b      	lsls	r3, r3, #10
 8007864:	4959      	ldr	r1, [pc, #356]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007866:	4313      	orrs	r3, r2
 8007868:	60cb      	str	r3, [r1, #12]
 800786a:	e05f      	b.n	800792c <HAL_RCC_OscConfig+0x1e0>
 800786c:	4b57      	ldr	r3, [pc, #348]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	03db      	lsls	r3, r3, #15
 800787a:	4954      	ldr	r1, [pc, #336]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800787c:	4313      	orrs	r3, r2
 800787e:	60cb      	str	r3, [r1, #12]
 8007880:	e054      	b.n	800792c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007882:	4b52      	ldr	r3, [pc, #328]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4a51      	ldr	r2, [pc, #324]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800788c:	6093      	str	r3, [r2, #8]
 800788e:	4b4f      	ldr	r3, [pc, #316]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	494c      	ldr	r1, [pc, #304]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800789c:	4313      	orrs	r3, r2
 800789e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80078a8:	d309      	bcc.n	80078be <HAL_RCC_OscConfig+0x172>
 80078aa:	4b48      	ldr	r3, [pc, #288]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f023 021f 	bic.w	r2, r3, #31
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4945      	ldr	r1, [pc, #276]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60cb      	str	r3, [r1, #12]
 80078bc:	e028      	b.n	8007910 <HAL_RCC_OscConfig+0x1c4>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da0a      	bge.n	80078dc <HAL_RCC_OscConfig+0x190>
 80078c6:	4b41      	ldr	r3, [pc, #260]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	015b      	lsls	r3, r3, #5
 80078d4:	493d      	ldr	r1, [pc, #244]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60cb      	str	r3, [r1, #12]
 80078da:	e019      	b.n	8007910 <HAL_RCC_OscConfig+0x1c4>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d30a      	bcc.n	80078fc <HAL_RCC_OscConfig+0x1b0>
 80078e6:	4b39      	ldr	r3, [pc, #228]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	029b      	lsls	r3, r3, #10
 80078f4:	4935      	ldr	r1, [pc, #212]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60cb      	str	r3, [r1, #12]
 80078fa:	e009      	b.n	8007910 <HAL_RCC_OscConfig+0x1c4>
 80078fc:	4b33      	ldr	r3, [pc, #204]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	03db      	lsls	r3, r3, #15
 800790a:	4930      	ldr	r1, [pc, #192]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800790c:	4313      	orrs	r3, r2
 800790e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f93c 	bl	8008b98 <RCC_SetFlashLatencyFromMSIRange>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f000 bde5 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800792c:	f001 f8de 	bl	8008aec <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007930:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <HAL_RCC_OscConfig+0x284>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd fac7 	bl	8004ec8 <HAL_InitTick>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8007940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 808a 	beq.w	8007a5e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800794a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800794e:	f000 bdd2 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d066      	beq.n	8007a28 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800795a:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007966:	f7fd faf9 	bl	8004f5c <HAL_GetTick>
 800796a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800796c:	e009      	b.n	8007982 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800796e:	f7fd faf5 	bl	8004f5c <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d902      	bls.n	8007982 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	f000 bdba 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0ef      	beq.n	800796e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	4a0e      	ldr	r2, [pc, #56]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 8007994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007998:	6093      	str	r3, [r2, #8]
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	4909      	ldr	r1, [pc, #36]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80079b4:	d30e      	bcc.n	80079d4 <HAL_RCC_OscConfig+0x288>
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f023 021f 	bic.w	r2, r3, #31
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	4902      	ldr	r1, [pc, #8]	; (80079cc <HAL_RCC_OscConfig+0x280>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60cb      	str	r3, [r1, #12]
 80079c8:	e04a      	b.n	8007a60 <HAL_RCC_OscConfig+0x314>
 80079ca:	bf00      	nop
 80079cc:	46020c00 	.word	0x46020c00
 80079d0:	2000001c 	.word	0x2000001c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	da0a      	bge.n	80079f2 <HAL_RCC_OscConfig+0x2a6>
 80079dc:	4b98      	ldr	r3, [pc, #608]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	015b      	lsls	r3, r3, #5
 80079ea:	4995      	ldr	r1, [pc, #596]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60cb      	str	r3, [r1, #12]
 80079f0:	e036      	b.n	8007a60 <HAL_RCC_OscConfig+0x314>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fa:	d30a      	bcc.n	8007a12 <HAL_RCC_OscConfig+0x2c6>
 80079fc:	4b90      	ldr	r3, [pc, #576]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	498d      	ldr	r1, [pc, #564]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60cb      	str	r3, [r1, #12]
 8007a10:	e026      	b.n	8007a60 <HAL_RCC_OscConfig+0x314>
 8007a12:	4b8b      	ldr	r3, [pc, #556]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	03db      	lsls	r3, r3, #15
 8007a20:	4987      	ldr	r1, [pc, #540]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60cb      	str	r3, [r1, #12]
 8007a26:	e01b      	b.n	8007a60 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007a28:	4b85      	ldr	r3, [pc, #532]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a84      	ldr	r2, [pc, #528]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a34:	f7fd fa92 	bl	8004f5c <HAL_GetTick>
 8007a38:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007a3a:	e009      	b.n	8007a50 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a3c:	f7fd fa8e 	bl	8004f5c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d902      	bls.n	8007a50 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	f000 bd53 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007a50:	4b7b      	ldr	r3, [pc, #492]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1ef      	bne.n	8007a3c <HAL_RCC_OscConfig+0x2f0>
 8007a5c:	e000      	b.n	8007a60 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007a5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 808b 	beq.w	8007b84 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d005      	beq.n	8007a80 <HAL_RCC_OscConfig+0x334>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	2b0c      	cmp	r3, #12
 8007a78:	d109      	bne.n	8007a8e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d106      	bne.n	8007a8e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d17d      	bne.n	8007b84 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f000 bd34 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a96:	d106      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x35a>
 8007a98:	4b69      	ldr	r3, [pc, #420]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a68      	ldr	r2, [pc, #416]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e041      	b.n	8007b2a <HAL_RCC_OscConfig+0x3de>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aae:	d112      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x38a>
 8007ab0:	4b63      	ldr	r3, [pc, #396]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a62      	ldr	r2, [pc, #392]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4b60      	ldr	r3, [pc, #384]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a5f      	ldr	r2, [pc, #380]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4b5d      	ldr	r3, [pc, #372]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a5c      	ldr	r2, [pc, #368]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	e029      	b.n	8007b2a <HAL_RCC_OscConfig+0x3de>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007ade:	d112      	bne.n	8007b06 <HAL_RCC_OscConfig+0x3ba>
 8007ae0:	4b57      	ldr	r3, [pc, #348]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a56      	ldr	r2, [pc, #344]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	4b54      	ldr	r3, [pc, #336]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a53      	ldr	r2, [pc, #332]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4b51      	ldr	r3, [pc, #324]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a50      	ldr	r2, [pc, #320]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	e011      	b.n	8007b2a <HAL_RCC_OscConfig+0x3de>
 8007b06:	4b4e      	ldr	r3, [pc, #312]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a4d      	ldr	r2, [pc, #308]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	4b4b      	ldr	r3, [pc, #300]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a4a      	ldr	r2, [pc, #296]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	4b48      	ldr	r3, [pc, #288]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a47      	ldr	r2, [pc, #284]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007b32:	f7fd fa13 	bl	8004f5c <HAL_GetTick>
 8007b36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b38:	e009      	b.n	8007b4e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b3a:	f7fd fa0f 	bl	8004f5c <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b64      	cmp	r3, #100	; 0x64
 8007b46:	d902      	bls.n	8007b4e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	f000 bcd4 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ef      	beq.n	8007b3a <HAL_RCC_OscConfig+0x3ee>
 8007b5a:	e013      	b.n	8007b84 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007b5c:	f7fd f9fe 	bl	8004f5c <HAL_GetTick>
 8007b60:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b62:	e009      	b.n	8007b78 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b64:	f7fd f9fa 	bl	8004f5c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	; 0x64
 8007b70:	d902      	bls.n	8007b78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	f000 bcbf 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b78:	4b31      	ldr	r3, [pc, #196]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ef      	bne.n	8007b64 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d05f      	beq.n	8007c50 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d005      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x456>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	2b0c      	cmp	r3, #12
 8007b9a:	d114      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d111      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f000 bca3 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	041b      	lsls	r3, r3, #16
 8007bbe:	4920      	ldr	r1, [pc, #128]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007bc4:	e044      	b.n	8007c50 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d024      	beq.n	8007c18 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007bce:	4b1c      	ldr	r3, [pc, #112]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007bda:	f7fd f9bf 	bl	8004f5c <HAL_GetTick>
 8007bde:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007be0:	e009      	b.n	8007bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be2:	f7fd f9bb 	bl	8004f5c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d902      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	f000 bc80 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ef      	beq.n	8007be2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	490b      	ldr	r1, [pc, #44]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	610b      	str	r3, [r1, #16]
 8007c16:	e01b      	b.n	8007c50 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <HAL_RCC_OscConfig+0x4f4>)
 8007c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c24:	f7fd f99a 	bl	8004f5c <HAL_GetTick>
 8007c28:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c2a:	e00b      	b.n	8007c44 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c2c:	f7fd f996 	bl	8004f5c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d904      	bls.n	8007c44 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	f000 bc5b 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
 8007c40:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c44:	4baf      	ldr	r3, [pc, #700]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1ed      	bne.n	8007c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80c8 	beq.w	8007dee <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c64:	4ba7      	ldr	r3, [pc, #668]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d111      	bne.n	8007c96 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c72:	4ba4      	ldr	r3, [pc, #656]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c78:	4aa2      	ldr	r2, [pc, #648]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007c7a:	f043 0304 	orr.w	r3, r3, #4
 8007c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007c82:	4ba0      	ldr	r3, [pc, #640]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c96:	4b9c      	ldr	r3, [pc, #624]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d119      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ca2:	4b99      	ldr	r3, [pc, #612]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	4a98      	ldr	r2, [pc, #608]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007ca8:	f043 0301 	orr.w	r3, r3, #1
 8007cac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cae:	f7fd f955 	bl	8004f5c <HAL_GetTick>
 8007cb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cb4:	e009      	b.n	8007cca <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb6:	f7fd f951 	bl	8004f5c <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d902      	bls.n	8007cca <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	f000 bc16 	b.w	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cca:	4b8f      	ldr	r3, [pc, #572]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0ef      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d05f      	beq.n	8007d9e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007cde:	4b89      	ldr	r3, [pc, #548]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d037      	beq.n	8007d64 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d006      	beq.n	8007d0c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e3f4      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01b      	beq.n	8007d4e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007d16:	4b7b      	ldr	r3, [pc, #492]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d1c:	4a79      	ldr	r2, [pc, #484]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d1e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007d26:	f7fd f919 	bl	8004f5c <HAL_GetTick>
 8007d2a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d2c:	e008      	b.n	8007d40 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d2e:	f7fd f915 	bl	8004f5c <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b05      	cmp	r3, #5
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e3da      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d40:	4b70      	ldr	r3, [pc, #448]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1ef      	bne.n	8007d2e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007d4e:	4b6d      	ldr	r3, [pc, #436]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d54:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	4969      	ldr	r1, [pc, #420]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007d64:	4b67      	ldr	r3, [pc, #412]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d6a:	4a66      	ldr	r2, [pc, #408]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007d74:	f7fd f8f2 	bl	8004f5c <HAL_GetTick>
 8007d78:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d7c:	f7fd f8ee 	bl	8004f5c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b05      	cmp	r3, #5
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e3b3      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007d8e:	4b5d      	ldr	r3, [pc, #372]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0ef      	beq.n	8007d7c <HAL_RCC_OscConfig+0x630>
 8007d9c:	e01b      	b.n	8007dd6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007d9e:	4b59      	ldr	r3, [pc, #356]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007da4:	4a57      	ldr	r2, [pc, #348]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007da6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8007daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007dae:	f7fd f8d5 	bl	8004f5c <HAL_GetTick>
 8007db2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007db6:	f7fd f8d1 	bl	8004f5c <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e396      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007dc8:	4b4e      	ldr	r3, [pc, #312]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1ef      	bne.n	8007db6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dd6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d107      	bne.n	8007dee <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dde:	4b49      	ldr	r3, [pc, #292]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007de4:	4a47      	ldr	r2, [pc, #284]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007de6:	f023 0304 	bic.w	r3, r3, #4
 8007dea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8111 	beq.w	800801e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e02:	4b40      	ldr	r3, [pc, #256]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d111      	bne.n	8007e34 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e10:	4b3c      	ldr	r3, [pc, #240]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e16:	4a3b      	ldr	r2, [pc, #236]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e18:	f043 0304 	orr.w	r3, r3, #4
 8007e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007e20:	4b38      	ldr	r3, [pc, #224]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e34:	4b34      	ldr	r3, [pc, #208]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d118      	bne.n	8007e72 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007e40:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	4a30      	ldr	r2, [pc, #192]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e4c:	f7fd f886 	bl	8004f5c <HAL_GetTick>
 8007e50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e54:	f7fd f882 	bl	8004f5c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e347      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007e66:	4b28      	ldr	r3, [pc, #160]	; (8007f08 <HAL_RCC_OscConfig+0x7bc>)
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01f      	beq.n	8007ebe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d010      	beq.n	8007eac <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007e8a:	4b1e      	ldr	r3, [pc, #120]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e90:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e92:	f043 0304 	orr.w	r3, r3, #4
 8007e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e9a:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ea0:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007eaa:	e018      	b.n	8007ede <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007eac:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eb2:	4a14      	ldr	r2, [pc, #80]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007eb4:	f043 0301 	orr.w	r3, r3, #1
 8007eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007ebc:	e00f      	b.n	8007ede <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ece:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ed4:	4a0b      	ldr	r2, [pc, #44]	; (8007f04 <HAL_RCC_OscConfig+0x7b8>)
 8007ed6:	f023 0304 	bic.w	r3, r3, #4
 8007eda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d057      	beq.n	8007f96 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007ee6:	f7fd f839 	bl	8004f5c <HAL_GetTick>
 8007eea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eec:	e00e      	b.n	8007f0c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eee:	f7fd f835 	bl	8004f5c <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d905      	bls.n	8007f0c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e2f8      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
 8007f04:	46020c00 	.word	0x46020c00
 8007f08:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f0c:	4b9c      	ldr	r3, [pc, #624]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0e9      	beq.n	8007eee <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01b      	beq.n	8007f5e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f26:	4b96      	ldr	r3, [pc, #600]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f2c:	4a94      	ldr	r2, [pc, #592]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007f36:	e00a      	b.n	8007f4e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f38:	f7fd f810 	bl	8004f5c <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e2d3      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007f4e:	4b8c      	ldr	r3, [pc, #560]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ed      	beq.n	8007f38 <HAL_RCC_OscConfig+0x7ec>
 8007f5c:	e053      	b.n	8008006 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f5e:	4b88      	ldr	r3, [pc, #544]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f64:	4a86      	ldr	r2, [pc, #536]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f70:	f7fc fff4 	bl	8004f5c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e2b7      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f86:	4b7e      	ldr	r3, [pc, #504]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1ed      	bne.n	8007f70 <HAL_RCC_OscConfig+0x824>
 8007f94:	e037      	b.n	8008006 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007f96:	f7fc ffe1 	bl	8004f5c <HAL_GetTick>
 8007f9a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f9c:	e00a      	b.n	8007fb4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9e:	f7fc ffdd 	bl	8004f5c <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e2a0      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fb4:	4b72      	ldr	r3, [pc, #456]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ed      	bne.n	8007f9e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007fc2:	4b6f      	ldr	r3, [pc, #444]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01a      	beq.n	8008006 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007fd0:	4b6b      	ldr	r3, [pc, #428]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fd6:	4a6a      	ldr	r2, [pc, #424]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe2:	f7fc ffbb 	bl	8004f5c <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e27e      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ff8:	4b61      	ldr	r3, [pc, #388]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8007ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1ed      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008006:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800800a:	2b01      	cmp	r3, #1
 800800c:	d107      	bne.n	800801e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800800e:	4b5c      	ldr	r3, [pc, #368]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008014:	4a5a      	ldr	r2, [pc, #360]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008016:	f023 0304 	bic.w	r3, r3, #4
 800801a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d036      	beq.n	8008098 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d019      	beq.n	8008066 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008032:	4b53      	ldr	r3, [pc, #332]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a52      	ldr	r2, [pc, #328]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800803c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800803e:	f7fc ff8d 	bl	8004f5c <HAL_GetTick>
 8008042:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008044:	e008      	b.n	8008058 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008046:	f7fc ff89 	bl	8004f5c <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d901      	bls.n	8008058 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e24e      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008058:	4b49      	ldr	r3, [pc, #292]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f0      	beq.n	8008046 <HAL_RCC_OscConfig+0x8fa>
 8008064:	e018      	b.n	8008098 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008066:	4b46      	ldr	r3, [pc, #280]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a45      	ldr	r2, [pc, #276]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800806c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008070:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008072:	f7fc ff73 	bl	8004f5c <HAL_GetTick>
 8008076:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800807a:	f7fc ff6f 	bl	8004f5c <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e234      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800808c:	4b3c      	ldr	r3, [pc, #240]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d036      	beq.n	8008112 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d019      	beq.n	80080e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80080ac:	4b34      	ldr	r3, [pc, #208]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a33      	ldr	r2, [pc, #204]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 80080b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080b8:	f7fc ff50 	bl	8004f5c <HAL_GetTick>
 80080bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80080c0:	f7fc ff4c 	bl	8004f5c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e211      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80080d2:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0x974>
 80080de:	e018      	b.n	8008112 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80080e0:	4b27      	ldr	r3, [pc, #156]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a26      	ldr	r2, [pc, #152]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 80080e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80080ec:	f7fc ff36 	bl	8004f5c <HAL_GetTick>
 80080f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80080f4:	f7fc ff32 	bl	8004f5c <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e1f7      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008106:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d07f      	beq.n	800821e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	2b00      	cmp	r3, #0
 8008124:	d062      	beq.n	80081ec <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008126:	4b16      	ldr	r3, [pc, #88]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	4a15      	ldr	r2, [pc, #84]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800812c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008130:	6093      	str	r3, [r2, #8]
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	4910      	ldr	r1, [pc, #64]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008140:	4313      	orrs	r3, r2
 8008142:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800814c:	d309      	bcc.n	8008162 <HAL_RCC_OscConfig+0xa16>
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f023 021f 	bic.w	r2, r3, #31
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	4909      	ldr	r1, [pc, #36]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800815c:	4313      	orrs	r3, r2
 800815e:	60cb      	str	r3, [r1, #12]
 8008160:	e02a      	b.n	80081b8 <HAL_RCC_OscConfig+0xa6c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	da0c      	bge.n	8008184 <HAL_RCC_OscConfig+0xa38>
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	015b      	lsls	r3, r3, #5
 8008178:	4901      	ldr	r1, [pc, #4]	; (8008180 <HAL_RCC_OscConfig+0xa34>)
 800817a:	4313      	orrs	r3, r2
 800817c:	60cb      	str	r3, [r1, #12]
 800817e:	e01b      	b.n	80081b8 <HAL_RCC_OscConfig+0xa6c>
 8008180:	46020c00 	.word	0x46020c00
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818c:	d30a      	bcc.n	80081a4 <HAL_RCC_OscConfig+0xa58>
 800818e:	4ba1      	ldr	r3, [pc, #644]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	499d      	ldr	r1, [pc, #628]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	60cb      	str	r3, [r1, #12]
 80081a2:	e009      	b.n	80081b8 <HAL_RCC_OscConfig+0xa6c>
 80081a4:	4b9b      	ldr	r3, [pc, #620]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	03db      	lsls	r3, r3, #15
 80081b2:	4998      	ldr	r1, [pc, #608]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80081b8:	4b96      	ldr	r3, [pc, #600]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a95      	ldr	r2, [pc, #596]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081be:	f043 0310 	orr.w	r3, r3, #16
 80081c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80081c4:	f7fc feca 	bl	8004f5c <HAL_GetTick>
 80081c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80081cc:	f7fc fec6 	bl	8004f5c <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e18b      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80081de:	4b8d      	ldr	r3, [pc, #564]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0xa80>
 80081ea:	e018      	b.n	800821e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80081ec:	4b89      	ldr	r3, [pc, #548]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a88      	ldr	r2, [pc, #544]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80081f2:	f023 0310 	bic.w	r3, r3, #16
 80081f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80081f8:	f7fc feb0 	bl	8004f5c <HAL_GetTick>
 80081fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008200:	f7fc feac 	bl	8004f5c <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e171      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008212:	4b80      	ldr	r3, [pc, #512]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1f0      	bne.n	8008200 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8166 	beq.w	80084f4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800822e:	4b79      	ldr	r3, [pc, #484]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f003 030c 	and.w	r3, r3, #12
 8008236:	2b0c      	cmp	r3, #12
 8008238:	f000 80f2 	beq.w	8008420 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	2b02      	cmp	r3, #2
 8008242:	f040 80c5 	bne.w	80083d0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008246:	4b73      	ldr	r3, [pc, #460]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a72      	ldr	r2, [pc, #456]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800824c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008250:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008252:	f7fc fe83 	bl	8004f5c <HAL_GetTick>
 8008256:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800825a:	f7fc fe7f 	bl	8004f5c <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e144      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800826c:	4b69      	ldr	r3, [pc, #420]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f0      	bne.n	800825a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008278:	4b66      	ldr	r3, [pc, #408]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800827a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d111      	bne.n	80082aa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008286:	4b63      	ldr	r3, [pc, #396]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800828c:	4a61      	ldr	r2, [pc, #388]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800828e:	f043 0304 	orr.w	r3, r3, #4
 8008292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008296:	4b5f      	ldr	r3, [pc, #380]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80082aa:	4b5b      	ldr	r3, [pc, #364]	; (8008418 <HAL_RCC_OscConfig+0xccc>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082b6:	d102      	bne.n	80082be <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80082be:	4b56      	ldr	r3, [pc, #344]	; (8008418 <HAL_RCC_OscConfig+0xccc>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4a55      	ldr	r2, [pc, #340]	; (8008418 <HAL_RCC_OscConfig+0xccc>)
 80082c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082c8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80082ca:	4b52      	ldr	r3, [pc, #328]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80082de:	3a01      	subs	r2, #1
 80082e0:	0212      	lsls	r2, r2, #8
 80082e2:	4311      	orrs	r1, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80082e8:	430a      	orrs	r2, r1
 80082ea:	494a      	ldr	r1, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	628b      	str	r3, [r1, #40]	; 0x28
 80082f0:	4b48      	ldr	r3, [pc, #288]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80082f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f4:	4b49      	ldr	r3, [pc, #292]	; (800841c <HAL_RCC_OscConfig+0xcd0>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082fc:	3a01      	subs	r2, #1
 80082fe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008306:	3a01      	subs	r2, #1
 8008308:	0252      	lsls	r2, r2, #9
 800830a:	b292      	uxth	r2, r2
 800830c:	4311      	orrs	r1, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008312:	3a01      	subs	r2, #1
 8008314:	0412      	lsls	r2, r2, #16
 8008316:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800831a:	4311      	orrs	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008320:	3a01      	subs	r2, #1
 8008322:	0612      	lsls	r2, r2, #24
 8008324:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008328:	430a      	orrs	r2, r1
 800832a:	493a      	ldr	r1, [pc, #232]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800832c:	4313      	orrs	r3, r2
 800832e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008330:	4b38      	ldr	r3, [pc, #224]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	4a37      	ldr	r2, [pc, #220]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008336:	f023 0310 	bic.w	r3, r3, #16
 800833a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008340:	4a34      	ldr	r2, [pc, #208]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008346:	4b33      	ldr	r3, [pc, #204]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	4a32      	ldr	r2, [pc, #200]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800834c:	f043 0310 	orr.w	r3, r3, #16
 8008350:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008352:	4b30      	ldr	r3, [pc, #192]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	f023 020c 	bic.w	r2, r3, #12
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	492d      	ldr	r1, [pc, #180]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008360:	4313      	orrs	r3, r2
 8008362:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008368:	2b01      	cmp	r3, #1
 800836a:	d105      	bne.n	8008378 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800836c:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <HAL_RCC_OscConfig+0xccc>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a29      	ldr	r2, [pc, #164]	; (8008418 <HAL_RCC_OscConfig+0xccc>)
 8008372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008376:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008378:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800837c:	2b01      	cmp	r3, #1
 800837e:	d107      	bne.n	8008390 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008380:	4b24      	ldr	r3, [pc, #144]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008386:	4a23      	ldr	r2, [pc, #140]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008388:	f023 0304 	bic.w	r3, r3, #4
 800838c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800839a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800839c:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80083a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80083a8:	f7fc fdd8 	bl	8004f5c <HAL_GetTick>
 80083ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fc fdd4 	bl	8004f5c <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e099      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80083c2:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f0      	beq.n	80083b0 <HAL_RCC_OscConfig+0xc64>
 80083ce:	e091      	b.n	80084f4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80083d0:	4b10      	ldr	r3, [pc, #64]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80083d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80083dc:	f7fc fdbe 	bl	8004f5c <HAL_GetTick>
 80083e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e4:	f7fc fdba 	bl	8004f5c <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e07f      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008402:	4b04      	ldr	r3, [pc, #16]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	4a03      	ldr	r2, [pc, #12]	; (8008414 <HAL_RCC_OscConfig+0xcc8>)
 8008408:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	6293      	str	r3, [r2, #40]	; 0x28
 8008412:	e06f      	b.n	80084f4 <HAL_RCC_OscConfig+0xda8>
 8008414:	46020c00 	.word	0x46020c00
 8008418:	46020800 	.word	0x46020800
 800841c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008420:	4b37      	ldr	r3, [pc, #220]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008426:	4b36      	ldr	r3, [pc, #216]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	2b01      	cmp	r3, #1
 8008432:	d039      	beq.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f003 0203 	and.w	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d132      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d129      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800845e:	429a      	cmp	r2, r3
 8008460:	d122      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d11a      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	0a5b      	lsrs	r3, r3, #9
 8008476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008480:	429a      	cmp	r2, r3
 8008482:	d111      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008490:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d108      	bne.n	80084a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e024      	b.n	80084f6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	08db      	lsrs	r3, r3, #3
 80084b2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d01a      	beq.n	80084f4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	4a0f      	ldr	r2, [pc, #60]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084c4:	f023 0310 	bic.w	r3, r3, #16
 80084c8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ca:	f7fc fd47 	bl	8004f5c <HAL_GetTick>
 80084ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80084d0:	bf00      	nop
 80084d2:	f7fc fd43 	bl	8004f5c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	4293      	cmp	r3, r2
 80084dc:	d0f9      	beq.n	80084d2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e2:	4a07      	ldr	r2, [pc, #28]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	4a04      	ldr	r2, [pc, #16]	; (8008500 <HAL_RCC_OscConfig+0xdb4>)
 80084ee:	f043 0310 	orr.w	r3, r3, #16
 80084f2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3738      	adds	r7, #56	; 0x38
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	46020c00 	.word	0x46020c00

08008504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e1d9      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008518:	4b9b      	ldr	r3, [pc, #620]	; (8008788 <HAL_RCC_ClockConfig+0x284>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d910      	bls.n	8008548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008526:	4b98      	ldr	r3, [pc, #608]	; (8008788 <HAL_RCC_ClockConfig+0x284>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f023 020f 	bic.w	r2, r3, #15
 800852e:	4996      	ldr	r1, [pc, #600]	; (8008788 <HAL_RCC_ClockConfig+0x284>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b94      	ldr	r3, [pc, #592]	; (8008788 <HAL_RCC_ClockConfig+0x284>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e1c1      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695a      	ldr	r2, [r3, #20]
 8008558:	4b8c      	ldr	r3, [pc, #560]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008560:	429a      	cmp	r2, r3
 8008562:	d908      	bls.n	8008576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008564:	4b89      	ldr	r3, [pc, #548]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	4986      	ldr	r1, [pc, #536]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008572:	4313      	orrs	r3, r2
 8008574:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d012      	beq.n	80085a8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	4b81      	ldr	r3, [pc, #516]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008590:	429a      	cmp	r2, r3
 8008592:	d909      	bls.n	80085a8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008594:	4b7d      	ldr	r3, [pc, #500]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	497a      	ldr	r1, [pc, #488]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d010      	beq.n	80085d6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	4b74      	ldr	r3, [pc, #464]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d908      	bls.n	80085d6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80085c4:	4b71      	ldr	r3, [pc, #452]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	496e      	ldr	r1, [pc, #440]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	4b69      	ldr	r3, [pc, #420]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d908      	bls.n	8008604 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80085f2:	4b66      	ldr	r3, [pc, #408]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f023 020f 	bic.w	r2, r3, #15
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4963      	ldr	r1, [pc, #396]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008600:	4313      	orrs	r3, r2
 8008602:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80d2 	beq.w	80087b6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2b03      	cmp	r3, #3
 800861c:	d143      	bne.n	80086a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800861e:	4b5b      	ldr	r3, [pc, #364]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d110      	bne.n	800864e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800862c:	4b57      	ldr	r3, [pc, #348]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800862e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008632:	4a56      	ldr	r2, [pc, #344]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008634:	f043 0304 	orr.w	r3, r3, #4
 8008638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800863c:	4b53      	ldr	r3, [pc, #332]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800863e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800864e:	f7fc fc85 	bl	8004f5c <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008654:	4b4e      	ldr	r3, [pc, #312]	; (8008790 <HAL_RCC_ClockConfig+0x28c>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00f      	beq.n	8008680 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008660:	e008      	b.n	8008674 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008662:	f7fc fc7b 	bl	8004f5c <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e12b      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008674:	4b46      	ldr	r3, [pc, #280]	; (8008790 <HAL_RCC_ClockConfig+0x28c>)
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d107      	bne.n	8008696 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008686:	4b41      	ldr	r3, [pc, #260]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800868c:	4a3f      	ldr	r2, [pc, #252]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800868e:	f023 0304 	bic.w	r3, r3, #4
 8008692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008696:	4b3d      	ldr	r3, [pc, #244]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d121      	bne.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e112      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d107      	bne.n	80086be <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086ae:	4b37      	ldr	r3, [pc, #220]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d115      	bne.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e106      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d107      	bne.n	80086d6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80086c6:	4b31      	ldr	r3, [pc, #196]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e0fa      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086d6:	4b2d      	ldr	r3, [pc, #180]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0f2      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f023 0203 	bic.w	r2, r3, #3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4926      	ldr	r1, [pc, #152]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80086f8:	f7fc fc30 	bl	8004f5c <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b03      	cmp	r3, #3
 8008704:	d112      	bne.n	800872c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008706:	e00a      	b.n	800871e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008708:	f7fc fc28 	bl	8004f5c <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f241 3288 	movw	r2, #5000	; 0x1388
 8008716:	4293      	cmp	r3, r2
 8008718:	d901      	bls.n	800871e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e0d6      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	2b0c      	cmp	r3, #12
 8008728:	d1ee      	bne.n	8008708 <HAL_RCC_ClockConfig+0x204>
 800872a:	e044      	b.n	80087b6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d112      	bne.n	800875a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008734:	e00a      	b.n	800874c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008736:	f7fc fc11 	bl	8004f5c <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	f241 3288 	movw	r2, #5000	; 0x1388
 8008744:	4293      	cmp	r3, r2
 8008746:	d901      	bls.n	800874c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e0bf      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f003 030c 	and.w	r3, r3, #12
 8008754:	2b08      	cmp	r3, #8
 8008756:	d1ee      	bne.n	8008736 <HAL_RCC_ClockConfig+0x232>
 8008758:	e02d      	b.n	80087b6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d123      	bne.n	80087aa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008762:	e00a      	b.n	800877a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008764:	f7fc fbfa 	bl	8004f5c <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008772:	4293      	cmp	r3, r2
 8008774:	d901      	bls.n	800877a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e0a8      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <HAL_RCC_ClockConfig+0x288>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f003 030c 	and.w	r3, r3, #12
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1ee      	bne.n	8008764 <HAL_RCC_ClockConfig+0x260>
 8008786:	e016      	b.n	80087b6 <HAL_RCC_ClockConfig+0x2b2>
 8008788:	40022000 	.word	0x40022000
 800878c:	46020c00 	.word	0x46020c00
 8008790:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008794:	f7fc fbe2 	bl	8004f5c <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e090      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80087aa:	4b4a      	ldr	r3, [pc, #296]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f003 030c 	and.w	r3, r3, #12
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d1ee      	bne.n	8008794 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d010      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	4b43      	ldr	r3, [pc, #268]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f003 030f 	and.w	r3, r3, #15
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d208      	bcs.n	80087e4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80087d2:	4b40      	ldr	r3, [pc, #256]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f023 020f 	bic.w	r2, r3, #15
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	493d      	ldr	r1, [pc, #244]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087e4:	4b3c      	ldr	r3, [pc, #240]	; (80088d8 <HAL_RCC_ClockConfig+0x3d4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d210      	bcs.n	8008814 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <HAL_RCC_ClockConfig+0x3d4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f023 020f 	bic.w	r2, r3, #15
 80087fa:	4937      	ldr	r1, [pc, #220]	; (80088d8 <HAL_RCC_ClockConfig+0x3d4>)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	4313      	orrs	r3, r2
 8008800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008802:	4b35      	ldr	r3, [pc, #212]	; (80088d8 <HAL_RCC_ClockConfig+0x3d4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d001      	beq.n	8008814 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e05b      	b.n	80088cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	4b2b      	ldr	r3, [pc, #172]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800882c:	429a      	cmp	r2, r3
 800882e:	d208      	bcs.n	8008842 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008830:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4925      	ldr	r1, [pc, #148]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 800883e:	4313      	orrs	r3, r2
 8008840:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	091b      	lsrs	r3, r3, #4
 8008858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800885c:	429a      	cmp	r2, r3
 800885e:	d209      	bcs.n	8008874 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008860:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	4919      	ldr	r1, [pc, #100]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008870:	4313      	orrs	r3, r2
 8008872:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b00      	cmp	r3, #0
 800887e:	d010      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800888c:	429a      	cmp	r2, r3
 800888e:	d208      	bcs.n	80088a2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	490d      	ldr	r1, [pc, #52]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80088a2:	f000 f821 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <HAL_RCC_ClockConfig+0x3d0>)
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	490a      	ldr	r1, [pc, #40]	; (80088dc <HAL_RCC_ClockConfig+0x3d8>)
 80088b2:	5ccb      	ldrb	r3, [r1, r3]
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
 80088b8:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <HAL_RCC_ClockConfig+0x3dc>)
 80088ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <HAL_RCC_ClockConfig+0x3e0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fc fb01 	bl	8004ec8 <HAL_InitTick>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	46020c00 	.word	0x46020c00
 80088d8:	40022000 	.word	0x40022000
 80088dc:	0800e794 	.word	0x0800e794
 80088e0:	20000000 	.word	0x20000000
 80088e4:	2000001c 	.word	0x2000001c

080088e8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b08b      	sub	sp, #44	; 0x2c
 80088ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088f6:	4b78      	ldr	r3, [pc, #480]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f003 030c 	and.w	r3, r3, #12
 80088fe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008900:	4b75      	ldr	r3, [pc, #468]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_RCC_GetSysClockFreq+0x34>
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b0c      	cmp	r3, #12
 8008914:	d121      	bne.n	800895a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d11e      	bne.n	800895a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800891c:	4b6e      	ldr	r3, [pc, #440]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d107      	bne.n	8008938 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008928:	4b6b      	ldr	r3, [pc, #428]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800892a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800892e:	0b1b      	lsrs	r3, r3, #12
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
 8008936:	e005      	b.n	8008944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008938:	4b67      	ldr	r3, [pc, #412]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	0f1b      	lsrs	r3, r3, #28
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008944:	4a65      	ldr	r2, [pc, #404]	; (8008adc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d110      	bne.n	8008976 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008958:	e00d      	b.n	8008976 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800895a:	4b5f      	ldr	r3, [pc, #380]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f003 030c 	and.w	r3, r3, #12
 8008962:	2b04      	cmp	r3, #4
 8008964:	d102      	bne.n	800896c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008966:	4b5e      	ldr	r3, [pc, #376]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	e004      	b.n	8008976 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d101      	bne.n	8008976 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008972:	4b5b      	ldr	r3, [pc, #364]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008974:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b0c      	cmp	r3, #12
 800897a:	f040 80a5 	bne.w	8008ac8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800897e:	4b56      	ldr	r3, [pc, #344]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008988:	4b53      	ldr	r3, [pc, #332]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008996:	4b50      	ldr	r3, [pc, #320]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	091b      	lsrs	r3, r3, #4
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80089a2:	4b4d      	ldr	r3, [pc, #308]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d003      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0xe4>
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d022      	beq.n	8008a10 <HAL_RCC_GetSysClockFreq+0x128>
 80089ca:	e043      	b.n	8008a54 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80089da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089de:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80089f2:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008ae8 <HAL_RCC_GetSysClockFreq+0x200>
 80089f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0e:	e046      	b.n	8008a9e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008ae4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8008a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a22:	4b2d      	ldr	r3, [pc, #180]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a32:	ed97 6a01 	vldr	s12, [r7, #4]
 8008a36:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008ae8 <HAL_RCC_GetSysClockFreq+0x200>
 8008a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a52:	e024      	b.n	8008a9e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	ee07 3a90 	vmov	s15, r3
 8008a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a74:	ee07 3a90 	vmov	s15, r3
 8008a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a7c:	ed97 6a01 	vldr	s12, [r7, #4]
 8008a80:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008ae8 <HAL_RCC_GetSysClockFreq+0x200>
 8008a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a9c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	0e1b      	lsrs	r3, r3, #24
 8008aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac2:	ee17 3a90 	vmov	r3, s15
 8008ac6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	372c      	adds	r7, #44	; 0x2c
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	46020c00 	.word	0x46020c00
 8008adc:	0800e7ac 	.word	0x0800e7ac
 8008ae0:	00f42400 	.word	0x00f42400
 8008ae4:	4b742400 	.word	0x4b742400
 8008ae8:	46000000 	.word	0x46000000

08008aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008af0:	f7ff fefa 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x28>)
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	4906      	ldr	r1, [pc, #24]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008b00:	5ccb      	ldrb	r3, [r1, r3]
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	4a05      	ldr	r2, [pc, #20]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x30>)
 8008b08:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x30>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	46020c00 	.word	0x46020c00
 8008b18:	0800e794 	.word	0x0800e794
 8008b1c:	20000000 	.word	0x20000000

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008b24:	f7ff ffe2 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4903      	ldr	r1, [pc, #12]	; (8008b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	46020c00 	.word	0x46020c00
 8008b44:	0800e7a4 	.word	0x0800e7a4

08008b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008b4c:	f7ff ffce 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 8008b50:	4602      	mov	r2, r0
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	4903      	ldr	r1, [pc, #12]	; (8008b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b5e:	5ccb      	ldrb	r3, [r1, r3]
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	46020c00 	.word	0x46020c00
 8008b6c:	0800e7a4 	.word	0x0800e7a4

08008b70 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008b74:	f7ff ffba 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	4903      	ldr	r1, [pc, #12]	; (8008b94 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008b86:	5ccb      	ldrb	r3, [r1, r3]
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	46020c00 	.word	0x46020c00
 8008b94:	0800e7a4 	.word	0x0800e7a4

08008b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ba0:	4b3e      	ldr	r3, [pc, #248]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bae:	f7fe fd21 	bl	80075f4 <HAL_PWREx_GetVoltageRange>
 8008bb2:	6178      	str	r0, [r7, #20]
 8008bb4:	e019      	b.n	8008bea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bb6:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bbc:	4a37      	ldr	r2, [pc, #220]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bbe:	f043 0304 	orr.w	r3, r3, #4
 8008bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008bc6:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008bd4:	f7fe fd0e 	bl	80075f4 <HAL_PWREx_GetVoltageRange>
 8008bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008bda:	4b30      	ldr	r3, [pc, #192]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008be0:	4a2e      	ldr	r2, [pc, #184]	; (8008c9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008be2:	f023 0304 	bic.w	r3, r3, #4
 8008be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bf0:	d003      	beq.n	8008bfa <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bf8:	d109      	bne.n	8008c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c00:	d202      	bcs.n	8008c08 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008c02:	2301      	movs	r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c06:	e033      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c0c:	e030      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c14:	d208      	bcs.n	8008c28 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1c:	d102      	bne.n	8008c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008c1e:	2303      	movs	r3, #3
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	e025      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e035      	b.n	8008c94 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2e:	d90f      	bls.n	8008c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c3c:	d902      	bls.n	8008c44 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	e015      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008c44:	2301      	movs	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	e012      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	e00f      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c56:	d109      	bne.n	8008c6c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c5e:	d102      	bne.n	8008c66 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008c60:	2301      	movs	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	e004      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008c66:	2302      	movs	r3, #2
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	e001      	b.n	8008c70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f023 020f 	bic.w	r2, r3, #15
 8008c78:	4909      	ldr	r1, [pc, #36]	; (8008ca0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d001      	beq.n	8008c92 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	46020c00 	.word	0x46020c00
 8008ca0:	40022000 	.word	0x40022000

08008ca4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca8:	b0c4      	sub	sp, #272	; 0x110
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f002 0401 	and.w	r4, r2, #1
 8008cc8:	2500      	movs	r5, #0
 8008cca:	ea54 0305 	orrs.w	r3, r4, r5
 8008cce:	d00b      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008cd0:	4bd5      	ldr	r3, [pc, #852]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cd6:	f023 0103 	bic.w	r1, r3, #3
 8008cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce0:	4ad1      	ldr	r2, [pc, #836]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f002 0802 	and.w	r8, r2, #2
 8008cf4:	f04f 0900 	mov.w	r9, #0
 8008cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8008cfc:	d00b      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008cfe:	4bca      	ldr	r3, [pc, #808]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d04:	f023 010c 	bic.w	r1, r3, #12
 8008d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0e:	4ac6      	ldr	r2, [pc, #792]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d10:	430b      	orrs	r3, r1
 8008d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f002 0a04 	and.w	sl, r2, #4
 8008d22:	f04f 0b00 	mov.w	fp, #0
 8008d26:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d2a:	d00b      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008d2c:	4bbe      	ldr	r3, [pc, #760]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d32:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3c:	4aba      	ldr	r2, [pc, #744]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f002 0308 	and.w	r3, r2, #8
 8008d50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d54:	2300      	movs	r3, #0
 8008d56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008d5a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4313      	orrs	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008d64:	4bb0      	ldr	r3, [pc, #704]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d74:	4aac      	ldr	r2, [pc, #688]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d76:	430b      	orrs	r3, r1
 8008d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f002 0310 	and.w	r3, r2, #16
 8008d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d92:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008d96:	460b      	mov	r3, r1
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008d9c:	4ba2      	ldr	r3, [pc, #648]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dac:	4a9e      	ldr	r2, [pc, #632]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dae:	430b      	orrs	r3, r1
 8008db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	d00b      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008dd4:	4b94      	ldr	r3, [pc, #592]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008dda:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de4:	4a90      	ldr	r2, [pc, #576]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008de6:	430b      	orrs	r3, r1
 8008de8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f002 0320 	and.w	r3, r2, #32
 8008df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e06:	460b      	mov	r3, r1
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	d00b      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008e0c:	4b86      	ldr	r3, [pc, #536]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e12:	f023 0107 	bic.w	r1, r3, #7
 8008e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e1c:	4a82      	ldr	r2, [pc, #520]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4313      	orrs	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008e44:	4b78      	ldr	r3, [pc, #480]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e4a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e54:	4a74      	ldr	r2, [pc, #464]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e56:	430b      	orrs	r3, r1
 8008e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e76:	460b      	mov	r3, r1
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	d00b      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008e7c:	4b6a      	ldr	r3, [pc, #424]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8c:	4a66      	ldr	r2, [pc, #408]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	d00b      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008eb4:	4b5c      	ldr	r3, [pc, #368]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec4:	4a58      	ldr	r2, [pc, #352]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ee2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	d00b      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008eec:	4b4e      	ldr	r3, [pc, #312]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ef2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8008ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efc:	4a4a      	ldr	r2, [pc, #296]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008efe:	430b      	orrs	r3, r1
 8008f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4313      	orrs	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008f24:	4b40      	ldr	r3, [pc, #256]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f2a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f34:	4a3c      	ldr	r2, [pc, #240]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f36:	430b      	orrs	r3, r1
 8008f38:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f56:	460b      	mov	r3, r1
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	d00c      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008f5c:	4b32      	ldr	r3, [pc, #200]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6e:	4a2e      	ldr	r2, [pc, #184]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f70:	430b      	orrs	r3, r1
 8008f72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f86:	2300      	movs	r3, #0
 8008f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4313      	orrs	r3, r2
 8008f94:	d00c      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008f9c:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008faa:	430b      	orrs	r3, r1
 8008fac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	d00c      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008fd0:	4b15      	ldr	r3, [pc, #84]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fd6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe2:	4a11      	ldr	r2, [pc, #68]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009000:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009004:	460b      	mov	r3, r1
 8009006:	4313      	orrs	r3, r2
 8009008:	d010      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800900c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009010:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	4a02      	ldr	r2, [pc, #8]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800901e:	430b      	orrs	r3, r1
 8009020:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009024:	e002      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009026:	bf00      	nop
 8009028:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800902c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009042:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d04c      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800904c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009054:	2b80      	cmp	r3, #128	; 0x80
 8009056:	d02d      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009058:	2b80      	cmp	r3, #128	; 0x80
 800905a:	d827      	bhi.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x408>
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d02b      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009060:	2b60      	cmp	r3, #96	; 0x60
 8009062:	d823      	bhi.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	d006      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	d81f      	bhi.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x408>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d011      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009074:	e01a      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009076:	4bbe      	ldr	r3, [pc, #760]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	4abd      	ldr	r2, [pc, #756]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800907c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009080:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009082:	e01a      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009088:	3308      	adds	r3, #8
 800908a:	4618      	mov	r0, r3
 800908c:	f002 fc32 	bl	800b8f4 <RCCEx_PLL2_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009096:	e010      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800909c:	332c      	adds	r3, #44	; 0x2c
 800909e:	4618      	mov	r0, r3
 80090a0:	f002 fcc0 	bl	800ba24 <RCCEx_PLL3_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80090aa:	e006      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80090b2:	e002      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80090b4:	bf00      	nop
 80090b6:	e000      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80090b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ba:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80090c2:	4bab      	ldr	r3, [pc, #684]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090c8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80090cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090d4:	4aa6      	ldr	r2, [pc, #664]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090d6:	430b      	orrs	r3, r1
 80090d8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80090e2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80090e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090f6:	2300      	movs	r3, #0
 80090f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009100:	460b      	mov	r3, r1
 8009102:	4313      	orrs	r3, r2
 8009104:	d053      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800910a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800910e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009112:	d033      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009118:	d82c      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800911a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800911e:	d02f      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009124:	d826      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912a:	d008      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800912c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009130:	d820      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913a:	d011      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800913c:	e01a      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800913e:	4b8c      	ldr	r3, [pc, #560]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	4a8b      	ldr	r2, [pc, #556]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009148:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800914a:	e01a      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800914c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009150:	3308      	adds	r3, #8
 8009152:	4618      	mov	r0, r3
 8009154:	f002 fbce 	bl	800b8f4 <RCCEx_PLL2_Config>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800915e:	e010      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009164:	332c      	adds	r3, #44	; 0x2c
 8009166:	4618      	mov	r0, r3
 8009168:	f002 fc5c 	bl	800ba24 <RCCEx_PLL3_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009172:	e006      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800917a:	e002      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800917c:	bf00      	nop
 800917e:	e000      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009182:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10d      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800918a:	4b79      	ldr	r3, [pc, #484]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800918c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009190:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800919c:	4a74      	ldr	r2, [pc, #464]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800919e:	430b      	orrs	r3, r1
 80091a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80091a4:	e003      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80091aa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80091ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80091ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80091bc:	2300      	movs	r3, #0
 80091be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80091c4:	460b      	mov	r3, r1
 80091c6:	4313      	orrs	r3, r2
 80091c8:	d046      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80091ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80091d6:	d028      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80091d8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80091dc:	d821      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80091de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e2:	d022      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80091e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e8:	d81b      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80091ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091ee:	d01c      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80091f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091f4:	d815      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80091f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fa:	d008      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80091fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009200:	d80f      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920a:	d00e      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800920c:	e009      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800920e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009212:	3308      	adds	r3, #8
 8009214:	4618      	mov	r0, r3
 8009216:	f002 fb6d 	bl	800b8f4 <RCCEx_PLL2_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009220:	e004      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009228:	e000      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800922a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10d      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009234:	4b4e      	ldr	r3, [pc, #312]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800923a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800923e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009246:	4a4a      	ldr	r2, [pc, #296]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009248:	430b      	orrs	r3, r1
 800924a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800924e:	e003      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009250:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009254:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009264:	673b      	str	r3, [r7, #112]	; 0x70
 8009266:	2300      	movs	r3, #0
 8009268:	677b      	str	r3, [r7, #116]	; 0x74
 800926a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800926e:	460b      	mov	r3, r1
 8009270:	4313      	orrs	r3, r2
 8009272:	d03f      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800927c:	2b04      	cmp	r3, #4
 800927e:	d81e      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092c7 	.word	0x080092c7
 800928c:	0800929d 	.word	0x0800929d
 8009290:	080092ab 	.word	0x080092ab
 8009294:	080092c7 	.word	0x080092c7
 8009298:	080092c7 	.word	0x080092c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800929c:	4b34      	ldr	r3, [pc, #208]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	4a33      	ldr	r2, [pc, #204]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80092a8:	e00e      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092ae:	332c      	adds	r3, #44	; 0x2c
 80092b0:	4618      	mov	r0, r3
 80092b2:	f002 fbb7 	bl	800ba24 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80092bc:	e004      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80092c4:	e000      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80092c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80092c8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10d      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80092d0:	4b27      	ldr	r3, [pc, #156]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092d6:	f023 0107 	bic.w	r1, r3, #7
 80092da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092e2:	4a23      	ldr	r2, [pc, #140]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092e4:	430b      	orrs	r3, r1
 80092e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092ea:	e003      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80092f0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80092f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009300:	66bb      	str	r3, [r7, #104]	; 0x68
 8009302:	2300      	movs	r3, #0
 8009304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009306:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800930a:	460b      	mov	r3, r1
 800930c:	4313      	orrs	r3, r2
 800930e:	d04c      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800931c:	d02a      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800931e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009322:	d821      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009328:	d026      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800932a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800932e:	d81b      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009334:	d00e      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800933a:	d815      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01d      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009344:	d110      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	4a09      	ldr	r2, [pc, #36]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800934c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009350:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009352:	e014      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009358:	332c      	adds	r3, #44	; 0x2c
 800935a:	4618      	mov	r0, r3
 800935c:	f002 fb62 	bl	800ba24 <RCCEx_PLL3_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009366:	e00a      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800936e:	e006      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8009370:	46020c00 	.word	0x46020c00
        break;
 8009374:	bf00      	nop
 8009376:	e002      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8009378:	bf00      	nop
 800937a:	e000      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800937c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800937e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10d      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009386:	4baf      	ldr	r3, [pc, #700]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800938c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009398:	4aaa      	ldr	r2, [pc, #680]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800939a:	430b      	orrs	r3, r1
 800939c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80093a0:	e003      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80093a6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80093b6:	663b      	str	r3, [r7, #96]	; 0x60
 80093b8:	2300      	movs	r3, #0
 80093ba:	667b      	str	r3, [r7, #100]	; 0x64
 80093bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80093c0:	460b      	mov	r3, r1
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f000 80b5 	beq.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ce:	4b9d      	ldr	r3, [pc, #628]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d113      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093dc:	4b99      	ldr	r3, [pc, #612]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093e2:	4a98      	ldr	r2, [pc, #608]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093e4:	f043 0304 	orr.w	r3, r3, #4
 80093e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80093ec:	4b95      	ldr	r3, [pc, #596]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80093fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009404:	4b90      	ldr	r3, [pc, #576]	; (8009648 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	4a8f      	ldr	r2, [pc, #572]	; (8009648 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800940a:	f043 0301 	orr.w	r3, r3, #1
 800940e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009410:	f7fb fda4 	bl	8004f5c <HAL_GetTick>
 8009414:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009418:	e00b      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800941a:	f7fb fd9f 	bl	8004f5c <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d903      	bls.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009430:	e005      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009432:	4b85      	ldr	r3, [pc, #532]	; (8009648 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ed      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800943e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009442:	2b00      	cmp	r3, #0
 8009444:	d165      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009446:	4b7f      	ldr	r3, [pc, #508]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800944c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d023      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800945c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009460:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009468:	4293      	cmp	r3, r2
 800946a:	d01b      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800946c:	4b75      	ldr	r3, [pc, #468]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800946e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800947a:	4b72      	ldr	r3, [pc, #456]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800947c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009480:	4a70      	ldr	r2, [pc, #448]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009486:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800948a:	4b6e      	ldr	r3, [pc, #440]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800948c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009490:	4a6c      	ldr	r2, [pc, #432]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009496:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800949a:	4a6a      	ldr	r2, [pc, #424]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800949c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d019      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b0:	f7fb fd54 	bl	8004f5c <HAL_GetTick>
 80094b4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094b8:	e00d      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ba:	f7fb fd4f 	bl	8004f5c <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d903      	bls.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 80094d4:	e006      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094d6:	4b5b      	ldr	r3, [pc, #364]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80094d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0ea      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80094e4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10d      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80094ec:	4b55      	ldr	r3, [pc, #340]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80094ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80094fe:	4a51      	ldr	r2, [pc, #324]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009500:	430b      	orrs	r3, r1
 8009502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009506:	e008      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009508:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800950c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8009510:	e003      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009512:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009516:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800951a:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800951e:	2b01      	cmp	r3, #1
 8009520:	d107      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009522:	4b48      	ldr	r3, [pc, #288]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009528:	4a46      	ldr	r2, [pc, #280]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800952a:	f023 0304 	bic.w	r3, r3, #4
 800952e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800953e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009540:	2300      	movs	r3, #0
 8009542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009544:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009548:	460b      	mov	r3, r1
 800954a:	4313      	orrs	r3, r2
 800954c:	d042      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800954e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009556:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800955a:	d022      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800955c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009560:	d81b      	bhi.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009566:	d011      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8009568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800956c:	d815      	bhi.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d019      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009576:	d110      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957c:	3308      	adds	r3, #8
 800957e:	4618      	mov	r0, r3
 8009580:	f002 f9b8 	bl	800b8f4 <RCCEx_PLL2_Config>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800958a:	e00d      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958c:	4b2d      	ldr	r3, [pc, #180]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009590:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009596:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009598:	e006      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80095a0:	e002      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80095a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80095a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80095b0:	4b24      	ldr	r3, [pc, #144]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80095b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80095ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095c2:	4a20      	ldr	r2, [pc, #128]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80095c4:	430b      	orrs	r3, r1
 80095c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80095ca:	e003      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095cc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80095d0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095e0:	653b      	str	r3, [r7, #80]	; 0x50
 80095e2:	2300      	movs	r3, #0
 80095e4:	657b      	str	r3, [r7, #84]	; 0x54
 80095e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80095ea:	460b      	mov	r3, r1
 80095ec:	4313      	orrs	r3, r2
 80095ee:	d031      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80095f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fc:	d00b      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009602:	d804      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d007      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009614:	e004      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009616:	bf00      	nop
 8009618:	e002      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800961a:	bf00      	nop
 800961c:	e000      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800961e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009620:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009624:	2b00      	cmp	r3, #0
 8009626:	d111      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009628:	4b06      	ldr	r3, [pc, #24]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800962a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800962e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800963a:	4a02      	ldr	r2, [pc, #8]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800963c:	430b      	orrs	r3, r1
 800963e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009642:	e007      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8009644:	46020c00 	.word	0x46020c00
 8009648:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009650:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009660:	64bb      	str	r3, [r7, #72]	; 0x48
 8009662:	2300      	movs	r3, #0
 8009664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009666:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800966a:	460b      	mov	r3, r1
 800966c:	4313      	orrs	r3, r2
 800966e:	d00c      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009670:	4bb2      	ldr	r3, [pc, #712]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009676:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800967a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009682:	4aae      	ldr	r2, [pc, #696]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009684:	430b      	orrs	r3, r1
 8009686:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800968a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009696:	643b      	str	r3, [r7, #64]	; 0x40
 8009698:	2300      	movs	r3, #0
 800969a:	647b      	str	r3, [r7, #68]	; 0x44
 800969c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80096a0:	460b      	mov	r3, r1
 80096a2:	4313      	orrs	r3, r2
 80096a4:	d019      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80096a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b2:	d105      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096b4:	4ba1      	ldr	r3, [pc, #644]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	4aa0      	ldr	r2, [pc, #640]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096be:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80096c0:	4b9e      	ldr	r3, [pc, #632]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096c6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80096ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096d2:	4a9a      	ldr	r2, [pc, #616]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096d4:	430b      	orrs	r3, r1
 80096d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80096da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80096e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e8:	2300      	movs	r3, #0
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80096f0:	460b      	mov	r3, r1
 80096f2:	4313      	orrs	r3, r2
 80096f4:	d00c      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80096f6:	4b91      	ldr	r3, [pc, #580]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009704:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009708:	4a8c      	ldr	r2, [pc, #560]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800970a:	430b      	orrs	r3, r1
 800970c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
 800971e:	2300      	movs	r3, #0
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
 8009722:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d00c      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800972c:	4b83      	ldr	r3, [pc, #524]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800972e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009732:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800973a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800973e:	4a7f      	ldr	r2, [pc, #508]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009740:	430b      	orrs	r3, r1
 8009742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
 8009754:	2300      	movs	r3, #0
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009758:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800975c:	460b      	mov	r3, r1
 800975e:	4313      	orrs	r3, r2
 8009760:	d00c      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009762:	4b76      	ldr	r3, [pc, #472]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009768:	f023 0218 	bic.w	r2, r3, #24
 800976c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009770:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009774:	4971      	ldr	r1, [pc, #452]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800977c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009788:	623b      	str	r3, [r7, #32]
 800978a:	2300      	movs	r3, #0
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
 800978e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009792:	460b      	mov	r3, r1
 8009794:	4313      	orrs	r3, r2
 8009796:	d032      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800979c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097a4:	d105      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a6:	4b65      	ldr	r3, [pc, #404]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	4a64      	ldr	r2, [pc, #400]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80097ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80097b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097be:	d108      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c4:	3308      	adds	r3, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 f894 	bl	800b8f4 <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80097d2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10d      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80097da:	4b58      	ldr	r3, [pc, #352]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80097dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097ec:	4953      	ldr	r1, [pc, #332]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80097f4:	e003      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80097fa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80097fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	2100      	movs	r1, #0
 8009808:	61b9      	str	r1, [r7, #24]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	61fb      	str	r3, [r7, #28]
 8009810:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009814:	460b      	mov	r3, r1
 8009816:	4313      	orrs	r3, r2
 8009818:	d04a      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800981a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800981e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009822:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009826:	d01e      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8009828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800982c:	d825      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800982e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009832:	d00e      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8009834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009838:	d81f      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d021      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800983e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009842:	d11a      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009844:	4b3d      	ldr	r3, [pc, #244]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	4a3c      	ldr	r2, [pc, #240]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800984a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800984e:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009850:	e018      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009856:	3308      	adds	r3, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f002 f84b 	bl	800b8f4 <RCCEx_PLL2_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009864:	e00e      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986a:	332c      	adds	r3, #44	; 0x2c
 800986c:	4618      	mov	r0, r3
 800986e:	f002 f8d9 	bl	800ba24 <RCCEx_PLL3_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009878:	e004      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009880:	e000      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8009882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009884:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10d      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800988c:	4b2b      	ldr	r3, [pc, #172]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800988e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800989a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800989e:	4927      	ldr	r1, [pc, #156]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80098a6:	e003      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80098ac:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80098b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d03d      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80098cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d8:	d00e      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80098da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098de:	d815      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098e8:	d110      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ea:	4b14      	ldr	r3, [pc, #80]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	4a13      	ldr	r2, [pc, #76]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80098f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80098f6:	e00e      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098fc:	3308      	adds	r3, #8
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fff8 	bl	800b8f4 <RCCEx_PLL2_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800990a:	e004      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8009912:	e000      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8009914:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009916:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800991a:	2b00      	cmp	r3, #0
 800991c:	d110      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800991e:	4b07      	ldr	r3, [pc, #28]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009924:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	4902      	ldr	r1, [pc, #8]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009932:	4313      	orrs	r3, r2
 8009934:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009938:	e006      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800993a:	bf00      	nop
 800993c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009940:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009944:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009954:	60bb      	str	r3, [r7, #8]
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800995e:	460b      	mov	r3, r1
 8009960:	4313      	orrs	r3, r2
 8009962:	d00c      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009964:	4b2c      	ldr	r3, [pc, #176]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800996a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800996e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009972:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009976:	4928      	ldr	r1, [pc, #160]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009978:	4313      	orrs	r3, r2
 800997a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800997e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	2100      	movs	r1, #0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	607b      	str	r3, [r7, #4]
 8009990:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	d036      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800999a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800999e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80099a2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80099a6:	d00d      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80099ac:	d811      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80099ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b2:	d012      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b8:	d80b      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00d      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c2:	d106      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80099ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ce:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80099d0:	e004      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80099d8:	e000      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80099da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10d      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80099e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80099ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80099ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80099f6:	4908      	ldr	r1, [pc, #32]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80099fe:	e003      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8009a04:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009a08:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009a12:	46bd      	mov	sp, r7
 8009a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a18:	46020c00 	.word	0x46020c00

08009a1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b089      	sub	sp, #36	; 0x24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009a24:	4ba6      	ldr	r3, [pc, #664]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009a2e:	4ba4      	ldr	r3, [pc, #656]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009a38:	4ba1      	ldr	r3, [pc, #644]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	0a1b      	lsrs	r3, r3, #8
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	3301      	adds	r3, #1
 8009a44:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009a46:	4b9e      	ldr	r3, [pc, #632]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	091b      	lsrs	r3, r3, #4
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009a52:	4b9b      	ldr	r3, [pc, #620]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	08db      	lsrs	r3, r3, #3
 8009a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d062      	beq.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	f200 8081 	bhi.w	8009b7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d024      	beq.n	8009acc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d17a      	bne.n	8009b7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b89      	ldr	r3, [pc, #548]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aae:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aca:	e08f      	b.n	8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009acc:	4b7c      	ldr	r3, [pc, #496]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009ad8:	4b79      	ldr	r3, [pc, #484]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	0f1b      	lsrs	r3, r3, #28
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	e006      	b.n	8009af2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009ae4:	4b76      	ldr	r3, [pc, #472]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009aea:	041b      	lsls	r3, r3, #16
 8009aec:	0f1b      	lsrs	r3, r3, #28
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	4a76      	ldr	r2, [pc, #472]	; (8009ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b18:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b1c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b38:	e058      	b.n	8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b44:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4c:	4b5c      	ldr	r3, [pc, #368]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b60:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b7c:	e036      	b.n	8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009b7e:	4b50      	ldr	r3, [pc, #320]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009b8a:	4b4d      	ldr	r3, [pc, #308]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	0f1b      	lsrs	r3, r3, #28
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	e006      	b.n	8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009b96:	4b4a      	ldr	r3, [pc, #296]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b9c:	041b      	lsls	r3, r3, #16
 8009b9e:	0f1b      	lsrs	r3, r3, #28
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	4a49      	ldr	r2, [pc, #292]	; (8009ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009bec:	4b34      	ldr	r3, [pc, #208]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d017      	beq.n	8009c28 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009bf8:	4b31      	ldr	r3, [pc, #196]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfc:	0a5b      	lsrs	r3, r3, #9
 8009bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1e:	ee17 2a90 	vmov	r2, s15
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	e002      	b.n	8009c2e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009c2e:	4b24      	ldr	r3, [pc, #144]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d017      	beq.n	8009c6a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c3a:	4b21      	ldr	r3, [pc, #132]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	0c1b      	lsrs	r3, r3, #16
 8009c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c60:	ee17 2a90 	vmov	r2, s15
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	e002      	b.n	8009c70 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009c70:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d017      	beq.n	8009cac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c7c:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c80:	0e1b      	lsrs	r3, r3, #24
 8009c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca2:	ee17 2a90 	vmov	r2, s15
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009caa:	e002      	b.n	8009cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	609a      	str	r2, [r3, #8]
}
 8009cb2:	bf00      	nop
 8009cb4:	3724      	adds	r7, #36	; 0x24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	46020c00 	.word	0x46020c00
 8009cc4:	4b742400 	.word	0x4b742400
 8009cc8:	46000000 	.word	0x46000000
 8009ccc:	0800e7ac 	.word	0x0800e7ac

08009cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b089      	sub	sp, #36	; 0x24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009cd8:	4ba6      	ldr	r3, [pc, #664]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009ce2:	4ba4      	ldr	r3, [pc, #656]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009cec:	4ba1      	ldr	r3, [pc, #644]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f003 030f 	and.w	r3, r3, #15
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009cfa:	4b9e      	ldr	r3, [pc, #632]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	091b      	lsrs	r3, r3, #4
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009d06:	4b9b      	ldr	r3, [pc, #620]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	08db      	lsrs	r3, r3, #3
 8009d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d062      	beq.n	8009dee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	f200 8081 	bhi.w	8009e32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d024      	beq.n	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d17a      	bne.n	8009e32 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	4b89      	ldr	r3, [pc, #548]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d62:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d7e:	e08f      	b.n	8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009d80:	4b7c      	ldr	r3, [pc, #496]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009d8c:	4b79      	ldr	r3, [pc, #484]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	0f1b      	lsrs	r3, r3, #28
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	e006      	b.n	8009da6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009d98:	4b76      	ldr	r3, [pc, #472]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d9e:	041b      	lsls	r3, r3, #16
 8009da0:	0f1b      	lsrs	r3, r3, #28
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	4a76      	ldr	r2, [pc, #472]	; (8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dac:	ee07 3a90 	vmov	s15, r3
 8009db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dd0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dec:	e058      	b.n	8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e00:	4b5c      	ldr	r3, [pc, #368]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e10:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e14:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e30:	e036      	b.n	8009ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009e32:	4b50      	ldr	r3, [pc, #320]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009e3e:	4b4d      	ldr	r3, [pc, #308]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	0f1b      	lsrs	r3, r3, #28
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	e006      	b.n	8009e58 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009e4a:	4b4a      	ldr	r3, [pc, #296]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	0f1b      	lsrs	r3, r3, #28
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	4a49      	ldr	r2, [pc, #292]	; (8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	ee07 3a90 	vmov	s15, r3
 8009e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e82:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e9e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009ea0:	4b34      	ldr	r3, [pc, #208]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009eac:	4b31      	ldr	r3, [pc, #196]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb0:	0a5b      	lsrs	r3, r3, #9
 8009eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed2:	ee17 2a90 	vmov	r2, s15
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e002      	b.n	8009ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009ee2:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d017      	beq.n	8009f1e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009eee:	4b21      	ldr	r3, [pc, #132]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f04:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f14:	ee17 2a90 	vmov	r2, s15
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	605a      	str	r2, [r3, #4]
 8009f1c:	e002      	b.n	8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009f24:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d017      	beq.n	8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f30:	4b10      	ldr	r3, [pc, #64]	; (8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	0e1b      	lsrs	r3, r3, #24
 8009f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f56:	ee17 2a90 	vmov	r2, s15
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f5e:	e002      	b.n	8009f66 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	609a      	str	r2, [r3, #8]
}
 8009f66:	bf00      	nop
 8009f68:	3724      	adds	r7, #36	; 0x24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	46020c00 	.word	0x46020c00
 8009f78:	4b742400 	.word	0x4b742400
 8009f7c:	46000000 	.word	0x46000000
 8009f80:	0800e7ac 	.word	0x0800e7ac

08009f84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	; 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009f8c:	4ba6      	ldr	r3, [pc, #664]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f94:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009f96:	4ba4      	ldr	r3, [pc, #656]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009fa0:	4ba1      	ldr	r3, [pc, #644]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa4:	0a1b      	lsrs	r3, r3, #8
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	3301      	adds	r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009fae:	4b9e      	ldr	r3, [pc, #632]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	091b      	lsrs	r3, r3, #4
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009fba:	4b9b      	ldr	r3, [pc, #620]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d062      	beq.n	800a0a2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	f200 8081 	bhi.w	800a0e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d024      	beq.n	800a034 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d17a      	bne.n	800a0e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b89      	ldr	r3, [pc, #548]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a012:	ed97 6a02 	vldr	s12, [r7, #8]
 800a016:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a032:	e08f      	b.n	800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a034:	4b7c      	ldr	r3, [pc, #496]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a040:	4b79      	ldr	r3, [pc, #484]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	0f1b      	lsrs	r3, r3, #28
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	e006      	b.n	800a05a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a04c:	4b76      	ldr	r3, [pc, #472]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a04e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a052:	041b      	lsls	r3, r3, #16
 800a054:	0f1b      	lsrs	r3, r3, #28
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	4a76      	ldr	r2, [pc, #472]	; (800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a080:	ed97 6a02 	vldr	s12, [r7, #8]
 800a084:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a094:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0a0:	e058      	b.n	800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a0b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b4:	4b5c      	ldr	r3, [pc, #368]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0c8:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a0cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0e4:	e036      	b.n	800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a0e6:	4b50      	ldr	r3, [pc, #320]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a0f2:	4b4d      	ldr	r3, [pc, #308]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	0f1b      	lsrs	r3, r3, #28
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	e006      	b.n	800a10c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a0fe:	4b4a      	ldr	r3, [pc, #296]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a104:	041b      	lsls	r3, r3, #16
 800a106:	0f1b      	lsrs	r3, r3, #28
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	4a49      	ldr	r2, [pc, #292]	; (800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	ee07 3a90 	vmov	s15, r3
 800a120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a132:	ed97 6a02 	vldr	s12, [r7, #8]
 800a136:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a146:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a14e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a152:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a154:	4b34      	ldr	r3, [pc, #208]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d017      	beq.n	800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a160:	4b31      	ldr	r3, [pc, #196]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a164:	0a5b      	lsrs	r3, r3, #9
 800a166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a176:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a186:	ee17 2a90 	vmov	r2, s15
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e002      	b.n	800a196 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a196:	4b24      	ldr	r3, [pc, #144]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d017      	beq.n	800a1d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	0c1b      	lsrs	r3, r3, #16
 800a1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a1b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c8:	ee17 2a90 	vmov	r2, s15
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
 800a1d0:	e002      	b.n	800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a1d8:	4b13      	ldr	r3, [pc, #76]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d017      	beq.n	800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1e4:	4b10      	ldr	r3, [pc, #64]	; (800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e8:	0e1b      	lsrs	r3, r3, #24
 800a1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a20a:	ee17 2a90 	vmov	r2, s15
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a212:	e002      	b.n	800a21a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	609a      	str	r2, [r3, #8]
}
 800a21a:	bf00      	nop
 800a21c:	3724      	adds	r7, #36	; 0x24
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	46020c00 	.word	0x46020c00
 800a22c:	4b742400 	.word	0x4b742400
 800a230:	46000000 	.word	0x46000000
 800a234:	0800e7ac 	.word	0x0800e7ac

0800a238 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a242:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a246:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800a24a:	430b      	orrs	r3, r1
 800a24c:	d145      	bne.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a24e:	4ba7      	ldr	r3, [pc, #668]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a258:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a25a:	4ba4      	ldr	r3, [pc, #656]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a25c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b02      	cmp	r3, #2
 800a266:	d108      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a26e:	d104      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
 800a276:	f001 bb31 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a27a:	4b9c      	ldr	r3, [pc, #624]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a27c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a288:	d114      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a290:	d110      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a292:	4b96      	ldr	r3, [pc, #600]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a29c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2a0:	d103      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a2a2:	23fa      	movs	r3, #250	; 0xfa
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2a6:	f001 bb19 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800a2aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2b0:	f001 bb14 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a2b4:	4b8d      	ldr	r3, [pc, #564]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c0:	d107      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2c8:	d103      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a2ca:	4b89      	ldr	r3, [pc, #548]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ce:	f001 bb05 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d6:	f001 bb01 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	d151      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a2e6:	4b81      	ldr	r3, [pc, #516]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a2ec:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	2b80      	cmp	r3, #128	; 0x80
 800a2f6:	d035      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	2b80      	cmp	r3, #128	; 0x80
 800a2fc:	d841      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	2b60      	cmp	r3, #96	; 0x60
 800a302:	d02a      	beq.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2b60      	cmp	r3, #96	; 0x60
 800a308:	d83b      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	2b40      	cmp	r3, #64	; 0x40
 800a30e:	d009      	beq.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	2b40      	cmp	r3, #64	; 0x40
 800a314:	d835      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d012      	beq.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a322:	e02e      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fb77 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a332:	f001 bad3 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff fcc8 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a344:	f001 baca 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a348:	f107 030c 	add.w	r3, r7, #12
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fe19 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a356:	f001 bac1 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a35a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a35e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a360:	f001 babc 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a364:	4b61      	ldr	r3, [pc, #388]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a370:	d103      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a372:	4b60      	ldr	r3, [pc, #384]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a374:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a376:	f001 bab1 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a37e:	f001 baad 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a386:	f001 baa9 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a38a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a38e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a392:	430b      	orrs	r3, r1
 800a394:	d158      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a396:	4b55      	ldr	r3, [pc, #340]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a398:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a39c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a8:	d03b      	beq.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b0:	d846      	bhi.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3b8:	d02e      	beq.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3c0:	d83e      	bhi.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c8:	d00b      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d0:	d836      	bhi.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00d      	beq.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3de:	d012      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a3e0:	e02e      	b.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff fb18 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3f0:	f001 ba74 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f4:	f107 0318 	add.w	r3, r7, #24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fc69 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a402:	f001 ba6b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a406:	f107 030c 	add.w	r3, r7, #12
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fdba 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a414:	f001 ba62 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a418:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a41e:	f001 ba5d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a422:	4b32      	ldr	r3, [pc, #200]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a42e:	d103      	bne.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a430:	4b30      	ldr	r3, [pc, #192]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a432:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a434:	f001 ba52 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a43c:	f001 ba4e 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a444:	f001 ba4a 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a450:	430b      	orrs	r3, r1
 800a452:	d126      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a454:	4b25      	ldr	r3, [pc, #148]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a460:	4b22      	ldr	r3, [pc, #136]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a46c:	d106      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a474:	4b1f      	ldr	r3, [pc, #124]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a476:	637b      	str	r3, [r7, #52]	; 0x34
 800a478:	f001 ba30 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a47c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a488:	d107      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a490:	d103      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a492:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a494:	637b      	str	r3, [r7, #52]	; 0x34
 800a496:	f001 ba21 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
 800a49e:	f001 ba1d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a4aa:	430b      	orrs	r3, r1
 800a4ac:	d16e      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a4b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a4c0:	d03d      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a4c8:	d85c      	bhi.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4d0:	d014      	beq.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4d8:	d854      	bhi.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01f      	beq.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4e6:	d012      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a4e8:	e04c      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4ea:	bf00      	nop
 800a4ec:	46020c00 	.word	0x46020c00
 800a4f0:	0007a120 	.word	0x0007a120
 800a4f4:	00f42400 	.word	0x00f42400
 800a4f8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fa8b 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a50a:	f001 b9e7 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50e:	f107 0318 	add.w	r3, r7, #24
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fbdc 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a51c:	f001 b9de 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a520:	4ba7      	ldr	r3, [pc, #668]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a52c:	d103      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a52e:	4ba5      	ldr	r3, [pc, #660]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a530:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a532:	f001 b9d3 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a53a:	f001 b9cf 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a53e:	4ba0      	ldr	r3, [pc, #640]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b20      	cmp	r3, #32
 800a548:	d118      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a54a:	4b9d      	ldr	r3, [pc, #628]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d005      	beq.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a556:	4b9a      	ldr	r3, [pc, #616]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	0e1b      	lsrs	r3, r3, #24
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	e006      	b.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a562:	4b97      	ldr	r3, [pc, #604]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a568:	041b      	lsls	r3, r3, #16
 800a56a:	0e1b      	lsrs	r3, r3, #24
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	4a95      	ldr	r2, [pc, #596]	; (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a576:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a578:	f001 b9b0 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a580:	f001 b9ac 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a588:	f001 b9a8 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a590:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a594:	430b      	orrs	r3, r1
 800a596:	d17f      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a598:	4b89      	ldr	r3, [pc, #548]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a59a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a59e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d165      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a5aa:	4b85      	ldr	r3, [pc, #532]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5b0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a5b4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a5bc:	d034      	beq.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a5c4:	d853      	bhi.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5cc:	d00b      	beq.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d4:	d84b      	bhi.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d016      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5e2:	d009      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a5e4:	e043      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff fa16 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a5f4:	f001 b972 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f8:	f107 0318 	add.w	r3, r7, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fb67 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a606:	f001 b969 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a60a:	4b6d      	ldr	r3, [pc, #436]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a616:	d103      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a618:	4b6a      	ldr	r3, [pc, #424]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a61a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a61c:	f001 b95e 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a624:	f001 b95a 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a628:	4b65      	ldr	r3, [pc, #404]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b20      	cmp	r3, #32
 800a632:	d118      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a634:	4b62      	ldr	r3, [pc, #392]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a640:	4b5f      	ldr	r3, [pc, #380]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	0e1b      	lsrs	r3, r3, #24
 800a646:	f003 030f 	and.w	r3, r3, #15
 800a64a:	e006      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a64c:	4b5c      	ldr	r3, [pc, #368]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a64e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a652:	041b      	lsls	r3, r3, #16
 800a654:	0e1b      	lsrs	r3, r3, #24
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	4a5b      	ldr	r2, [pc, #364]	; (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a660:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a662:	f001 b93b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a66a:	f001 b937 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a672:	f001 b933 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a67c:	d108      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff f9ca 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
 800a68c:	f001 b926 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	637b      	str	r3, [r7, #52]	; 0x34
 800a694:	f001 b922 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a69c:	1e51      	subs	r1, r2, #1
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	d136      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a6a2:	4b47      	ldr	r3, [pc, #284]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d104      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a6b4:	f7fe fa48 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
 800a6b8:	6378      	str	r0, [r7, #52]	; 0x34
 800a6ba:	f001 b90f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d104      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6c4:	f7fe f910 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a6c8:	6378      	str	r0, [r7, #52]	; 0x34
 800a6ca:	f001 b907 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a6ce:	4b3c      	ldr	r3, [pc, #240]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6da:	d106      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d103      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a6e2:	4b3a      	ldr	r3, [pc, #232]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e6:	f001 b8f9 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a6ea:	4b35      	ldr	r3, [pc, #212]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d107      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d104      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
 800a704:	f001 b8ea 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
 800a70c:	f001 b8e6 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a714:	1e91      	subs	r1, r2, #2
 800a716:	430b      	orrs	r3, r1
 800a718:	d136      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a71a:	4b29      	ldr	r3, [pc, #164]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a71c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a720:	f003 030c 	and.w	r3, r3, #12
 800a724:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a72c:	f7fe f9f8 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a730:	6378      	str	r0, [r7, #52]	; 0x34
 800a732:	f001 b8d3 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d104      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a73c:	f7fe f8d4 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a740:	6378      	str	r0, [r7, #52]	; 0x34
 800a742:	f001 b8cb 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a746:	4b1e      	ldr	r3, [pc, #120]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a74e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a752:	d106      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	2b08      	cmp	r3, #8
 800a758:	d103      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a75a:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a75c:	637b      	str	r3, [r7, #52]	; 0x34
 800a75e:	f001 b8bd 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a762:	4b17      	ldr	r3, [pc, #92]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d107      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	2b0c      	cmp	r3, #12
 800a774:	d104      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
 800a77c:	f001 b8ae 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
 800a784:	f001 b8aa 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78c:	1f11      	subs	r1, r2, #4
 800a78e:	430b      	orrs	r3, r1
 800a790:	d13f      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a792:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a79c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7a4:	f7fe f9bc 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a7a8:	6378      	str	r0, [r7, #52]	; 0x34
 800a7aa:	f001 b897 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d10d      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7b4:	f7fe f898 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a7b8:	6378      	str	r0, [r7, #52]	; 0x34
 800a7ba:	f001 b88f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800a7be:	bf00      	nop
 800a7c0:	46020c00 	.word	0x46020c00
 800a7c4:	02dc6c00 	.word	0x02dc6c00
 800a7c8:	0800e7ac 	.word	0x0800e7ac
 800a7cc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a7d0:	4ba8      	ldr	r3, [pc, #672]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7dc:	d106      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	d103      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a7e4:	4ba4      	ldr	r3, [pc, #656]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e8:	f001 b878 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a7ec:	4ba1      	ldr	r3, [pc, #644]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d107      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	2b30      	cmp	r3, #48	; 0x30
 800a7fe:	d104      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a804:	637b      	str	r3, [r7, #52]	; 0x34
 800a806:	f001 b869 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	637b      	str	r3, [r7, #52]	; 0x34
 800a80e:	f001 b865 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a812:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a816:	f1a2 0108 	sub.w	r1, r2, #8
 800a81a:	430b      	orrs	r3, r1
 800a81c:	d136      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a81e:	4b95      	ldr	r3, [pc, #596]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a824:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a828:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a830:	f7fe f976 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a834:	6378      	str	r0, [r7, #52]	; 0x34
 800a836:	f001 b851 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	2b40      	cmp	r3, #64	; 0x40
 800a83e:	d104      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a840:	f7fe f852 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a844:	6378      	str	r0, [r7, #52]	; 0x34
 800a846:	f001 b849 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a84a:	4b8a      	ldr	r3, [pc, #552]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a856:	d106      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	d103      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a85e:	4b86      	ldr	r3, [pc, #536]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
 800a862:	f001 b83b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a866:	4b83      	ldr	r3, [pc, #524]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b02      	cmp	r3, #2
 800a872:	d107      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	2bc0      	cmp	r3, #192	; 0xc0
 800a878:	d104      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34
 800a880:	f001 b82c 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
 800a888:	f001 b828 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a890:	f1a2 0110 	sub.w	r1, r2, #16
 800a894:	430b      	orrs	r3, r1
 800a896:	d139      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a898:	4b76      	ldr	r3, [pc, #472]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a89a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a89e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d104      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a8aa:	f7fe f939 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a8ae:	6378      	str	r0, [r7, #52]	; 0x34
 800a8b0:	f001 b814 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ba:	d104      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8bc:	f7fe f814 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a8c0:	6378      	str	r0, [r7, #52]	; 0x34
 800a8c2:	f001 b80b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a8c6:	4b6b      	ldr	r3, [pc, #428]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d2:	d107      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8da:	d103      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a8dc:	4b66      	ldr	r3, [pc, #408]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8de:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e0:	f000 bffc 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a8e4:	4b63      	ldr	r3, [pc, #396]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d108      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8f8:	d104      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a8fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a900:	f000 bfec 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	637b      	str	r3, [r7, #52]	; 0x34
 800a908:	f000 bfe8 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a910:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800a914:	430b      	orrs	r3, r1
 800a916:	d139      	bne.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a918:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a91a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a91e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a922:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a92a:	f7fe f8f9 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800a92e:	6378      	str	r0, [r7, #52]	; 0x34
 800a930:	f000 bfd4 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93a:	d104      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a93c:	f7fd ffd4 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a940:	6378      	str	r0, [r7, #52]	; 0x34
 800a942:	f000 bfcb 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a946:	4b4b      	ldr	r3, [pc, #300]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a952:	d107      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a95a:	d103      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a95c:	4b46      	ldr	r3, [pc, #280]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34
 800a960:	f000 bfbc 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a964:	4b43      	ldr	r3, [pc, #268]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d108      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a978:	d104      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97e:	637b      	str	r3, [r7, #52]	; 0x34
 800a980:	f000 bfac 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	637b      	str	r3, [r7, #52]	; 0x34
 800a988:	f000 bfa8 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a990:	f1a2 0120 	sub.w	r1, r2, #32
 800a994:	430b      	orrs	r3, r1
 800a996:	d158      	bne.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a998:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a99a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a99e:	f003 0307 	and.w	r3, r3, #7
 800a9a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a9aa:	f7fe f8e1 	bl	8008b70 <HAL_RCC_GetPCLK3Freq>
 800a9ae:	6378      	str	r0, [r7, #52]	; 0x34
 800a9b0:	f000 bf94 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d104      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a9ba:	f7fd ff95 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800a9be:	6378      	str	r0, [r7, #52]	; 0x34
 800a9c0:	f000 bf8c 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a9c4:	4b2b      	ldr	r3, [pc, #172]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d0:	d106      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d103      	bne.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a9d8:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
 800a9dc:	f000 bf7e 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a9e0:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d107      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d104      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a9f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9fa:	f000 bf6f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a9fe:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d11b      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d118      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa10:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800aa1c:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	0e1b      	lsrs	r3, r3, #24
 800aa22:	f003 030f 	and.w	r3, r3, #15
 800aa26:	e006      	b.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa2e:	041b      	lsls	r3, r3, #16
 800aa30:	0e1b      	lsrs	r3, r3, #24
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	4a11      	ldr	r2, [pc, #68]	; (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800aa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3e:	f000 bf4d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
 800aa46:	f000 bf49 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800aa4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa4e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800aa52:	430b      	orrs	r3, r1
 800aa54:	d172      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800aa56:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa68:	d10a      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa6a:	f7fd ff3d 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800aa6e:	6378      	str	r0, [r7, #52]	; 0x34
 800aa70:	f000 bf34 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800aa74:	46020c00 	.word	0x46020c00
 800aa78:	00f42400 	.word	0x00f42400
 800aa7c:	0800e7ac 	.word	0x0800e7ac
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa86:	d108      	bne.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa88:	f107 0318 	add.w	r3, r7, #24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff f91f 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
 800aa96:	f000 bf21 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d104      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800aaa0:	f7fe f824 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 800aaa4:	6378      	str	r0, [r7, #52]	; 0x34
 800aaa6:	f000 bf19 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800aab0:	d122      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aab2:	4bb0      	ldr	r3, [pc, #704]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d118      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aabe:	4bad      	ldr	r3, [pc, #692]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d005      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800aaca:	4baa      	ldr	r3, [pc, #680]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	0e1b      	lsrs	r3, r3, #24
 800aad0:	f003 030f 	and.w	r3, r3, #15
 800aad4:	e006      	b.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800aad6:	4ba7      	ldr	r3, [pc, #668]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aadc:	041b      	lsls	r3, r3, #16
 800aade:	0e1b      	lsrs	r3, r3, #24
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	4aa4      	ldr	r2, [pc, #656]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaea:	637b      	str	r3, [r7, #52]	; 0x34
 800aaec:	f000 bef6 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf4:	f000 bef2 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800aaf8:	4b9e      	ldr	r3, [pc, #632]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab04:	d107      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0c:	d103      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ab0e:	4b9b      	ldr	r3, [pc, #620]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
 800ab12:	f000 bee3 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ab16:	4b97      	ldr	r3, [pc, #604]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d107      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab2a:	d103      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ab2c:	4b93      	ldr	r3, [pc, #588]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab30:	f000 bed4 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34
 800ab38:	f000 bed0 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ab3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab40:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ab44:	430b      	orrs	r3, r1
 800ab46:	d158      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ab48:	4b8a      	ldr	r3, [pc, #552]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab4e:	f003 0307 	and.w	r3, r3, #7
 800ab52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d84b      	bhi.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab99 	.word	0x0800ab99
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab87 	.word	0x0800ab87
 800ab6c:	0800aba3 	.word	0x0800aba3
 800ab70:	0800abad 	.word	0x0800abad
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe ff4f 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab82:	f000 beab 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab86:	f107 030c 	add.w	r3, r7, #12
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff f9fa 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab94:	f000 bea2 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ab98:	f7fd ffa8 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 800ab9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ab9e:	f000 be9d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aba2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aba8:	f000 be98 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800abac:	4b71      	ldr	r3, [pc, #452]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	d118      	bne.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abb8:	4b6e      	ldr	r3, [pc, #440]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800abc4:	4b6b      	ldr	r3, [pc, #428]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	0e1b      	lsrs	r3, r3, #24
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	e006      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800abd0:	4b68      	ldr	r3, [pc, #416]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	0e1b      	lsrs	r3, r3, #24
 800abda:	f003 030f 	and.w	r3, r3, #15
 800abde:	4a66      	ldr	r2, [pc, #408]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800abe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abe6:	f000 be79 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abee:	f000 be75 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abf6:	f000 be71 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800abfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfe:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800ac02:	430b      	orrs	r3, r1
 800ac04:	d167      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ac06:	4b5b      	ldr	r3, [pc, #364]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac0c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac18:	d036      	beq.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac20:	d855      	bhi.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac28:	d029      	beq.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac30:	d84d      	bhi.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac38:	d013      	beq.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac40:	d845      	bhi.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d015      	beq.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4e:	d13e      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fee1 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac5e:	f000 be3d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff f98c 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac70:	f000 be34 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ac74:	f7fd ff3a 	bl	8008aec <HAL_RCC_GetHCLKFreq>
 800ac78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ac7a:	f000 be2f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ac7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac84:	f000 be2a 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac88:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0320 	and.w	r3, r3, #32
 800ac90:	2b20      	cmp	r3, #32
 800ac92:	d118      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac94:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800aca0:	4b34      	ldr	r3, [pc, #208]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	0e1b      	lsrs	r3, r3, #24
 800aca6:	f003 030f 	and.w	r3, r3, #15
 800acaa:	e006      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800acac:	4b31      	ldr	r3, [pc, #196]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	0e1b      	lsrs	r3, r3, #24
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	4a2f      	ldr	r2, [pc, #188]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800acbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800acc2:	f000 be0b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acca:	f000 be07 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acd2:	f000 be03 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800acd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acda:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800acde:	430b      	orrs	r3, r1
 800ace0:	d152      	bne.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ace2:	4b24      	ldr	r3, [pc, #144]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ace4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ace8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800acec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d104      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800acf4:	f7fd ff14 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800acf8:	6378      	str	r0, [r7, #52]	; 0x34
 800acfa:	f000 bdef 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad04:	d104      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad06:	f7fd fdef 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800ad0a:	6378      	str	r0, [r7, #52]	; 0x34
 800ad0c:	f000 bde6 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ad10:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad1c:	d107      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad24:	d103      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34
 800ad2a:	f000 bdd7 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ad2e:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d122      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad40:	d11e      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad42:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	0e1b      	lsrs	r3, r3, #24
 800ad54:	f003 030f 	and.w	r3, r3, #15
 800ad58:	e006      	b.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ad5a:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad60:	041b      	lsls	r3, r3, #16
 800ad62:	0e1b      	lsrs	r3, r3, #24
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	4a03      	ldr	r2, [pc, #12]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ad6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad70:	f000 bdb4 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800ad74:	46020c00 	.word	0x46020c00
 800ad78:	0800e7ac 	.word	0x0800e7ac
 800ad7c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ad80:	2300      	movs	r3, #0
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
 800ad84:	f000 bdaa 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ad88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad8c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800ad90:	430b      	orrs	r3, r1
 800ad92:	d14c      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ad94:	4ba8      	ldr	r3, [pc, #672]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ad96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d104      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ada6:	f7fd febb 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800adaa:	6378      	str	r0, [r7, #52]	; 0x34
 800adac:	f000 bd96 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb6:	d104      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800adb8:	f7fd fd96 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800adbc:	6378      	str	r0, [r7, #52]	; 0x34
 800adbe:	f000 bd8d 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800adc2:	4b9d      	ldr	r3, [pc, #628]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adce:	d107      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add6:	d103      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800add8:	4b98      	ldr	r3, [pc, #608]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800adda:	637b      	str	r3, [r7, #52]	; 0x34
 800addc:	f000 bd7e 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ade0:	4b95      	ldr	r3, [pc, #596]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0320 	and.w	r3, r3, #32
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d11c      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adf2:	d118      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adf4:	4b90      	ldr	r3, [pc, #576]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ae00:	4b8d      	ldr	r3, [pc, #564]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	0e1b      	lsrs	r3, r3, #24
 800ae06:	f003 030f 	and.w	r3, r3, #15
 800ae0a:	e006      	b.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ae0c:	4b8a      	ldr	r3, [pc, #552]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	0e1b      	lsrs	r3, r3, #24
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	4a89      	ldr	r2, [pc, #548]	; (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ae1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae20:	637b      	str	r3, [r7, #52]	; 0x34
 800ae22:	f000 bd5b 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2a:	f000 bd57 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ae2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae32:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ae36:	430b      	orrs	r3, r1
 800ae38:	d158      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ae3a:	4b7f      	ldr	r3, [pc, #508]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2bc0      	cmp	r3, #192	; 0xc0
 800ae4a:	d028      	beq.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae50:	d848      	bhi.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	2b80      	cmp	r3, #128	; 0x80
 800ae56:	d00e      	beq.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	2b80      	cmp	r3, #128	; 0x80
 800ae5c:	d842      	bhi.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d014      	beq.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ae6a:	e03b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ae6c:	f7fd fe80 	bl	8008b70 <HAL_RCC_GetPCLK3Freq>
 800ae70:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae72:	f000 bd33 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae76:	4b70      	ldr	r3, [pc, #448]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae82:	d103      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ae84:	4b6d      	ldr	r3, [pc, #436]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae88:	f000 bd28 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae90:	f000 bd24 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ae94:	f7fd fd28 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800ae98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae9a:	f000 bd1f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae9e:	4b66      	ldr	r3, [pc, #408]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d118      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aeaa:	4b63      	ldr	r3, [pc, #396]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800aeb6:	4b60      	ldr	r3, [pc, #384]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	0e1b      	lsrs	r3, r3, #24
 800aebc:	f003 030f 	and.w	r3, r3, #15
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800aec2:	4b5d      	ldr	r3, [pc, #372]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aec8:	041b      	lsls	r3, r3, #16
 800aeca:	0e1b      	lsrs	r3, r3, #24
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	4a5b      	ldr	r2, [pc, #364]	; (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800aed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aed8:	f000 bd00 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aee0:	f000 bcfc 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aee8:	f000 bcf8 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800aef4:	430b      	orrs	r3, r1
 800aef6:	d14c      	bne.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aef8:	4b4f      	ldr	r3, [pc, #316]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aefa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aefe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af02:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	2b00      	cmp	r3, #0
 800af08:	d104      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af0a:	f7fd fe09 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800af0e:	6378      	str	r0, [r7, #52]	; 0x34
 800af10:	f000 bce4 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af1a:	d104      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af1c:	f7fd fce4 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800af20:	6378      	str	r0, [r7, #52]	; 0x34
 800af22:	f000 bcdb 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af32:	d107      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af3a:	d103      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800af3c:	4b3f      	ldr	r3, [pc, #252]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
 800af40:	f000 bccc 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800af44:	4b3c      	ldr	r3, [pc, #240]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b20      	cmp	r3, #32
 800af4e:	d11c      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800af56:	d118      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af58:	4b37      	ldr	r3, [pc, #220]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d005      	beq.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800af64:	4b34      	ldr	r3, [pc, #208]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	0e1b      	lsrs	r3, r3, #24
 800af6a:	f003 030f 	and.w	r3, r3, #15
 800af6e:	e006      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800af70:	4b31      	ldr	r3, [pc, #196]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	0e1b      	lsrs	r3, r3, #24
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	4a30      	ldr	r2, [pc, #192]	; (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800af80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
 800af86:	f000 bca9 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	637b      	str	r3, [r7, #52]	; 0x34
 800af8e:	f000 bca5 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800af92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af96:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800af9a:	430b      	orrs	r3, r1
 800af9c:	d152      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800af9e:	4b26      	ldr	r3, [pc, #152]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800afa4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afb0:	f7fd fdb6 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800afb4:	6378      	str	r0, [r7, #52]	; 0x34
 800afb6:	f000 bc91 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afc0:	d104      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800afc2:	f7fd fc91 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800afc6:	6378      	str	r0, [r7, #52]	; 0x34
 800afc8:	f000 bc88 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800afcc:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afd8:	d107      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe0:	d103      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800afe2:	4b16      	ldr	r3, [pc, #88]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800afe4:	637b      	str	r3, [r7, #52]	; 0x34
 800afe6:	f000 bc79 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b20      	cmp	r3, #32
 800aff4:	d11c      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800affc:	d118      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800affe:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	f003 030f 	and.w	r3, r3, #15
 800b014:	e006      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b016:	4b08      	ldr	r3, [pc, #32]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b01c:	041b      	lsls	r3, r3, #16
 800b01e:	0e1b      	lsrs	r3, r3, #24
 800b020:	f003 030f 	and.w	r3, r3, #15
 800b024:	4a06      	ldr	r2, [pc, #24]	; (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34
 800b02c:	f000 bc56 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
 800b034:	f000 bc52 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b038:	46020c00 	.word	0x46020c00
 800b03c:	00f42400 	.word	0x00f42400
 800b040:	0800e7ac 	.word	0x0800e7ac
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b048:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800b04c:	430b      	orrs	r3, r1
 800b04e:	d14a      	bne.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b050:	4ba5      	ldr	r3, [pc, #660]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b056:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b05a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b062:	f7fd fd5d 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800b066:	6378      	str	r0, [r7, #52]	; 0x34
 800b068:	f000 bc38 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b072:	d104      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b074:	f7fd fc38 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b078:	6378      	str	r0, [r7, #52]	; 0x34
 800b07a:	f000 bc2f 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b07e:	4b9a      	ldr	r3, [pc, #616]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b08a:	d107      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b092:	d103      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b094:	4b95      	ldr	r3, [pc, #596]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b096:	637b      	str	r3, [r7, #52]	; 0x34
 800b098:	f000 bc20 	b.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b09c:	4b92      	ldr	r3, [pc, #584]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	d11b      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b0ae:	d117      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0b0:	4b8d      	ldr	r3, [pc, #564]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b0bc:	4b8a      	ldr	r3, [pc, #552]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	0e1b      	lsrs	r3, r3, #24
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	e006      	b.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b0c8:	4b87      	ldr	r3, [pc, #540]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0ce:	041b      	lsls	r3, r3, #16
 800b0d0:	0e1b      	lsrs	r3, r3, #24
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	4a86      	ldr	r2, [pc, #536]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0de:	e3fd      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e4:	e3fa      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b0e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b0ee:	430b      	orrs	r3, r1
 800b0f0:	d164      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b0f2:	4b7d      	ldr	r3, [pc, #500]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b0f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b0f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	2b00      	cmp	r3, #0
 800b102:	d120      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b104:	4b78      	ldr	r3, [pc, #480]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b20      	cmp	r3, #32
 800b10e:	d117      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b110:	4b75      	ldr	r3, [pc, #468]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d005      	beq.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800b11c:	4b72      	ldr	r3, [pc, #456]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	0e1b      	lsrs	r3, r3, #24
 800b122:	f003 030f 	and.w	r3, r3, #15
 800b126:	e006      	b.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 800b128:	4b6f      	ldr	r3, [pc, #444]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b12a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	0e1b      	lsrs	r3, r3, #24
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	4a6e      	ldr	r2, [pc, #440]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b13c:	637b      	str	r3, [r7, #52]	; 0x34
 800b13e:	e3cd      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	637b      	str	r3, [r7, #52]	; 0x34
 800b144:	e3ca      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b146:	4b68      	ldr	r3, [pc, #416]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b154:	d112      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15c:	d10e      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b15e:	4b62      	ldr	r3, [pc, #392]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b16c:	d102      	bne.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800b16e:	23fa      	movs	r3, #250	; 0xfa
 800b170:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b172:	e3b3      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800b174:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b17a:	e3af      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b17c:	4b5a      	ldr	r3, [pc, #360]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b188:	d106      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b190:	d102      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800b192:	4b56      	ldr	r3, [pc, #344]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b194:	637b      	str	r3, [r7, #52]	; 0x34
 800b196:	e3a1      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b198:	4b53      	ldr	r3, [pc, #332]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d107      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1ac:	d103      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800b1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1b4:	e392      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ba:	e38f      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b1c4:	430b      	orrs	r3, r1
 800b1c6:	d164      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b1c8:	4b47      	ldr	r3, [pc, #284]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b1ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b1d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d120      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1da:	4b43      	ldr	r3, [pc, #268]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0320 	and.w	r3, r3, #32
 800b1e2:	2b20      	cmp	r3, #32
 800b1e4:	d117      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1e6:	4b40      	ldr	r3, [pc, #256]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d005      	beq.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800b1f2:	4b3d      	ldr	r3, [pc, #244]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	0e1b      	lsrs	r3, r3, #24
 800b1f8:	f003 030f 	and.w	r3, r3, #15
 800b1fc:	e006      	b.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800b1fe:	4b3a      	ldr	r3, [pc, #232]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b204:	041b      	lsls	r3, r3, #16
 800b206:	0e1b      	lsrs	r3, r3, #24
 800b208:	f003 030f 	and.w	r3, r3, #15
 800b20c:	4a38      	ldr	r2, [pc, #224]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b212:	637b      	str	r3, [r7, #52]	; 0x34
 800b214:	e362      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	637b      	str	r3, [r7, #52]	; 0x34
 800b21a:	e35f      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b21c:	4b32      	ldr	r3, [pc, #200]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b21e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b22a:	d112      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b232:	d10e      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b234:	4b2c      	ldr	r3, [pc, #176]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b23a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b242:	d102      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 800b244:	23fa      	movs	r3, #250	; 0xfa
 800b246:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b248:	e348      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800b24a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b250:	e344      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b252:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b25e:	d106      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b266:	d102      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800b268:	4b20      	ldr	r3, [pc, #128]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
 800b26c:	e336      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b26e:	4b1e      	ldr	r3, [pc, #120]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d107      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b282:	d103      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800b284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b288:	637b      	str	r3, [r7, #52]	; 0x34
 800b28a:	e327      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
 800b290:	e324      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b296:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b29a:	430b      	orrs	r3, r1
 800b29c:	d14e      	bne.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b29e:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b2a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b2a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b2b0:	f7fd fc36 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800b2b4:	6378      	str	r0, [r7, #52]	; 0x34
 800b2b6:	e311      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b2b8:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b2ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c6:	d119      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2ce:	d115      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b2d0:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800b2d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2de:	d109      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800b2e0:	23fa      	movs	r3, #250	; 0xfa
 800b2e2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b2e4:	e2fa      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b2e6:	bf00      	nop
 800b2e8:	46020c00 	.word	0x46020c00
 800b2ec:	00f42400 	.word	0x00f42400
 800b2f0:	0800e7ac 	.word	0x0800e7ac
      }
      else
      {
        frequency = LSI_VALUE;
 800b2f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b2fa:	e2ef      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b2fc:	4ba8      	ldr	r3, [pc, #672]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b308:	d106      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b310:	d102      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800b312:	4ba4      	ldr	r3, [pc, #656]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b314:	637b      	str	r3, [r7, #52]	; 0x34
 800b316:	e2e1      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b318:	4ba1      	ldr	r3, [pc, #644]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b31a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b02      	cmp	r3, #2
 800b324:	d107      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b32c:	d103      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800b32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
 800b334:	e2d2      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
 800b33a:	e2cf      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b340:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800b344:	430b      	orrs	r3, r1
 800b346:	d12d      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b348:	4b95      	ldr	r3, [pc, #596]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b34a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b34e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800b352:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b354:	4b92      	ldr	r3, [pc, #584]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b35c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b360:	d105      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800b368:	4b8e      	ldr	r3, [pc, #568]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b36a:	637b      	str	r3, [r7, #52]	; 0x34
 800b36c:	e2b6      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b374:	d107      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fb4e 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	637b      	str	r3, [r7, #52]	; 0x34
 800b384:	e2aa      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b38c:	d107      	bne.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b38e:	f107 0318 	add.w	r3, r7, #24
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fc9c 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
 800b39c:	e29e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a2:	e29b      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	d156      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b3b0:	4b7b      	ldr	r3, [pc, #492]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b3b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b3ba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3c2:	d028      	beq.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3ca:	d845      	bhi.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3d2:	d013      	beq.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3da:	d83d      	bhi.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e8:	d004      	beq.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800b3ea:	e035      	b.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b3ec:	f7fd fbac 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
 800b3f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b3f2:	e273      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b3f4:	f7fd fa78 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b3f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b3fa:	e26f      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b3fc:	4b68      	ldr	r3, [pc, #416]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b408:	d102      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800b40a:	4b66      	ldr	r3, [pc, #408]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b40e:	e265      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b414:	e262      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b416:	4b62      	ldr	r3, [pc, #392]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b20      	cmp	r3, #32
 800b420:	d117      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b422:	4b5f      	ldr	r3, [pc, #380]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800b42e:	4b5c      	ldr	r3, [pc, #368]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	0e1b      	lsrs	r3, r3, #24
 800b434:	f003 030f 	and.w	r3, r3, #15
 800b438:	e006      	b.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800b43a:	4b59      	ldr	r3, [pc, #356]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b43c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b440:	041b      	lsls	r3, r3, #16
 800b442:	0e1b      	lsrs	r3, r3, #24
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	4a57      	ldr	r2, [pc, #348]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b450:	e244      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b456:	e241      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b45c:	e23e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b462:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b466:	430b      	orrs	r3, r1
 800b468:	d156      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b46a:	4b4d      	ldr	r3, [pc, #308]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b474:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b47c:	d028      	beq.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b484:	d845      	bhi.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b48c:	d013      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b494:	d83d      	bhi.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a2:	d004      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800b4a4:	e035      	b.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b4a6:	f7fd fb3b 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800b4aa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b4ac:	e216      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b4ae:	f7fd fa1b 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b4b2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b4b4:	e212      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4b6:	4b3a      	ldr	r3, [pc, #232]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c2:	d102      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800b4c4:	4b37      	ldr	r3, [pc, #220]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4c8:	e208      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4ce:	e205      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b4d0:	4b33      	ldr	r3, [pc, #204]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0320 	and.w	r3, r3, #32
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d117      	bne.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4dc:	4b30      	ldr	r3, [pc, #192]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 800b4e8:	4b2d      	ldr	r3, [pc, #180]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	0e1b      	lsrs	r3, r3, #24
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	e006      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 800b4f4:	4b2a      	ldr	r3, [pc, #168]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b4f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b4fa:	041b      	lsls	r3, r3, #16
 800b4fc:	0e1b      	lsrs	r3, r3, #24
 800b4fe:	f003 030f 	and.w	r3, r3, #15
 800b502:	4a29      	ldr	r2, [pc, #164]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b50a:	e1e7      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b510:	e1e4      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b516:	e1e1      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800b520:	430b      	orrs	r3, r1
 800b522:	d17c      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b524:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b52a:	f003 0318 	and.w	r3, r3, #24
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	2b18      	cmp	r3, #24
 800b534:	d870      	bhi.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 800b536:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 800b538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53c:	0800b5ad 	.word	0x0800b5ad
 800b540:	0800b619 	.word	0x0800b619
 800b544:	0800b619 	.word	0x0800b619
 800b548:	0800b619 	.word	0x0800b619
 800b54c:	0800b619 	.word	0x0800b619
 800b550:	0800b619 	.word	0x0800b619
 800b554:	0800b619 	.word	0x0800b619
 800b558:	0800b619 	.word	0x0800b619
 800b55c:	0800b5b5 	.word	0x0800b5b5
 800b560:	0800b619 	.word	0x0800b619
 800b564:	0800b619 	.word	0x0800b619
 800b568:	0800b619 	.word	0x0800b619
 800b56c:	0800b619 	.word	0x0800b619
 800b570:	0800b619 	.word	0x0800b619
 800b574:	0800b619 	.word	0x0800b619
 800b578:	0800b619 	.word	0x0800b619
 800b57c:	0800b5bd 	.word	0x0800b5bd
 800b580:	0800b619 	.word	0x0800b619
 800b584:	0800b619 	.word	0x0800b619
 800b588:	0800b619 	.word	0x0800b619
 800b58c:	0800b619 	.word	0x0800b619
 800b590:	0800b619 	.word	0x0800b619
 800b594:	0800b619 	.word	0x0800b619
 800b598:	0800b619 	.word	0x0800b619
 800b59c:	0800b5d7 	.word	0x0800b5d7
 800b5a0:	46020c00 	.word	0x46020c00
 800b5a4:	00f42400 	.word	0x00f42400
 800b5a8:	0800e7ac 	.word	0x0800e7ac
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b5ac:	f7fd fae0 	bl	8008b70 <HAL_RCC_GetPCLK3Freq>
 800b5b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b5b2:	e193      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b5b4:	f7fd f998 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b5b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b5ba:	e18f      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5bc:	4b9f      	ldr	r3, [pc, #636]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5c8:	d102      	bne.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800b5ca:	4b9d      	ldr	r3, [pc, #628]	; (800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5ce:	e185      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5d4:	e182      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b5d6:	4b99      	ldr	r3, [pc, #612]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0320 	and.w	r3, r3, #32
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d117      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5e2:	4b96      	ldr	r3, [pc, #600]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800b5ee:	4b93      	ldr	r3, [pc, #588]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	0e1b      	lsrs	r3, r3, #24
 800b5f4:	f003 030f 	and.w	r3, r3, #15
 800b5f8:	e006      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800b5fa:	4b90      	ldr	r3, [pc, #576]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b5fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b600:	041b      	lsls	r3, r3, #16
 800b602:	0e1b      	lsrs	r3, r3, #24
 800b604:	f003 030f 	and.w	r3, r3, #15
 800b608:	4a8e      	ldr	r2, [pc, #568]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b610:	e164      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b616:	e161      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b61c:	e15e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b61e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b622:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800b626:	430b      	orrs	r3, r1
 800b628:	d155      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b62a:	4b84      	ldr	r3, [pc, #528]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b62c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b630:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b634:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b63c:	d013      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b644:	d844      	bhi.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b64c:	d013      	beq.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b654:	d83c      	bhi.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d014      	beq.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b662:	d014      	beq.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800b664:	e034      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b666:	f107 0318 	add.w	r3, r7, #24
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fb30 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b674:	e132      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe f9ce 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b684:	e12a      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b686:	f7fd f92f 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b68a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b68c:	e126      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b68e:	4b6b      	ldr	r3, [pc, #428]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0320 	and.w	r3, r3, #32
 800b696:	2b20      	cmp	r3, #32
 800b698:	d117      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b69a:	4b68      	ldr	r3, [pc, #416]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800b6a6:	4b65      	ldr	r3, [pc, #404]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	0e1b      	lsrs	r3, r3, #24
 800b6ac:	f003 030f 	and.w	r3, r3, #15
 800b6b0:	e006      	b.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800b6b2:	4b62      	ldr	r3, [pc, #392]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b6b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6b8:	041b      	lsls	r3, r3, #16
 800b6ba:	0e1b      	lsrs	r3, r3, #24
 800b6bc:	f003 030f 	and.w	r3, r3, #15
 800b6c0:	4a60      	ldr	r2, [pc, #384]	; (800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6c8:	e108      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6ce:	e105      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6d4:	e102      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6da:	1e59      	subs	r1, r3, #1
 800b6dc:	ea52 0301 	orrs.w	r3, r2, r1
 800b6e0:	d13c      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b6e2:	4b56      	ldr	r3, [pc, #344]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b6e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b6e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b6ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b6f4:	d027      	beq.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b6fc:	d82b      	bhi.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b704:	d017      	beq.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b70c:	d823      	bhi.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b71a:	d004      	beq.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800b71c:	e01b      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b71e:	f7fd f8e3 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800b722:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b724:	e0da      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fe f976 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b734:	e0d2      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b736:	f107 0318 	add.w	r3, r7, #24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe fac8 	bl	8009cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b744:	e0ca      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b746:	f107 030c 	add.w	r3, r7, #12
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fc1a 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b754:	e0c2      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b75a:	e0bf      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b75c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b760:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800b764:	430b      	orrs	r3, r1
 800b766:	d131      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b768:	4b34      	ldr	r3, [pc, #208]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b76a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b76e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b772:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b774:	4b31      	ldr	r3, [pc, #196]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d106      	bne.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800b788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78c:	637b      	str	r3, [r7, #52]	; 0x34
 800b78e:	e0a5      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b790:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b79e:	d112      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7a6:	d10e      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7a8:	4b24      	ldr	r3, [pc, #144]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b7aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7b6:	d102      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800b7b8:	23fa      	movs	r3, #250	; 0xfa
 800b7ba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7bc:	e08e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800b7be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7c4:	e08a      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ca:	e087      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b7cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	d13b      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b7d8:	4b18      	ldr	r3, [pc, #96]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b7da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b7e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b7e4:	4b15      	ldr	r3, [pc, #84]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f0:	d105      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 800b7f8:	4b13      	ldr	r3, [pc, #76]	; (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b7fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b7fc:	e06e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b80a:	d106      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b812:	d102      	bne.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b814:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b816:	637b      	str	r3, [r7, #52]	; 0x34
 800b818:	e060      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b81a:	4b08      	ldr	r3, [pc, #32]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b826:	d106      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b82e:	d102      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800b830:	4b03      	ldr	r3, [pc, #12]	; (800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b832:	637b      	str	r3, [r7, #52]	; 0x34
 800b834:	e052      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	637b      	str	r3, [r7, #52]	; 0x34
 800b83a:	e04f      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800b83c:	46020c00 	.word	0x46020c00
 800b840:	00f42400 	.word	0x00f42400
 800b844:	0800e7ac 	.word	0x0800e7ac
 800b848:	02dc6c00 	.word	0x02dc6c00
 800b84c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b854:	f1a3 0108 	sub.w	r1, r3, #8
 800b858:	ea52 0301 	orrs.w	r3, r2, r1
 800b85c:	d13c      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b85e:	4b22      	ldr	r3, [pc, #136]	; (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b860:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b864:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b868:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b86a:	4b1f      	ldr	r3, [pc, #124]	; (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b876:	d105      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800b87e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800b880:	637b      	str	r3, [r7, #52]	; 0x34
 800b882:	e02b      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b884:	4b18      	ldr	r3, [pc, #96]	; (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b88c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b890:	d106      	bne.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b898:	d102      	bne.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 800b89a:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
 800b89e:	e01d      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a6:	d107      	bne.n	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe f8b5 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b6:	e011      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b8be:	d108      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe f8a9 	bl	8009a1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	085b      	lsrs	r3, r3, #1
 800b8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d0:	e004      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d6:	e001      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3738      	adds	r7, #56	; 0x38
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	46020c00 	.word	0x46020c00
 800b8ec:	00f42400 	.word	0x00f42400
 800b8f0:	007a1200 	.word	0x007a1200

0800b8f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b8fc:	4b47      	ldr	r3, [pc, #284]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a46      	ldr	r2, [pc, #280]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b906:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b908:	f7f9 fb28 	bl	8004f5c <HAL_GetTick>
 800b90c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b90e:	e008      	b.n	800b922 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b910:	f7f9 fb24 	bl	8004f5c <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d901      	bls.n	800b922 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e077      	b.n	800ba12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b922:	4b3e      	ldr	r3, [pc, #248]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f0      	bne.n	800b910 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b92e:	4b3b      	ldr	r3, [pc, #236]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	6811      	ldr	r1, [r2, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6852      	ldr	r2, [r2, #4]
 800b942:	3a01      	subs	r2, #1
 800b944:	0212      	lsls	r2, r2, #8
 800b946:	430a      	orrs	r2, r1
 800b948:	4934      	ldr	r1, [pc, #208]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b94e:	4b33      	ldr	r3, [pc, #204]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b952:	4b33      	ldr	r3, [pc, #204]	; (800ba20 <RCCEx_PLL2_Config+0x12c>)
 800b954:	4013      	ands	r3, r2
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6892      	ldr	r2, [r2, #8]
 800b95a:	3a01      	subs	r2, #1
 800b95c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	68d2      	ldr	r2, [r2, #12]
 800b964:	3a01      	subs	r2, #1
 800b966:	0252      	lsls	r2, r2, #9
 800b968:	b292      	uxth	r2, r2
 800b96a:	4311      	orrs	r1, r2
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6912      	ldr	r2, [r2, #16]
 800b970:	3a01      	subs	r2, #1
 800b972:	0412      	lsls	r2, r2, #16
 800b974:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b978:	4311      	orrs	r1, r2
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	6952      	ldr	r2, [r2, #20]
 800b97e:	3a01      	subs	r2, #1
 800b980:	0612      	lsls	r2, r2, #24
 800b982:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b986:	430a      	orrs	r2, r1
 800b988:	4924      	ldr	r1, [pc, #144]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b98e:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	f023 020c 	bic.w	r2, r3, #12
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	4920      	ldr	r1, [pc, #128]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	491c      	ldr	r1, [pc, #112]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b9ae:	4b1b      	ldr	r3, [pc, #108]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	4a1a      	ldr	r2, [pc, #104]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9b4:	f023 0310 	bic.w	r3, r3, #16
 800b9b8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9ba:	4b18      	ldr	r3, [pc, #96]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	69d2      	ldr	r2, [r2, #28]
 800b9ca:	00d2      	lsls	r2, r2, #3
 800b9cc:	4913      	ldr	r1, [pc, #76]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b9d2:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d6:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9d8:	f043 0310 	orr.w	r3, r3, #16
 800b9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a0e      	ldr	r2, [pc, #56]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800b9e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9ea:	f7f9 fab7 	bl	8004f5c <HAL_GetTick>
 800b9ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9f0:	e008      	b.n	800ba04 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9f2:	f7f9 fab3 	bl	8004f5c <HAL_GetTick>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d901      	bls.n	800ba04 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e006      	b.n	800ba12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <RCCEx_PLL2_Config+0x128>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0f0      	beq.n	800b9f2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ba10:	2300      	movs	r3, #0

}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	46020c00 	.word	0x46020c00
 800ba20:	80800000 	.word	0x80800000

0800ba24 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ba2c:	4b47      	ldr	r3, [pc, #284]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a46      	ldr	r2, [pc, #280]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba38:	f7f9 fa90 	bl	8004f5c <HAL_GetTick>
 800ba3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba3e:	e008      	b.n	800ba52 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba40:	f7f9 fa8c 	bl	8004f5c <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d901      	bls.n	800ba52 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e077      	b.n	800bb42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba52:	4b3e      	ldr	r3, [pc, #248]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f0      	bne.n	800ba40 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ba5e:	4b3b      	ldr	r3, [pc, #236]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	6852      	ldr	r2, [r2, #4]
 800ba72:	3a01      	subs	r2, #1
 800ba74:	0212      	lsls	r2, r2, #8
 800ba76:	430a      	orrs	r2, r1
 800ba78:	4934      	ldr	r1, [pc, #208]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	630b      	str	r3, [r1, #48]	; 0x30
 800ba7e:	4b33      	ldr	r3, [pc, #204]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800ba80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba82:	4b33      	ldr	r3, [pc, #204]	; (800bb50 <RCCEx_PLL3_Config+0x12c>)
 800ba84:	4013      	ands	r3, r2
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	6892      	ldr	r2, [r2, #8]
 800ba8a:	3a01      	subs	r2, #1
 800ba8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	68d2      	ldr	r2, [r2, #12]
 800ba94:	3a01      	subs	r2, #1
 800ba96:	0252      	lsls	r2, r2, #9
 800ba98:	b292      	uxth	r2, r2
 800ba9a:	4311      	orrs	r1, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	6912      	ldr	r2, [r2, #16]
 800baa0:	3a01      	subs	r2, #1
 800baa2:	0412      	lsls	r2, r2, #16
 800baa4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800baa8:	4311      	orrs	r1, r2
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6952      	ldr	r2, [r2, #20]
 800baae:	3a01      	subs	r2, #1
 800bab0:	0612      	lsls	r2, r2, #24
 800bab2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bab6:	430a      	orrs	r2, r1
 800bab8:	4924      	ldr	r1, [pc, #144]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800baba:	4313      	orrs	r3, r2
 800babc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800babe:	4b23      	ldr	r3, [pc, #140]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac2:	f023 020c 	bic.w	r2, r3, #12
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	4920      	ldr	r1, [pc, #128]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bad0:	4b1e      	ldr	r3, [pc, #120]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	491c      	ldr	r1, [pc, #112]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bada:	4313      	orrs	r3, r2
 800badc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800bade:	4b1b      	ldr	r3, [pc, #108]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae2:	4a1a      	ldr	r2, [pc, #104]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bae4:	f023 0310 	bic.w	r3, r3, #16
 800bae8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800baea:	4b18      	ldr	r3, [pc, #96]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800baec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800baf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	69d2      	ldr	r2, [r2, #28]
 800bafa:	00d2      	lsls	r2, r2, #3
 800bafc:	4913      	ldr	r1, [pc, #76]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bb02:	4b12      	ldr	r3, [pc, #72]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb06:	4a11      	ldr	r2, [pc, #68]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bb08:	f043 0310 	orr.w	r3, r3, #16
 800bb0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bb0e:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a0e      	ldr	r2, [pc, #56]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bb14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb1a:	f7f9 fa1f 	bl	8004f5c <HAL_GetTick>
 800bb1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb20:	e008      	b.n	800bb34 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb22:	f7f9 fa1b 	bl	8004f5c <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d901      	bls.n	800bb34 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e006      	b.n	800bb42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <RCCEx_PLL3_Config+0x128>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0f0      	beq.n	800bb22 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	46020c00 	.word	0x46020c00
 800bb50:	80800000 	.word	0x80800000

0800bb54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e0fb      	b.n	800bd5e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a7f      	ldr	r2, [pc, #508]	; (800bd68 <HAL_SPI_Init+0x214>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d004      	beq.n	800bb7a <HAL_SPI_Init+0x26>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a7d      	ldr	r2, [pc, #500]	; (800bd6c <HAL_SPI_Init+0x218>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	e000      	b.n	800bb7c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800bb7a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a78      	ldr	r2, [pc, #480]	; (800bd68 <HAL_SPI_Init+0x214>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d004      	beq.n	800bb96 <HAL_SPI_Init+0x42>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a76      	ldr	r2, [pc, #472]	; (800bd6c <HAL_SPI_Init+0x218>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d105      	bne.n	800bba2 <HAL_SPI_Init+0x4e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b0f      	cmp	r3, #15
 800bb9c:	d901      	bls.n	800bba2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e0dd      	b.n	800bd5e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fe16 	bl	800c7d4 <SPI_GetPacketSize>
 800bba8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a6e      	ldr	r2, [pc, #440]	; (800bd68 <HAL_SPI_Init+0x214>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d004      	beq.n	800bbbe <HAL_SPI_Init+0x6a>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a6c      	ldr	r2, [pc, #432]	; (800bd6c <HAL_SPI_Init+0x218>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d102      	bne.n	800bbc4 <HAL_SPI_Init+0x70>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b08      	cmp	r3, #8
 800bbc2:	d816      	bhi.n	800bbf2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbc8:	4a69      	ldr	r2, [pc, #420]	; (800bd70 <HAL_SPI_Init+0x21c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d00e      	beq.n	800bbec <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a68      	ldr	r2, [pc, #416]	; (800bd74 <HAL_SPI_Init+0x220>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d009      	beq.n	800bbec <HAL_SPI_Init+0x98>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a66      	ldr	r2, [pc, #408]	; (800bd78 <HAL_SPI_Init+0x224>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d004      	beq.n	800bbec <HAL_SPI_Init+0x98>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a65      	ldr	r2, [pc, #404]	; (800bd7c <HAL_SPI_Init+0x228>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d104      	bne.n	800bbf6 <HAL_SPI_Init+0xa2>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	d901      	bls.n	800bbf6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e0b3      	b.n	800bd5e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7f8 f97a 	bl	8003f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2202      	movs	r2, #2
 800bc14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0201 	bic.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bc32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc3c:	d119      	bne.n	800bc72 <HAL_SPI_Init+0x11e>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc46:	d103      	bne.n	800bc50 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d008      	beq.n	800bc62 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10c      	bne.n	800bc72 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc60:	d107      	bne.n	800bc72 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00f      	beq.n	800bc9e <HAL_SPI_Init+0x14a>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	2b06      	cmp	r3, #6
 800bc84:	d90b      	bls.n	800bc9e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	e007      	b.n	800bcae <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69da      	ldr	r2, [r3, #28]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc0:	ea42 0103 	orr.w	r1, r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	431a      	orrs	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd02:	431a      	orrs	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd14:	431a      	orrs	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd1a:	ea42 0103 	orr.w	r1, r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	46002000 	.word	0x46002000
 800bd6c:	56002000 	.word	0x56002000
 800bd70:	40013000 	.word	0x40013000
 800bd74:	50013000 	.word	0x50013000
 800bd78:	40003800 	.word	0x40003800
 800bd7c:	50003800 	.word	0x50003800

0800bd80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	; 0x28
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3320      	adds	r3, #32
 800bd96:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d101      	bne.n	800bdaa <HAL_SPI_Transmit+0x2a>
 800bda6:	2302      	movs	r3, #2
 800bda8:	e203      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdb2:	f7f9 f8d3 	bl	8004f5c <HAL_GetTick>
 800bdb6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d007      	beq.n	800bdd4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800bdd0:	7efb      	ldrb	r3, [r7, #27]
 800bdd2:	e1ee      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <HAL_SPI_Transmit+0x60>
 800bdda:	88fb      	ldrh	r3, [r7, #6]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d107      	bne.n	800bdf0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800bdec:	7efb      	ldrb	r3, [r7, #27]
 800bdee:	e1e0      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	88fa      	ldrh	r2, [r7, #6]
 800be0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	88fa      	ldrh	r2, [r7, #6]
 800be12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800be40:	d108      	bne.n	800be54 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	e009      	b.n	800be68 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800be66:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	041b      	lsls	r3, r3, #16
 800be72:	88f9      	ldrh	r1, [r7, #6]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	430b      	orrs	r3, r1
 800be7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f042 0201 	orr.w	r2, r2, #1
 800be8a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10c      	bne.n	800beb4 <HAL_SPI_Transmit+0x134>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bea2:	d107      	bne.n	800beb4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	2b0f      	cmp	r3, #15
 800beba:	d95b      	bls.n	800bf74 <HAL_SPI_Transmit+0x1f4>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a8f      	ldr	r2, [pc, #572]	; (800c100 <HAL_SPI_Transmit+0x380>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d04f      	beq.n	800bf66 <HAL_SPI_Transmit+0x1e6>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a8e      	ldr	r2, [pc, #568]	; (800c104 <HAL_SPI_Transmit+0x384>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d04a      	beq.n	800bf66 <HAL_SPI_Transmit+0x1e6>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a8c      	ldr	r2, [pc, #560]	; (800c108 <HAL_SPI_Transmit+0x388>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d045      	beq.n	800bf66 <HAL_SPI_Transmit+0x1e6>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a8b      	ldr	r2, [pc, #556]	; (800c10c <HAL_SPI_Transmit+0x38c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d147      	bne.n	800bf74 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bee4:	e03f      	b.n	800bf66 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d114      	bne.n	800bf1e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf04:	1d1a      	adds	r2, r3, #4
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	3b01      	subs	r3, #1
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bf1c:	e023      	b.n	800bf66 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf1e:	f7f9 f81d 	bl	8004f5c <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d803      	bhi.n	800bf36 <HAL_SPI_Transmit+0x1b6>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf34:	d102      	bne.n	800bf3c <HAL_SPI_Transmit+0x1bc>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d114      	bne.n	800bf66 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 fb7b 	bl	800c638 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e125      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1b9      	bne.n	800bee6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bf72:	e0f8      	b.n	800c166 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b07      	cmp	r3, #7
 800bf7a:	f240 80ed 	bls.w	800c158 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf7e:	e05d      	b.n	800c03c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d132      	bne.n	800bff4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d918      	bls.n	800bfcc <HAL_SPI_Transmit+0x24c>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d014      	beq.n	800bfcc <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	6812      	ldr	r2, [r2, #0]
 800bfac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	3b02      	subs	r3, #2
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bfca:	e037      	b.n	800c03c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfd0:	881a      	ldrh	r2, [r3, #0]
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfda:	1c9a      	adds	r2, r3, #2
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bff2:	e023      	b.n	800c03c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bff4:	f7f8 ffb2 	bl	8004f5c <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d803      	bhi.n	800c00c <HAL_SPI_Transmit+0x28c>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c00a:	d102      	bne.n	800c012 <HAL_SPI_Transmit+0x292>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d114      	bne.n	800c03c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 fb10 	bl	800c638 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e0ba      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c042:	b29b      	uxth	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d19b      	bne.n	800bf80 <HAL_SPI_Transmit+0x200>
 800c048:	e08d      	b.n	800c166 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b02      	cmp	r3, #2
 800c056:	d15b      	bne.n	800c110 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c05e:	b29b      	uxth	r3, r3
 800c060:	2b03      	cmp	r3, #3
 800c062:	d918      	bls.n	800c096 <HAL_SPI_Transmit+0x316>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c068:	2b40      	cmp	r3, #64	; 0x40
 800c06a:	d914      	bls.n	800c096 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6812      	ldr	r2, [r2, #0]
 800c076:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c07c:	1d1a      	adds	r2, r3, #4
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	3b04      	subs	r3, #4
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c094:	e060      	b.n	800c158 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d917      	bls.n	800c0d2 <HAL_SPI_Transmit+0x352>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d013      	beq.n	800c0d2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0ae:	881a      	ldrh	r2, [r3, #0]
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0b8:	1c9a      	adds	r2, r3, #2
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	3b02      	subs	r3, #2
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c0d0:	e042      	b.n	800c158 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3320      	adds	r3, #32
 800c0dc:	7812      	ldrb	r2, [r2, #0]
 800c0de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c0fc:	e02c      	b.n	800c158 <HAL_SPI_Transmit+0x3d8>
 800c0fe:	bf00      	nop
 800c100:	40013000 	.word	0x40013000
 800c104:	50013000 	.word	0x50013000
 800c108:	40003800 	.word	0x40003800
 800c10c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c110:	f7f8 ff24 	bl	8004f5c <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d803      	bhi.n	800c128 <HAL_SPI_Transmit+0x3a8>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c126:	d102      	bne.n	800c12e <HAL_SPI_Transmit+0x3ae>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d114      	bne.n	800c158 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 fa82 	bl	800c638 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c142:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800c154:	2303      	movs	r3, #3
 800c156:	e02c      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	f47f af72 	bne.w	800c04a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2200      	movs	r2, #0
 800c16e:	2108      	movs	r1, #8
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f000 fb01 	bl	800c778 <SPI_WaitOnFlagUntilTimeout>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c182:	f043 0220 	orr.w	r2, r3, #32
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 fa53 	bl	800c638 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800c1b0:	7efb      	ldrb	r3, [r7, #27]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3720      	adds	r7, #32
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop

0800c1bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3320      	adds	r3, #32
 800c1d6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3330      	adds	r3, #48	; 0x30
 800c1de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d101      	bne.n	800c1ee <HAL_SPI_TransmitReceive+0x32>
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	e21f      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1f6:	f7f8 feb1 	bl	8004f5c <HAL_GetTick>
 800c1fa:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800c1fc:	887b      	ldrh	r3, [r7, #2]
 800c1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800c200:	887b      	ldrh	r3, [r7, #2]
 800c202:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d009      	beq.n	800c224 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800c210:	2302      	movs	r3, #2
 800c212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c21e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c222:	e204      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d005      	beq.n	800c236 <HAL_SPI_TransmitReceive+0x7a>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <HAL_SPI_TransmitReceive+0x7a>
 800c230:	887b      	ldrh	r3, [r7, #2]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d109      	bne.n	800c24a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800c244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c248:	e1f1      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2205      	movs	r2, #5
 800c24e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	887a      	ldrh	r2, [r7, #2]
 800c264:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	887a      	ldrh	r2, [r7, #2]
 800c26c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	887a      	ldrh	r2, [r7, #2]
 800c27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	887a      	ldrh	r2, [r7, #2]
 800c282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800c2a0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	0c1b      	lsrs	r3, r3, #16
 800c2aa:	041b      	lsls	r3, r3, #16
 800c2ac:	8879      	ldrh	r1, [r7, #2]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	6812      	ldr	r2, [r2, #0]
 800c2b2:	430b      	orrs	r3, r1
 800c2b4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f042 0201 	orr.w	r2, r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10c      	bne.n	800c2ee <HAL_SPI_TransmitReceive+0x132>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2dc:	d107      	bne.n	800c2ee <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	2b0f      	cmp	r3, #15
 800c2f4:	f240 8085 	bls.w	800c402 <HAL_SPI_TransmitReceive+0x246>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a7b      	ldr	r2, [pc, #492]	; (800c4ec <HAL_SPI_TransmitReceive+0x330>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d078      	beq.n	800c3f4 <HAL_SPI_TransmitReceive+0x238>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a7a      	ldr	r2, [pc, #488]	; (800c4f0 <HAL_SPI_TransmitReceive+0x334>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d073      	beq.n	800c3f4 <HAL_SPI_TransmitReceive+0x238>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a78      	ldr	r2, [pc, #480]	; (800c4f4 <HAL_SPI_TransmitReceive+0x338>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d06e      	beq.n	800c3f4 <HAL_SPI_TransmitReceive+0x238>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a77      	ldr	r2, [pc, #476]	; (800c4f8 <HAL_SPI_TransmitReceive+0x33c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d170      	bne.n	800c402 <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c320:	e068      	b.n	800c3f4 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	695b      	ldr	r3, [r3, #20]
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d11a      	bne.n	800c366 <HAL_SPI_TransmitReceive+0x1aa>
 800c330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c332:	2b00      	cmp	r3, #0
 800c334:	d017      	beq.n	800c366 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c346:	1d1a      	adds	r2, r3, #4
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c352:	b29b      	uxth	r3, r3
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c364:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	f248 0308 	movw	r3, #32776	; 0x8008
 800c370:	4013      	ands	r3, r2
 800c372:	2b00      	cmp	r3, #0
 800c374:	d01a      	beq.n	800c3ac <HAL_SPI_TransmitReceive+0x1f0>
 800c376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d017      	beq.n	800c3ac <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c386:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38c:	1d1a      	adds	r2, r3, #4
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c398:	b29b      	uxth	r3, r3
 800c39a:	3b01      	subs	r3, #1
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c3aa:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3ac:	f7f8 fdd6 	bl	8004f5c <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d803      	bhi.n	800c3c4 <HAL_SPI_TransmitReceive+0x208>
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3c2:	d102      	bne.n	800c3ca <HAL_SPI_TransmitReceive+0x20e>
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d114      	bne.n	800c3f4 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 f934 	bl	800c638 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e11c      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c3f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d193      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x166>
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d190      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c400:	e0ee      	b.n	800c5e0 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	2b07      	cmp	r3, #7
 800c408:	f240 80e4 	bls.w	800c5d4 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c40c:	e066      	b.n	800c4dc <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d119      	bne.n	800c450 <HAL_SPI_TransmitReceive+0x294>
 800c41c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d016      	beq.n	800c450 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c426:	881a      	ldrh	r2, [r3, #0]
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c430:	1c9a      	adds	r2, r3, #2
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	b29a      	uxth	r2, r3
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c44e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d11a      	bne.n	800c494 <HAL_SPI_TransmitReceive+0x2d8>
 800c45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d017      	beq.n	800c494 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	8812      	ldrh	r2, [r2, #0]
 800c46c:	b292      	uxth	r2, r2
 800c46e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c474:	1c9a      	adds	r2, r3, #2
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c480:	b29b      	uxth	r3, r3
 800c482:	3b01      	subs	r3, #1
 800c484:	b29a      	uxth	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c492:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c494:	f7f8 fd62 	bl	8004f5c <HAL_GetTick>
 800c498:	4602      	mov	r2, r0
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d803      	bhi.n	800c4ac <HAL_SPI_TransmitReceive+0x2f0>
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4aa:	d102      	bne.n	800c4b2 <HAL_SPI_TransmitReceive+0x2f6>
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d114      	bne.n	800c4dc <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 f8c0 	bl	800c638 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e0a8      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c4dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d195      	bne.n	800c40e <HAL_SPI_TransmitReceive+0x252>
 800c4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d192      	bne.n	800c40e <HAL_SPI_TransmitReceive+0x252>
 800c4e8:	e07a      	b.n	800c5e0 <HAL_SPI_TransmitReceive+0x424>
 800c4ea:	bf00      	nop
 800c4ec:	40013000 	.word	0x40013000
 800c4f0:	50013000 	.word	0x50013000
 800c4f4:	40003800 	.word	0x40003800
 800c4f8:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	f003 0302 	and.w	r3, r3, #2
 800c506:	2b02      	cmp	r3, #2
 800c508:	d11b      	bne.n	800c542 <HAL_SPI_TransmitReceive+0x386>
 800c50a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d018      	beq.n	800c542 <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3320      	adds	r3, #32
 800c51a:	7812      	ldrb	r2, [r2, #0]
 800c51c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c52e:	b29b      	uxth	r3, r3
 800c530:	3b01      	subs	r3, #1
 800c532:	b29a      	uxth	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c540:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d11d      	bne.n	800c58c <HAL_SPI_TransmitReceive+0x3d0>
 800c550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c552:	2b00      	cmp	r3, #0
 800c554:	d01a      	beq.n	800c58c <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c562:	7812      	ldrb	r2, [r2, #0]
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c578:	b29b      	uxth	r3, r3
 800c57a:	3b01      	subs	r3, #1
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c58a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c58c:	f7f8 fce6 	bl	8004f5c <HAL_GetTick>
 800c590:	4602      	mov	r2, r0
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c598:	429a      	cmp	r2, r3
 800c59a:	d803      	bhi.n	800c5a4 <HAL_SPI_TransmitReceive+0x3e8>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a2:	d102      	bne.n	800c5aa <HAL_SPI_TransmitReceive+0x3ee>
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d114      	bne.n	800c5d4 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f000 f844 	bl	800c638 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e02c      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c5d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d190      	bne.n	800c4fc <HAL_SPI_TransmitReceive+0x340>
 800c5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d18d      	bne.n	800c4fc <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2108      	movs	r1, #8
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f8c4 	bl	800c778 <SPI_WaitOnFlagUntilTimeout>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5fc:	f043 0220 	orr.w	r2, r3, #32
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 f816 	bl	800c638 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e001      	b.n	800c62e <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 800c62a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3728      	adds	r7, #40	; 0x28
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop

0800c638 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	699a      	ldr	r2, [r3, #24]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0208 	orr.w	r2, r2, #8
 800c656:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	699a      	ldr	r2, [r3, #24]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f042 0210 	orr.w	r2, r2, #16
 800c666:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0201 	bic.w	r2, r2, #1
 800c676:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800c686:	f023 0303 	bic.w	r3, r3, #3
 800c68a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c69a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d014      	beq.n	800c6d2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f003 0320 	and.w	r3, r3, #32
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00f      	beq.n	800c6d2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	699a      	ldr	r2, [r3, #24]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f042 0220 	orr.w	r2, r2, #32
 800c6d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d014      	beq.n	800c708 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00f      	beq.n	800c708 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ee:	f043 0204 	orr.w	r2, r3, #4
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	699a      	ldr	r2, [r3, #24]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c706:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00f      	beq.n	800c732 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c718:	f043 0201 	orr.w	r2, r3, #1
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c730:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00f      	beq.n	800c75c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c742:	f043 0208 	orr.w	r2, r3, #8
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	699a      	ldr	r2, [r3, #24]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c75a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800c76c:	bf00      	nop
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	603b      	str	r3, [r7, #0]
 800c784:	4613      	mov	r3, r2
 800c786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c788:	e010      	b.n	800c7ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c78a:	f7f8 fbe7 	bl	8004f5c <HAL_GetTick>
 800c78e:	4602      	mov	r2, r0
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	429a      	cmp	r2, r3
 800c798:	d803      	bhi.n	800c7a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7a0:	d102      	bne.n	800c7a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e00f      	b.n	800c7cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	695a      	ldr	r2, [r3, #20]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	bf0c      	ite	eq
 800c7bc:	2301      	moveq	r3, #1
 800c7be:	2300      	movne	r3, #0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	79fb      	ldrb	r3, [r7, #7]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d0df      	beq.n	800c78a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e0:	095b      	lsrs	r3, r3, #5
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	3307      	adds	r3, #7
 800c7f2:	08db      	lsrs	r3, r3, #3
 800c7f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d12e      	bne.n	800c87e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c826:	2b01      	cmp	r3, #1
 800c828:	d101      	bne.n	800c82e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c82a:	2302      	movs	r3, #2
 800c82c:	e028      	b.n	800c880 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2202      	movs	r2, #2
 800c83a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0201 	bic.w	r2, r2, #1
 800c84c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c85a:	ea42 0103 	orr.w	r1, r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	689a      	ldr	r2, [r3, #8]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	e000      	b.n	800c880 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
  }
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e042      	b.n	800c924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f7 fb91 	bl	8003fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2224      	movs	r2, #36	; 0x24
 800c8ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0201 	bic.w	r2, r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fa64 	bl	800cda4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f8b3 	bl	800ca48 <UART_SetConfig>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d101      	bne.n	800c8ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e01b      	b.n	800c924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	689a      	ldr	r2, [r3, #8]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c90a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f042 0201 	orr.w	r2, r2, #1
 800c91a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fae3 	bl	800cee8 <UART_CheckIdleState>
 800c922:	4603      	mov	r3, r0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08a      	sub	sp, #40	; 0x28
 800c930:	af02      	add	r7, sp, #8
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	603b      	str	r3, [r7, #0]
 800c938:	4613      	mov	r3, r2
 800c93a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c942:	2b20      	cmp	r3, #32
 800c944:	d17b      	bne.n	800ca3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <HAL_UART_Transmit+0x26>
 800c94c:	88fb      	ldrh	r3, [r7, #6]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e074      	b.n	800ca40 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2221      	movs	r2, #33	; 0x21
 800c962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c966:	f7f8 faf9 	bl	8004f5c <HAL_GetTick>
 800c96a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	88fa      	ldrh	r2, [r7, #6]
 800c970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	88fa      	ldrh	r2, [r7, #6]
 800c978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c984:	d108      	bne.n	800c998 <HAL_UART_Transmit+0x6c>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	61bb      	str	r3, [r7, #24]
 800c996:	e003      	b.n	800c9a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c9a0:	e030      	b.n	800ca04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2180      	movs	r1, #128	; 0x80
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 fb45 	bl	800d03c <UART_WaitOnFlagUntilTimeout>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d005      	beq.n	800c9c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e03d      	b.n	800ca40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10b      	bne.n	800c9e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	3302      	adds	r3, #2
 800c9de:	61bb      	str	r3, [r7, #24]
 800c9e0:	e007      	b.n	800c9f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	781a      	ldrb	r2, [r3, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1c8      	bne.n	800c9a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2200      	movs	r2, #0
 800ca18:	2140      	movs	r1, #64	; 0x40
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 fb0e 	bl	800d03c <UART_WaitOnFlagUntilTimeout>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e006      	b.n	800ca40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e000      	b.n	800ca40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ca3e:	2302      	movs	r3, #2
  }
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3720      	adds	r7, #32
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca4c:	b094      	sub	sp, #80	; 0x50
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	4b83      	ldr	r3, [pc, #524]	; (800cc6c <UART_SetConfig+0x224>)
 800ca5e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	497c      	ldr	r1, [pc, #496]	; (800cc70 <UART_SetConfig+0x228>)
 800ca80:	4019      	ands	r1, r3
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	68d9      	ldr	r1, [r3, #12]
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	ea40 0301 	orr.w	r3, r0, r1
 800caa2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b6f      	ldr	r3, [pc, #444]	; (800cc6c <UART_SetConfig+0x224>)
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d009      	beq.n	800cac8 <UART_SetConfig+0x80>
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	4b6e      	ldr	r3, [pc, #440]	; (800cc74 <UART_SetConfig+0x22c>)
 800caba:	429a      	cmp	r2, r3
 800cabc:	d004      	beq.n	800cac8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	6a1a      	ldr	r2, [r3, #32]
 800cac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac4:	4313      	orrs	r3, r2
 800cac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800cad2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cadc:	430b      	orrs	r3, r1
 800cade:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	f023 000f 	bic.w	r0, r3, #15
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800caee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	ea40 0301 	orr.w	r3, r0, r1
 800caf6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	4b5e      	ldr	r3, [pc, #376]	; (800cc78 <UART_SetConfig+0x230>)
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d102      	bne.n	800cb08 <UART_SetConfig+0xc0>
 800cb02:	2301      	movs	r3, #1
 800cb04:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb06:	e032      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	4b5b      	ldr	r3, [pc, #364]	; (800cc7c <UART_SetConfig+0x234>)
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d102      	bne.n	800cb18 <UART_SetConfig+0xd0>
 800cb12:	2302      	movs	r3, #2
 800cb14:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb16:	e02a      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	4b58      	ldr	r3, [pc, #352]	; (800cc80 <UART_SetConfig+0x238>)
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d102      	bne.n	800cb28 <UART_SetConfig+0xe0>
 800cb22:	2304      	movs	r3, #4
 800cb24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb26:	e022      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	4b55      	ldr	r3, [pc, #340]	; (800cc84 <UART_SetConfig+0x23c>)
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d102      	bne.n	800cb38 <UART_SetConfig+0xf0>
 800cb32:	2308      	movs	r3, #8
 800cb34:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb36:	e01a      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	4b52      	ldr	r3, [pc, #328]	; (800cc88 <UART_SetConfig+0x240>)
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d102      	bne.n	800cb48 <UART_SetConfig+0x100>
 800cb42:	2310      	movs	r3, #16
 800cb44:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb46:	e012      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	4b4f      	ldr	r3, [pc, #316]	; (800cc8c <UART_SetConfig+0x244>)
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d103      	bne.n	800cb5a <UART_SetConfig+0x112>
 800cb52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cb56:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb58:	e009      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	4b43      	ldr	r3, [pc, #268]	; (800cc6c <UART_SetConfig+0x224>)
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d102      	bne.n	800cb6a <UART_SetConfig+0x122>
 800cb64:	2320      	movs	r3, #32
 800cb66:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb68:	e001      	b.n	800cb6e <UART_SetConfig+0x126>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b3e      	ldr	r3, [pc, #248]	; (800cc6c <UART_SetConfig+0x224>)
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d005      	beq.n	800cb84 <UART_SetConfig+0x13c>
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4b3d      	ldr	r3, [pc, #244]	; (800cc74 <UART_SetConfig+0x22c>)
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f040 8088 	bne.w	800cc94 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cb84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb86:	2200      	movs	r2, #0
 800cb88:	623b      	str	r3, [r7, #32]
 800cb8a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cb90:	f7fd fb52 	bl	800a238 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb94:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 80eb 	beq.w	800cd74 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba2:	4a3b      	ldr	r2, [pc, #236]	; (800cc90 <UART_SetConfig+0x248>)
 800cba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cba8:	461a      	mov	r2, r3
 800cbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d305      	bcc.n	800cbce <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d903      	bls.n	800cbd6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cbd4:	e048      	b.n	800cc68 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd8:	2200      	movs	r2, #0
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	61fa      	str	r2, [r7, #28]
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	4a2b      	ldr	r2, [pc, #172]	; (800cc90 <UART_SetConfig+0x248>)
 800cbe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	2200      	movs	r2, #0
 800cbec:	613b      	str	r3, [r7, #16]
 800cbee:	617a      	str	r2, [r7, #20]
 800cbf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cbf4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cbf8:	f7f3 fd0e 	bl	8000618 <__aeabi_uldivmod>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4610      	mov	r0, r2
 800cc02:	4619      	mov	r1, r3
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	f04f 0300 	mov.w	r3, #0
 800cc0c:	020b      	lsls	r3, r1, #8
 800cc0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc12:	0202      	lsls	r2, r0, #8
 800cc14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc16:	6849      	ldr	r1, [r1, #4]
 800cc18:	0849      	lsrs	r1, r1, #1
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	4605      	mov	r5, r0
 800cc20:	eb12 0804 	adds.w	r8, r2, r4
 800cc24:	eb43 0905 	adc.w	r9, r3, r5
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	60bb      	str	r3, [r7, #8]
 800cc30:	60fa      	str	r2, [r7, #12]
 800cc32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc36:	4640      	mov	r0, r8
 800cc38:	4649      	mov	r1, r9
 800cc3a:	f7f3 fced 	bl	8000618 <__aeabi_uldivmod>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4613      	mov	r3, r2
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc4c:	d308      	bcc.n	800cc60 <UART_SetConfig+0x218>
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc54:	d204      	bcs.n	800cc60 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	e003      	b.n	800cc68 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800cc66:	e085      	b.n	800cd74 <UART_SetConfig+0x32c>
 800cc68:	e084      	b.n	800cd74 <UART_SetConfig+0x32c>
 800cc6a:	bf00      	nop
 800cc6c:	46002400 	.word	0x46002400
 800cc70:	cfff69f3 	.word	0xcfff69f3
 800cc74:	56002400 	.word	0x56002400
 800cc78:	40013800 	.word	0x40013800
 800cc7c:	40004400 	.word	0x40004400
 800cc80:	40004800 	.word	0x40004800
 800cc84:	40004c00 	.word	0x40004c00
 800cc88:	40005000 	.word	0x40005000
 800cc8c:	40006400 	.word	0x40006400
 800cc90:	0800e86c 	.word	0x0800e86c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc9c:	d13c      	bne.n	800cd18 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cc9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca0:	2200      	movs	r2, #0
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccaa:	f7fd fac5 	bl	800a238 <HAL_RCCEx_GetPeriphCLKFreq>
 800ccae:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d05e      	beq.n	800cd74 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccba:	4a39      	ldr	r2, [pc, #228]	; (800cda0 <UART_SetConfig+0x358>)
 800ccbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc8:	005a      	lsls	r2, r3, #1
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	085b      	lsrs	r3, r3, #1
 800ccd0:	441a      	add	r2, r3
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d916      	bls.n	800cd10 <UART_SetConfig+0x2c8>
 800cce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce8:	d212      	bcs.n	800cd10 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f023 030f 	bic.w	r3, r3, #15
 800ccf2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf6:	085b      	lsrs	r3, r3, #1
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd02:	4313      	orrs	r3, r2
 800cd04:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cd0c:	60da      	str	r2, [r3, #12]
 800cd0e:	e031      	b.n	800cd74 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cd16:	e02d      	b.n	800cd74 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	469a      	mov	sl, r3
 800cd1e:	4693      	mov	fp, r2
 800cd20:	4650      	mov	r0, sl
 800cd22:	4659      	mov	r1, fp
 800cd24:	f7fd fa88 	bl	800a238 <HAL_RCCEx_GetPeriphCLKFreq>
 800cd28:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800cd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d021      	beq.n	800cd74 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	4a1a      	ldr	r2, [pc, #104]	; (800cda0 <UART_SetConfig+0x358>)
 800cd36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	085b      	lsrs	r3, r3, #1
 800cd48:	441a      	add	r2, r3
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd56:	2b0f      	cmp	r3, #15
 800cd58:	d909      	bls.n	800cd6e <UART_SetConfig+0x326>
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd60:	d205      	bcs.n	800cd6e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60da      	str	r2, [r3, #12]
 800cd6c:	e002      	b.n	800cd74 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	2201      	movs	r2, #1
 800cd78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	2200      	movs	r2, #0
 800cd88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cd90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3750      	adds	r7, #80	; 0x50
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd9e:	bf00      	nop
 800cda0:	0800e86c 	.word	0x0800e86c

0800cda4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb0:	f003 0308 	and.w	r3, r3, #8
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00a      	beq.n	800cdce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf4:	f003 0302 	and.w	r3, r3, #2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	f003 0310 	and.w	r3, r3, #16
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5a:	f003 0320 	and.w	r3, r3, #32
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	430a      	orrs	r2, r1
 800ce76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d01a      	beq.n	800ceba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea2:	d10a      	bne.n	800ceba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	605a      	str	r2, [r3, #4]
  }
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b098      	sub	sp, #96	; 0x60
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cef8:	f7f8 f830 	bl	8004f5c <HAL_GetTick>
 800cefc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0308 	and.w	r3, r3, #8
 800cf08:	2b08      	cmp	r3, #8
 800cf0a:	d12f      	bne.n	800cf6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf14:	2200      	movs	r2, #0
 800cf16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f88e 	bl	800d03c <UART_WaitOnFlagUntilTimeout>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d022      	beq.n	800cf6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	e853 3f00 	ldrex	r3, [r3]
 800cf32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf3a:	653b      	str	r3, [r7, #80]	; 0x50
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	461a      	mov	r2, r3
 800cf42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf44:	647b      	str	r3, [r7, #68]	; 0x44
 800cf46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf4c:	e841 2300 	strex	r3, r2, [r1]
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1e6      	bne.n	800cf26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e063      	b.n	800d034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 0304 	and.w	r3, r3, #4
 800cf76:	2b04      	cmp	r3, #4
 800cf78:	d149      	bne.n	800d00e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf82:	2200      	movs	r2, #0
 800cf84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f857 	bl	800d03c <UART_WaitOnFlagUntilTimeout>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d03c      	beq.n	800d00e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	623b      	str	r3, [r7, #32]
   return(result);
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb2:	633b      	str	r3, [r7, #48]	; 0x30
 800cfb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e6      	bne.n	800cf94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f023 0301 	bic.w	r3, r3, #1
 800cfdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe6:	61fa      	str	r2, [r7, #28]
 800cfe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	69b9      	ldr	r1, [r7, #24]
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	617b      	str	r3, [r7, #20]
   return(result);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e5      	bne.n	800cfc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e012      	b.n	800d034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2220      	movs	r2, #32
 800d012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2220      	movs	r2, #32
 800d01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3758      	adds	r7, #88	; 0x58
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	4613      	mov	r3, r2
 800d04a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d04c:	e049      	b.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d054:	d045      	beq.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d056:	f7f7 ff81 	bl	8004f5c <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	69ba      	ldr	r2, [r7, #24]
 800d062:	429a      	cmp	r2, r3
 800d064:	d302      	bcc.n	800d06c <UART_WaitOnFlagUntilTimeout+0x30>
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e048      	b.n	800d102 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f003 0304 	and.w	r3, r3, #4
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d031      	beq.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	69db      	ldr	r3, [r3, #28]
 800d084:	f003 0308 	and.w	r3, r3, #8
 800d088:	2b08      	cmp	r3, #8
 800d08a:	d110      	bne.n	800d0ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2208      	movs	r2, #8
 800d092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 f838 	bl	800d10a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2208      	movs	r2, #8
 800d09e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e029      	b.n	800d102 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	69db      	ldr	r3, [r3, #28]
 800d0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0bc:	d111      	bne.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f000 f81e 	bl	800d10a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e00f      	b.n	800d102 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	69da      	ldr	r2, [r3, #28]
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	bf0c      	ite	eq
 800d0f2:	2301      	moveq	r3, #1
 800d0f4:	2300      	movne	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d0a6      	beq.n	800d04e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b095      	sub	sp, #84	; 0x54
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	e853 3f00 	ldrex	r3, [r3]
 800d11e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d126:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	461a      	mov	r2, r3
 800d12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d130:	643b      	str	r3, [r7, #64]	; 0x40
 800d132:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d138:	e841 2300 	strex	r3, r2, [r1]
 800d13c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1e6      	bne.n	800d112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3308      	adds	r3, #8
 800d14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	e853 3f00 	ldrex	r3, [r3]
 800d152:	61fb      	str	r3, [r7, #28]
   return(result);
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d15a:	f023 0301 	bic.w	r3, r3, #1
 800d15e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3308      	adds	r3, #8
 800d166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d16a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d170:	e841 2300 	strex	r3, r2, [r1]
 800d174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1e3      	bne.n	800d144 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d180:	2b01      	cmp	r3, #1
 800d182:	d118      	bne.n	800d1b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	e853 3f00 	ldrex	r3, [r3]
 800d190:	60bb      	str	r3, [r7, #8]
   return(result);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	f023 0310 	bic.w	r3, r3, #16
 800d198:	647b      	str	r3, [r7, #68]	; 0x44
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a2:	61bb      	str	r3, [r7, #24]
 800d1a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a6:	6979      	ldr	r1, [r7, #20]
 800d1a8:	69ba      	ldr	r2, [r7, #24]
 800d1aa:	e841 2300 	strex	r3, r2, [r1]
 800d1ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1e6      	bne.n	800d184 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2220      	movs	r2, #32
 800d1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d1ca:	bf00      	nop
 800d1cc:	3754      	adds	r7, #84	; 0x54
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d101      	bne.n	800d1ec <HAL_UARTEx_DisableFifoMode+0x16>
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	e027      	b.n	800d23c <HAL_UARTEx_DisableFifoMode+0x66>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2224      	movs	r2, #36	; 0x24
 800d1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f022 0201 	bic.w	r2, r2, #1
 800d212:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d21a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2220      	movs	r2, #32
 800d22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d101      	bne.n	800d260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d25c:	2302      	movs	r3, #2
 800d25e:	e02d      	b.n	800d2bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2224      	movs	r2, #36	; 0x24
 800d26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f022 0201 	bic.w	r2, r2, #1
 800d286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	430a      	orrs	r2, r1
 800d29a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f84f 	bl	800d340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d101      	bne.n	800d2dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d2d8:	2302      	movs	r3, #2
 800d2da:	e02d      	b.n	800d338 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2224      	movs	r2, #36	; 0x24
 800d2e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f022 0201 	bic.w	r2, r2, #1
 800d302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f811 	bl	800d340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2220      	movs	r2, #32
 800d32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d108      	bne.n	800d362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d360:	e031      	b.n	800d3c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d362:	2308      	movs	r3, #8
 800d364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d366:	2308      	movs	r3, #8
 800d368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	0e5b      	lsrs	r3, r3, #25
 800d372:	b2db      	uxtb	r3, r3
 800d374:	f003 0307 	and.w	r3, r3, #7
 800d378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	0f5b      	lsrs	r3, r3, #29
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0307 	and.w	r3, r3, #7
 800d388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	7b3a      	ldrb	r2, [r7, #12]
 800d38e:	4911      	ldr	r1, [pc, #68]	; (800d3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d390:	5c8a      	ldrb	r2, [r1, r2]
 800d392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d396:	7b3a      	ldrb	r2, [r7, #12]
 800d398:	490f      	ldr	r1, [pc, #60]	; (800d3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d39a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d39c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3a8:	7bfb      	ldrb	r3, [r7, #15]
 800d3aa:	7b7a      	ldrb	r2, [r7, #13]
 800d3ac:	4909      	ldr	r1, [pc, #36]	; (800d3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d3ae:	5c8a      	ldrb	r2, [r1, r2]
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3b4:	7b7a      	ldrb	r2, [r7, #13]
 800d3b6:	4908      	ldr	r1, [pc, #32]	; (800d3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d3b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d3c6:	bf00      	nop
 800d3c8:	3714      	adds	r7, #20
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	0800e884 	.word	0x0800e884
 800d3d8:	0800e88c 	.word	0x0800e88c

0800d3dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b08b      	sub	sp, #44	; 0x2c
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	fa93 f3a3 	rbit	r3, r3
 800d3f6:	613b      	str	r3, [r7, #16]
  return result;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d101      	bne.n	800d406 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800d402:	2320      	movs	r3, #32
 800d404:	e003      	b.n	800d40e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	fab3 f383 	clz	r3, r3
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	2103      	movs	r1, #3
 800d412:	fa01 f303 	lsl.w	r3, r1, r3
 800d416:	43db      	mvns	r3, r3
 800d418:	401a      	ands	r2, r3
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	fa93 f3a3 	rbit	r3, r3
 800d424:	61fb      	str	r3, [r7, #28]
  return result;
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800d430:	2320      	movs	r3, #32
 800d432:	e003      	b.n	800d43c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	fab3 f383 	clz	r3, r3
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	fa01 f303 	lsl.w	r3, r1, r3
 800d444:	431a      	orrs	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	601a      	str	r2, [r3, #0]
}
 800d44a:	bf00      	nop
 800d44c:	372c      	adds	r7, #44	; 0x2c
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800d456:	b480      	push	{r7}
 800d458:	b085      	sub	sp, #20
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	685a      	ldr	r2, [r3, #4]
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	43db      	mvns	r3, r3
 800d46a:	401a      	ands	r2, r3
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	fb01 f303 	mul.w	r3, r1, r3
 800d474:	431a      	orrs	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	605a      	str	r2, [r3, #4]
}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d486:	b480      	push	{r7}
 800d488:	b08b      	sub	sp, #44	; 0x2c
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	689a      	ldr	r2, [r3, #8]
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	fa93 f3a3 	rbit	r3, r3
 800d4a0:	613b      	str	r3, [r7, #16]
  return result;
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800d4ac:	2320      	movs	r3, #32
 800d4ae:	e003      	b.n	800d4b8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	fab3 f383 	clz	r3, r3
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	2103      	movs	r1, #3
 800d4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c0:	43db      	mvns	r3, r3
 800d4c2:	401a      	ands	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4c8:	6a3b      	ldr	r3, [r7, #32]
 800d4ca:	fa93 f3a3 	rbit	r3, r3
 800d4ce:	61fb      	str	r3, [r7, #28]
  return result;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d101      	bne.n	800d4de <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800d4da:	2320      	movs	r3, #32
 800d4dc:	e003      	b.n	800d4e6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	fab3 f383 	clz	r3, r3
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ee:	431a      	orrs	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800d4f4:	bf00      	nop
 800d4f6:	372c      	adds	r7, #44	; 0x2c
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d500:	b480      	push	{r7}
 800d502:	b08b      	sub	sp, #44	; 0x2c
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	fa93 f3a3 	rbit	r3, r3
 800d51a:	613b      	str	r3, [r7, #16]
  return result;
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d101      	bne.n	800d52a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800d526:	2320      	movs	r3, #32
 800d528:	e003      	b.n	800d532 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	fab3 f383 	clz	r3, r3
 800d530:	b2db      	uxtb	r3, r3
 800d532:	005b      	lsls	r3, r3, #1
 800d534:	2103      	movs	r1, #3
 800d536:	fa01 f303 	lsl.w	r3, r1, r3
 800d53a:	43db      	mvns	r3, r3
 800d53c:	401a      	ands	r2, r3
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	fa93 f3a3 	rbit	r3, r3
 800d548:	61fb      	str	r3, [r7, #28]
  return result;
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800d554:	2320      	movs	r3, #32
 800d556:	e003      	b.n	800d560 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	fab3 f383 	clz	r3, r3
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	fa01 f303 	lsl.w	r3, r1, r3
 800d568:	431a      	orrs	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	60da      	str	r2, [r3, #12]
}
 800d56e:	bf00      	nop
 800d570:	372c      	adds	r7, #44	; 0x2c
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b08b      	sub	sp, #44	; 0x2c
 800d57e:	af00      	add	r7, sp, #0
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	60b9      	str	r1, [r7, #8]
 800d584:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	fa93 f3a3 	rbit	r3, r3
 800d594:	613b      	str	r3, [r7, #16]
  return result;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	e003      	b.n	800d5ac <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	fab3 f383 	clz	r3, r3
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	210f      	movs	r1, #15
 800d5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b4:	43db      	mvns	r3, r3
 800d5b6:	401a      	ands	r2, r3
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	fa93 f3a3 	rbit	r3, r3
 800d5c2:	61fb      	str	r3, [r7, #28]
  return result;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800d5ce:	2320      	movs	r3, #32
 800d5d0:	e003      	b.n	800d5da <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	fab3 f383 	clz	r3, r3
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	fa01 f303 	lsl.w	r3, r1, r3
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800d5e8:	bf00      	nop
 800d5ea:	372c      	adds	r7, #44	; 0x2c
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b08b      	sub	sp, #44	; 0x2c
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	0a1b      	lsrs	r3, r3, #8
 800d608:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	fa93 f3a3 	rbit	r3, r3
 800d610:	613b      	str	r3, [r7, #16]
  return result;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800d61c:	2320      	movs	r3, #32
 800d61e:	e003      	b.n	800d628 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	fab3 f383 	clz	r3, r3
 800d626:	b2db      	uxtb	r3, r3
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	210f      	movs	r1, #15
 800d62c:	fa01 f303 	lsl.w	r3, r1, r3
 800d630:	43db      	mvns	r3, r3
 800d632:	401a      	ands	r2, r3
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	0a1b      	lsrs	r3, r3, #8
 800d638:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	fa93 f3a3 	rbit	r3, r3
 800d640:	61fb      	str	r3, [r7, #28]
  return result;
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800d64c:	2320      	movs	r3, #32
 800d64e:	e003      	b.n	800d658 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	fab3 f383 	clz	r3, r3
 800d656:	b2db      	uxtb	r3, r3
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	6879      	ldr	r1, [r7, #4]
 800d65c:	fa01 f303 	lsl.w	r3, r1, r3
 800d660:	431a      	orrs	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800d666:	bf00      	nop
 800d668:	372c      	adds	r7, #44	; 0x2c
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b08a      	sub	sp, #40	; 0x28
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	fa93 f3a3 	rbit	r3, r3
 800d688:	617b      	str	r3, [r7, #20]
  return result;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <LL_GPIO_Init+0x26>
    return 32U;
 800d694:	2320      	movs	r3, #32
 800d696:	e003      	b.n	800d6a0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	fab3 f383 	clz	r3, r3
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d6a2:	e058      	b.n	800d756 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d04a      	beq.n	800d750 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d003      	beq.n	800d6ca <LL_GPIO_Init+0x58>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d10e      	bne.n	800d6e8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	6a39      	ldr	r1, [r7, #32]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fed7 	bl	800d486 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	6819      	ldr	r1, [r3, #0]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff feb7 	bl	800d456 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	6a39      	ldr	r1, [r7, #32]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff ff05 	bl	800d500 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d121      	bne.n	800d742 <LL_GPIO_Init+0xd0>
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	fa93 f3a3 	rbit	r3, r3
 800d708:	60bb      	str	r3, [r7, #8]
  return result;
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <LL_GPIO_Init+0xa6>
    return 32U;
 800d714:	2320      	movs	r3, #32
 800d716:	e003      	b.n	800d720 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	fab3 f383 	clz	r3, r3
 800d71e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800d720:	2b07      	cmp	r3, #7
 800d722:	d807      	bhi.n	800d734 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	695b      	ldr	r3, [r3, #20]
 800d728:	461a      	mov	r2, r3
 800d72a:	6a39      	ldr	r1, [r7, #32]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff ff24 	bl	800d57a <LL_GPIO_SetAFPin_0_7>
 800d732:	e006      	b.n	800d742 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	461a      	mov	r2, r3
 800d73a:	6a39      	ldr	r1, [r7, #32]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff ff59 	bl	800d5f4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	461a      	mov	r2, r3
 800d748:	6a39      	ldr	r1, [r7, #32]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff fe46 	bl	800d3dc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	3301      	adds	r3, #1
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	fa22 f303 	lsr.w	r3, r2, r3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d19f      	bne.n	800d6a4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3728      	adds	r7, #40	; 0x28
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d76e:	b084      	sub	sp, #16
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	f107 001c 	add.w	r0, r7, #28
 800d77c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	2b03      	cmp	r3, #3
 800d784:	d105      	bne.n	800d792 <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f8e8 	bl	800d968 <USB_CoreReset>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d10b      	bne.n	800d7ba <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f043 0208 	orr.w	r2, r3, #8
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	f043 0220 	orr.w	r2, r3, #32
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7c6:	b004      	add	sp, #16
 800d7c8:	4770      	bx	lr

0800d7ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	f023 0201 	bic.w	r2, r3, #1
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d115      	bne.n	800d83a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d81a:	2001      	movs	r0, #1
 800d81c:	f7f7 fbaa 	bl	8004f74 <HAL_Delay>
      ms++;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	3301      	adds	r3, #1
 800d824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f890 	bl	800d94c <USB_GetMode>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d01e      	beq.n	800d870 <USB_SetCurrentMode+0x84>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b31      	cmp	r3, #49	; 0x31
 800d836:	d9f0      	bls.n	800d81a <USB_SetCurrentMode+0x2e>
 800d838:	e01a      	b.n	800d870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d115      	bne.n	800d86c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d84c:	2001      	movs	r0, #1
 800d84e:	f7f7 fb91 	bl	8004f74 <HAL_Delay>
      ms++;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3301      	adds	r3, #1
 800d856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f877 	bl	800d94c <USB_GetMode>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d005      	beq.n	800d870 <USB_SetCurrentMode+0x84>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b31      	cmp	r3, #49	; 0x31
 800d868:	d9f0      	bls.n	800d84c <USB_SetCurrentMode+0x60>
 800d86a:	e001      	b.n	800d870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e005      	b.n	800d87c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2b32      	cmp	r3, #50	; 0x32
 800d874:	d101      	bne.n	800d87a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3301      	adds	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	4a13      	ldr	r2, [pc, #76]	; (800d8e8 <USB_FlushTxFifo+0x64>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d901      	bls.n	800d8a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e01b      	b.n	800d8dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	daf2      	bge.n	800d892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	019b      	lsls	r3, r3, #6
 800d8b4:	f043 0220 	orr.w	r2, r3, #32
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	4a08      	ldr	r2, [pc, #32]	; (800d8e8 <USB_FlushTxFifo+0x64>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d901      	bls.n	800d8ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e006      	b.n	800d8dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d0f0      	beq.n	800d8bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	00030d40 	.word	0x00030d40

0800d8ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4a11      	ldr	r2, [pc, #68]	; (800d948 <USB_FlushRxFifo+0x5c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d901      	bls.n	800d90a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e018      	b.n	800d93c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	daf2      	bge.n	800d8f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2210      	movs	r2, #16
 800d91a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3301      	adds	r3, #1
 800d920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4a08      	ldr	r2, [pc, #32]	; (800d948 <USB_FlushRxFifo+0x5c>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d901      	bls.n	800d92e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e006      	b.n	800d93c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	f003 0310 	and.w	r3, r3, #16
 800d936:	2b10      	cmp	r3, #16
 800d938:	d0f0      	beq.n	800d91c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	00030d40 	.word	0x00030d40

0800d94c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	f003 0301 	and.w	r3, r3, #1
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d970:	2300      	movs	r3, #0
 800d972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	4a13      	ldr	r2, [pc, #76]	; (800d9cc <USB_CoreReset+0x64>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d901      	bls.n	800d986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e01b      	b.n	800d9be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	daf2      	bge.n	800d974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	f043 0201 	orr.w	r2, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4a09      	ldr	r2, [pc, #36]	; (800d9cc <USB_CoreReset+0x64>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d901      	bls.n	800d9b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e006      	b.n	800d9be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d0f0      	beq.n	800d99e <USB_CoreReset+0x36>

  return HAL_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	00030d40 	.word	0x00030d40

0800d9d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d9de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Enable USB PHY pulldown resistors */
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	2300      	movs	r3, #0
 800da00:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable VBUS override */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da06:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#else
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d018      	beq.n	800da70 <USB_HostInit+0xa0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	2b01      	cmp	r3, #1
 800da42:	d10a      	bne.n	800da5a <USB_HostInit+0x8a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da52:	f043 0304 	orr.w	r3, r3, #4
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	e014      	b.n	800da84 <USB_HostInit+0xb4>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da68:	f023 0304 	bic.w	r3, r3, #4
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	e009      	b.n	800da84 <USB_HostInit+0xb4>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da7e:	f023 0304 	bic.w	r3, r3, #4
 800da82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da84:	2110      	movs	r1, #16
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff fefc 	bl	800d884 <USB_FlushTxFifo>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <USB_HostInit+0xc6>
  {
    ret = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ff28 	bl	800d8ec <USB_FlushRxFifo>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <USB_HostInit+0xd6>
  {
    ret = HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800daa6:	2300      	movs	r3, #0
 800daa8:	613b      	str	r3, [r7, #16]
 800daaa:	e015      	b.n	800dad8 <USB_HostInit+0x108>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	015a      	lsls	r2, r3, #5
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4413      	add	r3, r2
 800dab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dab8:	461a      	mov	r2, r3
 800daba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dabe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	015a      	lsls	r2, r3, #5
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	4413      	add	r3, r2
 800dac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dacc:	461a      	mov	r2, r3
 800dace:	2300      	movs	r3, #0
 800dad0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3301      	adds	r3, #1
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d3e5      	bcc.n	800daac <USB_HostInit+0xdc>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00b      	beq.n	800db12 <USB_HostInit+0x142>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a13      	ldr	r2, [pc, #76]	; (800db54 <USB_HostInit+0x184>)
 800db06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a13      	ldr	r2, [pc, #76]	; (800db58 <USB_HostInit+0x188>)
 800db0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800db10:	e009      	b.n	800db26 <USB_HostInit+0x156>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2280      	movs	r2, #128	; 0x80
 800db16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a10      	ldr	r2, [pc, #64]	; (800db5c <USB_HostInit+0x18c>)
 800db1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <USB_HostInit+0x190>)
 800db22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d105      	bne.n	800db38 <USB_HostInit+0x168>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	f043 0210 	orr.w	r2, r3, #16
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699a      	ldr	r2, [r3, #24]
 800db3c:	4b09      	ldr	r3, [pc, #36]	; (800db64 <USB_HostInit+0x194>)
 800db3e:	4313      	orrs	r3, r2
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800db44:	7dfb      	ldrb	r3, [r7, #23]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db50:	b004      	add	sp, #16
 800db52:	4770      	bx	lr
 800db54:	01000200 	.word	0x01000200
 800db58:	00e00300 	.word	0x00e00300
 800db5c:	00600080 	.word	0x00600080
 800db60:	004000e0 	.word	0x004000e0
 800db64:	a3200008 	.word	0xa3200008

0800db68 <siprintf>:
 800db68:	b40e      	push	{r1, r2, r3}
 800db6a:	b500      	push	{lr}
 800db6c:	b09c      	sub	sp, #112	; 0x70
 800db6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db72:	ab1d      	add	r3, sp, #116	; 0x74
 800db74:	9002      	str	r0, [sp, #8]
 800db76:	9006      	str	r0, [sp, #24]
 800db78:	9107      	str	r1, [sp, #28]
 800db7a:	9104      	str	r1, [sp, #16]
 800db7c:	4808      	ldr	r0, [pc, #32]	; (800dba0 <siprintf+0x38>)
 800db7e:	4909      	ldr	r1, [pc, #36]	; (800dba4 <siprintf+0x3c>)
 800db80:	f853 2b04 	ldr.w	r2, [r3], #4
 800db84:	9105      	str	r1, [sp, #20]
 800db86:	a902      	add	r1, sp, #8
 800db88:	6800      	ldr	r0, [r0, #0]
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	f000 f8ec 	bl	800dd68 <_svfiprintf_r>
 800db90:	9b02      	ldr	r3, [sp, #8]
 800db92:	2200      	movs	r2, #0
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	b01c      	add	sp, #112	; 0x70
 800db98:	f85d eb04 	ldr.w	lr, [sp], #4
 800db9c:	b003      	add	sp, #12
 800db9e:	4770      	bx	lr
 800dba0:	20000070 	.word	0x20000070
 800dba4:	ffff0208 	.word	0xffff0208

0800dba8 <_vsniprintf_r>:
 800dba8:	b530      	push	{r4, r5, lr}
 800dbaa:	4614      	mov	r4, r2
 800dbac:	b09b      	sub	sp, #108	; 0x6c
 800dbae:	4605      	mov	r5, r0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	2c00      	cmp	r4, #0
 800dbb4:	da05      	bge.n	800dbc2 <_vsniprintf_r+0x1a>
 800dbb6:	238b      	movs	r3, #139	; 0x8b
 800dbb8:	6003      	str	r3, [r0, #0]
 800dbba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbbe:	b01b      	add	sp, #108	; 0x6c
 800dbc0:	bd30      	pop	{r4, r5, pc}
 800dbc2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dbc6:	9100      	str	r1, [sp, #0]
 800dbc8:	9104      	str	r1, [sp, #16]
 800dbca:	4669      	mov	r1, sp
 800dbcc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dbd0:	bf14      	ite	ne
 800dbd2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800dbd6:	4623      	moveq	r3, r4
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	9305      	str	r3, [sp, #20]
 800dbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbe0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dbe4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dbe6:	f000 f8bf 	bl	800dd68 <_svfiprintf_r>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	bfbc      	itt	lt
 800dbee:	238b      	movlt	r3, #139	; 0x8b
 800dbf0:	602b      	strlt	r3, [r5, #0]
 800dbf2:	2c00      	cmp	r4, #0
 800dbf4:	d0e3      	beq.n	800dbbe <_vsniprintf_r+0x16>
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	701a      	strb	r2, [r3, #0]
 800dbfc:	e7df      	b.n	800dbbe <_vsniprintf_r+0x16>
	...

0800dc00 <vsniprintf>:
 800dc00:	b507      	push	{r0, r1, r2, lr}
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	4613      	mov	r3, r2
 800dc06:	460a      	mov	r2, r1
 800dc08:	4601      	mov	r1, r0
 800dc0a:	4803      	ldr	r0, [pc, #12]	; (800dc18 <vsniprintf+0x18>)
 800dc0c:	6800      	ldr	r0, [r0, #0]
 800dc0e:	f7ff ffcb 	bl	800dba8 <_vsniprintf_r>
 800dc12:	b003      	add	sp, #12
 800dc14:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc18:	20000070 	.word	0x20000070

0800dc1c <memset>:
 800dc1c:	4402      	add	r2, r0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d100      	bne.n	800dc26 <memset+0xa>
 800dc24:	4770      	bx	lr
 800dc26:	f803 1b01 	strb.w	r1, [r3], #1
 800dc2a:	e7f9      	b.n	800dc20 <memset+0x4>

0800dc2c <clock>:
 800dc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc2e:	4b08      	ldr	r3, [pc, #32]	; (800dc50 <clock+0x24>)
 800dc30:	4669      	mov	r1, sp
 800dc32:	6818      	ldr	r0, [r3, #0]
 800dc34:	f000 f80e 	bl	800dc54 <_times_r>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d006      	beq.n	800dc4a <clock+0x1e>
 800dc3c:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dc40:	4418      	add	r0, r3
 800dc42:	9b02      	ldr	r3, [sp, #8]
 800dc44:	4418      	add	r0, r3
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	4418      	add	r0, r3
 800dc4a:	b005      	add	sp, #20
 800dc4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc50:	20000070 	.word	0x20000070

0800dc54 <_times_r>:
 800dc54:	4608      	mov	r0, r1
 800dc56:	f7f6 bacb 	b.w	80041f0 <_times>
	...

0800dc5c <__errno>:
 800dc5c:	4b01      	ldr	r3, [pc, #4]	; (800dc64 <__errno+0x8>)
 800dc5e:	6818      	ldr	r0, [r3, #0]
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	20000070 	.word	0x20000070

0800dc68 <__libc_init_array>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	4d0d      	ldr	r5, [pc, #52]	; (800dca0 <__libc_init_array+0x38>)
 800dc6c:	2600      	movs	r6, #0
 800dc6e:	4c0d      	ldr	r4, [pc, #52]	; (800dca4 <__libc_init_array+0x3c>)
 800dc70:	1b64      	subs	r4, r4, r5
 800dc72:	10a4      	asrs	r4, r4, #2
 800dc74:	42a6      	cmp	r6, r4
 800dc76:	d109      	bne.n	800dc8c <__libc_init_array+0x24>
 800dc78:	4d0b      	ldr	r5, [pc, #44]	; (800dca8 <__libc_init_array+0x40>)
 800dc7a:	2600      	movs	r6, #0
 800dc7c:	4c0b      	ldr	r4, [pc, #44]	; (800dcac <__libc_init_array+0x44>)
 800dc7e:	f000 fc79 	bl	800e574 <_init>
 800dc82:	1b64      	subs	r4, r4, r5
 800dc84:	10a4      	asrs	r4, r4, #2
 800dc86:	42a6      	cmp	r6, r4
 800dc88:	d105      	bne.n	800dc96 <__libc_init_array+0x2e>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc90:	3601      	adds	r6, #1
 800dc92:	4798      	blx	r3
 800dc94:	e7ee      	b.n	800dc74 <__libc_init_array+0xc>
 800dc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc9a:	3601      	adds	r6, #1
 800dc9c:	4798      	blx	r3
 800dc9e:	e7f2      	b.n	800dc86 <__libc_init_array+0x1e>
 800dca0:	0800e8d0 	.word	0x0800e8d0
 800dca4:	0800e8d0 	.word	0x0800e8d0
 800dca8:	0800e8d0 	.word	0x0800e8d0
 800dcac:	0800e8d4 	.word	0x0800e8d4

0800dcb0 <__retarget_lock_acquire_recursive>:
 800dcb0:	4770      	bx	lr

0800dcb2 <__retarget_lock_release_recursive>:
 800dcb2:	4770      	bx	lr

0800dcb4 <__ssputs_r>:
 800dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb8:	461f      	mov	r7, r3
 800dcba:	688e      	ldr	r6, [r1, #8]
 800dcbc:	4682      	mov	sl, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	42be      	cmp	r6, r7
 800dcc2:	4690      	mov	r8, r2
 800dcc4:	680b      	ldr	r3, [r1, #0]
 800dcc6:	d82c      	bhi.n	800dd22 <__ssputs_r+0x6e>
 800dcc8:	898a      	ldrh	r2, [r1, #12]
 800dcca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcce:	d026      	beq.n	800dd1e <__ssputs_r+0x6a>
 800dcd0:	6965      	ldr	r5, [r4, #20]
 800dcd2:	6909      	ldr	r1, [r1, #16]
 800dcd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcd8:	eba3 0901 	sub.w	r9, r3, r1
 800dcdc:	1c7b      	adds	r3, r7, #1
 800dcde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dce2:	444b      	add	r3, r9
 800dce4:	106d      	asrs	r5, r5, #1
 800dce6:	429d      	cmp	r5, r3
 800dce8:	bf38      	it	cc
 800dcea:	461d      	movcc	r5, r3
 800dcec:	0553      	lsls	r3, r2, #21
 800dcee:	d527      	bpl.n	800dd40 <__ssputs_r+0x8c>
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f000 f957 	bl	800dfa4 <_malloc_r>
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	b360      	cbz	r0, 800dd54 <__ssputs_r+0xa0>
 800dcfa:	464a      	mov	r2, r9
 800dcfc:	6921      	ldr	r1, [r4, #16]
 800dcfe:	f000 fbd7 	bl	800e4b0 <memcpy>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd0c:	81a3      	strh	r3, [r4, #12]
 800dd0e:	6126      	str	r6, [r4, #16]
 800dd10:	444e      	add	r6, r9
 800dd12:	6165      	str	r5, [r4, #20]
 800dd14:	eba5 0509 	sub.w	r5, r5, r9
 800dd18:	6026      	str	r6, [r4, #0]
 800dd1a:	463e      	mov	r6, r7
 800dd1c:	60a5      	str	r5, [r4, #8]
 800dd1e:	42be      	cmp	r6, r7
 800dd20:	d900      	bls.n	800dd24 <__ssputs_r+0x70>
 800dd22:	463e      	mov	r6, r7
 800dd24:	4632      	mov	r2, r6
 800dd26:	4641      	mov	r1, r8
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	f000 fb88 	bl	800e43e <memmove>
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	2000      	movs	r0, #0
 800dd32:	1b9b      	subs	r3, r3, r6
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	4433      	add	r3, r6
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd40:	462a      	mov	r2, r5
 800dd42:	f000 fb4d 	bl	800e3e0 <_realloc_r>
 800dd46:	4606      	mov	r6, r0
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d1e0      	bne.n	800dd0e <__ssputs_r+0x5a>
 800dd4c:	6921      	ldr	r1, [r4, #16]
 800dd4e:	4650      	mov	r0, sl
 800dd50:	f000 fbbc 	bl	800e4cc <_free_r>
 800dd54:	230c      	movs	r3, #12
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd5a:	f8ca 3000 	str.w	r3, [sl]
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	e7e9      	b.n	800dd3c <__ssputs_r+0x88>

0800dd68 <_svfiprintf_r>:
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	4698      	mov	r8, r3
 800dd6e:	898b      	ldrh	r3, [r1, #12]
 800dd70:	b09d      	sub	sp, #116	; 0x74
 800dd72:	4607      	mov	r7, r0
 800dd74:	061b      	lsls	r3, r3, #24
 800dd76:	460d      	mov	r5, r1
 800dd78:	4614      	mov	r4, r2
 800dd7a:	d50e      	bpl.n	800dd9a <_svfiprintf_r+0x32>
 800dd7c:	690b      	ldr	r3, [r1, #16]
 800dd7e:	b963      	cbnz	r3, 800dd9a <_svfiprintf_r+0x32>
 800dd80:	2140      	movs	r1, #64	; 0x40
 800dd82:	f000 f90f 	bl	800dfa4 <_malloc_r>
 800dd86:	6028      	str	r0, [r5, #0]
 800dd88:	6128      	str	r0, [r5, #16]
 800dd8a:	b920      	cbnz	r0, 800dd96 <_svfiprintf_r+0x2e>
 800dd8c:	230c      	movs	r3, #12
 800dd8e:	603b      	str	r3, [r7, #0]
 800dd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd94:	e0d0      	b.n	800df38 <_svfiprintf_r+0x1d0>
 800dd96:	2340      	movs	r3, #64	; 0x40
 800dd98:	616b      	str	r3, [r5, #20]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dda0:	f04f 0901 	mov.w	r9, #1
 800dda4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df50 <_svfiprintf_r+0x1e8>
 800dda8:	9309      	str	r3, [sp, #36]	; 0x24
 800ddaa:	2320      	movs	r3, #32
 800ddac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddb0:	2330      	movs	r3, #48	; 0x30
 800ddb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddb6:	4623      	mov	r3, r4
 800ddb8:	469a      	mov	sl, r3
 800ddba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddbe:	b10a      	cbz	r2, 800ddc4 <_svfiprintf_r+0x5c>
 800ddc0:	2a25      	cmp	r2, #37	; 0x25
 800ddc2:	d1f9      	bne.n	800ddb8 <_svfiprintf_r+0x50>
 800ddc4:	ebba 0b04 	subs.w	fp, sl, r4
 800ddc8:	d00b      	beq.n	800dde2 <_svfiprintf_r+0x7a>
 800ddca:	465b      	mov	r3, fp
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	f7ff ff6f 	bl	800dcb4 <__ssputs_r>
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	f000 80a9 	beq.w	800df2e <_svfiprintf_r+0x1c6>
 800dddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddde:	445a      	add	r2, fp
 800dde0:	9209      	str	r2, [sp, #36]	; 0x24
 800dde2:	f89a 3000 	ldrb.w	r3, [sl]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f000 80a1 	beq.w	800df2e <_svfiprintf_r+0x1c6>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddf2:	f10a 0a01 	add.w	sl, sl, #1
 800ddf6:	9304      	str	r3, [sp, #16]
 800ddf8:	9307      	str	r3, [sp, #28]
 800ddfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddfe:	931a      	str	r3, [sp, #104]	; 0x68
 800de00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de04:	4654      	mov	r4, sl
 800de06:	2205      	movs	r2, #5
 800de08:	4851      	ldr	r0, [pc, #324]	; (800df50 <_svfiprintf_r+0x1e8>)
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	f000 fb41 	bl	800e494 <memchr>
 800de12:	9a04      	ldr	r2, [sp, #16]
 800de14:	b9d8      	cbnz	r0, 800de4e <_svfiprintf_r+0xe6>
 800de16:	06d0      	lsls	r0, r2, #27
 800de18:	bf44      	itt	mi
 800de1a:	2320      	movmi	r3, #32
 800de1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de20:	0711      	lsls	r1, r2, #28
 800de22:	bf44      	itt	mi
 800de24:	232b      	movmi	r3, #43	; 0x2b
 800de26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de2a:	f89a 3000 	ldrb.w	r3, [sl]
 800de2e:	2b2a      	cmp	r3, #42	; 0x2a
 800de30:	d015      	beq.n	800de5e <_svfiprintf_r+0xf6>
 800de32:	9a07      	ldr	r2, [sp, #28]
 800de34:	4654      	mov	r4, sl
 800de36:	2000      	movs	r0, #0
 800de38:	f04f 0c0a 	mov.w	ip, #10
 800de3c:	4621      	mov	r1, r4
 800de3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de42:	3b30      	subs	r3, #48	; 0x30
 800de44:	2b09      	cmp	r3, #9
 800de46:	d94d      	bls.n	800dee4 <_svfiprintf_r+0x17c>
 800de48:	b1b0      	cbz	r0, 800de78 <_svfiprintf_r+0x110>
 800de4a:	9207      	str	r2, [sp, #28]
 800de4c:	e014      	b.n	800de78 <_svfiprintf_r+0x110>
 800de4e:	eba0 0308 	sub.w	r3, r0, r8
 800de52:	46a2      	mov	sl, r4
 800de54:	fa09 f303 	lsl.w	r3, r9, r3
 800de58:	4313      	orrs	r3, r2
 800de5a:	9304      	str	r3, [sp, #16]
 800de5c:	e7d2      	b.n	800de04 <_svfiprintf_r+0x9c>
 800de5e:	9b03      	ldr	r3, [sp, #12]
 800de60:	1d19      	adds	r1, r3, #4
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	9103      	str	r1, [sp, #12]
 800de68:	bfbb      	ittet	lt
 800de6a:	425b      	neglt	r3, r3
 800de6c:	f042 0202 	orrlt.w	r2, r2, #2
 800de70:	9307      	strge	r3, [sp, #28]
 800de72:	9307      	strlt	r3, [sp, #28]
 800de74:	bfb8      	it	lt
 800de76:	9204      	strlt	r2, [sp, #16]
 800de78:	7823      	ldrb	r3, [r4, #0]
 800de7a:	2b2e      	cmp	r3, #46	; 0x2e
 800de7c:	d10c      	bne.n	800de98 <_svfiprintf_r+0x130>
 800de7e:	7863      	ldrb	r3, [r4, #1]
 800de80:	2b2a      	cmp	r3, #42	; 0x2a
 800de82:	d134      	bne.n	800deee <_svfiprintf_r+0x186>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	3402      	adds	r4, #2
 800de88:	1d1a      	adds	r2, r3, #4
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	9203      	str	r2, [sp, #12]
 800de90:	bfb8      	it	lt
 800de92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de96:	9305      	str	r3, [sp, #20]
 800de98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800df60 <_svfiprintf_r+0x1f8>
 800de9c:	2203      	movs	r2, #3
 800de9e:	7821      	ldrb	r1, [r4, #0]
 800dea0:	4650      	mov	r0, sl
 800dea2:	f000 faf7 	bl	800e494 <memchr>
 800dea6:	b138      	cbz	r0, 800deb8 <_svfiprintf_r+0x150>
 800dea8:	eba0 000a 	sub.w	r0, r0, sl
 800deac:	2240      	movs	r2, #64	; 0x40
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	3401      	adds	r4, #1
 800deb2:	4082      	lsls	r2, r0
 800deb4:	4313      	orrs	r3, r2
 800deb6:	9304      	str	r3, [sp, #16]
 800deb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800debc:	2206      	movs	r2, #6
 800debe:	4825      	ldr	r0, [pc, #148]	; (800df54 <_svfiprintf_r+0x1ec>)
 800dec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dec4:	f000 fae6 	bl	800e494 <memchr>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d038      	beq.n	800df3e <_svfiprintf_r+0x1d6>
 800decc:	4b22      	ldr	r3, [pc, #136]	; (800df58 <_svfiprintf_r+0x1f0>)
 800dece:	bb1b      	cbnz	r3, 800df18 <_svfiprintf_r+0x1b0>
 800ded0:	9b03      	ldr	r3, [sp, #12]
 800ded2:	3307      	adds	r3, #7
 800ded4:	f023 0307 	bic.w	r3, r3, #7
 800ded8:	3308      	adds	r3, #8
 800deda:	9303      	str	r3, [sp, #12]
 800dedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dede:	4433      	add	r3, r6
 800dee0:	9309      	str	r3, [sp, #36]	; 0x24
 800dee2:	e768      	b.n	800ddb6 <_svfiprintf_r+0x4e>
 800dee4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee8:	460c      	mov	r4, r1
 800deea:	2001      	movs	r0, #1
 800deec:	e7a6      	b.n	800de3c <_svfiprintf_r+0xd4>
 800deee:	2300      	movs	r3, #0
 800def0:	3401      	adds	r4, #1
 800def2:	f04f 0c0a 	mov.w	ip, #10
 800def6:	4619      	mov	r1, r3
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	4620      	mov	r0, r4
 800defc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df00:	3a30      	subs	r2, #48	; 0x30
 800df02:	2a09      	cmp	r2, #9
 800df04:	d903      	bls.n	800df0e <_svfiprintf_r+0x1a6>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0c6      	beq.n	800de98 <_svfiprintf_r+0x130>
 800df0a:	9105      	str	r1, [sp, #20]
 800df0c:	e7c4      	b.n	800de98 <_svfiprintf_r+0x130>
 800df0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800df12:	4604      	mov	r4, r0
 800df14:	2301      	movs	r3, #1
 800df16:	e7f0      	b.n	800defa <_svfiprintf_r+0x192>
 800df18:	ab03      	add	r3, sp, #12
 800df1a:	462a      	mov	r2, r5
 800df1c:	a904      	add	r1, sp, #16
 800df1e:	4638      	mov	r0, r7
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <_svfiprintf_r+0x1f4>)
 800df24:	f3af 8000 	nop.w
 800df28:	1c42      	adds	r2, r0, #1
 800df2a:	4606      	mov	r6, r0
 800df2c:	d1d6      	bne.n	800dedc <_svfiprintf_r+0x174>
 800df2e:	89ab      	ldrh	r3, [r5, #12]
 800df30:	065b      	lsls	r3, r3, #25
 800df32:	f53f af2d 	bmi.w	800dd90 <_svfiprintf_r+0x28>
 800df36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df38:	b01d      	add	sp, #116	; 0x74
 800df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3e:	ab03      	add	r3, sp, #12
 800df40:	462a      	mov	r2, r5
 800df42:	a904      	add	r1, sp, #16
 800df44:	4638      	mov	r0, r7
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	4b04      	ldr	r3, [pc, #16]	; (800df5c <_svfiprintf_r+0x1f4>)
 800df4a:	f000 f91d 	bl	800e188 <_printf_i>
 800df4e:	e7eb      	b.n	800df28 <_svfiprintf_r+0x1c0>
 800df50:	0800e894 	.word	0x0800e894
 800df54:	0800e89e 	.word	0x0800e89e
 800df58:	00000000 	.word	0x00000000
 800df5c:	0800dcb5 	.word	0x0800dcb5
 800df60:	0800e89a 	.word	0x0800e89a

0800df64 <sbrk_aligned>:
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	4e0e      	ldr	r6, [pc, #56]	; (800dfa0 <sbrk_aligned+0x3c>)
 800df68:	460c      	mov	r4, r1
 800df6a:	4605      	mov	r5, r0
 800df6c:	6831      	ldr	r1, [r6, #0]
 800df6e:	b911      	cbnz	r1, 800df76 <sbrk_aligned+0x12>
 800df70:	f000 fa80 	bl	800e474 <_sbrk_r>
 800df74:	6030      	str	r0, [r6, #0]
 800df76:	4621      	mov	r1, r4
 800df78:	4628      	mov	r0, r5
 800df7a:	f000 fa7b 	bl	800e474 <_sbrk_r>
 800df7e:	1c43      	adds	r3, r0, #1
 800df80:	d00a      	beq.n	800df98 <sbrk_aligned+0x34>
 800df82:	1cc4      	adds	r4, r0, #3
 800df84:	f024 0403 	bic.w	r4, r4, #3
 800df88:	42a0      	cmp	r0, r4
 800df8a:	d007      	beq.n	800df9c <sbrk_aligned+0x38>
 800df8c:	1a21      	subs	r1, r4, r0
 800df8e:	4628      	mov	r0, r5
 800df90:	f000 fa70 	bl	800e474 <_sbrk_r>
 800df94:	3001      	adds	r0, #1
 800df96:	d101      	bne.n	800df9c <sbrk_aligned+0x38>
 800df98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df9c:	4620      	mov	r0, r4
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
 800dfa0:	200008cc 	.word	0x200008cc

0800dfa4 <_malloc_r>:
 800dfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfa8:	1ccd      	adds	r5, r1, #3
 800dfaa:	4607      	mov	r7, r0
 800dfac:	f025 0503 	bic.w	r5, r5, #3
 800dfb0:	3508      	adds	r5, #8
 800dfb2:	2d0c      	cmp	r5, #12
 800dfb4:	bf38      	it	cc
 800dfb6:	250c      	movcc	r5, #12
 800dfb8:	2d00      	cmp	r5, #0
 800dfba:	db01      	blt.n	800dfc0 <_malloc_r+0x1c>
 800dfbc:	42a9      	cmp	r1, r5
 800dfbe:	d905      	bls.n	800dfcc <_malloc_r+0x28>
 800dfc0:	230c      	movs	r3, #12
 800dfc2:	2600      	movs	r6, #0
 800dfc4:	603b      	str	r3, [r7, #0]
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e0a0 <_malloc_r+0xfc>
 800dfd0:	f000 f9fa 	bl	800e3c8 <__malloc_lock>
 800dfd4:	f8d8 3000 	ldr.w	r3, [r8]
 800dfd8:	461c      	mov	r4, r3
 800dfda:	bb5c      	cbnz	r4, 800e034 <_malloc_r+0x90>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7ff ffc0 	bl	800df64 <sbrk_aligned>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	d155      	bne.n	800e096 <_malloc_r+0xf2>
 800dfea:	f8d8 4000 	ldr.w	r4, [r8]
 800dfee:	4626      	mov	r6, r4
 800dff0:	2e00      	cmp	r6, #0
 800dff2:	d145      	bne.n	800e080 <_malloc_r+0xdc>
 800dff4:	2c00      	cmp	r4, #0
 800dff6:	d048      	beq.n	800e08a <_malloc_r+0xe6>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	4631      	mov	r1, r6
 800dffc:	4638      	mov	r0, r7
 800dffe:	eb04 0903 	add.w	r9, r4, r3
 800e002:	f000 fa37 	bl	800e474 <_sbrk_r>
 800e006:	4581      	cmp	r9, r0
 800e008:	d13f      	bne.n	800e08a <_malloc_r+0xe6>
 800e00a:	6821      	ldr	r1, [r4, #0]
 800e00c:	4638      	mov	r0, r7
 800e00e:	1a6d      	subs	r5, r5, r1
 800e010:	4629      	mov	r1, r5
 800e012:	f7ff ffa7 	bl	800df64 <sbrk_aligned>
 800e016:	3001      	adds	r0, #1
 800e018:	d037      	beq.n	800e08a <_malloc_r+0xe6>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	442b      	add	r3, r5
 800e01e:	6023      	str	r3, [r4, #0]
 800e020:	f8d8 3000 	ldr.w	r3, [r8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d038      	beq.n	800e09a <_malloc_r+0xf6>
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	42a2      	cmp	r2, r4
 800e02c:	d12b      	bne.n	800e086 <_malloc_r+0xe2>
 800e02e:	2200      	movs	r2, #0
 800e030:	605a      	str	r2, [r3, #4]
 800e032:	e00f      	b.n	800e054 <_malloc_r+0xb0>
 800e034:	6822      	ldr	r2, [r4, #0]
 800e036:	1b52      	subs	r2, r2, r5
 800e038:	d41f      	bmi.n	800e07a <_malloc_r+0xd6>
 800e03a:	2a0b      	cmp	r2, #11
 800e03c:	d917      	bls.n	800e06e <_malloc_r+0xca>
 800e03e:	1961      	adds	r1, r4, r5
 800e040:	42a3      	cmp	r3, r4
 800e042:	6025      	str	r5, [r4, #0]
 800e044:	bf18      	it	ne
 800e046:	6059      	strne	r1, [r3, #4]
 800e048:	6863      	ldr	r3, [r4, #4]
 800e04a:	bf08      	it	eq
 800e04c:	f8c8 1000 	streq.w	r1, [r8]
 800e050:	5162      	str	r2, [r4, r5]
 800e052:	604b      	str	r3, [r1, #4]
 800e054:	f104 060b 	add.w	r6, r4, #11
 800e058:	4638      	mov	r0, r7
 800e05a:	f000 f9bb 	bl	800e3d4 <__malloc_unlock>
 800e05e:	1d23      	adds	r3, r4, #4
 800e060:	f026 0607 	bic.w	r6, r6, #7
 800e064:	1af2      	subs	r2, r6, r3
 800e066:	d0ae      	beq.n	800dfc6 <_malloc_r+0x22>
 800e068:	1b9b      	subs	r3, r3, r6
 800e06a:	50a3      	str	r3, [r4, r2]
 800e06c:	e7ab      	b.n	800dfc6 <_malloc_r+0x22>
 800e06e:	42a3      	cmp	r3, r4
 800e070:	6862      	ldr	r2, [r4, #4]
 800e072:	d1dd      	bne.n	800e030 <_malloc_r+0x8c>
 800e074:	f8c8 2000 	str.w	r2, [r8]
 800e078:	e7ec      	b.n	800e054 <_malloc_r+0xb0>
 800e07a:	4623      	mov	r3, r4
 800e07c:	6864      	ldr	r4, [r4, #4]
 800e07e:	e7ac      	b.n	800dfda <_malloc_r+0x36>
 800e080:	4634      	mov	r4, r6
 800e082:	6876      	ldr	r6, [r6, #4]
 800e084:	e7b4      	b.n	800dff0 <_malloc_r+0x4c>
 800e086:	4613      	mov	r3, r2
 800e088:	e7cc      	b.n	800e024 <_malloc_r+0x80>
 800e08a:	230c      	movs	r3, #12
 800e08c:	4638      	mov	r0, r7
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	f000 f9a0 	bl	800e3d4 <__malloc_unlock>
 800e094:	e797      	b.n	800dfc6 <_malloc_r+0x22>
 800e096:	6025      	str	r5, [r4, #0]
 800e098:	e7dc      	b.n	800e054 <_malloc_r+0xb0>
 800e09a:	605b      	str	r3, [r3, #4]
 800e09c:	deff      	udf	#255	; 0xff
 800e09e:	bf00      	nop
 800e0a0:	200008c8 	.word	0x200008c8

0800e0a4 <_printf_common>:
 800e0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	4616      	mov	r6, r2
 800e0aa:	4699      	mov	r9, r3
 800e0ac:	688a      	ldr	r2, [r1, #8]
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	690b      	ldr	r3, [r1, #16]
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	bfb8      	it	lt
 800e0bc:	4613      	movlt	r3, r2
 800e0be:	6033      	str	r3, [r6, #0]
 800e0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0c4:	b10a      	cbz	r2, 800e0ca <_printf_common+0x26>
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	6033      	str	r3, [r6, #0]
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	0699      	lsls	r1, r3, #26
 800e0ce:	bf42      	ittt	mi
 800e0d0:	6833      	ldrmi	r3, [r6, #0]
 800e0d2:	3302      	addmi	r3, #2
 800e0d4:	6033      	strmi	r3, [r6, #0]
 800e0d6:	6825      	ldr	r5, [r4, #0]
 800e0d8:	f015 0506 	ands.w	r5, r5, #6
 800e0dc:	d106      	bne.n	800e0ec <_printf_common+0x48>
 800e0de:	f104 0a19 	add.w	sl, r4, #25
 800e0e2:	68e3      	ldr	r3, [r4, #12]
 800e0e4:	6832      	ldr	r2, [r6, #0]
 800e0e6:	1a9b      	subs	r3, r3, r2
 800e0e8:	42ab      	cmp	r3, r5
 800e0ea:	dc2b      	bgt.n	800e144 <_printf_common+0xa0>
 800e0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e0f0:	1e13      	subs	r3, r2, #0
 800e0f2:	6822      	ldr	r2, [r4, #0]
 800e0f4:	bf18      	it	ne
 800e0f6:	2301      	movne	r3, #1
 800e0f8:	0692      	lsls	r2, r2, #26
 800e0fa:	d430      	bmi.n	800e15e <_printf_common+0xba>
 800e0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e100:	4649      	mov	r1, r9
 800e102:	4638      	mov	r0, r7
 800e104:	47c0      	blx	r8
 800e106:	3001      	adds	r0, #1
 800e108:	d023      	beq.n	800e152 <_printf_common+0xae>
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	341a      	adds	r4, #26
 800e10e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e112:	f003 0306 	and.w	r3, r3, #6
 800e116:	2b04      	cmp	r3, #4
 800e118:	bf0a      	itet	eq
 800e11a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e11e:	2500      	movne	r5, #0
 800e120:	6833      	ldreq	r3, [r6, #0]
 800e122:	f04f 0600 	mov.w	r6, #0
 800e126:	bf08      	it	eq
 800e128:	1aed      	subeq	r5, r5, r3
 800e12a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e12e:	bf08      	it	eq
 800e130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e134:	4293      	cmp	r3, r2
 800e136:	bfc4      	itt	gt
 800e138:	1a9b      	subgt	r3, r3, r2
 800e13a:	18ed      	addgt	r5, r5, r3
 800e13c:	42b5      	cmp	r5, r6
 800e13e:	d11a      	bne.n	800e176 <_printf_common+0xd2>
 800e140:	2000      	movs	r0, #0
 800e142:	e008      	b.n	800e156 <_printf_common+0xb2>
 800e144:	2301      	movs	r3, #1
 800e146:	4652      	mov	r2, sl
 800e148:	4649      	mov	r1, r9
 800e14a:	4638      	mov	r0, r7
 800e14c:	47c0      	blx	r8
 800e14e:	3001      	adds	r0, #1
 800e150:	d103      	bne.n	800e15a <_printf_common+0xb6>
 800e152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15a:	3501      	adds	r5, #1
 800e15c:	e7c1      	b.n	800e0e2 <_printf_common+0x3e>
 800e15e:	18e1      	adds	r1, r4, r3
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	2030      	movs	r0, #48	; 0x30
 800e164:	3302      	adds	r3, #2
 800e166:	4422      	add	r2, r4
 800e168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e16c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e174:	e7c2      	b.n	800e0fc <_printf_common+0x58>
 800e176:	2301      	movs	r3, #1
 800e178:	4622      	mov	r2, r4
 800e17a:	4649      	mov	r1, r9
 800e17c:	4638      	mov	r0, r7
 800e17e:	47c0      	blx	r8
 800e180:	3001      	adds	r0, #1
 800e182:	d0e6      	beq.n	800e152 <_printf_common+0xae>
 800e184:	3601      	adds	r6, #1
 800e186:	e7d9      	b.n	800e13c <_printf_common+0x98>

0800e188 <_printf_i>:
 800e188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e18c:	7e0f      	ldrb	r7, [r1, #24]
 800e18e:	4691      	mov	r9, r2
 800e190:	4680      	mov	r8, r0
 800e192:	460c      	mov	r4, r1
 800e194:	2f78      	cmp	r7, #120	; 0x78
 800e196:	469a      	mov	sl, r3
 800e198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e19a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e19e:	d807      	bhi.n	800e1b0 <_printf_i+0x28>
 800e1a0:	2f62      	cmp	r7, #98	; 0x62
 800e1a2:	d80a      	bhi.n	800e1ba <_printf_i+0x32>
 800e1a4:	2f00      	cmp	r7, #0
 800e1a6:	f000 80d3 	beq.w	800e350 <_printf_i+0x1c8>
 800e1aa:	2f58      	cmp	r7, #88	; 0x58
 800e1ac:	f000 80bf 	beq.w	800e32e <_printf_i+0x1a6>
 800e1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1b8:	e03a      	b.n	800e230 <_printf_i+0xa8>
 800e1ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1be:	2b15      	cmp	r3, #21
 800e1c0:	d8f6      	bhi.n	800e1b0 <_printf_i+0x28>
 800e1c2:	a101      	add	r1, pc, #4	; (adr r1, 800e1c8 <_printf_i+0x40>)
 800e1c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1c8:	0800e221 	.word	0x0800e221
 800e1cc:	0800e235 	.word	0x0800e235
 800e1d0:	0800e1b1 	.word	0x0800e1b1
 800e1d4:	0800e1b1 	.word	0x0800e1b1
 800e1d8:	0800e1b1 	.word	0x0800e1b1
 800e1dc:	0800e1b1 	.word	0x0800e1b1
 800e1e0:	0800e235 	.word	0x0800e235
 800e1e4:	0800e1b1 	.word	0x0800e1b1
 800e1e8:	0800e1b1 	.word	0x0800e1b1
 800e1ec:	0800e1b1 	.word	0x0800e1b1
 800e1f0:	0800e1b1 	.word	0x0800e1b1
 800e1f4:	0800e337 	.word	0x0800e337
 800e1f8:	0800e261 	.word	0x0800e261
 800e1fc:	0800e2f3 	.word	0x0800e2f3
 800e200:	0800e1b1 	.word	0x0800e1b1
 800e204:	0800e1b1 	.word	0x0800e1b1
 800e208:	0800e359 	.word	0x0800e359
 800e20c:	0800e1b1 	.word	0x0800e1b1
 800e210:	0800e261 	.word	0x0800e261
 800e214:	0800e1b1 	.word	0x0800e1b1
 800e218:	0800e1b1 	.word	0x0800e1b1
 800e21c:	0800e2fb 	.word	0x0800e2fb
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	1d1a      	adds	r2, r3, #4
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	602a      	str	r2, [r5, #0]
 800e228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e22c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e230:	2301      	movs	r3, #1
 800e232:	e09e      	b.n	800e372 <_printf_i+0x1ea>
 800e234:	6820      	ldr	r0, [r4, #0]
 800e236:	682b      	ldr	r3, [r5, #0]
 800e238:	0607      	lsls	r7, r0, #24
 800e23a:	f103 0104 	add.w	r1, r3, #4
 800e23e:	6029      	str	r1, [r5, #0]
 800e240:	d501      	bpl.n	800e246 <_printf_i+0xbe>
 800e242:	681e      	ldr	r6, [r3, #0]
 800e244:	e003      	b.n	800e24e <_printf_i+0xc6>
 800e246:	0646      	lsls	r6, r0, #25
 800e248:	d5fb      	bpl.n	800e242 <_printf_i+0xba>
 800e24a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e24e:	2e00      	cmp	r6, #0
 800e250:	da03      	bge.n	800e25a <_printf_i+0xd2>
 800e252:	232d      	movs	r3, #45	; 0x2d
 800e254:	4276      	negs	r6, r6
 800e256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e25a:	4859      	ldr	r0, [pc, #356]	; (800e3c0 <_printf_i+0x238>)
 800e25c:	230a      	movs	r3, #10
 800e25e:	e012      	b.n	800e286 <_printf_i+0xfe>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	6820      	ldr	r0, [r4, #0]
 800e264:	1d19      	adds	r1, r3, #4
 800e266:	6029      	str	r1, [r5, #0]
 800e268:	0605      	lsls	r5, r0, #24
 800e26a:	d501      	bpl.n	800e270 <_printf_i+0xe8>
 800e26c:	681e      	ldr	r6, [r3, #0]
 800e26e:	e002      	b.n	800e276 <_printf_i+0xee>
 800e270:	0641      	lsls	r1, r0, #25
 800e272:	d5fb      	bpl.n	800e26c <_printf_i+0xe4>
 800e274:	881e      	ldrh	r6, [r3, #0]
 800e276:	2f6f      	cmp	r7, #111	; 0x6f
 800e278:	4851      	ldr	r0, [pc, #324]	; (800e3c0 <_printf_i+0x238>)
 800e27a:	bf0c      	ite	eq
 800e27c:	2308      	moveq	r3, #8
 800e27e:	230a      	movne	r3, #10
 800e280:	2100      	movs	r1, #0
 800e282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e286:	6865      	ldr	r5, [r4, #4]
 800e288:	2d00      	cmp	r5, #0
 800e28a:	60a5      	str	r5, [r4, #8]
 800e28c:	bfa2      	ittt	ge
 800e28e:	6821      	ldrge	r1, [r4, #0]
 800e290:	f021 0104 	bicge.w	r1, r1, #4
 800e294:	6021      	strge	r1, [r4, #0]
 800e296:	b90e      	cbnz	r6, 800e29c <_printf_i+0x114>
 800e298:	2d00      	cmp	r5, #0
 800e29a:	d04a      	beq.n	800e332 <_printf_i+0x1aa>
 800e29c:	4615      	mov	r5, r2
 800e29e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e2a2:	fb03 6711 	mls	r7, r3, r1, r6
 800e2a6:	5dc7      	ldrb	r7, [r0, r7]
 800e2a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e2ac:	4637      	mov	r7, r6
 800e2ae:	460e      	mov	r6, r1
 800e2b0:	42bb      	cmp	r3, r7
 800e2b2:	d9f4      	bls.n	800e29e <_printf_i+0x116>
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d10b      	bne.n	800e2d0 <_printf_i+0x148>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	07de      	lsls	r6, r3, #31
 800e2bc:	d508      	bpl.n	800e2d0 <_printf_i+0x148>
 800e2be:	6923      	ldr	r3, [r4, #16]
 800e2c0:	6861      	ldr	r1, [r4, #4]
 800e2c2:	4299      	cmp	r1, r3
 800e2c4:	bfde      	ittt	le
 800e2c6:	2330      	movle	r3, #48	; 0x30
 800e2c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e2d0:	1b52      	subs	r2, r2, r5
 800e2d2:	6122      	str	r2, [r4, #16]
 800e2d4:	464b      	mov	r3, r9
 800e2d6:	aa03      	add	r2, sp, #12
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4640      	mov	r0, r8
 800e2dc:	f8cd a000 	str.w	sl, [sp]
 800e2e0:	f7ff fee0 	bl	800e0a4 <_printf_common>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d149      	bne.n	800e37c <_printf_i+0x1f4>
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2ec:	b004      	add	sp, #16
 800e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	f043 0320 	orr.w	r3, r3, #32
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	2778      	movs	r7, #120	; 0x78
 800e2fc:	4831      	ldr	r0, [pc, #196]	; (800e3c4 <_printf_i+0x23c>)
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e304:	061f      	lsls	r7, r3, #24
 800e306:	6829      	ldr	r1, [r5, #0]
 800e308:	f851 6b04 	ldr.w	r6, [r1], #4
 800e30c:	d402      	bmi.n	800e314 <_printf_i+0x18c>
 800e30e:	065f      	lsls	r7, r3, #25
 800e310:	bf48      	it	mi
 800e312:	b2b6      	uxthmi	r6, r6
 800e314:	07df      	lsls	r7, r3, #31
 800e316:	6029      	str	r1, [r5, #0]
 800e318:	bf44      	itt	mi
 800e31a:	f043 0320 	orrmi.w	r3, r3, #32
 800e31e:	6023      	strmi	r3, [r4, #0]
 800e320:	b91e      	cbnz	r6, 800e32a <_printf_i+0x1a2>
 800e322:	6823      	ldr	r3, [r4, #0]
 800e324:	f023 0320 	bic.w	r3, r3, #32
 800e328:	6023      	str	r3, [r4, #0]
 800e32a:	2310      	movs	r3, #16
 800e32c:	e7a8      	b.n	800e280 <_printf_i+0xf8>
 800e32e:	4824      	ldr	r0, [pc, #144]	; (800e3c0 <_printf_i+0x238>)
 800e330:	e7e5      	b.n	800e2fe <_printf_i+0x176>
 800e332:	4615      	mov	r5, r2
 800e334:	e7be      	b.n	800e2b4 <_printf_i+0x12c>
 800e336:	682b      	ldr	r3, [r5, #0]
 800e338:	6826      	ldr	r6, [r4, #0]
 800e33a:	1d18      	adds	r0, r3, #4
 800e33c:	6961      	ldr	r1, [r4, #20]
 800e33e:	6028      	str	r0, [r5, #0]
 800e340:	0635      	lsls	r5, r6, #24
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	d501      	bpl.n	800e34a <_printf_i+0x1c2>
 800e346:	6019      	str	r1, [r3, #0]
 800e348:	e002      	b.n	800e350 <_printf_i+0x1c8>
 800e34a:	0670      	lsls	r0, r6, #25
 800e34c:	d5fb      	bpl.n	800e346 <_printf_i+0x1be>
 800e34e:	8019      	strh	r1, [r3, #0]
 800e350:	2300      	movs	r3, #0
 800e352:	4615      	mov	r5, r2
 800e354:	6123      	str	r3, [r4, #16]
 800e356:	e7bd      	b.n	800e2d4 <_printf_i+0x14c>
 800e358:	682b      	ldr	r3, [r5, #0]
 800e35a:	2100      	movs	r1, #0
 800e35c:	1d1a      	adds	r2, r3, #4
 800e35e:	602a      	str	r2, [r5, #0]
 800e360:	681d      	ldr	r5, [r3, #0]
 800e362:	6862      	ldr	r2, [r4, #4]
 800e364:	4628      	mov	r0, r5
 800e366:	f000 f895 	bl	800e494 <memchr>
 800e36a:	b108      	cbz	r0, 800e370 <_printf_i+0x1e8>
 800e36c:	1b40      	subs	r0, r0, r5
 800e36e:	6060      	str	r0, [r4, #4]
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	6123      	str	r3, [r4, #16]
 800e374:	2300      	movs	r3, #0
 800e376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e37a:	e7ab      	b.n	800e2d4 <_printf_i+0x14c>
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	462a      	mov	r2, r5
 800e380:	4649      	mov	r1, r9
 800e382:	4640      	mov	r0, r8
 800e384:	47d0      	blx	sl
 800e386:	3001      	adds	r0, #1
 800e388:	d0ae      	beq.n	800e2e8 <_printf_i+0x160>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	079b      	lsls	r3, r3, #30
 800e38e:	d413      	bmi.n	800e3b8 <_printf_i+0x230>
 800e390:	68e0      	ldr	r0, [r4, #12]
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	4298      	cmp	r0, r3
 800e396:	bfb8      	it	lt
 800e398:	4618      	movlt	r0, r3
 800e39a:	e7a7      	b.n	800e2ec <_printf_i+0x164>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4632      	mov	r2, r6
 800e3a0:	4649      	mov	r1, r9
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	47d0      	blx	sl
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d09e      	beq.n	800e2e8 <_printf_i+0x160>
 800e3aa:	3501      	adds	r5, #1
 800e3ac:	68e3      	ldr	r3, [r4, #12]
 800e3ae:	9903      	ldr	r1, [sp, #12]
 800e3b0:	1a5b      	subs	r3, r3, r1
 800e3b2:	42ab      	cmp	r3, r5
 800e3b4:	dcf2      	bgt.n	800e39c <_printf_i+0x214>
 800e3b6:	e7eb      	b.n	800e390 <_printf_i+0x208>
 800e3b8:	2500      	movs	r5, #0
 800e3ba:	f104 0619 	add.w	r6, r4, #25
 800e3be:	e7f5      	b.n	800e3ac <_printf_i+0x224>
 800e3c0:	0800e8a5 	.word	0x0800e8a5
 800e3c4:	0800e8b6 	.word	0x0800e8b6

0800e3c8 <__malloc_lock>:
 800e3c8:	4801      	ldr	r0, [pc, #4]	; (800e3d0 <__malloc_lock+0x8>)
 800e3ca:	f7ff bc71 	b.w	800dcb0 <__retarget_lock_acquire_recursive>
 800e3ce:	bf00      	nop
 800e3d0:	200008c4 	.word	0x200008c4

0800e3d4 <__malloc_unlock>:
 800e3d4:	4801      	ldr	r0, [pc, #4]	; (800e3dc <__malloc_unlock+0x8>)
 800e3d6:	f7ff bc6c 	b.w	800dcb2 <__retarget_lock_release_recursive>
 800e3da:	bf00      	nop
 800e3dc:	200008c4 	.word	0x200008c4

0800e3e0 <_realloc_r>:
 800e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	4614      	mov	r4, r2
 800e3e8:	460e      	mov	r6, r1
 800e3ea:	b921      	cbnz	r1, 800e3f6 <_realloc_r+0x16>
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	f7ff bdd7 	b.w	800dfa4 <_malloc_r>
 800e3f6:	b92a      	cbnz	r2, 800e404 <_realloc_r+0x24>
 800e3f8:	4625      	mov	r5, r4
 800e3fa:	f000 f867 	bl	800e4cc <_free_r>
 800e3fe:	4628      	mov	r0, r5
 800e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e404:	f000 f8ae 	bl	800e564 <_malloc_usable_size_r>
 800e408:	4284      	cmp	r4, r0
 800e40a:	4607      	mov	r7, r0
 800e40c:	d802      	bhi.n	800e414 <_realloc_r+0x34>
 800e40e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e412:	d812      	bhi.n	800e43a <_realloc_r+0x5a>
 800e414:	4621      	mov	r1, r4
 800e416:	4640      	mov	r0, r8
 800e418:	f7ff fdc4 	bl	800dfa4 <_malloc_r>
 800e41c:	4605      	mov	r5, r0
 800e41e:	2800      	cmp	r0, #0
 800e420:	d0ed      	beq.n	800e3fe <_realloc_r+0x1e>
 800e422:	42bc      	cmp	r4, r7
 800e424:	4622      	mov	r2, r4
 800e426:	4631      	mov	r1, r6
 800e428:	bf28      	it	cs
 800e42a:	463a      	movcs	r2, r7
 800e42c:	f000 f840 	bl	800e4b0 <memcpy>
 800e430:	4631      	mov	r1, r6
 800e432:	4640      	mov	r0, r8
 800e434:	f000 f84a 	bl	800e4cc <_free_r>
 800e438:	e7e1      	b.n	800e3fe <_realloc_r+0x1e>
 800e43a:	4635      	mov	r5, r6
 800e43c:	e7df      	b.n	800e3fe <_realloc_r+0x1e>

0800e43e <memmove>:
 800e43e:	4288      	cmp	r0, r1
 800e440:	b510      	push	{r4, lr}
 800e442:	eb01 0402 	add.w	r4, r1, r2
 800e446:	d902      	bls.n	800e44e <memmove+0x10>
 800e448:	4284      	cmp	r4, r0
 800e44a:	4623      	mov	r3, r4
 800e44c:	d807      	bhi.n	800e45e <memmove+0x20>
 800e44e:	1e43      	subs	r3, r0, #1
 800e450:	42a1      	cmp	r1, r4
 800e452:	d008      	beq.n	800e466 <memmove+0x28>
 800e454:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e458:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e45c:	e7f8      	b.n	800e450 <memmove+0x12>
 800e45e:	4402      	add	r2, r0
 800e460:	4601      	mov	r1, r0
 800e462:	428a      	cmp	r2, r1
 800e464:	d100      	bne.n	800e468 <memmove+0x2a>
 800e466:	bd10      	pop	{r4, pc}
 800e468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e46c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e470:	e7f7      	b.n	800e462 <memmove+0x24>
	...

0800e474 <_sbrk_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	2300      	movs	r3, #0
 800e478:	4d05      	ldr	r5, [pc, #20]	; (800e490 <_sbrk_r+0x1c>)
 800e47a:	4604      	mov	r4, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	f7f5 fec2 	bl	8004208 <_sbrk>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_sbrk_r+0x1a>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_sbrk_r+0x1a>
 800e48c:	6023      	str	r3, [r4, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	200008d0 	.word	0x200008d0

0800e494 <memchr>:
 800e494:	b2c9      	uxtb	r1, r1
 800e496:	4402      	add	r2, r0
 800e498:	b510      	push	{r4, lr}
 800e49a:	4290      	cmp	r0, r2
 800e49c:	4603      	mov	r3, r0
 800e49e:	d101      	bne.n	800e4a4 <memchr+0x10>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	e003      	b.n	800e4ac <memchr+0x18>
 800e4a4:	781c      	ldrb	r4, [r3, #0]
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	428c      	cmp	r4, r1
 800e4aa:	d1f6      	bne.n	800e49a <memchr+0x6>
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	bd10      	pop	{r4, pc}

0800e4b0 <memcpy>:
 800e4b0:	440a      	add	r2, r1
 800e4b2:	1e43      	subs	r3, r0, #1
 800e4b4:	4291      	cmp	r1, r2
 800e4b6:	d100      	bne.n	800e4ba <memcpy+0xa>
 800e4b8:	4770      	bx	lr
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4c0:	4291      	cmp	r1, r2
 800e4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4c6:	d1f9      	bne.n	800e4bc <memcpy+0xc>
 800e4c8:	bd10      	pop	{r4, pc}
	...

0800e4cc <_free_r>:
 800e4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ce:	2900      	cmp	r1, #0
 800e4d0:	d043      	beq.n	800e55a <_free_r+0x8e>
 800e4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d6:	1f0c      	subs	r4, r1, #4
 800e4d8:	9001      	str	r0, [sp, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	bfb8      	it	lt
 800e4de:	18e4      	addlt	r4, r4, r3
 800e4e0:	f7ff ff72 	bl	800e3c8 <__malloc_lock>
 800e4e4:	4a1e      	ldr	r2, [pc, #120]	; (800e560 <_free_r+0x94>)
 800e4e6:	9801      	ldr	r0, [sp, #4]
 800e4e8:	6813      	ldr	r3, [r2, #0]
 800e4ea:	b933      	cbnz	r3, 800e4fa <_free_r+0x2e>
 800e4ec:	6063      	str	r3, [r4, #4]
 800e4ee:	6014      	str	r4, [r2, #0]
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4f6:	f7ff bf6d 	b.w	800e3d4 <__malloc_unlock>
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	d908      	bls.n	800e510 <_free_r+0x44>
 800e4fe:	6825      	ldr	r5, [r4, #0]
 800e500:	1961      	adds	r1, r4, r5
 800e502:	428b      	cmp	r3, r1
 800e504:	bf01      	itttt	eq
 800e506:	6819      	ldreq	r1, [r3, #0]
 800e508:	685b      	ldreq	r3, [r3, #4]
 800e50a:	1949      	addeq	r1, r1, r5
 800e50c:	6021      	streq	r1, [r4, #0]
 800e50e:	e7ed      	b.n	800e4ec <_free_r+0x20>
 800e510:	461a      	mov	r2, r3
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	b10b      	cbz	r3, 800e51a <_free_r+0x4e>
 800e516:	42a3      	cmp	r3, r4
 800e518:	d9fa      	bls.n	800e510 <_free_r+0x44>
 800e51a:	6811      	ldr	r1, [r2, #0]
 800e51c:	1855      	adds	r5, r2, r1
 800e51e:	42a5      	cmp	r5, r4
 800e520:	d10b      	bne.n	800e53a <_free_r+0x6e>
 800e522:	6824      	ldr	r4, [r4, #0]
 800e524:	4421      	add	r1, r4
 800e526:	1854      	adds	r4, r2, r1
 800e528:	6011      	str	r1, [r2, #0]
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	d1e0      	bne.n	800e4f0 <_free_r+0x24>
 800e52e:	681c      	ldr	r4, [r3, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	440c      	add	r4, r1
 800e534:	6053      	str	r3, [r2, #4]
 800e536:	6014      	str	r4, [r2, #0]
 800e538:	e7da      	b.n	800e4f0 <_free_r+0x24>
 800e53a:	d902      	bls.n	800e542 <_free_r+0x76>
 800e53c:	230c      	movs	r3, #12
 800e53e:	6003      	str	r3, [r0, #0]
 800e540:	e7d6      	b.n	800e4f0 <_free_r+0x24>
 800e542:	6825      	ldr	r5, [r4, #0]
 800e544:	1961      	adds	r1, r4, r5
 800e546:	428b      	cmp	r3, r1
 800e548:	bf02      	ittt	eq
 800e54a:	6819      	ldreq	r1, [r3, #0]
 800e54c:	685b      	ldreq	r3, [r3, #4]
 800e54e:	1949      	addeq	r1, r1, r5
 800e550:	6063      	str	r3, [r4, #4]
 800e552:	bf08      	it	eq
 800e554:	6021      	streq	r1, [r4, #0]
 800e556:	6054      	str	r4, [r2, #4]
 800e558:	e7ca      	b.n	800e4f0 <_free_r+0x24>
 800e55a:	b003      	add	sp, #12
 800e55c:	bd30      	pop	{r4, r5, pc}
 800e55e:	bf00      	nop
 800e560:	200008c8 	.word	0x200008c8

0800e564 <_malloc_usable_size_r>:
 800e564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e568:	1f18      	subs	r0, r3, #4
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bfbc      	itt	lt
 800e56e:	580b      	ldrlt	r3, [r1, r0]
 800e570:	18c0      	addlt	r0, r0, r3
 800e572:	4770      	bx	lr

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
